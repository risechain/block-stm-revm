<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="1999"><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="1.0005%" y="181" width="0.0500%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="1"/><text x="1.2505%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.20%)</title><rect x="1.0505%" y="181" width="0.2001%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="4"/><text x="1.3005%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="1.2506%" y="181" width="0.0500%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="1"/><text x="1.5006%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (2 samples, 0.10%)</title><rect x="1.3007%" y="181" width="0.1001%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="2"/><text x="1.5507%" y="191.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (1 samples, 0.05%)</title><rect x="1.4007%" y="181" width="0.0500%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="1"/><text x="1.6507%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;)&gt; (1 samples, 0.05%)</title><rect x="1.4507%" y="181" width="0.0500%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="1"/><text x="1.7007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="1.5008%" y="165" width="0.0500%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="1"/><text x="1.7508%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.35%)</title><rect x="1.5008%" y="181" width="0.3502%" height="15" fill="rgb(228,23,34)" fg:x="30" fg:w="7"/><text x="1.7508%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.30%)</title><rect x="1.5508%" y="165" width="0.3002%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="6"/><text x="1.8008%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.25%)</title><rect x="1.6008%" y="149" width="0.2501%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="5"/><text x="1.8508%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="1.8009%" y="133" width="0.0500%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="1"/><text x="2.0509%" y="143.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="1.9010%" y="165" width="0.0500%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="1"/><text x="2.1510%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.10%)</title><rect x="1.9510%" y="165" width="0.1001%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="2"/><text x="2.2010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="1.9510%" y="149" width="0.1001%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="2"/><text x="2.2010%" y="159.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.15%)</title><rect x="2.0510%" y="165" width="0.1501%" height="15" fill="rgb(217,207,13)" fg:x="41" fg:w="3"/><text x="2.3010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.15%)</title><rect x="2.0510%" y="149" width="0.1501%" height="15" fill="rgb(231,73,38)" fg:x="41" fg:w="3"/><text x="2.3010%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.10%)</title><rect x="2.2011%" y="165" width="0.1001%" height="15" fill="rgb(225,20,46)" fg:x="44" fg:w="2"/><text x="2.4511%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;,(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (10 samples, 0.50%)</title><rect x="1.8509%" y="181" width="0.5003%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="10"/><text x="2.1009%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="2.3012%" y="165" width="0.0500%" height="15" fill="rgb(221,200,47)" fg:x="46" fg:w="1"/><text x="2.5512%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="2.3512%" y="165" width="0.0500%" height="15" fill="rgb(226,26,5)" fg:x="47" fg:w="1"/><text x="2.6012%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="2.3512%" y="149" width="0.0500%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="1"/><text x="2.6012%" y="159.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (5 samples, 0.25%)</title><rect x="2.3512%" y="181" width="0.2501%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="5"/><text x="2.6012%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.20%)</title><rect x="2.4012%" y="165" width="0.2001%" height="15" fill="rgb(221,5,38)" fg:x="48" fg:w="4"/><text x="2.6512%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::mainnet::execution::call_return&lt;(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="2.6013%" y="165" width="0.0500%" height="15" fill="rgb(247,18,42)" fg:x="52" fg:w="1"/><text x="2.8513%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.25%)</title><rect x="2.6013%" y="181" width="0.2501%" height="15" fill="rgb(241,131,45)" fg:x="52" fg:w="5"/><text x="2.8513%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.20%)</title><rect x="2.6513%" y="165" width="0.2001%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="4"/><text x="2.9013%" y="175.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="2.8514%" y="165" width="0.0500%" height="15" fill="rgb(225,111,53)" fg:x="57" fg:w="1"/><text x="3.1014%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.15%)</title><rect x="2.8514%" y="181" width="0.1501%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="3"/><text x="3.1014%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="2.9015%" y="165" width="0.1001%" height="15" fill="rgb(214,148,48)" fg:x="58" fg:w="2"/><text x="3.1515%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.10%)</title><rect x="3.0015%" y="181" width="0.1001%" height="15" fill="rgb(232,36,49)" fg:x="60" fg:w="2"/><text x="3.2515%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="3.1016%" y="133" width="0.0500%" height="15" fill="rgb(209,103,24)" fg:x="62" fg:w="1"/><text x="3.3516%" y="143.50"></text></g><g><title>block-stm-revm`revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (2 samples, 0.10%)</title><rect x="3.1016%" y="149" width="0.1001%" height="15" fill="rgb(229,88,8)" fg:x="62" fg:w="2"/><text x="3.3516%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="3.1516%" y="133" width="0.0500%" height="15" fill="rgb(213,181,19)" fg:x="63" fg:w="1"/><text x="3.4016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="3.1516%" y="117" width="0.0500%" height="15" fill="rgb(254,191,54)" fg:x="63" fg:w="1"/><text x="3.4016%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="3.1516%" y="101" width="0.0500%" height="15" fill="rgb(241,83,37)" fg:x="63" fg:w="1"/><text x="3.4016%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="3.1516%" y="85" width="0.0500%" height="15" fill="rgb(233,36,39)" fg:x="63" fg:w="1"/><text x="3.4016%" y="95.50"></text></g><g><title>block-stm-revm`revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (3 samples, 0.15%)</title><rect x="3.1016%" y="165" width="0.1501%" height="15" fill="rgb(226,3,54)" fg:x="62" fg:w="3"/><text x="3.3516%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="3.2016%" y="149" width="0.0500%" height="15" fill="rgb(245,192,40)" fg:x="64" fg:w="1"/><text x="3.4516%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.10%)</title><rect x="3.2516%" y="149" width="0.1001%" height="15" fill="rgb(238,167,29)" fg:x="65" fg:w="2"/><text x="3.5016%" y="159.50"></text></g><g><title>block-stm-revm`revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (8 samples, 0.40%)</title><rect x="3.2516%" y="165" width="0.4002%" height="15" fill="rgb(232,182,51)" fg:x="65" fg:w="8"/><text x="3.5016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.30%)</title><rect x="3.3517%" y="149" width="0.3002%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="6"/><text x="3.6017%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.10%)</title><rect x="3.6518%" y="165" width="0.1001%" height="15" fill="rgb(208,69,12)" fg:x="73" fg:w="2"/><text x="3.9018%" y="175.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (22 samples, 1.10%)</title><rect x="3.1016%" y="181" width="1.1006%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="22"/><text x="3.3516%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.45%)</title><rect x="3.7519%" y="165" width="0.4502%" height="15" fill="rgb(213,116,39)" fg:x="75" fg:w="9"/><text x="4.0019%" y="175.50"></text></g><g><title>block-stm-revm`__rdl_alloc (1 samples, 0.05%)</title><rect x="4.2521%" y="165" width="0.0500%" height="15" fill="rgb(222,207,29)" fg:x="85" fg:w="1"/><text x="4.5021%" y="175.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (3 samples, 0.15%)</title><rect x="4.3022%" y="165" width="0.1501%" height="15" fill="rgb(206,96,30)" fg:x="86" fg:w="3"/><text x="4.5522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="4.5023%" y="117" width="0.0500%" height="15" fill="rgb(218,138,4)" fg:x="90" fg:w="1"/><text x="4.7523%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="4.5523%" y="101" width="0.0500%" height="15" fill="rgb(250,191,14)" fg:x="91" fg:w="1"/><text x="4.8023%" y="111.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.15%)</title><rect x="4.5023%" y="149" width="0.1501%" height="15" fill="rgb(239,60,40)" fg:x="90" fg:w="3"/><text x="4.7523%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.15%)</title><rect x="4.5023%" y="133" width="0.1501%" height="15" fill="rgb(206,27,48)" fg:x="90" fg:w="3"/><text x="4.7523%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="4.5523%" y="117" width="0.1001%" height="15" fill="rgb(225,35,8)" fg:x="91" fg:w="2"/><text x="4.8023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="4.6023%" y="101" width="0.0500%" height="15" fill="rgb(250,213,24)" fg:x="92" fg:w="1"/><text x="4.8523%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="4.6023%" y="85" width="0.0500%" height="15" fill="rgb(247,123,22)" fg:x="92" fg:w="1"/><text x="4.8523%" y="95.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="5.0025%" y="117" width="0.0500%" height="15" fill="rgb(231,138,38)" fg:x="100" fg:w="1"/><text x="5.2525%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (5 samples, 0.25%)</title><rect x="5.0525%" y="117" width="0.2501%" height="15" fill="rgb(231,145,46)" fg:x="101" fg:w="5"/><text x="5.3025%" y="127.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.60%)</title><rect x="5.4527%" y="101" width="0.6003%" height="15" fill="rgb(251,118,11)" fg:x="109" fg:w="12"/><text x="5.7027%" y="111.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 1.00%)</title><rect x="5.3027%" y="117" width="1.0005%" height="15" fill="rgb(217,147,25)" fg:x="106" fg:w="20"/><text x="5.5527%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (5 samples, 0.25%)</title><rect x="6.0530%" y="101" width="0.2501%" height="15" fill="rgb(247,81,37)" fg:x="121" fg:w="5"/><text x="6.3030%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="6.3032%" y="101" width="0.0500%" height="15" fill="rgb(209,12,38)" fg:x="126" fg:w="1"/><text x="6.5532%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.15%)</title><rect x="6.3032%" y="117" width="0.1501%" height="15" fill="rgb(227,1,9)" fg:x="126" fg:w="3"/><text x="6.5532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.10%)</title><rect x="6.3532%" y="101" width="0.1001%" height="15" fill="rgb(248,47,43)" fg:x="127" fg:w="2"/><text x="6.6032%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="6.4032%" y="85" width="0.0500%" height="15" fill="rgb(221,10,30)" fg:x="128" fg:w="1"/><text x="6.6532%" y="95.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38 samples, 1.90%)</title><rect x="4.6523%" y="133" width="1.9010%" height="15" fill="rgb(210,229,1)" fg:x="93" fg:w="38"/><text x="4.9023%" y="143.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.10%)</title><rect x="6.4532%" y="117" width="0.1001%" height="15" fill="rgb(222,148,37)" fg:x="129" fg:w="2"/><text x="6.7032%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="6.5533%" y="133" width="0.0500%" height="15" fill="rgb(234,67,33)" fg:x="131" fg:w="1"/><text x="6.8033%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (50 samples, 2.50%)</title><rect x="4.6523%" y="149" width="2.5013%" height="15" fill="rgb(247,98,35)" fg:x="93" fg:w="50"/><text x="4.9023%" y="159.50">bl..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.55%)</title><rect x="6.6033%" y="133" width="0.5503%" height="15" fill="rgb(247,138,52)" fg:x="132" fg:w="11"/><text x="6.8533%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="7.5038%" y="133" width="0.0500%" height="15" fill="rgb(213,79,30)" fg:x="150" fg:w="1"/><text x="7.7538%" y="143.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::post_execution::output (11 samples, 0.55%)</title><rect x="7.1536%" y="149" width="0.5503%" height="15" fill="rgb(246,177,23)" fg:x="143" fg:w="11"/><text x="7.4036%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.15%)</title><rect x="7.5538%" y="133" width="0.1501%" height="15" fill="rgb(230,62,27)" fg:x="151" fg:w="3"/><text x="7.8038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.15%)</title><rect x="7.5538%" y="117" width="0.1501%" height="15" fill="rgb(216,154,8)" fg:x="151" fg:w="3"/><text x="7.8038%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="7.6538%" y="101" width="0.0500%" height="15" fill="rgb(244,35,45)" fg:x="153" fg:w="1"/><text x="7.9038%" y="111.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="7.7039%" y="133" width="0.0500%" height="15" fill="rgb(251,115,12)" fg:x="154" fg:w="1"/><text x="7.9539%" y="143.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.10%)</title><rect x="7.7539%" y="133" width="0.1001%" height="15" fill="rgb(240,54,50)" fg:x="155" fg:w="2"/><text x="8.0039%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="7.7539%" y="117" width="0.1001%" height="15" fill="rgb(233,84,52)" fg:x="155" fg:w="2"/><text x="8.0039%" y="127.50"></text></g><g><title>block-stm-revm`revm_primitives::db::_::_&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (1 samples, 0.05%)</title><rect x="7.8539%" y="133" width="0.0500%" height="15" fill="rgb(207,117,47)" fg:x="157" fg:w="1"/><text x="8.1039%" y="143.50"></text></g><g><title>block-stm-revm`bitvec::domain::Domain&lt;M,T,O&gt;::partial_tail (1 samples, 0.05%)</title><rect x="8.0040%" y="117" width="0.0500%" height="15" fill="rgb(249,43,39)" fg:x="160" fg:w="1"/><text x="8.2540%" y="127.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::initial_account_load (9 samples, 0.45%)</title><rect x="7.7039%" y="149" width="0.4502%" height="15" fill="rgb(209,38,44)" fg:x="154" fg:w="9"/><text x="7.9539%" y="159.50"></text></g><g><title>block-stm-revm`revm_primitives::state::Account::new_not_existing (5 samples, 0.25%)</title><rect x="7.9040%" y="133" width="0.2501%" height="15" fill="rgb(236,212,23)" fg:x="158" fg:w="5"/><text x="8.1540%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.10%)</title><rect x="8.0540%" y="117" width="0.1001%" height="15" fill="rgb(242,79,21)" fg:x="161" fg:w="2"/><text x="8.3040%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="8.1541%" y="149" width="0.0500%" height="15" fill="rgb(211,96,35)" fg:x="163" fg:w="1"/><text x="8.4041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.10%)</title><rect x="8.2041%" y="149" width="0.1001%" height="15" fill="rgb(253,215,40)" fg:x="164" fg:w="2"/><text x="8.4541%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.15%)</title><rect x="8.3042%" y="149" width="0.1501%" height="15" fill="rgb(211,81,21)" fg:x="166" fg:w="3"/><text x="8.5542%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="8.4542%" y="149" width="0.0500%" height="15" fill="rgb(208,190,38)" fg:x="169" fg:w="1"/><text x="8.7042%" y="159.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (82 samples, 4.10%)</title><rect x="4.4522%" y="165" width="4.1021%" height="15" fill="rgb(235,213,38)" fg:x="89" fg:w="82"/><text x="4.7022%" y="175.50">bloc..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="8.5043%" y="149" width="0.0500%" height="15" fill="rgb(237,122,38)" fg:x="170" fg:w="1"/><text x="8.7543%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.45%)</title><rect x="8.9045%" y="149" width="0.4502%" height="15" fill="rgb(244,218,35)" fg:x="178" fg:w="9"/><text x="9.1545%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 1.20%)</title><rect x="8.5543%" y="165" width="1.2006%" height="15" fill="rgb(240,68,47)" fg:x="171" fg:w="24"/><text x="8.8043%" y="175.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (8 samples, 0.40%)</title><rect x="9.3547%" y="149" width="0.4002%" height="15" fill="rgb(210,16,53)" fg:x="187" fg:w="8"/><text x="9.6047%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.20%)</title><rect x="9.7549%" y="165" width="0.2001%" height="15" fill="rgb(235,124,12)" fg:x="195" fg:w="4"/><text x="10.0049%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.20%)</title><rect x="9.7549%" y="149" width="0.2001%" height="15" fill="rgb(224,169,11)" fg:x="195" fg:w="4"/><text x="10.0049%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.15%)</title><rect x="9.8049%" y="133" width="0.1501%" height="15" fill="rgb(250,166,2)" fg:x="196" fg:w="3"/><text x="10.0549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.10%)</title><rect x="9.8549%" y="117" width="0.1001%" height="15" fill="rgb(242,216,29)" fg:x="197" fg:w="2"/><text x="10.1049%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="9.9050%" y="101" width="0.0500%" height="15" fill="rgb(230,116,27)" fg:x="198" fg:w="1"/><text x="10.1550%" y="111.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.05%)</title><rect x="10.0550%" y="133" width="0.0500%" height="15" fill="rgb(228,99,48)" fg:x="201" fg:w="1"/><text x="10.3050%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="10.1551%" y="117" width="0.1001%" height="15" fill="rgb(253,11,6)" fg:x="203" fg:w="2"/><text x="10.4051%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="10.3052%" y="85" width="0.0500%" height="15" fill="rgb(247,143,39)" fg:x="206" fg:w="1"/><text x="10.5552%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="10.3052%" y="69" width="0.0500%" height="15" fill="rgb(236,97,10)" fg:x="206" fg:w="1"/><text x="10.5552%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="10.3052%" y="53" width="0.0500%" height="15" fill="rgb(233,208,19)" fg:x="206" fg:w="1"/><text x="10.5552%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="10.3052%" y="37" width="0.0500%" height="15" fill="rgb(216,164,2)" fg:x="206" fg:w="1"/><text x="10.5552%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.10%)</title><rect x="10.3552%" y="85" width="0.1001%" height="15" fill="rgb(220,129,5)" fg:x="207" fg:w="2"/><text x="10.6052%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.10%)</title><rect x="10.4552%" y="53" width="0.1001%" height="15" fill="rgb(242,17,10)" fg:x="209" fg:w="2"/><text x="10.7052%" y="63.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (9 samples, 0.45%)</title><rect x="10.3052%" y="101" width="0.4502%" height="15" fill="rgb(242,107,0)" fg:x="206" fg:w="9"/><text x="10.5552%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.30%)</title><rect x="10.4552%" y="85" width="0.3002%" height="15" fill="rgb(251,28,31)" fg:x="209" fg:w="6"/><text x="10.7052%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.30%)</title><rect x="10.4552%" y="69" width="0.3002%" height="15" fill="rgb(233,223,10)" fg:x="209" fg:w="6"/><text x="10.7052%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.20%)</title><rect x="10.5553%" y="53" width="0.2001%" height="15" fill="rgb(215,21,27)" fg:x="211" fg:w="4"/><text x="10.8053%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="10.7054%" y="37" width="0.0500%" height="15" fill="rgb(232,23,21)" fg:x="214" fg:w="1"/><text x="10.9554%" y="47.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.55%)</title><rect x="10.2551%" y="117" width="0.5503%" height="15" fill="rgb(244,5,23)" fg:x="205" fg:w="11"/><text x="10.5051%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="10.7554%" y="101" width="0.0500%" height="15" fill="rgb(226,81,46)" fg:x="215" fg:w="1"/><text x="11.0054%" y="111.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="10.8054%" y="117" width="0.0500%" height="15" fill="rgb(247,70,30)" fg:x="216" fg:w="1"/><text x="11.0554%" y="127.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.05%)</title><rect x="10.8554%" y="117" width="0.0500%" height="15" fill="rgb(212,68,19)" fg:x="217" fg:w="1"/><text x="11.1054%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (2 samples, 0.10%)</title><rect x="10.9055%" y="101" width="0.1001%" height="15" fill="rgb(240,187,13)" fg:x="218" fg:w="2"/><text x="11.1555%" y="111.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (20 samples, 1.00%)</title><rect x="10.0550%" y="149" width="1.0005%" height="15" fill="rgb(223,113,26)" fg:x="201" fg:w="20"/><text x="10.3050%" y="159.50"></text></g><g><title>block-stm-revm`revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (19 samples, 0.95%)</title><rect x="10.1051%" y="133" width="0.9505%" height="15" fill="rgb(206,192,2)" fg:x="202" fg:w="19"/><text x="10.3551%" y="143.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (3 samples, 0.15%)</title><rect x="10.9055%" y="117" width="0.1501%" height="15" fill="rgb(241,108,4)" fg:x="218" fg:w="3"/><text x="11.1555%" y="127.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.05%)</title><rect x="11.0055%" y="101" width="0.0500%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="1"/><text x="11.2555%" y="111.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="11.0055%" y="85" width="0.0500%" height="15" fill="rgb(224,114,35)" fg:x="220" fg:w="1"/><text x="11.2555%" y="95.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (23 samples, 1.15%)</title><rect x="9.9550%" y="165" width="1.1506%" height="15" fill="rgb(245,159,27)" fg:x="199" fg:w="23"/><text x="10.2050%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="11.0555%" y="149" width="0.0500%" height="15" fill="rgb(245,172,44)" fg:x="221" fg:w="1"/><text x="11.3055%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="11.1556%" y="117" width="0.0500%" height="15" fill="rgb(236,23,11)" fg:x="223" fg:w="1"/><text x="11.4056%" y="127.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::post_execution::reimburse_caller (3 samples, 0.15%)</title><rect x="11.1056%" y="165" width="0.1501%" height="15" fill="rgb(205,117,38)" fg:x="222" fg:w="3"/><text x="11.3556%" y="175.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (3 samples, 0.15%)</title><rect x="11.1056%" y="149" width="0.1501%" height="15" fill="rgb(237,72,25)" fg:x="222" fg:w="3"/><text x="11.3556%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.15%)</title><rect x="11.1056%" y="133" width="0.1501%" height="15" fill="rgb(244,70,9)" fg:x="222" fg:w="3"/><text x="11.3556%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="11.2056%" y="117" width="0.0500%" height="15" fill="rgb(217,125,39)" fg:x="224" fg:w="1"/><text x="11.4556%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="11.3557%" y="133" width="0.0500%" height="15" fill="rgb(235,36,10)" fg:x="227" fg:w="1"/><text x="11.6057%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="11.4057%" y="117" width="0.1001%" height="15" fill="rgb(251,123,47)" fg:x="228" fg:w="2"/><text x="11.6557%" y="127.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::pre_execution::deduct_caller (6 samples, 0.30%)</title><rect x="11.2556%" y="165" width="0.3002%" height="15" fill="rgb(221,13,13)" fg:x="225" fg:w="6"/><text x="11.5056%" y="175.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (4 samples, 0.20%)</title><rect x="11.3557%" y="149" width="0.2001%" height="15" fill="rgb(238,131,9)" fg:x="227" fg:w="4"/><text x="11.6057%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.15%)</title><rect x="11.4057%" y="133" width="0.1501%" height="15" fill="rgb(211,50,8)" fg:x="228" fg:w="3"/><text x="11.6557%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="11.5058%" y="117" width="0.0500%" height="15" fill="rgb(245,182,24)" fg:x="230" fg:w="1"/><text x="11.7558%" y="127.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::initial_account_load (1 samples, 0.05%)</title><rect x="11.5558%" y="165" width="0.0500%" height="15" fill="rgb(242,14,37)" fg:x="231" fg:w="1"/><text x="11.8058%" y="175.50"></text></g><g><title>block-stm-revm`revm_interpreter::inner_models::CallInputs::new_boxed (4 samples, 0.20%)</title><rect x="11.6058%" y="165" width="0.2001%" height="15" fill="rgb(246,228,12)" fg:x="232" fg:w="4"/><text x="11.8558%" y="175.50"></text></g><g><title>block-stm-revm`ruint::mul::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.10%)</title><rect x="11.8059%" y="165" width="0.1001%" height="15" fill="rgb(213,55,15)" fg:x="236" fg:w="2"/><text x="12.0559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="11.9060%" y="165" width="0.0500%" height="15" fill="rgb(209,9,3)" fg:x="238" fg:w="1"/><text x="12.1560%" y="175.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (156 samples, 7.80%)</title><rect x="4.2021%" y="181" width="7.8039%" height="15" fill="rgb(230,59,30)" fg:x="84" fg:w="156"/><text x="4.4521%" y="191.50">block-stm-r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="11.9560%" y="165" width="0.0500%" height="15" fill="rgb(209,121,21)" fg:x="239" fg:w="1"/><text x="12.2060%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="12.0060%" y="181" width="0.0500%" height="15" fill="rgb(220,109,13)" fg:x="240" fg:w="1"/><text x="12.2560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="12.2061%" y="101" width="0.0500%" height="15" fill="rgb(232,18,1)" fg:x="244" fg:w="1"/><text x="12.4561%" y="111.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.20%)</title><rect x="12.1561%" y="149" width="0.2001%" height="15" fill="rgb(215,41,42)" fg:x="243" fg:w="4"/><text x="12.4061%" y="159.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (4 samples, 0.20%)</title><rect x="12.1561%" y="133" width="0.2001%" height="15" fill="rgb(224,123,36)" fg:x="243" fg:w="4"/><text x="12.4061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.15%)</title><rect x="12.2061%" y="117" width="0.1501%" height="15" fill="rgb(240,125,3)" fg:x="244" fg:w="3"/><text x="12.4561%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="12.2561%" y="101" width="0.1001%" height="15" fill="rgb(205,98,50)" fg:x="245" fg:w="2"/><text x="12.5061%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.10%)</title><rect x="12.2561%" y="85" width="0.1001%" height="15" fill="rgb(205,185,37)" fg:x="245" fg:w="2"/><text x="12.5061%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="12.3062%" y="69" width="0.0500%" height="15" fill="rgb(238,207,15)" fg:x="246" fg:w="1"/><text x="12.5562%" y="79.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="12.3562%" y="149" width="0.0500%" height="15" fill="rgb(213,199,42)" fg:x="247" fg:w="1"/><text x="12.6062%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.10%)</title><rect x="12.4062%" y="101" width="0.1001%" height="15" fill="rgb(235,201,11)" fg:x="248" fg:w="2"/><text x="12.6562%" y="111.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.20%)</title><rect x="12.4062%" y="149" width="0.2001%" height="15" fill="rgb(207,46,11)" fg:x="248" fg:w="4"/><text x="12.6562%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.20%)</title><rect x="12.4062%" y="133" width="0.2001%" height="15" fill="rgb(241,35,35)" fg:x="248" fg:w="4"/><text x="12.6562%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.20%)</title><rect x="12.4062%" y="117" width="0.2001%" height="15" fill="rgb(243,32,47)" fg:x="248" fg:w="4"/><text x="12.6562%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="12.5063%" y="101" width="0.1001%" height="15" fill="rgb(247,202,23)" fg:x="250" fg:w="2"/><text x="12.7563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="12.5563%" y="85" width="0.0500%" height="15" fill="rgb(219,102,11)" fg:x="251" fg:w="1"/><text x="12.8063%" y="95.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="12.8064%" y="133" width="0.1001%" height="15" fill="rgb(243,110,44)" fg:x="256" fg:w="2"/><text x="13.0564%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (2 samples, 0.10%)</title><rect x="12.9065%" y="133" width="0.1001%" height="15" fill="rgb(222,74,54)" fg:x="258" fg:w="2"/><text x="13.1565%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="13.1566%" y="117" width="0.0500%" height="15" fill="rgb(216,99,12)" fg:x="263" fg:w="1"/><text x="13.4066%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="13.2066%" y="117" width="0.0500%" height="15" fill="rgb(226,22,26)" fg:x="264" fg:w="1"/><text x="13.4566%" y="127.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.30%)</title><rect x="13.0065%" y="133" width="0.3002%" height="15" fill="rgb(217,163,10)" fg:x="260" fg:w="6"/><text x="13.2565%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.05%)</title><rect x="13.2566%" y="117" width="0.0500%" height="15" fill="rgb(213,25,53)" fg:x="265" fg:w="1"/><text x="13.5066%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="13.2566%" y="101" width="0.0500%" height="15" fill="rgb(252,105,26)" fg:x="265" fg:w="1"/><text x="13.5066%" y="111.50"></text></g><g><title>block-stm-revm`revm_primitives::db::_::_&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (16 samples, 0.80%)</title><rect x="12.6063%" y="149" width="0.8004%" height="15" fill="rgb(220,39,43)" fg:x="252" fg:w="16"/><text x="12.8563%" y="159.50"></text></g><g><title>block-stm-revm`revm::db::in_memory_db::DbAccount::new_not_existing (2 samples, 0.10%)</title><rect x="13.3067%" y="133" width="0.1001%" height="15" fill="rgb(229,68,48)" fg:x="266" fg:w="2"/><text x="13.5567%" y="143.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.05%)</title><rect x="13.3567%" y="117" width="0.0500%" height="15" fill="rgb(252,8,32)" fg:x="267" fg:w="1"/><text x="13.6067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="13.3567%" y="101" width="0.0500%" height="15" fill="rgb(223,20,43)" fg:x="267" fg:w="1"/><text x="13.6067%" y="111.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (3 samples, 0.15%)</title><rect x="13.7569%" y="133" width="0.1501%" height="15" fill="rgb(229,81,49)" fg:x="275" fg:w="3"/><text x="14.0069%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.10%)</title><rect x="13.8069%" y="117" width="0.1001%" height="15" fill="rgb(236,28,36)" fg:x="276" fg:w="2"/><text x="14.0569%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.10%)</title><rect x="13.8069%" y="101" width="0.1001%" height="15" fill="rgb(249,185,26)" fg:x="276" fg:w="2"/><text x="14.0569%" y="111.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (38 samples, 1.90%)</title><rect x="12.0560%" y="165" width="1.9010%" height="15" fill="rgb(249,174,33)" fg:x="241" fg:w="38"/><text x="12.3060%" y="175.50">b..</text></g><g><title>block-stm-revm`revm_primitives::state::Account::new_not_existing (11 samples, 0.55%)</title><rect x="13.4067%" y="149" width="0.5503%" height="15" fill="rgb(233,201,37)" fg:x="268" fg:w="11"/><text x="13.6567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="13.9070%" y="133" width="0.0500%" height="15" fill="rgb(221,78,26)" fg:x="278" fg:w="1"/><text x="14.1570%" y="143.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::validation::validate_tx_against_state (39 samples, 1.95%)</title><rect x="12.0560%" y="181" width="1.9510%" height="15" fill="rgb(250,127,30)" fg:x="241" fg:w="39"/><text x="12.3060%" y="191.50">b..</text></g><g><title>block-stm-revm`revm_primitives::db::_::_&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (1 samples, 0.05%)</title><rect x="13.9570%" y="165" width="0.0500%" height="15" fill="rgb(230,49,44)" fg:x="279" fg:w="1"/><text x="14.2070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.20%)</title><rect x="14.0070%" y="181" width="0.2001%" height="15" fill="rgb(229,67,23)" fg:x="280" fg:w="4"/><text x="14.2570%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.10%)</title><rect x="14.2071%" y="181" width="0.1001%" height="15" fill="rgb(249,83,47)" fg:x="284" fg:w="2"/><text x="14.4571%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="14.3072%" y="181" width="0.1001%" height="15" fill="rgb(215,43,3)" fg:x="286" fg:w="2"/><text x="14.5572%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="14.4072%" y="181" width="0.0500%" height="15" fill="rgb(238,154,13)" fg:x="288" fg:w="1"/><text x="14.6572%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="14.4072%" y="165" width="0.0500%" height="15" fill="rgb(219,56,2)" fg:x="288" fg:w="1"/><text x="14.6572%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="14.4072%" y="149" width="0.0500%" height="15" fill="rgb(233,0,4)" fg:x="288" fg:w="1"/><text x="14.6572%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.25%)</title><rect x="14.4572%" y="181" width="0.2501%" height="15" fill="rgb(235,30,7)" fg:x="289" fg:w="5"/><text x="14.7072%" y="191.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (299 samples, 14.96%)</title><rect x="0.1501%" y="197" width="14.9575%" height="15" fill="rgb(250,79,13)" fg:x="3" fg:w="299"/><text x="0.4001%" y="207.50">block-stm-revm`&lt;core::i..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.40%)</title><rect x="14.7074%" y="181" width="0.4002%" height="15" fill="rgb(211,146,34)" fg:x="294" fg:w="8"/><text x="14.9574%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="15.1076%" y="197" width="0.0500%" height="15" fill="rgb(228,22,38)" fg:x="302" fg:w="1"/><text x="15.3576%" y="207.50"></text></g><g><title>block-stm-revm`bytes::bytes::static_clone (1 samples, 0.05%)</title><rect x="15.1576%" y="197" width="0.0500%" height="15" fill="rgb(235,168,5)" fg:x="303" fg:w="1"/><text x="15.4076%" y="207.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (1 samples, 0.05%)</title><rect x="15.2076%" y="197" width="0.0500%" height="15" fill="rgb(221,155,16)" fg:x="304" fg:w="1"/><text x="15.4576%" y="207.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (2 samples, 0.10%)</title><rect x="15.2576%" y="197" width="0.1001%" height="15" fill="rgb(215,215,53)" fg:x="305" fg:w="2"/><text x="15.5076%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.20%)</title><rect x="15.3577%" y="197" width="0.2001%" height="15" fill="rgb(223,4,10)" fg:x="307" fg:w="4"/><text x="15.6077%" y="207.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (330 samples, 16.51%)</title><rect x="0.1501%" y="213" width="16.5083%" height="15" fill="rgb(234,103,6)" fg:x="3" fg:w="330"/><text x="0.4001%" y="223.50">block-stm-revm`&lt;alloc::ve..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 1.10%)</title><rect x="15.5578%" y="197" width="1.1006%" height="15" fill="rgb(227,97,0)" fg:x="311" fg:w="22"/><text x="15.8078%" y="207.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::cmp::PartialEq&gt;::eq (2 samples, 0.10%)</title><rect x="16.6583%" y="213" width="0.1001%" height="15" fill="rgb(234,150,53)" fg:x="333" fg:w="2"/><text x="16.9083%" y="223.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.15%)</title><rect x="16.9585%" y="197" width="0.1501%" height="15" fill="rgb(228,201,54)" fg:x="339" fg:w="3"/><text x="17.2085%" y="207.50"></text></g><g><title>block-stm-revm`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.40%)</title><rect x="16.7584%" y="213" width="0.4002%" height="15" fill="rgb(222,22,37)" fg:x="335" fg:w="8"/><text x="17.0084%" y="223.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="17.1086%" y="197" width="0.0500%" height="15" fill="rgb(237,53,32)" fg:x="342" fg:w="1"/><text x="17.3586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="18.3592%" y="133" width="0.0500%" height="15" fill="rgb(233,25,53)" fg:x="367" fg:w="1"/><text x="18.6092%" y="143.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 1.05%)</title><rect x="17.4087%" y="165" width="1.0505%" height="15" fill="rgb(210,40,34)" fg:x="348" fg:w="21"/><text x="17.6587%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="18.3592%" y="149" width="0.1001%" height="15" fill="rgb(241,220,44)" fg:x="367" fg:w="2"/><text x="18.6092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="18.4092%" y="133" width="0.0500%" height="15" fill="rgb(235,28,35)" fg:x="368" fg:w="1"/><text x="18.6592%" y="143.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 1.55%)</title><rect x="17.1586%" y="181" width="1.5508%" height="15" fill="rgb(210,56,17)" fg:x="343" fg:w="31"/><text x="17.4086%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.25%)</title><rect x="18.4592%" y="165" width="0.2501%" height="15" fill="rgb(224,130,29)" fg:x="369" fg:w="5"/><text x="18.7092%" y="175.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 1.60%)</title><rect x="17.1586%" y="197" width="1.6008%" height="15" fill="rgb(235,212,8)" fg:x="343" fg:w="32"/><text x="17.4086%" y="207.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="18.7094%" y="181" width="0.0500%" height="15" fill="rgb(223,33,50)" fg:x="374" fg:w="1"/><text x="18.9594%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="18.7594%" y="197" width="0.0500%" height="15" fill="rgb(219,149,13)" fg:x="375" fg:w="1"/><text x="19.0094%" y="207.50"></text></g><g><title>block-stm-revm`&lt;std::sys::unix::locks::pthread_mutex::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::destroy (1 samples, 0.05%)</title><rect x="18.9095%" y="165" width="0.0500%" height="15" fill="rgb(250,156,29)" fg:x="378" fg:w="1"/><text x="19.1595%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.05%)</title><rect x="18.9095%" y="149" width="0.0500%" height="15" fill="rgb(216,193,19)" fg:x="378" fg:w="1"/><text x="19.1595%" y="159.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$pthread_mutex_destroy (1 samples, 0.05%)</title><rect x="18.9595%" y="165" width="0.0500%" height="15" fill="rgb(216,135,14)" fg:x="379" fg:w="1"/><text x="19.2095%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="19.0095%" y="165" width="0.1001%" height="15" fill="rgb(241,47,5)" fg:x="380" fg:w="2"/><text x="19.2595%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="19.1096%" y="165" width="0.0500%" height="15" fill="rgb(233,42,35)" fg:x="382" fg:w="1"/><text x="19.3596%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.20%)</title><rect x="19.1596%" y="149" width="0.2001%" height="15" fill="rgb(231,13,6)" fg:x="383" fg:w="4"/><text x="19.4096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.10%)</title><rect x="19.7099%" y="133" width="0.1001%" height="15" fill="rgb(207,181,40)" fg:x="394" fg:w="2"/><text x="19.9599%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.10%)</title><rect x="19.7099%" y="117" width="0.1001%" height="15" fill="rgb(254,173,49)" fg:x="394" fg:w="2"/><text x="19.9599%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 1.25%)</title><rect x="19.1596%" y="165" width="1.2506%" height="15" fill="rgb(221,1,38)" fg:x="383" fg:w="25"/><text x="19.4096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 1.05%)</title><rect x="19.3597%" y="149" width="1.0505%" height="15" fill="rgb(206,124,46)" fg:x="387" fg:w="21"/><text x="19.6097%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (12 samples, 0.60%)</title><rect x="19.8099%" y="133" width="0.6003%" height="15" fill="rgb(249,21,11)" fg:x="396" fg:w="12"/><text x="20.0599%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.60%)</title><rect x="19.8099%" y="117" width="0.6003%" height="15" fill="rgb(222,201,40)" fg:x="396" fg:w="12"/><text x="20.0599%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="20.4102%" y="165" width="0.0500%" height="15" fill="rgb(235,61,29)" fg:x="408" fg:w="1"/><text x="20.6602%" y="175.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 1.65%)</title><rect x="18.9095%" y="181" width="1.6508%" height="15" fill="rgb(219,207,3)" fg:x="378" fg:w="33"/><text x="19.1595%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (2 samples, 0.10%)</title><rect x="20.4602%" y="165" width="0.1001%" height="15" fill="rgb(222,56,46)" fg:x="409" fg:w="2"/><text x="20.7102%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.05%)</title><rect x="20.5603%" y="181" width="0.0500%" height="15" fill="rgb(239,76,54)" fg:x="411" fg:w="1"/><text x="20.8103%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.35%)</title><rect x="20.6103%" y="181" width="0.3502%" height="15" fill="rgb(231,124,27)" fg:x="412" fg:w="7"/><text x="20.8603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="20.9605%" y="181" width="0.0500%" height="15" fill="rgb(249,195,6)" fg:x="419" fg:w="1"/><text x="21.2105%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.05%)</title><rect x="21.0105%" y="181" width="0.0500%" height="15" fill="rgb(237,174,47)" fg:x="420" fg:w="1"/><text x="21.2605%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="21.0105%" y="165" width="0.0500%" height="15" fill="rgb(206,201,31)" fg:x="420" fg:w="1"/><text x="21.2605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.25%)</title><rect x="21.8609%" y="149" width="0.2501%" height="15" fill="rgb(231,57,52)" fg:x="437" fg:w="5"/><text x="22.1109%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 1.00%)</title><rect x="21.3607%" y="165" width="1.0005%" height="15" fill="rgb(248,177,22)" fg:x="427" fg:w="20"/><text x="21.6107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.25%)</title><rect x="22.1111%" y="149" width="0.2501%" height="15" fill="rgb(215,211,37)" fg:x="442" fg:w="5"/><text x="22.3611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 1.40%)</title><rect x="21.0605%" y="181" width="1.4007%" height="15" fill="rgb(241,128,51)" fg:x="421" fg:w="28"/><text x="21.3105%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 0.10%)</title><rect x="22.3612%" y="165" width="0.1001%" height="15" fill="rgb(227,165,31)" fg:x="447" fg:w="2"/><text x="22.6112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.20%)</title><rect x="22.4612%" y="181" width="0.2001%" height="15" fill="rgb(228,167,24)" fg:x="449" fg:w="4"/><text x="22.7112%" y="191.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (80 samples, 4.00%)</title><rect x="18.8094%" y="197" width="4.0020%" height="15" fill="rgb(228,143,12)" fg:x="376" fg:w="80"/><text x="19.0594%" y="207.50">bloc..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.15%)</title><rect x="22.6613%" y="181" width="0.1501%" height="15" fill="rgb(249,149,8)" fg:x="453" fg:w="3"/><text x="22.9113%" y="191.50"></text></g><g><title>block-stm-revm`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.05%)</title><rect x="22.8114%" y="197" width="0.0500%" height="15" fill="rgb(243,35,44)" fg:x="456" fg:w="1"/><text x="23.0614%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::new (1 samples, 0.05%)</title><rect x="22.8614%" y="197" width="0.0500%" height="15" fill="rgb(246,89,9)" fg:x="457" fg:w="1"/><text x="23.1114%" y="207.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1 samples, 0.05%)</title><rect x="23.1116%" y="181" width="0.0500%" height="15" fill="rgb(233,213,13)" fg:x="462" fg:w="1"/><text x="23.3616%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="23.1616%" y="181" width="0.0500%" height="15" fill="rgb(233,141,41)" fg:x="463" fg:w="1"/><text x="23.4116%" y="191.50"></text></g><g><title>block-stm-revm`__rdl_dealloc (2 samples, 0.10%)</title><rect x="23.2116%" y="181" width="0.1001%" height="15" fill="rgb(239,167,4)" fg:x="464" fg:w="2"/><text x="23.4616%" y="191.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.50%)</title><rect x="25.3127%" y="149" width="0.5003%" height="15" fill="rgb(209,217,16)" fg:x="506" fg:w="10"/><text x="25.5627%" y="159.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (1 samples, 0.05%)</title><rect x="25.8129%" y="149" width="0.0500%" height="15" fill="rgb(219,88,35)" fg:x="516" fg:w="1"/><text x="26.0629%" y="159.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (13 samples, 0.65%)</title><rect x="25.2626%" y="165" width="0.6503%" height="15" fill="rgb(220,193,23)" fg:x="505" fg:w="13"/><text x="25.5126%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="25.8629%" y="149" width="0.0500%" height="15" fill="rgb(230,90,52)" fg:x="517" fg:w="1"/><text x="26.1129%" y="159.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="26.2131%" y="149" width="0.0500%" height="15" fill="rgb(252,106,19)" fg:x="524" fg:w="1"/><text x="26.4631%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="26.2631%" y="149" width="0.0500%" height="15" fill="rgb(206,74,20)" fg:x="525" fg:w="1"/><text x="26.5131%" y="159.50"></text></g><g><title>block-stm-revm`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.45%)</title><rect x="25.9130%" y="165" width="0.4502%" height="15" fill="rgb(230,138,44)" fg:x="518" fg:w="9"/><text x="26.1630%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="26.3132%" y="149" width="0.0500%" height="15" fill="rgb(235,182,43)" fg:x="526" fg:w="1"/><text x="26.5632%" y="159.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="26.3632%" y="165" width="0.0500%" height="15" fill="rgb(242,16,51)" fg:x="527" fg:w="1"/><text x="26.6132%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;core::option::Option&lt;(usize,block_stm_revm::mv_memory::MemoryEntry)&gt;&gt; (2 samples, 0.10%)</title><rect x="26.4132%" y="165" width="0.1001%" height="15" fill="rgb(248,9,4)" fg:x="528" fg:w="2"/><text x="26.6632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="26.5133%" y="165" width="0.0500%" height="15" fill="rgb(210,31,22)" fg:x="530" fg:w="1"/><text x="26.7633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="26.5633%" y="165" width="0.0500%" height="15" fill="rgb(239,54,39)" fg:x="531" fg:w="1"/><text x="26.8133%" y="175.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (68 samples, 3.40%)</title><rect x="23.3117%" y="181" width="3.4017%" height="15" fill="rgb(230,99,41)" fg:x="466" fg:w="68"/><text x="23.5617%" y="191.50">blo..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.10%)</title><rect x="26.6133%" y="165" width="0.1001%" height="15" fill="rgb(253,106,12)" fg:x="532" fg:w="2"/><text x="26.8633%" y="175.50"></text></g><g><title>block-stm-revm`bytes::bytes::static_clone (1 samples, 0.05%)</title><rect x="26.7134%" y="181" width="0.0500%" height="15" fill="rgb(213,46,41)" fg:x="534" fg:w="1"/><text x="26.9634%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="26.8134%" y="165" width="0.0500%" height="15" fill="rgb(215,133,35)" fg:x="536" fg:w="1"/><text x="27.0634%" y="175.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="27.0635%" y="149" width="0.0500%" height="15" fill="rgb(213,28,5)" fg:x="541" fg:w="1"/><text x="27.3135%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.40%)</title><rect x="26.7634%" y="181" width="0.4002%" height="15" fill="rgb(215,77,49)" fg:x="535" fg:w="8"/><text x="27.0134%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.30%)</title><rect x="26.8634%" y="165" width="0.3002%" height="15" fill="rgb(248,100,22)" fg:x="537" fg:w="6"/><text x="27.1134%" y="175.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="27.1136%" y="149" width="0.0500%" height="15" fill="rgb(208,67,9)" fg:x="542" fg:w="1"/><text x="27.3636%" y="159.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::snapshot (86 samples, 4.30%)</title><rect x="22.9115%" y="197" width="4.3022%" height="15" fill="rgb(219,133,21)" fg:x="458" fg:w="86"/><text x="23.1615%" y="207.50">block..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="27.1636%" y="181" width="0.0500%" height="15" fill="rgb(246,46,29)" fg:x="543" fg:w="1"/><text x="27.4136%" y="191.50"></text></g><g><title>block-stm-revm`block_stm_revm::scheduler::Scheduler::new (1 samples, 0.05%)</title><rect x="27.2136%" y="197" width="0.0500%" height="15" fill="rgb(246,185,52)" fg:x="544" fg:w="1"/><text x="27.4636%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="27.2636%" y="165" width="0.1001%" height="15" fill="rgb(252,136,11)" fg:x="545" fg:w="2"/><text x="27.5136%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.10%)</title><rect x="27.3637%" y="165" width="0.1001%" height="15" fill="rgb(219,138,53)" fg:x="547" fg:w="2"/><text x="27.6137%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.10%)</title><rect x="27.3637%" y="149" width="0.1001%" height="15" fill="rgb(211,51,23)" fg:x="547" fg:w="2"/><text x="27.6137%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.10%)</title><rect x="27.3637%" y="133" width="0.1001%" height="15" fill="rgb(247,221,28)" fg:x="547" fg:w="2"/><text x="27.6137%" y="143.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.25%)</title><rect x="27.2636%" y="181" width="0.2501%" height="15" fill="rgb(251,222,45)" fg:x="545" fg:w="5"/><text x="27.5136%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="27.4637%" y="165" width="0.0500%" height="15" fill="rgb(217,162,53)" fg:x="549" fg:w="1"/><text x="27.7137%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="27.5138%" y="181" width="0.0500%" height="15" fill="rgb(229,93,14)" fg:x="550" fg:w="1"/><text x="27.7638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="27.5638%" y="181" width="0.1001%" height="15" fill="rgb(209,67,49)" fg:x="551" fg:w="2"/><text x="27.8138%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;block_stm_revm::scheduler::Scheduler&gt; (9 samples, 0.45%)</title><rect x="27.2636%" y="197" width="0.4502%" height="15" fill="rgb(213,87,29)" fg:x="545" fg:w="9"/><text x="27.5136%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="27.6638%" y="181" width="0.0500%" height="15" fill="rgb(205,151,52)" fg:x="553" fg:w="1"/><text x="27.9138%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.05%)</title><rect x="27.7139%" y="197" width="0.0500%" height="15" fill="rgb(253,215,39)" fg:x="554" fg:w="1"/><text x="27.9639%" y="207.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (1 samples, 0.05%)</title><rect x="27.7639%" y="165" width="0.0500%" height="15" fill="rgb(221,220,41)" fg:x="555" fg:w="1"/><text x="28.0139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (3 samples, 0.15%)</title><rect x="28.1641%" y="133" width="0.1501%" height="15" fill="rgb(218,133,21)" fg:x="563" fg:w="3"/><text x="28.4141%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.10%)</title><rect x="28.2141%" y="117" width="0.1001%" height="15" fill="rgb(221,193,43)" fg:x="564" fg:w="2"/><text x="28.4641%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="28.3142%" y="133" width="0.0500%" height="15" fill="rgb(240,128,52)" fg:x="566" fg:w="1"/><text x="28.5642%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.60%)</title><rect x="27.8139%" y="165" width="0.6003%" height="15" fill="rgb(253,114,12)" fg:x="556" fg:w="12"/><text x="28.0639%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.45%)</title><rect x="27.9640%" y="149" width="0.4502%" height="15" fill="rgb(215,223,47)" fg:x="559" fg:w="9"/><text x="28.2140%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.05%)</title><rect x="28.3642%" y="133" width="0.0500%" height="15" fill="rgb(248,225,23)" fg:x="567" fg:w="1"/><text x="28.6142%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.10%)</title><rect x="28.4142%" y="165" width="0.1001%" height="15" fill="rgb(250,108,0)" fg:x="568" fg:w="2"/><text x="28.6642%" y="175.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.85%)</title><rect x="27.7639%" y="181" width="0.8504%" height="15" fill="rgb(228,208,7)" fg:x="555" fg:w="17"/><text x="28.0139%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.10%)</title><rect x="28.5143%" y="165" width="0.1001%" height="15" fill="rgb(244,45,10)" fg:x="570" fg:w="2"/><text x="28.7643%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (1 samples, 0.05%)</title><rect x="28.6143%" y="181" width="0.0500%" height="15" fill="rgb(207,125,25)" fg:x="572" fg:w="1"/><text x="28.8643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="28.6643%" y="181" width="0.0500%" height="15" fill="rgb(210,195,18)" fg:x="573" fg:w="1"/><text x="28.9143%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="28.7144%" y="181" width="0.0500%" height="15" fill="rgb(249,80,12)" fg:x="574" fg:w="1"/><text x="28.9644%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (22 samples, 1.10%)</title><rect x="27.7639%" y="197" width="1.1006%" height="15" fill="rgb(221,65,9)" fg:x="555" fg:w="22"/><text x="28.0139%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.10%)</title><rect x="28.7644%" y="181" width="0.1001%" height="15" fill="rgb(235,49,36)" fg:x="575" fg:w="2"/><text x="29.0144%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 0.20%)</title><rect x="28.8644%" y="197" width="0.2001%" height="15" fill="rgb(225,32,20)" fg:x="577" fg:w="4"/><text x="29.1144%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="29.0645%" y="197" width="0.0500%" height="15" fill="rgb(215,141,46)" fg:x="581" fg:w="1"/><text x="29.3145%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="29.0645%" y="181" width="0.0500%" height="15" fill="rgb(250,160,47)" fg:x="581" fg:w="1"/><text x="29.3145%" y="191.50"></text></g><g><title>block-stm-revm`block_stm_revm::block_stm::BlockSTM::run (240 samples, 12.01%)</title><rect x="17.1586%" y="213" width="12.0060%" height="15" fill="rgb(216,222,40)" fg:x="343" fg:w="240"/><text x="17.4086%" y="223.50">block-stm-revm`blo..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="29.1146%" y="197" width="0.0500%" height="15" fill="rgb(234,217,39)" fg:x="582" fg:w="1"/><text x="29.3646%" y="207.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="29.2146%" y="197" width="0.0500%" height="15" fill="rgb(207,178,40)" fg:x="584" fg:w="1"/><text x="29.4646%" y="207.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.15%)</title><rect x="29.2646%" y="181" width="0.1501%" height="15" fill="rgb(221,136,13)" fg:x="585" fg:w="3"/><text x="29.5146%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.15%)</title><rect x="29.2646%" y="165" width="0.1501%" height="15" fill="rgb(249,199,10)" fg:x="585" fg:w="3"/><text x="29.5146%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="29.4147%" y="181" width="0.1001%" height="15" fill="rgb(249,222,13)" fg:x="588" fg:w="2"/><text x="29.6647%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.10%)</title><rect x="29.5148%" y="181" width="0.1001%" height="15" fill="rgb(244,185,38)" fg:x="590" fg:w="2"/><text x="29.7648%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (8 samples, 0.40%)</title><rect x="29.2646%" y="197" width="0.4002%" height="15" fill="rgb(236,202,9)" fg:x="585" fg:w="8"/><text x="29.5146%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="29.6148%" y="181" width="0.0500%" height="15" fill="rgb(250,229,37)" fg:x="592" fg:w="1"/><text x="29.8648%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::db::in_memory_db::CacheDB&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (11 samples, 0.55%)</title><rect x="29.1646%" y="213" width="0.5503%" height="15" fill="rgb(206,174,23)" fg:x="583" fg:w="11"/><text x="29.4146%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="29.6648%" y="197" width="0.0500%" height="15" fill="rgb(211,33,43)" fg:x="593" fg:w="1"/><text x="29.9148%" y="207.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="29.7149%" y="197" width="0.0500%" height="15" fill="rgb(245,58,50)" fg:x="594" fg:w="1"/><text x="29.9649%" y="207.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.25%)</title><rect x="29.7649%" y="181" width="0.2501%" height="15" fill="rgb(244,68,36)" fg:x="595" fg:w="5"/><text x="30.0149%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.25%)</title><rect x="29.7649%" y="165" width="0.2501%" height="15" fill="rgb(232,229,15)" fg:x="595" fg:w="5"/><text x="30.0149%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.20%)</title><rect x="30.0150%" y="181" width="0.2001%" height="15" fill="rgb(254,30,23)" fg:x="600" fg:w="4"/><text x="30.2650%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.15%)</title><rect x="30.2151%" y="181" width="0.1501%" height="15" fill="rgb(235,160,14)" fg:x="604" fg:w="3"/><text x="30.4651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.15%)</title><rect x="30.2151%" y="165" width="0.1501%" height="15" fill="rgb(212,155,44)" fg:x="604" fg:w="3"/><text x="30.4651%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.15%)</title><rect x="30.2151%" y="149" width="0.1501%" height="15" fill="rgb(226,2,50)" fg:x="604" fg:w="3"/><text x="30.4651%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="30.3652%" y="181" width="0.0500%" height="15" fill="rgb(234,177,6)" fg:x="607" fg:w="1"/><text x="30.6152%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (15 samples, 0.75%)</title><rect x="29.7649%" y="197" width="0.7504%" height="15" fill="rgb(217,24,9)" fg:x="595" fg:w="15"/><text x="30.0149%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.10%)</title><rect x="30.4152%" y="181" width="0.1001%" height="15" fill="rgb(220,13,46)" fg:x="608" fg:w="2"/><text x="30.6652%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (17 samples, 0.85%)</title><rect x="29.7149%" y="213" width="0.8504%" height="15" fill="rgb(239,221,27)" fg:x="594" fg:w="17"/><text x="29.9649%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="30.5153%" y="197" width="0.0500%" height="15" fill="rgb(222,198,25)" fg:x="610" fg:w="1"/><text x="30.7653%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="30.5653%" y="213" width="0.0500%" height="15" fill="rgb(211,99,13)" fg:x="611" fg:w="1"/><text x="30.8153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (4 samples, 0.20%)</title><rect x="30.8654%" y="181" width="0.2001%" height="15" fill="rgb(232,111,31)" fg:x="617" fg:w="4"/><text x="31.1154%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.20%)</title><rect x="30.8654%" y="165" width="0.2001%" height="15" fill="rgb(245,82,37)" fg:x="617" fg:w="4"/><text x="31.1154%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="31.0655%" y="181" width="0.0500%" height="15" fill="rgb(227,149,46)" fg:x="621" fg:w="1"/><text x="31.3155%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.05%)</title><rect x="31.1156%" y="181" width="0.0500%" height="15" fill="rgb(218,36,50)" fg:x="622" fg:w="1"/><text x="31.3656%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.10%)</title><rect x="31.1656%" y="181" width="0.1001%" height="15" fill="rgb(226,80,48)" fg:x="623" fg:w="2"/><text x="31.4156%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.10%)</title><rect x="31.1656%" y="165" width="0.1001%" height="15" fill="rgb(238,224,15)" fg:x="623" fg:w="2"/><text x="31.4156%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.80%)</title><rect x="30.6153%" y="213" width="0.8004%" height="15" fill="rgb(241,136,10)" fg:x="612" fg:w="16"/><text x="30.8653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.70%)</title><rect x="30.7154%" y="197" width="0.7004%" height="15" fill="rgb(208,32,45)" fg:x="614" fg:w="14"/><text x="30.9654%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (3 samples, 0.15%)</title><rect x="31.2656%" y="181" width="0.1501%" height="15" fill="rgb(207,135,9)" fg:x="625" fg:w="3"/><text x="31.5156%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.15%)</title><rect x="31.2656%" y="165" width="0.1501%" height="15" fill="rgb(206,86,44)" fg:x="625" fg:w="3"/><text x="31.5156%" y="175.50"></text></g><g><title>block-stm-revm`block_stm_revm::main (629 samples, 31.47%)</title><rect x="0.0000%" y="229" width="31.4657%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="629"/><text x="0.2500%" y="239.50">block-stm-revm`block_stm_revm::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="31.4157%" y="213" width="0.0500%" height="15" fill="rgb(206,64,50)" fg:x="628" fg:w="1"/><text x="31.6657%" y="223.50"></text></g><g><title>block-stm-revm`main (630 samples, 31.52%)</title><rect x="0.0000%" y="293" width="31.5158%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="630"/><text x="0.2500%" y="303.50">block-stm-revm`main</text></g><g><title>block-stm-revm`std::rt::lang_start_internal (630 samples, 31.52%)</title><rect x="0.0000%" y="277" width="31.5158%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="630"/><text x="0.2500%" y="287.50">block-stm-revm`std::rt::lang_start_internal</text></g><g><title>block-stm-revm`std::rt::lang_start::_{{closure}} (630 samples, 31.52%)</title><rect x="0.0000%" y="261" width="31.5158%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="630"/><text x="0.2500%" y="271.50">block-stm-revm`std::rt::lang_start::_{{closure}}</text></g><g><title>block-stm-revm`std::sys_common::backtrace::__rust_begin_short_backtrace (630 samples, 31.52%)</title><rect x="0.0000%" y="245" width="31.5158%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="630"/><text x="0.2500%" y="255.50">block-stm-revm`std::sys_common::backtrace::__rust_b..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="31.4657%" y="229" width="0.0500%" height="15" fill="rgb(252,204,47)" fg:x="629" fg:w="1"/><text x="31.7157%" y="239.50"></text></g><g><title>dyld`start (631 samples, 31.57%)</title><rect x="0.0000%" y="309" width="31.5658%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="631"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.05%)</title><rect x="31.5158%" y="293" width="0.0500%" height="15" fill="rgb(221,76,26)" fg:x="630" fg:w="1"/><text x="31.7658%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.05%)</title><rect x="31.5158%" y="277" width="0.0500%" height="15" fill="rgb(225,139,18)" fg:x="630" fg:w="1"/><text x="31.7658%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.10%)</title><rect x="31.5658%" y="309" width="0.1001%" height="15" fill="rgb(230,137,11)" fg:x="631" fg:w="2"/><text x="31.8158%" y="319.50"></text></g><g><title>block-stm-revm`block_stm_revm::scheduler::Scheduler::next_task (2 samples, 0.10%)</title><rect x="31.6658%" y="245" width="0.1001%" height="15" fill="rgb(212,28,1)" fg:x="633" fg:w="2"/><text x="31.9158%" y="255.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="33.9170%" y="229" width="0.0500%" height="15" fill="rgb(248,164,17)" fg:x="678" fg:w="1"/><text x="34.1670%" y="239.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.10%)</title><rect x="34.6173%" y="213" width="0.1001%" height="15" fill="rgb(222,171,42)" fg:x="692" fg:w="2"/><text x="34.8673%" y="223.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="34.7174%" y="213" width="0.0500%" height="15" fill="rgb(243,84,45)" fg:x="694" fg:w="1"/><text x="34.9674%" y="223.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.05%)</title><rect x="36.6183%" y="181" width="0.0500%" height="15" fill="rgb(252,49,23)" fg:x="732" fg:w="1"/><text x="36.8683%" y="191.50"></text></g><g><title>block-stm-revm`&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (8 samples, 0.40%)</title><rect x="36.4182%" y="197" width="0.4002%" height="15" fill="rgb(215,19,7)" fg:x="728" fg:w="8"/><text x="36.6682%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.15%)</title><rect x="36.6683%" y="181" width="0.1501%" height="15" fill="rgb(238,81,41)" fg:x="733" fg:w="3"/><text x="36.9183%" y="191.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.35%)</title><rect x="37.1686%" y="181" width="0.3502%" height="15" fill="rgb(210,199,37)" fg:x="743" fg:w="7"/><text x="37.4186%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (7 samples, 0.35%)</title><rect x="37.5188%" y="181" width="0.3502%" height="15" fill="rgb(244,192,49)" fg:x="750" fg:w="7"/><text x="37.7688%" y="191.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (24 samples, 1.20%)</title><rect x="36.8184%" y="197" width="1.2006%" height="15" fill="rgb(226,211,11)" fg:x="736" fg:w="24"/><text x="37.0684%" y="207.50"></text></g><g><title>block-stm-revm`dashmap::lock::RawRwLock::lock_exclusive_slow (3 samples, 0.15%)</title><rect x="37.8689%" y="181" width="0.1501%" height="15" fill="rgb(236,162,54)" fg:x="757" fg:w="3"/><text x="38.1189%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (2 samples, 0.10%)</title><rect x="37.9190%" y="165" width="0.1001%" height="15" fill="rgb(220,229,9)" fg:x="758" fg:w="2"/><text x="38.1690%" y="175.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="38.4692%" y="181" width="0.0500%" height="15" fill="rgb(250,87,22)" fg:x="769" fg:w="1"/><text x="38.7192%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (1 samples, 0.05%)</title><rect x="38.5193%" y="181" width="0.0500%" height="15" fill="rgb(239,43,17)" fg:x="770" fg:w="1"/><text x="38.7693%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.20%)</title><rect x="38.5693%" y="181" width="0.2001%" height="15" fill="rgb(231,177,25)" fg:x="771" fg:w="4"/><text x="38.8193%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.05%)</title><rect x="38.7694%" y="181" width="0.0500%" height="15" fill="rgb(219,179,1)" fg:x="775" fg:w="1"/><text x="39.0194%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2 samples, 0.10%)</title><rect x="38.8194%" y="165" width="0.1001%" height="15" fill="rgb(238,219,53)" fg:x="776" fg:w="2"/><text x="39.0694%" y="175.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (24 samples, 1.20%)</title><rect x="38.0190%" y="197" width="1.2006%" height="15" fill="rgb(232,167,36)" fg:x="760" fg:w="24"/><text x="38.2690%" y="207.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.40%)</title><rect x="38.8194%" y="181" width="0.4002%" height="15" fill="rgb(244,19,51)" fg:x="776" fg:w="8"/><text x="39.0694%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.30%)</title><rect x="38.9195%" y="165" width="0.3002%" height="15" fill="rgb(224,6,22)" fg:x="778" fg:w="6"/><text x="39.1695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.25%)</title><rect x="38.9695%" y="149" width="0.2501%" height="15" fill="rgb(224,145,5)" fg:x="779" fg:w="5"/><text x="39.2195%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.25%)</title><rect x="38.9695%" y="133" width="0.2501%" height="15" fill="rgb(234,130,49)" fg:x="779" fg:w="5"/><text x="39.2195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.15%)</title><rect x="39.0695%" y="117" width="0.1501%" height="15" fill="rgb(254,6,2)" fg:x="781" fg:w="3"/><text x="39.3195%" y="127.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="39.2196%" y="197" width="0.0500%" height="15" fill="rgb(208,96,46)" fg:x="784" fg:w="1"/><text x="39.4696%" y="207.50"></text></g><g><title>block-stm-revm`&lt;std::sys::unix::locks::pthread_mutex::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (4 samples, 0.20%)</title><rect x="39.2696%" y="197" width="0.2001%" height="15" fill="rgb(239,3,39)" fg:x="785" fg:w="4"/><text x="39.5196%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.20%)</title><rect x="39.2696%" y="181" width="0.2001%" height="15" fill="rgb(233,210,1)" fg:x="785" fg:w="4"/><text x="39.5196%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="39.4197%" y="165" width="0.0500%" height="15" fill="rgb(244,137,37)" fg:x="788" fg:w="1"/><text x="39.6697%" y="175.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="39.4697%" y="197" width="0.0500%" height="15" fill="rgb(240,136,2)" fg:x="789" fg:w="1"/><text x="39.7197%" y="207.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (7 samples, 0.35%)</title><rect x="39.5198%" y="197" width="0.3502%" height="15" fill="rgb(239,18,37)" fg:x="790" fg:w="7"/><text x="39.7698%" y="207.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;[(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)]&gt; (9 samples, 0.45%)</title><rect x="39.8699%" y="197" width="0.4502%" height="15" fill="rgb(218,185,22)" fg:x="797" fg:w="9"/><text x="40.1199%" y="207.50"></text></g><g><title>block-stm-revm`dashmap::lock::RawRwLock::lock_exclusive_slow (1 samples, 0.05%)</title><rect x="40.3202%" y="197" width="0.0500%" height="15" fill="rgb(225,218,4)" fg:x="806" fg:w="1"/><text x="40.5702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.30%)</title><rect x="40.3702%" y="197" width="0.3002%" height="15" fill="rgb(230,182,32)" fg:x="807" fg:w="6"/><text x="40.6202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="40.6703%" y="197" width="0.0500%" height="15" fill="rgb(242,56,43)" fg:x="813" fg:w="1"/><text x="40.9203%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="40.7204%" y="197" width="0.0500%" height="15" fill="rgb(233,99,24)" fg:x="814" fg:w="1"/><text x="40.9704%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.10%)</title><rect x="41.0705%" y="165" width="0.1001%" height="15" fill="rgb(234,209,42)" fg:x="821" fg:w="2"/><text x="41.3205%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.65%)</title><rect x="40.7704%" y="197" width="0.6503%" height="15" fill="rgb(227,7,12)" fg:x="815" fg:w="13"/><text x="41.0204%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.50%)</title><rect x="40.9205%" y="181" width="0.5003%" height="15" fill="rgb(245,203,43)" fg:x="818" fg:w="10"/><text x="41.1705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.25%)</title><rect x="41.1706%" y="165" width="0.2501%" height="15" fill="rgb(238,205,33)" fg:x="823" fg:w="5"/><text x="41.4206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.05%)</title><rect x="41.4207%" y="197" width="0.0500%" height="15" fill="rgb(231,56,7)" fg:x="828" fg:w="1"/><text x="41.6707%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.25%)</title><rect x="41.4707%" y="197" width="0.2501%" height="15" fill="rgb(244,186,29)" fg:x="829" fg:w="5"/><text x="41.7207%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="41.6708%" y="181" width="0.0500%" height="15" fill="rgb(234,111,31)" fg:x="833" fg:w="1"/><text x="41.9208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.10%)</title><rect x="41.7209%" y="197" width="0.1001%" height="15" fill="rgb(241,149,10)" fg:x="834" fg:w="2"/><text x="41.9709%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.15%)</title><rect x="41.8209%" y="197" width="0.1501%" height="15" fill="rgb(249,206,44)" fg:x="836" fg:w="3"/><text x="42.0709%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (4 samples, 0.20%)</title><rect x="41.9710%" y="197" width="0.2001%" height="15" fill="rgb(251,153,30)" fg:x="839" fg:w="4"/><text x="42.2210%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.25%)</title><rect x="42.1711%" y="197" width="0.2501%" height="15" fill="rgb(239,152,38)" fg:x="843" fg:w="5"/><text x="42.4211%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::record (156 samples, 7.80%)</title><rect x="34.7674%" y="213" width="7.8039%" height="15" fill="rgb(249,139,47)" fg:x="695" fg:w="156"/><text x="35.0174%" y="223.50">block-stm-r..</text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_settype (3 samples, 0.15%)</title><rect x="42.4212%" y="197" width="0.1501%" height="15" fill="rgb(244,64,35)" fg:x="848" fg:w="3"/><text x="42.6712%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::scheduler::Scheduler::finish_execution (30 samples, 1.50%)</title><rect x="42.5713%" y="213" width="1.5008%" height="15" fill="rgb(216,46,15)" fg:x="851" fg:w="30"/><text x="42.8213%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.15%)</title><rect x="43.9220%" y="197" width="0.1501%" height="15" fill="rgb(250,74,19)" fg:x="878" fg:w="3"/><text x="44.1720%" y="207.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="45.4227%" y="197" width="0.0500%" height="15" fill="rgb(249,42,33)" fg:x="908" fg:w="1"/><text x="45.6727%" y="207.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="45.6228%" y="181" width="0.0500%" height="15" fill="rgb(242,149,17)" fg:x="912" fg:w="1"/><text x="45.8728%" y="191.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="45.6228%" y="165" width="0.0500%" height="15" fill="rgb(244,29,21)" fg:x="912" fg:w="1"/><text x="45.8728%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="45.6228%" y="149" width="0.0500%" height="15" fill="rgb(220,130,37)" fg:x="912" fg:w="1"/><text x="45.8728%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="45.6228%" y="133" width="0.0500%" height="15" fill="rgb(211,67,2)" fg:x="912" fg:w="1"/><text x="45.8728%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="45.6228%" y="117" width="0.0500%" height="15" fill="rgb(235,68,52)" fg:x="912" fg:w="1"/><text x="45.8728%" y="127.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.30%)</title><rect x="45.4727%" y="197" width="0.3002%" height="15" fill="rgb(246,142,3)" fg:x="909" fg:w="6"/><text x="45.7227%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.10%)</title><rect x="45.6728%" y="181" width="0.1001%" height="15" fill="rgb(241,25,7)" fg:x="913" fg:w="2"/><text x="45.9228%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="45.7229%" y="165" width="0.0500%" height="15" fill="rgb(242,119,39)" fg:x="914" fg:w="1"/><text x="45.9729%" y="175.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="45.7729%" y="197" width="0.0500%" height="15" fill="rgb(241,98,45)" fg:x="915" fg:w="1"/><text x="46.0229%" y="207.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="45.8229%" y="181" width="0.0500%" height="15" fill="rgb(254,28,30)" fg:x="916" fg:w="1"/><text x="46.0729%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.45%)</title><rect x="45.8729%" y="181" width="0.4502%" height="15" fill="rgb(241,142,54)" fg:x="917" fg:w="9"/><text x="46.1229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="46.2731%" y="165" width="0.0500%" height="15" fill="rgb(222,85,15)" fg:x="925" fg:w="1"/><text x="46.5231%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="46.2731%" y="149" width="0.0500%" height="15" fill="rgb(210,85,47)" fg:x="925" fg:w="1"/><text x="46.5231%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="46.2731%" y="133" width="0.0500%" height="15" fill="rgb(224,206,25)" fg:x="925" fg:w="1"/><text x="46.5231%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="46.2731%" y="117" width="0.0500%" height="15" fill="rgb(243,201,19)" fg:x="925" fg:w="1"/><text x="46.5231%" y="127.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (11 samples, 0.55%)</title><rect x="45.8229%" y="197" width="0.5503%" height="15" fill="rgb(236,59,4)" fg:x="916" fg:w="11"/><text x="46.0729%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="46.3232%" y="181" width="0.0500%" height="15" fill="rgb(254,179,45)" fg:x="926" fg:w="1"/><text x="46.5732%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (2 samples, 0.10%)</title><rect x="46.3732%" y="197" width="0.1001%" height="15" fill="rgb(226,14,10)" fg:x="927" fg:w="2"/><text x="46.6232%" y="207.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="46.4732%" y="197" width="0.0500%" height="15" fill="rgb(244,27,41)" fg:x="929" fg:w="1"/><text x="46.7232%" y="207.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (1 samples, 0.05%)</title><rect x="46.5233%" y="197" width="0.0500%" height="15" fill="rgb(235,35,32)" fg:x="930" fg:w="1"/><text x="46.7733%" y="207.50"></text></g><g><title>block-stm-revm`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="46.5733%" y="181" width="0.0500%" height="15" fill="rgb(218,68,31)" fg:x="931" fg:w="1"/><text x="46.8233%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt; (1 samples, 0.05%)</title><rect x="46.6233%" y="181" width="0.0500%" height="15" fill="rgb(207,120,37)" fg:x="932" fg:w="1"/><text x="46.8733%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (2 samples, 0.10%)</title><rect x="46.6733%" y="181" width="0.1001%" height="15" fill="rgb(227,98,0)" fg:x="933" fg:w="2"/><text x="46.9233%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="46.6733%" y="165" width="0.1001%" height="15" fill="rgb(207,7,3)" fg:x="933" fg:w="2"/><text x="46.9233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="46.7734%" y="181" width="0.0500%" height="15" fill="rgb(206,98,19)" fg:x="935" fg:w="1"/><text x="47.0234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="46.8734%" y="165" width="0.0500%" height="15" fill="rgb(217,5,26)" fg:x="937" fg:w="1"/><text x="47.1234%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="47.2236%" y="149" width="0.0500%" height="15" fill="rgb(235,190,38)" fg:x="944" fg:w="1"/><text x="47.4736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.60%)</title><rect x="46.8234%" y="181" width="0.6003%" height="15" fill="rgb(247,86,24)" fg:x="936" fg:w="12"/><text x="47.0734%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.50%)</title><rect x="46.9235%" y="165" width="0.5003%" height="15" fill="rgb(205,101,16)" fg:x="938" fg:w="10"/><text x="47.1735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.15%)</title><rect x="47.2736%" y="149" width="0.1501%" height="15" fill="rgb(246,168,33)" fg:x="945" fg:w="3"/><text x="47.5236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="47.4237%" y="181" width="0.0500%" height="15" fill="rgb(231,114,1)" fg:x="948" fg:w="1"/><text x="47.6737%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (19 samples, 0.95%)</title><rect x="46.5733%" y="197" width="0.9505%" height="15" fill="rgb(207,184,53)" fg:x="931" fg:w="19"/><text x="46.8233%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="47.4737%" y="181" width="0.0500%" height="15" fill="rgb(224,95,51)" fg:x="949" fg:w="1"/><text x="47.7237%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="47.5238%" y="181" width="0.0500%" height="15" fill="rgb(212,188,45)" fg:x="950" fg:w="1"/><text x="47.7738%" y="191.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.15%)</title><rect x="47.5738%" y="181" width="0.1501%" height="15" fill="rgb(223,154,38)" fg:x="951" fg:w="3"/><text x="47.8238%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (2 samples, 0.10%)</title><rect x="47.7239%" y="181" width="0.1001%" height="15" fill="rgb(251,22,52)" fg:x="954" fg:w="2"/><text x="47.9739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="47.7739%" y="165" width="0.0500%" height="15" fill="rgb(229,209,22)" fg:x="955" fg:w="1"/><text x="48.0239%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (2 samples, 0.10%)</title><rect x="47.8239%" y="181" width="0.1001%" height="15" fill="rgb(234,138,34)" fg:x="956" fg:w="2"/><text x="48.0739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="47.8739%" y="165" width="0.0500%" height="15" fill="rgb(212,95,11)" fg:x="957" fg:w="1"/><text x="48.1239%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.15%)</title><rect x="47.9240%" y="181" width="0.1501%" height="15" fill="rgb(240,179,47)" fg:x="958" fg:w="3"/><text x="48.1740%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="47.9740%" y="165" width="0.1001%" height="15" fill="rgb(240,163,11)" fg:x="959" fg:w="2"/><text x="48.2240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.15%)</title><rect x="48.0740%" y="181" width="0.1501%" height="15" fill="rgb(236,37,12)" fg:x="961" fg:w="3"/><text x="48.3240%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (18 samples, 0.90%)</title><rect x="47.5238%" y="197" width="0.9005%" height="15" fill="rgb(232,164,16)" fg:x="950" fg:w="18"/><text x="47.7738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.20%)</title><rect x="48.2241%" y="181" width="0.2001%" height="15" fill="rgb(244,205,15)" fg:x="964" fg:w="4"/><text x="48.4741%" y="191.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (5 samples, 0.25%)</title><rect x="48.4242%" y="197" width="0.2501%" height="15" fill="rgb(223,117,47)" fg:x="968" fg:w="5"/><text x="48.6742%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.20%)</title><rect x="48.4742%" y="181" width="0.2001%" height="15" fill="rgb(244,107,35)" fg:x="969" fg:w="4"/><text x="48.7242%" y="191.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.15%)</title><rect x="48.6743%" y="197" width="0.1501%" height="15" fill="rgb(205,140,8)" fg:x="973" fg:w="3"/><text x="48.9243%" y="207.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="48.8744%" y="181" width="0.0500%" height="15" fill="rgb(228,84,46)" fg:x="977" fg:w="1"/><text x="49.1244%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="48.9245%" y="181" width="0.0500%" height="15" fill="rgb(254,188,9)" fg:x="978" fg:w="1"/><text x="49.1745%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="49.0245%" y="165" width="0.0500%" height="15" fill="rgb(206,112,54)" fg:x="980" fg:w="1"/><text x="49.2745%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="49.0745%" y="165" width="0.0500%" height="15" fill="rgb(216,84,49)" fg:x="981" fg:w="1"/><text x="49.3245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="49.0745%" y="149" width="0.0500%" height="15" fill="rgb(214,194,35)" fg:x="981" fg:w="1"/><text x="49.3245%" y="159.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.15%)</title><rect x="49.1246%" y="165" width="0.1501%" height="15" fill="rgb(249,28,3)" fg:x="982" fg:w="3"/><text x="49.3746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="49.1746%" y="149" width="0.1001%" height="15" fill="rgb(222,56,52)" fg:x="983" fg:w="2"/><text x="49.4246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.15%)</title><rect x="49.2746%" y="165" width="0.1501%" height="15" fill="rgb(245,217,50)" fg:x="985" fg:w="3"/><text x="49.5246%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (12 samples, 0.60%)</title><rect x="48.9745%" y="181" width="0.6003%" height="15" fill="rgb(213,201,24)" fg:x="979" fg:w="12"/><text x="49.2245%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.15%)</title><rect x="49.4247%" y="165" width="0.1501%" height="15" fill="rgb(248,116,28)" fg:x="988" fg:w="3"/><text x="49.6747%" y="175.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="49.5748%" y="165" width="0.0500%" height="15" fill="rgb(219,72,43)" fg:x="991" fg:w="1"/><text x="49.8248%" y="175.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (4 samples, 0.20%)</title><rect x="49.5748%" y="181" width="0.2001%" height="15" fill="rgb(209,138,14)" fg:x="991" fg:w="4"/><text x="49.8248%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.15%)</title><rect x="49.6248%" y="165" width="0.1501%" height="15" fill="rgb(222,18,33)" fg:x="992" fg:w="3"/><text x="49.8748%" y="175.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="49.8749%" y="165" width="0.0500%" height="15" fill="rgb(213,199,7)" fg:x="997" fg:w="1"/><text x="50.1249%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="49.9250%" y="165" width="0.0500%" height="15" fill="rgb(250,110,10)" fg:x="998" fg:w="1"/><text x="50.1750%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="49.9250%" y="149" width="0.0500%" height="15" fill="rgb(248,123,6)" fg:x="998" fg:w="1"/><text x="50.1750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="49.9250%" y="133" width="0.0500%" height="15" fill="rgb(206,91,31)" fg:x="998" fg:w="1"/><text x="50.1750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.05%)</title><rect x="49.9250%" y="117" width="0.0500%" height="15" fill="rgb(211,154,13)" fg:x="998" fg:w="1"/><text x="50.1750%" y="127.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="49.9750%" y="165" width="0.0500%" height="15" fill="rgb(225,148,7)" fg:x="999" fg:w="1"/><text x="50.2250%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="49.9750%" y="149" width="0.0500%" height="15" fill="rgb(220,160,43)" fg:x="999" fg:w="1"/><text x="50.2250%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="49.9750%" y="133" width="0.0500%" height="15" fill="rgb(213,52,39)" fg:x="999" fg:w="1"/><text x="50.2250%" y="143.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="50.0250%" y="165" width="0.0500%" height="15" fill="rgb(243,137,7)" fg:x="1000" fg:w="1"/><text x="50.2750%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.15%)</title><rect x="50.0750%" y="165" width="0.1501%" height="15" fill="rgb(230,79,13)" fg:x="1001" fg:w="3"/><text x="50.3250%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (24 samples, 1.20%)</title><rect x="49.7749%" y="181" width="1.2006%" height="15" fill="rgb(247,105,23)" fg:x="995" fg:w="24"/><text x="50.0249%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.75%)</title><rect x="50.2251%" y="165" width="0.7504%" height="15" fill="rgb(223,179,41)" fg:x="1004" fg:w="15"/><text x="50.4751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.15%)</title><rect x="50.9755%" y="181" width="0.1501%" height="15" fill="rgb(218,9,34)" fg:x="1019" fg:w="3"/><text x="51.2255%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.15%)</title><rect x="51.1256%" y="181" width="0.1501%" height="15" fill="rgb(222,106,8)" fg:x="1022" fg:w="3"/><text x="51.3756%" y="191.50"></text></g><g><title>block-stm-revm`revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (60 samples, 3.00%)</title><rect x="48.8244%" y="197" width="3.0015%" height="15" fill="rgb(211,220,0)" fg:x="976" fg:w="60"/><text x="49.0744%" y="207.50">blo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.55%)</title><rect x="51.2756%" y="181" width="0.5503%" height="15" fill="rgb(229,52,16)" fg:x="1025" fg:w="11"/><text x="51.5256%" y="191.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::env::BlockEnv as core::default::Default&gt;::default (1 samples, 0.05%)</title><rect x="51.8259%" y="165" width="0.0500%" height="15" fill="rgb(212,155,18)" fg:x="1036" fg:w="1"/><text x="52.0759%" y="175.50"></text></g><g><title>block-stm-revm`__rdl_alloc (1 samples, 0.05%)</title><rect x="51.8759%" y="165" width="0.0500%" height="15" fill="rgb(242,21,14)" fg:x="1037" fg:w="1"/><text x="52.1259%" y="175.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::new (7 samples, 0.35%)</title><rect x="52.0760%" y="149" width="0.3502%" height="15" fill="rgb(222,19,48)" fg:x="1041" fg:w="7"/><text x="52.3260%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="52.4262%" y="149" width="0.0500%" height="15" fill="rgb(232,45,27)" fg:x="1048" fg:w="1"/><text x="52.6762%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="52.4762%" y="149" width="0.0500%" height="15" fill="rgb(249,103,42)" fg:x="1049" fg:w="1"/><text x="52.7262%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="52.5263%" y="149" width="0.0500%" height="15" fill="rgb(246,81,33)" fg:x="1050" fg:w="1"/><text x="52.7763%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="52.5763%" y="133" width="0.0500%" height="15" fill="rgb(252,33,42)" fg:x="1051" fg:w="1"/><text x="52.8263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="52.6263%" y="133" width="0.0500%" height="15" fill="rgb(209,212,41)" fg:x="1052" fg:w="1"/><text x="52.8763%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (1 samples, 0.05%)</title><rect x="52.6763%" y="117" width="0.0500%" height="15" fill="rgb(207,154,6)" fg:x="1053" fg:w="1"/><text x="52.9263%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.05%)</title><rect x="52.7264%" y="117" width="0.0500%" height="15" fill="rgb(223,64,47)" fg:x="1054" fg:w="1"/><text x="52.9764%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.30%)</title><rect x="52.7764%" y="117" width="0.3002%" height="15" fill="rgb(211,161,38)" fg:x="1055" fg:w="6"/><text x="53.0264%" y="127.50"></text></g><g><title>block-stm-revm`revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (32 samples, 1.60%)</title><rect x="51.9260%" y="165" width="1.6008%" height="15" fill="rgb(219,138,40)" fg:x="1038" fg:w="32"/><text x="52.1760%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.95%)</title><rect x="52.5763%" y="149" width="0.9505%" height="15" fill="rgb(241,228,46)" fg:x="1051" fg:w="19"/><text x="52.8263%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.85%)</title><rect x="52.6763%" y="133" width="0.8504%" height="15" fill="rgb(223,209,38)" fg:x="1053" fg:w="17"/><text x="52.9263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.45%)</title><rect x="53.0765%" y="117" width="0.4502%" height="15" fill="rgb(236,164,45)" fg:x="1061" fg:w="9"/><text x="53.3265%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.10%)</title><rect x="53.4267%" y="101" width="0.1001%" height="15" fill="rgb(231,15,5)" fg:x="1068" fg:w="2"/><text x="53.6767%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="53.5268%" y="165" width="0.0500%" height="15" fill="rgb(252,35,15)" fg:x="1070" fg:w="1"/><text x="53.7768%" y="175.50"></text></g><g><title>block-stm-revm`revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (36 samples, 1.80%)</title><rect x="51.8259%" y="181" width="1.8009%" height="15" fill="rgb(248,181,18)" fg:x="1036" fg:w="36"/><text x="52.0759%" y="191.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="53.5768%" y="165" width="0.0500%" height="15" fill="rgb(233,39,42)" fg:x="1071" fg:w="1"/><text x="53.8268%" y="175.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="53.6268%" y="165" width="0.0500%" height="15" fill="rgb(238,110,33)" fg:x="1072" fg:w="1"/><text x="53.8768%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="53.6768%" y="165" width="0.0500%" height="15" fill="rgb(233,195,10)" fg:x="1073" fg:w="1"/><text x="53.9268%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.05%)</title><rect x="53.7269%" y="165" width="0.0500%" height="15" fill="rgb(254,105,3)" fg:x="1074" fg:w="1"/><text x="53.9769%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="53.7269%" y="149" width="0.0500%" height="15" fill="rgb(221,225,9)" fg:x="1074" fg:w="1"/><text x="53.9769%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="53.7269%" y="133" width="0.0500%" height="15" fill="rgb(224,227,45)" fg:x="1074" fg:w="1"/><text x="53.9769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.30%)</title><rect x="53.7769%" y="165" width="0.3002%" height="15" fill="rgb(229,198,43)" fg:x="1075" fg:w="6"/><text x="54.0269%" y="175.50"></text></g><g><title>block-stm-revm`revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (14 samples, 0.70%)</title><rect x="53.6268%" y="181" width="0.7004%" height="15" fill="rgb(206,209,35)" fg:x="1072" fg:w="14"/><text x="53.8768%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.25%)</title><rect x="54.0770%" y="165" width="0.2501%" height="15" fill="rgb(245,195,53)" fg:x="1081" fg:w="5"/><text x="54.3270%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="54.3272%" y="181" width="0.0500%" height="15" fill="rgb(240,92,26)" fg:x="1086" fg:w="1"/><text x="54.5772%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.20%)</title><rect x="54.3772%" y="181" width="0.2001%" height="15" fill="rgb(207,40,23)" fg:x="1087" fg:w="4"/><text x="54.6272%" y="191.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (70 samples, 3.50%)</title><rect x="51.8259%" y="197" width="3.5018%" height="15" fill="rgb(223,111,35)" fg:x="1036" fg:w="70"/><text x="52.0759%" y="207.50">blo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.75%)</title><rect x="54.5773%" y="181" width="0.7504%" height="15" fill="rgb(229,147,28)" fg:x="1091" fg:w="15"/><text x="54.8273%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="56.1281%" y="181" width="0.0500%" height="15" fill="rgb(211,29,28)" fg:x="1122" fg:w="1"/><text x="56.3781%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (4 samples, 0.20%)</title><rect x="56.1781%" y="181" width="0.2001%" height="15" fill="rgb(228,72,33)" fg:x="1123" fg:w="4"/><text x="56.4281%" y="191.50"></text></g><g><title>block-stm-revm`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.35%)</title><rect x="56.4282%" y="165" width="0.3502%" height="15" fill="rgb(205,214,31)" fg:x="1128" fg:w="7"/><text x="56.6782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="56.6783%" y="149" width="0.1001%" height="15" fill="rgb(224,111,15)" fg:x="1133" fg:w="2"/><text x="56.9283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="56.6783%" y="133" width="0.1001%" height="15" fill="rgb(253,21,26)" fg:x="1133" fg:w="2"/><text x="56.9283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.10%)</title><rect x="56.6783%" y="117" width="0.1001%" height="15" fill="rgb(245,139,43)" fg:x="1133" fg:w="2"/><text x="56.9283%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (4 samples, 0.20%)</title><rect x="57.1286%" y="133" width="0.2001%" height="15" fill="rgb(252,170,7)" fg:x="1142" fg:w="4"/><text x="57.3786%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.75%)</title><rect x="57.6288%" y="117" width="0.7504%" height="15" fill="rgb(231,118,14)" fg:x="1152" fg:w="15"/><text x="57.8788%" y="127.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 1.30%)</title><rect x="57.3287%" y="133" width="1.3007%" height="15" fill="rgb(238,83,0)" fg:x="1146" fg:w="26"/><text x="57.5787%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (5 samples, 0.25%)</title><rect x="58.3792%" y="117" width="0.2501%" height="15" fill="rgb(221,39,39)" fg:x="1167" fg:w="5"/><text x="58.6292%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="58.6293%" y="133" width="0.0500%" height="15" fill="rgb(222,119,46)" fg:x="1172" fg:w="1"/><text x="58.8793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="58.6793%" y="117" width="0.0500%" height="15" fill="rgb(222,165,49)" fg:x="1173" fg:w="1"/><text x="58.9293%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.25%)</title><rect x="58.6793%" y="133" width="0.2501%" height="15" fill="rgb(219,113,52)" fg:x="1173" fg:w="5"/><text x="58.9293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.20%)</title><rect x="58.7294%" y="117" width="0.2001%" height="15" fill="rgb(214,7,15)" fg:x="1174" fg:w="4"/><text x="58.9794%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="58.8794%" y="101" width="0.0500%" height="15" fill="rgb(235,32,4)" fg:x="1177" fg:w="1"/><text x="59.1294%" y="111.50"></text></g><g><title>block-stm-revm`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 2.15%)</title><rect x="56.8284%" y="149" width="2.1511%" height="15" fill="rgb(238,90,54)" fg:x="1136" fg:w="43"/><text x="57.0784%" y="159.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="58.9295%" y="133" width="0.0500%" height="15" fill="rgb(213,208,19)" fg:x="1178" fg:w="1"/><text x="59.1795%" y="143.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.10%)</title><rect x="58.9795%" y="149" width="0.1001%" height="15" fill="rgb(233,156,4)" fg:x="1179" fg:w="2"/><text x="59.2295%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="58.9795%" y="133" width="0.1001%" height="15" fill="rgb(207,194,5)" fg:x="1179" fg:w="2"/><text x="59.2295%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="58.9795%" y="117" width="0.1001%" height="15" fill="rgb(206,111,30)" fg:x="1179" fg:w="2"/><text x="59.2295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="59.0295%" y="101" width="0.0500%" height="15" fill="rgb(243,70,54)" fg:x="1180" fg:w="1"/><text x="59.2795%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="59.0795%" y="149" width="0.0500%" height="15" fill="rgb(242,28,8)" fg:x="1181" fg:w="1"/><text x="59.3295%" y="159.50"></text></g><g><title>block-stm-revm`&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (64 samples, 3.20%)</title><rect x="56.7784%" y="165" width="3.2016%" height="15" fill="rgb(219,106,18)" fg:x="1135" fg:w="64"/><text x="57.0284%" y="175.50">blo..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.85%)</title><rect x="59.1296%" y="149" width="0.8504%" height="15" fill="rgb(244,222,10)" fg:x="1182" fg:w="17"/><text x="59.3796%" y="159.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (2 samples, 0.10%)</title><rect x="59.9800%" y="165" width="0.1001%" height="15" fill="rgb(236,179,52)" fg:x="1199" fg:w="2"/><text x="60.2300%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.05%)</title><rect x="60.0800%" y="165" width="0.0500%" height="15" fill="rgb(213,23,39)" fg:x="1201" fg:w="1"/><text x="60.3300%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="60.2801%" y="149" width="0.0500%" height="15" fill="rgb(238,48,10)" fg:x="1205" fg:w="1"/><text x="60.5301%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.10%)</title><rect x="60.3302%" y="149" width="0.1001%" height="15" fill="rgb(251,196,23)" fg:x="1206" fg:w="2"/><text x="60.5802%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="60.4802%" y="133" width="0.0500%" height="15" fill="rgb(250,152,24)" fg:x="1209" fg:w="1"/><text x="60.7302%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="60.7804%" y="117" width="0.0500%" height="15" fill="rgb(209,150,17)" fg:x="1215" fg:w="1"/><text x="61.0304%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.45%)</title><rect x="60.4302%" y="149" width="0.4502%" height="15" fill="rgb(234,202,34)" fg:x="1208" fg:w="9"/><text x="60.6802%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.35%)</title><rect x="60.5303%" y="133" width="0.3502%" height="15" fill="rgb(253,148,53)" fg:x="1210" fg:w="7"/><text x="60.7803%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="60.8304%" y="117" width="0.0500%" height="15" fill="rgb(218,129,16)" fg:x="1216" fg:w="1"/><text x="61.0804%" y="127.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::post_execution::output (16 samples, 0.80%)</title><rect x="60.1301%" y="165" width="0.8004%" height="15" fill="rgb(216,85,19)" fg:x="1202" fg:w="16"/><text x="60.3801%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="60.8804%" y="149" width="0.0500%" height="15" fill="rgb(235,228,7)" fg:x="1217" fg:w="1"/><text x="61.1304%" y="159.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.05%)</title><rect x="61.0805%" y="149" width="0.0500%" height="15" fill="rgb(245,175,0)" fg:x="1221" fg:w="1"/><text x="61.3305%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.25%)</title><rect x="61.3807%" y="101" width="0.2501%" height="15" fill="rgb(208,168,36)" fg:x="1227" fg:w="5"/><text x="61.6307%" y="111.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (2 samples, 0.10%)</title><rect x="61.6308%" y="101" width="0.1001%" height="15" fill="rgb(246,171,24)" fg:x="1232" fg:w="2"/><text x="61.8808%" y="111.50"></text></g><g><title>block-stm-revm`dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.05%)</title><rect x="61.7309%" y="101" width="0.0500%" height="15" fill="rgb(215,142,24)" fg:x="1234" fg:w="1"/><text x="61.9809%" y="111.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (14 samples, 0.70%)</title><rect x="61.1306%" y="117" width="0.7004%" height="15" fill="rgb(250,187,7)" fg:x="1222" fg:w="14"/><text x="61.3806%" y="127.50"></text></g><g><title>block-stm-revm`dashmap::lock::RawRwLock::lock_shared_slow (1 samples, 0.05%)</title><rect x="61.7809%" y="101" width="0.0500%" height="15" fill="rgb(228,66,33)" fg:x="1235" fg:w="1"/><text x="62.0309%" y="111.50"></text></g><g><title>block-stm-revm`block_stm_revm::vm::VmDb::read (15 samples, 0.75%)</title><rect x="61.1306%" y="149" width="0.7504%" height="15" fill="rgb(234,215,21)" fg:x="1222" fg:w="15"/><text x="61.3806%" y="159.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (15 samples, 0.75%)</title><rect x="61.1306%" y="133" width="0.7504%" height="15" fill="rgb(222,191,20)" fg:x="1222" fg:w="15"/><text x="61.3806%" y="143.50"></text></g><g><title>block-stm-revm`dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.05%)</title><rect x="61.8309%" y="117" width="0.0500%" height="15" fill="rgb(245,79,54)" fg:x="1236" fg:w="1"/><text x="62.0809%" y="127.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="61.8809%" y="133" width="0.1001%" height="15" fill="rgb(240,10,37)" fg:x="1237" fg:w="2"/><text x="62.1309%" y="143.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.15%)</title><rect x="61.8809%" y="149" width="0.1501%" height="15" fill="rgb(214,192,32)" fg:x="1237" fg:w="3"/><text x="62.1309%" y="159.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="61.9810%" y="133" width="0.0500%" height="15" fill="rgb(209,36,54)" fg:x="1239" fg:w="1"/><text x="62.2310%" y="143.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (4 samples, 0.20%)</title><rect x="62.0810%" y="133" width="0.2001%" height="15" fill="rgb(220,10,11)" fg:x="1241" fg:w="4"/><text x="62.3310%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="62.2311%" y="117" width="0.0500%" height="15" fill="rgb(221,106,17)" fg:x="1244" fg:w="1"/><text x="62.4811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="62.2311%" y="101" width="0.0500%" height="15" fill="rgb(251,142,44)" fg:x="1244" fg:w="1"/><text x="62.4811%" y="111.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::initial_account_load (28 samples, 1.40%)</title><rect x="60.9305%" y="165" width="1.4007%" height="15" fill="rgb(238,13,15)" fg:x="1218" fg:w="28"/><text x="61.1805%" y="175.50"></text></g><g><title>block-stm-revm`revm_primitives::state::Account::new_not_existing (6 samples, 0.30%)</title><rect x="62.0310%" y="149" width="0.3002%" height="15" fill="rgb(208,107,27)" fg:x="1240" fg:w="6"/><text x="62.2810%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="62.2811%" y="133" width="0.0500%" height="15" fill="rgb(205,136,37)" fg:x="1245" fg:w="1"/><text x="62.5311%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="62.3312%" y="165" width="0.0500%" height="15" fill="rgb(250,205,27)" fg:x="1246" fg:w="1"/><text x="62.5812%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="62.3812%" y="165" width="0.0500%" height="15" fill="rgb(210,80,43)" fg:x="1247" fg:w="1"/><text x="62.6312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="62.4312%" y="165" width="0.0500%" height="15" fill="rgb(247,160,36)" fg:x="1248" fg:w="1"/><text x="62.6812%" y="175.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (138 samples, 6.90%)</title><rect x="56.3782%" y="181" width="6.9035%" height="15" fill="rgb(234,13,49)" fg:x="1127" fg:w="138"/><text x="56.6282%" y="191.50">block-stm..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.80%)</title><rect x="62.4812%" y="165" width="0.8004%" height="15" fill="rgb(234,122,0)" fg:x="1249" fg:w="16"/><text x="62.7312%" y="175.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.45%)</title><rect x="63.6318%" y="165" width="0.4502%" height="15" fill="rgb(207,146,38)" fg:x="1272" fg:w="9"/><text x="63.8818%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.90%)</title><rect x="63.2816%" y="181" width="0.9005%" height="15" fill="rgb(207,177,25)" fg:x="1265" fg:w="18"/><text x="63.5316%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (2 samples, 0.10%)</title><rect x="64.0820%" y="165" width="0.1001%" height="15" fill="rgb(211,178,42)" fg:x="1281" fg:w="2"/><text x="64.3320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="64.2321%" y="133" width="0.0500%" height="15" fill="rgb(230,69,54)" fg:x="1284" fg:w="1"/><text x="64.4821%" y="143.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.30%)</title><rect x="64.1821%" y="181" width="0.3002%" height="15" fill="rgb(214,135,41)" fg:x="1283" fg:w="6"/><text x="64.4321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.30%)</title><rect x="64.1821%" y="165" width="0.3002%" height="15" fill="rgb(237,67,25)" fg:x="1283" fg:w="6"/><text x="64.4321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.30%)</title><rect x="64.1821%" y="149" width="0.3002%" height="15" fill="rgb(222,189,50)" fg:x="1283" fg:w="6"/><text x="64.4321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.20%)</title><rect x="64.2821%" y="133" width="0.2001%" height="15" fill="rgb(245,148,34)" fg:x="1285" fg:w="4"/><text x="64.5321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.10%)</title><rect x="64.3822%" y="117" width="0.1001%" height="15" fill="rgb(222,29,6)" fg:x="1287" fg:w="2"/><text x="64.6322%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="64.6823%" y="149" width="0.0500%" height="15" fill="rgb(221,189,43)" fg:x="1293" fg:w="1"/><text x="64.9323%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="65.0325%" y="133" width="0.1001%" height="15" fill="rgb(207,36,27)" fg:x="1300" fg:w="2"/><text x="65.2825%" y="143.50"></text></g><g><title>block-stm-revm`__rdl_realloc (1 samples, 0.05%)</title><rect x="65.1826%" y="117" width="0.0500%" height="15" fill="rgb(217,90,24)" fg:x="1303" fg:w="1"/><text x="65.4326%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="65.2826%" y="69" width="0.0500%" height="15" fill="rgb(224,66,35)" fg:x="1305" fg:w="1"/><text x="65.5326%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.15%)</title><rect x="65.2326%" y="101" width="0.1501%" height="15" fill="rgb(221,13,50)" fg:x="1304" fg:w="3"/><text x="65.4826%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.10%)</title><rect x="65.2826%" y="85" width="0.1001%" height="15" fill="rgb(236,68,49)" fg:x="1305" fg:w="2"/><text x="65.5326%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="65.3327%" y="69" width="0.0500%" height="15" fill="rgb(229,146,28)" fg:x="1306" fg:w="1"/><text x="65.5827%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="65.3327%" y="53" width="0.0500%" height="15" fill="rgb(225,31,38)" fg:x="1306" fg:w="1"/><text x="65.5827%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.10%)</title><rect x="65.3827%" y="101" width="0.1001%" height="15" fill="rgb(250,208,3)" fg:x="1307" fg:w="2"/><text x="65.6327%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="65.4827%" y="69" width="0.0500%" height="15" fill="rgb(246,54,23)" fg:x="1309" fg:w="1"/><text x="65.7327%" y="79.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.45%)</title><rect x="65.1326%" y="133" width="0.4502%" height="15" fill="rgb(243,76,11)" fg:x="1302" fg:w="9"/><text x="65.3826%" y="143.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (7 samples, 0.35%)</title><rect x="65.2326%" y="117" width="0.3502%" height="15" fill="rgb(245,21,50)" fg:x="1304" fg:w="7"/><text x="65.4826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="65.4827%" y="101" width="0.1001%" height="15" fill="rgb(228,9,43)" fg:x="1309" fg:w="2"/><text x="65.7327%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="65.4827%" y="85" width="0.1001%" height="15" fill="rgb(208,100,47)" fg:x="1309" fg:w="2"/><text x="65.7327%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="65.5328%" y="69" width="0.0500%" height="15" fill="rgb(232,26,8)" fg:x="1310" fg:w="1"/><text x="65.7828%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="65.5328%" y="53" width="0.0500%" height="15" fill="rgb(216,166,38)" fg:x="1310" fg:w="1"/><text x="65.7828%" y="63.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (5 samples, 0.25%)</title><rect x="65.5828%" y="133" width="0.2501%" height="15" fill="rgb(251,202,51)" fg:x="1311" fg:w="5"/><text x="65.8328%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="65.8829%" y="117" width="0.0500%" height="15" fill="rgb(254,216,34)" fg:x="1317" fg:w="1"/><text x="66.1329%" y="127.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.20%)</title><rect x="66.1331%" y="101" width="0.2001%" height="15" fill="rgb(251,32,27)" fg:x="1322" fg:w="4"/><text x="66.3831%" y="111.50"></text></g><g><title>block-stm-revm`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (38 samples, 1.90%)</title><rect x="64.4822%" y="181" width="1.9010%" height="15" fill="rgb(208,127,28)" fg:x="1289" fg:w="38"/><text x="64.7322%" y="191.50">b..</text></g><g><title>block-stm-revm`core::ops::function::Fn::call (34 samples, 1.70%)</title><rect x="64.6823%" y="165" width="1.7009%" height="15" fill="rgb(224,137,22)" fg:x="1293" fg:w="34"/><text x="64.9323%" y="175.50"></text></g><g><title>block-stm-revm`revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (33 samples, 1.65%)</title><rect x="64.7324%" y="149" width="1.6508%" height="15" fill="rgb(254,70,32)" fg:x="1294" fg:w="33"/><text x="64.9824%" y="159.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (11 samples, 0.55%)</title><rect x="65.8329%" y="133" width="0.5503%" height="15" fill="rgb(229,75,37)" fg:x="1316" fg:w="11"/><text x="66.0829%" y="143.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.45%)</title><rect x="65.9330%" y="117" width="0.4502%" height="15" fill="rgb(252,64,23)" fg:x="1318" fg:w="9"/><text x="66.1830%" y="127.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="66.3332%" y="101" width="0.0500%" height="15" fill="rgb(232,162,48)" fg:x="1326" fg:w="1"/><text x="66.5832%" y="111.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::post_execution::reimburse_caller (1 samples, 0.05%)</title><rect x="66.3832%" y="181" width="0.0500%" height="15" fill="rgb(246,160,12)" fg:x="1327" fg:w="1"/><text x="66.6332%" y="191.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (1 samples, 0.05%)</title><rect x="66.3832%" y="165" width="0.0500%" height="15" fill="rgb(247,166,0)" fg:x="1327" fg:w="1"/><text x="66.6332%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.05%)</title><rect x="66.3832%" y="149" width="0.0500%" height="15" fill="rgb(249,219,21)" fg:x="1327" fg:w="1"/><text x="66.6332%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="66.4832%" y="133" width="0.0500%" height="15" fill="rgb(205,209,3)" fg:x="1329" fg:w="1"/><text x="66.7332%" y="143.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::post_execution::reward_beneficiary (3 samples, 0.15%)</title><rect x="66.4332%" y="181" width="0.1501%" height="15" fill="rgb(243,44,1)" fg:x="1328" fg:w="3"/><text x="66.6832%" y="191.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (3 samples, 0.15%)</title><rect x="66.4332%" y="165" width="0.1501%" height="15" fill="rgb(206,159,16)" fg:x="1328" fg:w="3"/><text x="66.6832%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.10%)</title><rect x="66.4832%" y="149" width="0.1001%" height="15" fill="rgb(244,77,30)" fg:x="1329" fg:w="2"/><text x="66.7332%" y="159.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="66.5333%" y="133" width="0.0500%" height="15" fill="rgb(218,69,12)" fg:x="1330" fg:w="1"/><text x="66.7833%" y="143.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (2 samples, 0.10%)</title><rect x="66.5833%" y="149" width="0.1001%" height="15" fill="rgb(212,87,7)" fg:x="1331" fg:w="2"/><text x="66.8333%" y="159.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::pre_execution::deduct_caller (7 samples, 0.35%)</title><rect x="66.5833%" y="181" width="0.3502%" height="15" fill="rgb(245,114,25)" fg:x="1331" fg:w="7"/><text x="66.8333%" y="191.50"></text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (7 samples, 0.35%)</title><rect x="66.5833%" y="165" width="0.3502%" height="15" fill="rgb(210,61,42)" fg:x="1331" fg:w="7"/><text x="66.8333%" y="175.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.25%)</title><rect x="66.6833%" y="149" width="0.2501%" height="15" fill="rgb(211,52,33)" fg:x="1333" fg:w="5"/><text x="66.9333%" y="159.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.25%)</title><rect x="66.6833%" y="133" width="0.2501%" height="15" fill="rgb(234,58,33)" fg:x="1333" fg:w="5"/><text x="66.9333%" y="143.50"></text></g><g><title>block-stm-revm`revm_interpreter::inner_models::CallInputs::new_boxed (1 samples, 0.05%)</title><rect x="66.9335%" y="181" width="0.0500%" height="15" fill="rgb(220,115,36)" fg:x="1338" fg:w="1"/><text x="67.1835%" y="191.50"></text></g><g><title>block-stm-revm`ruint::mul::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (1 samples, 0.05%)</title><rect x="66.9835%" y="181" width="0.0500%" height="15" fill="rgb(243,153,54)" fg:x="1339" fg:w="1"/><text x="67.2335%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="67.0335%" y="181" width="0.0500%" height="15" fill="rgb(251,47,18)" fg:x="1340" fg:w="1"/><text x="67.2835%" y="191.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (237 samples, 11.86%)</title><rect x="55.3277%" y="197" width="11.8559%" height="15" fill="rgb(242,102,42)" fg:x="1106" fg:w="237"/><text x="55.5777%" y="207.50">block-stm-revm`rev..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.10%)</title><rect x="67.0835%" y="181" width="0.1001%" height="15" fill="rgb(234,31,38)" fg:x="1341" fg:w="2"/><text x="67.3335%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="67.6338%" y="117" width="0.0500%" height="15" fill="rgb(221,117,51)" fg:x="1352" fg:w="1"/><text x="67.8838%" y="127.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.20%)</title><rect x="67.5338%" y="165" width="0.2001%" height="15" fill="rgb(212,20,18)" fg:x="1350" fg:w="4"/><text x="67.7838%" y="175.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (4 samples, 0.20%)</title><rect x="67.5338%" y="149" width="0.2001%" height="15" fill="rgb(245,133,36)" fg:x="1350" fg:w="4"/><text x="67.7838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.15%)</title><rect x="67.5838%" y="133" width="0.1501%" height="15" fill="rgb(212,6,19)" fg:x="1351" fg:w="3"/><text x="67.8338%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="67.6838%" y="117" width="0.0500%" height="15" fill="rgb(218,1,36)" fg:x="1353" fg:w="1"/><text x="67.9338%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="67.6838%" y="101" width="0.0500%" height="15" fill="rgb(246,84,54)" fg:x="1353" fg:w="1"/><text x="67.9338%" y="111.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (1 samples, 0.05%)</title><rect x="67.7339%" y="165" width="0.0500%" height="15" fill="rgb(242,110,6)" fg:x="1354" fg:w="1"/><text x="67.9839%" y="175.50"></text></g><g><title>block-stm-revm`__rdl_alloc (1 samples, 0.05%)</title><rect x="67.8839%" y="133" width="0.0500%" height="15" fill="rgb(214,47,5)" fg:x="1357" fg:w="1"/><text x="68.1339%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.20%)</title><rect x="68.0840%" y="69" width="0.2001%" height="15" fill="rgb(218,159,25)" fg:x="1361" fg:w="4"/><text x="68.3340%" y="79.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::finish_grow (8 samples, 0.40%)</title><rect x="67.9340%" y="133" width="0.4002%" height="15" fill="rgb(215,211,28)" fg:x="1358" fg:w="8"/><text x="68.1840%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.35%)</title><rect x="67.9840%" y="117" width="0.3502%" height="15" fill="rgb(238,59,32)" fg:x="1359" fg:w="7"/><text x="68.2340%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.30%)</title><rect x="68.0340%" y="101" width="0.3002%" height="15" fill="rgb(226,82,3)" fg:x="1360" fg:w="6"/><text x="68.2840%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.30%)</title><rect x="68.0340%" y="85" width="0.3002%" height="15" fill="rgb(240,164,32)" fg:x="1360" fg:w="6"/><text x="68.2840%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="68.2841%" y="69" width="0.0500%" height="15" fill="rgb(232,46,7)" fg:x="1365" fg:w="1"/><text x="68.5341%" y="79.50"></text></g><g><title>block-stm-revm`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.55%)</title><rect x="67.8339%" y="149" width="0.5503%" height="15" fill="rgb(229,129,53)" fg:x="1356" fg:w="11"/><text x="68.0839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="68.3342%" y="133" width="0.0500%" height="15" fill="rgb(234,188,29)" fg:x="1366" fg:w="1"/><text x="68.5842%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.15%)</title><rect x="68.6343%" y="117" width="0.1501%" height="15" fill="rgb(246,141,4)" fg:x="1372" fg:w="3"/><text x="68.8843%" y="127.50"></text></g><g><title>block-stm-revm`dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.05%)</title><rect x="68.7844%" y="117" width="0.0500%" height="15" fill="rgb(229,23,39)" fg:x="1375" fg:w="1"/><text x="69.0344%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.05%)</title><rect x="68.8344%" y="101" width="0.0500%" height="15" fill="rgb(206,12,3)" fg:x="1376" fg:w="1"/><text x="69.0844%" y="111.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (11 samples, 0.55%)</title><rect x="68.3842%" y="133" width="0.5503%" height="15" fill="rgb(252,226,20)" fg:x="1367" fg:w="11"/><text x="68.6342%" y="143.50"></text></g><g><title>block-stm-revm`dashmap::lock::RawRwLock::lock_shared_slow (2 samples, 0.10%)</title><rect x="68.8344%" y="117" width="0.1001%" height="15" fill="rgb(216,123,35)" fg:x="1376" fg:w="2"/><text x="69.0844%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.05%)</title><rect x="68.8844%" y="101" width="0.0500%" height="15" fill="rgb(212,68,40)" fg:x="1377" fg:w="1"/><text x="69.1344%" y="111.50"></text></g><g><title>block-stm-revm`block_stm_revm::vm::VmDb::read (24 samples, 1.20%)</title><rect x="67.7839%" y="165" width="1.2006%" height="15" fill="rgb(254,125,32)" fg:x="1355" fg:w="24"/><text x="68.0339%" y="175.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (12 samples, 0.60%)</title><rect x="68.3842%" y="149" width="0.6003%" height="15" fill="rgb(253,97,22)" fg:x="1367" fg:w="12"/><text x="68.6342%" y="159.50"></text></g><g><title>block-stm-revm`hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="68.9345%" y="133" width="0.0500%" height="15" fill="rgb(241,101,14)" fg:x="1378" fg:w="1"/><text x="69.1845%" y="143.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.10%)</title><rect x="68.9845%" y="149" width="0.1001%" height="15" fill="rgb(238,103,29)" fg:x="1379" fg:w="2"/><text x="69.2345%" y="159.50"></text></g><g><title>block-stm-revm`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="69.0845%" y="149" width="0.0500%" height="15" fill="rgb(233,195,47)" fg:x="1381" fg:w="1"/><text x="69.3345%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="69.1346%" y="117" width="0.0500%" height="15" fill="rgb(246,218,30)" fg:x="1382" fg:w="1"/><text x="69.3846%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.05%)</title><rect x="69.2346%" y="101" width="0.0500%" height="15" fill="rgb(219,145,47)" fg:x="1384" fg:w="1"/><text x="69.4846%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.05%)</title><rect x="69.2346%" y="85" width="0.0500%" height="15" fill="rgb(243,12,26)" fg:x="1384" fg:w="1"/><text x="69.4846%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.10%)</title><rect x="69.2846%" y="101" width="0.1001%" height="15" fill="rgb(214,87,16)" fg:x="1385" fg:w="2"/><text x="69.5346%" y="111.50"></text></g><g><title>block-stm-revm`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.35%)</title><rect x="69.1346%" y="149" width="0.3502%" height="15" fill="rgb(208,99,42)" fg:x="1382" fg:w="7"/><text x="69.3846%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.35%)</title><rect x="69.1346%" y="133" width="0.3502%" height="15" fill="rgb(253,99,2)" fg:x="1382" fg:w="7"/><text x="69.3846%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.30%)</title><rect x="69.1846%" y="117" width="0.3002%" height="15" fill="rgb(220,168,23)" fg:x="1383" fg:w="6"/><text x="69.4346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.10%)</title><rect x="69.3847%" y="101" width="0.1001%" height="15" fill="rgb(242,38,24)" fg:x="1387" fg:w="2"/><text x="69.6347%" y="111.50"></text></g><g><title>block-stm-revm`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 0.55%)</title><rect x="68.9845%" y="165" width="0.5503%" height="15" fill="rgb(225,182,9)" fg:x="1379" fg:w="11"/><text x="69.2345%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="69.4847%" y="149" width="0.0500%" height="15" fill="rgb(243,178,37)" fg:x="1389" fg:w="1"/><text x="69.7347%" y="159.50"></text></g><g><title>block-stm-revm`&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.05%)</title><rect x="69.6848%" y="149" width="0.0500%" height="15" fill="rgb(232,139,19)" fg:x="1393" fg:w="1"/><text x="69.9348%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="69.6848%" y="133" width="0.0500%" height="15" fill="rgb(225,201,24)" fg:x="1393" fg:w="1"/><text x="69.9348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="69.6848%" y="117" width="0.0500%" height="15" fill="rgb(221,47,46)" fg:x="1393" fg:w="1"/><text x="69.9348%" y="127.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="69.7349%" y="149" width="0.0500%" height="15" fill="rgb(249,23,13)" fg:x="1394" fg:w="1"/><text x="69.9849%" y="159.50"></text></g><g><title>block-stm-revm`__rdl_alloc (1 samples, 0.05%)</title><rect x="69.7849%" y="149" width="0.0500%" height="15" fill="rgb(219,9,5)" fg:x="1395" fg:w="1"/><text x="70.0349%" y="159.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::validation::validate_tx_against_state (58 samples, 2.90%)</title><rect x="67.1836%" y="197" width="2.9015%" height="15" fill="rgb(254,171,16)" fg:x="1343" fg:w="58"/><text x="67.4336%" y="207.50">bl..</text></g><g><title>block-stm-revm`revm::journaled_state::JournaledState::load_account (56 samples, 2.80%)</title><rect x="67.2836%" y="181" width="2.8014%" height="15" fill="rgb(230,171,20)" fg:x="1345" fg:w="56"/><text x="67.5336%" y="191.50">bl..</text></g><g><title>block-stm-revm`revm_primitives::state::Account::new_not_existing (11 samples, 0.55%)</title><rect x="69.5348%" y="165" width="0.5503%" height="15" fill="rgb(210,71,41)" fg:x="1390" fg:w="11"/><text x="69.7848%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.25%)</title><rect x="69.8349%" y="149" width="0.2501%" height="15" fill="rgb(206,173,20)" fg:x="1396" fg:w="5"/><text x="70.0849%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.05%)</title><rect x="70.0850%" y="197" width="0.0500%" height="15" fill="rgb(233,88,34)" fg:x="1401" fg:w="1"/><text x="70.3350%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.10%)</title><rect x="70.1351%" y="197" width="0.1001%" height="15" fill="rgb(223,209,46)" fg:x="1402" fg:w="2"/><text x="70.3851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.25%)</title><rect x="70.2351%" y="197" width="0.2501%" height="15" fill="rgb(250,43,18)" fg:x="1404" fg:w="5"/><text x="70.4851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.10%)</title><rect x="70.3852%" y="181" width="0.1001%" height="15" fill="rgb(208,13,10)" fg:x="1407" fg:w="2"/><text x="70.6352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="70.4352%" y="165" width="0.0500%" height="15" fill="rgb(212,200,36)" fg:x="1408" fg:w="1"/><text x="70.6852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.15%)</title><rect x="70.4852%" y="197" width="0.1501%" height="15" fill="rgb(225,90,30)" fg:x="1409" fg:w="3"/><text x="70.7352%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.15%)</title><rect x="70.4852%" y="181" width="0.1501%" height="15" fill="rgb(236,182,39)" fg:x="1409" fg:w="3"/><text x="70.7352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.10%)</title><rect x="70.5353%" y="165" width="0.1001%" height="15" fill="rgb(212,144,35)" fg:x="1410" fg:w="2"/><text x="70.7853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="70.5853%" y="149" width="0.0500%" height="15" fill="rgb(228,63,44)" fg:x="1411" fg:w="1"/><text x="70.8353%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.80%)</title><rect x="70.6353%" y="197" width="0.8004%" height="15" fill="rgb(228,109,6)" fg:x="1412" fg:w="16"/><text x="70.8853%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::vm::Vm::execute (548 samples, 27.41%)</title><rect x="44.0720%" y="213" width="27.4137%" height="15" fill="rgb(238,117,24)" fg:x="881" fg:w="548"/><text x="44.3220%" y="223.50">block-stm-revm`block_stm_revm::vm::Vm::execu..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="71.4357%" y="197" width="0.0500%" height="15" fill="rgb(242,26,26)" fg:x="1428" fg:w="1"/><text x="71.6857%" y="207.50"></text></g><g><title>block-stm-revm`core::ops::function::Fn::call (1 samples, 0.05%)</title><rect x="71.4857%" y="213" width="0.0500%" height="15" fill="rgb(221,92,48)" fg:x="1429" fg:w="1"/><text x="71.7357%" y="223.50"></text></g><g><title>block-stm-revm`core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;std::collections::hash::map::Iter&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;,alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;,block_stm_revm::vm::Vm::execute::{{closure}}&gt;&gt; (1 samples, 0.05%)</title><rect x="71.5358%" y="213" width="0.0500%" height="15" fill="rgb(209,209,32)" fg:x="1430" fg:w="1"/><text x="71.7858%" y="223.50"></text></g><g><title>block-stm-revm`dashmap::ncb (1 samples, 0.05%)</title><rect x="71.5858%" y="213" width="0.0500%" height="15" fill="rgb(221,70,22)" fg:x="1431" fg:w="1"/><text x="71.8358%" y="223.50"></text></g><g><title>block-stm-revm`revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (3 samples, 0.15%)</title><rect x="71.6358%" y="213" width="0.1501%" height="15" fill="rgb(248,145,5)" fg:x="1432" fg:w="3"/><text x="71.8858%" y="223.50"></text></g><g><title>block-stm-revm`revm::handler::mainnet::validation::validate_env (1 samples, 0.05%)</title><rect x="71.7859%" y="213" width="0.0500%" height="15" fill="rgb(226,116,26)" fg:x="1435" fg:w="1"/><text x="72.0359%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.15%)</title><rect x="71.8359%" y="213" width="0.1501%" height="15" fill="rgb(244,5,17)" fg:x="1436" fg:w="3"/><text x="72.0859%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.05%)</title><rect x="71.9860%" y="213" width="0.0500%" height="15" fill="rgb(252,159,33)" fg:x="1439" fg:w="1"/><text x="72.2360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.15%)</title><rect x="72.0360%" y="213" width="0.1501%" height="15" fill="rgb(206,71,0)" fg:x="1440" fg:w="3"/><text x="72.2860%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.95%)</title><rect x="72.1861%" y="213" width="0.9505%" height="15" fill="rgb(233,118,54)" fg:x="1443" fg:w="19"/><text x="72.4361%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (71 samples, 3.55%)</title><rect x="73.1366%" y="213" width="3.5518%" height="15" fill="rgb(234,83,48)" fg:x="1462" fg:w="71"/><text x="73.3866%" y="223.50">libs..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (71 samples, 3.55%)</title><rect x="73.1366%" y="197" width="3.5518%" height="15" fill="rgb(228,3,54)" fg:x="1462" fg:w="71"/><text x="73.3866%" y="207.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (58 samples, 2.90%)</title><rect x="76.6883%" y="213" width="2.9015%" height="15" fill="rgb(226,155,13)" fg:x="1533" fg:w="58"/><text x="76.9383%" y="223.50">li..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (57 samples, 2.85%)</title><rect x="76.7384%" y="197" width="2.8514%" height="15" fill="rgb(241,28,37)" fg:x="1534" fg:w="57"/><text x="76.9884%" y="207.50">li..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.15%)</title><rect x="79.5898%" y="213" width="0.1501%" height="15" fill="rgb(233,93,10)" fg:x="1591" fg:w="3"/><text x="79.8398%" y="223.50"></text></g><g><title>block-stm-revm`block_stm_revm::block_stm::try_execute (920 samples, 46.02%)</title><rect x="33.9670%" y="229" width="46.0230%" height="15" fill="rgb(225,113,19)" fg:x="679" fg:w="920"/><text x="34.2170%" y="239.50">block-stm-revm`block_stm_revm::block_stm::try_execute</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.25%)</title><rect x="79.7399%" y="213" width="0.2501%" height="15" fill="rgb(241,2,18)" fg:x="1594" fg:w="5"/><text x="79.9899%" y="223.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (2 samples, 0.10%)</title><rect x="79.9900%" y="229" width="0.1001%" height="15" fill="rgb(228,207,21)" fg:x="1599" fg:w="2"/><text x="80.2400%" y="239.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.40%)</title><rect x="80.6903%" y="213" width="0.4002%" height="15" fill="rgb(213,211,35)" fg:x="1613" fg:w="8"/><text x="80.9403%" y="223.50"></text></g><g><title>block-stm-revm`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.95%)</title><rect x="83.7419%" y="181" width="0.9505%" height="15" fill="rgb(209,83,10)" fg:x="1674" fg:w="19"/><text x="83.9919%" y="191.50"></text></g><g><title>block-stm-revm`core::hash::Hasher::write_usize (9 samples, 0.45%)</title><rect x="84.6923%" y="181" width="0.4502%" height="15" fill="rgb(209,164,1)" fg:x="1693" fg:w="9"/><text x="84.9423%" y="191.50"></text></g><g><title>block-stm-revm`dashmap::DashMap&lt;K,V,S&gt;::hash_usize (7 samples, 0.35%)</title><rect x="85.1426%" y="181" width="0.3502%" height="15" fill="rgb(213,184,43)" fg:x="1702" fg:w="7"/><text x="85.3926%" y="191.50"></text></g><g><title>block-stm-revm`dashmap::lock::RawRwLock::lock_shared_slow (5 samples, 0.25%)</title><rect x="85.4927%" y="181" width="0.2501%" height="15" fill="rgb(231,61,34)" fg:x="1709" fg:w="5"/><text x="85.7427%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.05%)</title><rect x="85.6928%" y="165" width="0.0500%" height="15" fill="rgb(235,75,3)" fg:x="1713" fg:w="1"/><text x="85.9428%" y="175.50"></text></g><g><title>block-stm-revm`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (83 samples, 4.15%)</title><rect x="81.8909%" y="197" width="4.1521%" height="15" fill="rgb(220,106,47)" fg:x="1637" fg:w="83"/><text x="82.1409%" y="207.50">block..</text></g><g><title>block-stm-revm`hashbrown::map::make_hash (6 samples, 0.30%)</title><rect x="85.7429%" y="181" width="0.3002%" height="15" fill="rgb(210,196,33)" fg:x="1714" fg:w="6"/><text x="85.9929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="87.2436%" y="181" width="0.1001%" height="15" fill="rgb(229,154,42)" fg:x="1744" fg:w="2"/><text x="87.4936%" y="191.50"></text></g><g><title>block-stm-revm`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 1.35%)</title><rect x="86.0430%" y="197" width="1.3507%" height="15" fill="rgb(228,114,26)" fg:x="1720" fg:w="27"/><text x="86.2930%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="87.3437%" y="181" width="0.0500%" height="15" fill="rgb(208,144,1)" fg:x="1746" fg:w="1"/><text x="87.5937%" y="191.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="87.3937%" y="197" width="0.0500%" height="15" fill="rgb(239,112,37)" fg:x="1747" fg:w="1"/><text x="87.6437%" y="207.50"></text></g><g><title>block-stm-revm`DYLD-STUB$$malloc (2 samples, 0.10%)</title><rect x="87.4437%" y="197" width="0.1001%" height="15" fill="rgb(210,96,50)" fg:x="1748" fg:w="2"/><text x="87.6937%" y="207.50"></text></g><g><title>block-stm-revm`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.15%)</title><rect x="87.5438%" y="197" width="0.1501%" height="15" fill="rgb(222,178,2)" fg:x="1750" fg:w="3"/><text x="87.7938%" y="207.50"></text></g><g><title>block-stm-revm`dashmap::DashMap&lt;K,V,S&gt;::hash_usize (2 samples, 0.10%)</title><rect x="87.6938%" y="197" width="0.1001%" height="15" fill="rgb(226,74,18)" fg:x="1753" fg:w="2"/><text x="87.9438%" y="207.50"></text></g><g><title>block-stm-revm`hashbrown::map::make_hash (3 samples, 0.15%)</title><rect x="87.7939%" y="197" width="0.1501%" height="15" fill="rgb(225,67,54)" fg:x="1755" fg:w="3"/><text x="88.0439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="87.9440%" y="197" width="0.0500%" height="15" fill="rgb(251,92,32)" fg:x="1758" fg:w="1"/><text x="88.1940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.25%)</title><rect x="87.9940%" y="197" width="0.2501%" height="15" fill="rgb(228,149,22)" fg:x="1759" fg:w="5"/><text x="88.2440%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="88.2441%" y="197" width="0.1001%" height="15" fill="rgb(243,54,13)" fg:x="1764" fg:w="2"/><text x="88.4941%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.45%)</title><rect x="88.3442%" y="197" width="0.4502%" height="15" fill="rgb(243,180,28)" fg:x="1766" fg:w="9"/><text x="88.5942%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::read (156 samples, 7.80%)</title><rect x="81.0905%" y="213" width="7.8039%" height="15" fill="rgb(208,167,24)" fg:x="1621" fg:w="156"/><text x="81.3405%" y="223.50">block-stm-r..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.10%)</title><rect x="88.7944%" y="197" width="0.1001%" height="15" fill="rgb(245,73,45)" fg:x="1775" fg:w="2"/><text x="89.0444%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (16 samples, 0.80%)</title><rect x="88.8944%" y="213" width="0.8004%" height="15" fill="rgb(237,203,48)" fg:x="1777" fg:w="16"/><text x="89.1444%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (16 samples, 0.80%)</title><rect x="88.8944%" y="197" width="0.8004%" height="15" fill="rgb(211,197,16)" fg:x="1777" fg:w="16"/><text x="89.1444%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (15 samples, 0.75%)</title><rect x="89.6948%" y="213" width="0.7504%" height="15" fill="rgb(243,99,51)" fg:x="1793" fg:w="15"/><text x="89.9448%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (15 samples, 0.75%)</title><rect x="89.6948%" y="197" width="0.7504%" height="15" fill="rgb(215,123,29)" fg:x="1793" fg:w="15"/><text x="89.9448%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.15%)</title><rect x="90.4452%" y="213" width="0.1501%" height="15" fill="rgb(239,186,37)" fg:x="1808" fg:w="3"/><text x="90.6952%" y="223.50"></text></g><g><title>block-stm-revm`block_stm_revm::mv_memory::MvMemory::validate_read_set (211 samples, 10.56%)</title><rect x="80.0900%" y="229" width="10.5553%" height="15" fill="rgb(252,136,39)" fg:x="1601" fg:w="211"/><text x="80.3400%" y="239.50">block-stm-revm`..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="90.5953%" y="213" width="0.0500%" height="15" fill="rgb(223,213,32)" fg:x="1811" fg:w="1"/><text x="90.8453%" y="223.50"></text></g><g><title>block-stm-revm`&lt;std::sys::unix::locks::pthread_mutex::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::cancel_init (1 samples, 0.05%)</title><rect x="95.1976%" y="213" width="0.0500%" height="15" fill="rgb(233,115,5)" fg:x="1903" fg:w="1"/><text x="95.4476%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.05%)</title><rect x="95.1976%" y="197" width="0.0500%" height="15" fill="rgb(207,226,44)" fg:x="1903" fg:w="1"/><text x="95.4476%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="95.5478%" y="197" width="0.0500%" height="15" fill="rgb(208,126,0)" fg:x="1910" fg:w="1"/><text x="95.7978%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.15%)</title><rect x="95.5978%" y="197" width="0.1501%" height="15" fill="rgb(244,66,21)" fg:x="1911" fg:w="3"/><text x="95.8478%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (3 samples, 0.15%)</title><rect x="95.7479%" y="197" width="0.1501%" height="15" fill="rgb(222,97,12)" fg:x="1914" fg:w="3"/><text x="95.9979%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.35%)</title><rect x="95.8979%" y="197" width="0.3502%" height="15" fill="rgb(219,213,19)" fg:x="1917" fg:w="7"/><text x="96.1479%" y="207.50"></text></g><g><title>block-stm-revm`block_stm_revm::scheduler::Scheduler::try_incarnate (22 samples, 1.10%)</title><rect x="95.2476%" y="213" width="1.1006%" height="15" fill="rgb(252,169,30)" fg:x="1904" fg:w="22"/><text x="95.4976%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_settype (2 samples, 0.10%)</title><rect x="96.2481%" y="197" width="0.1001%" height="15" fill="rgb(206,32,51)" fg:x="1924" fg:w="2"/><text x="96.4981%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="96.3482%" y="213" width="0.0500%" height="15" fill="rgb(250,172,42)" fg:x="1926" fg:w="1"/><text x="96.5982%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (50 samples, 2.50%)</title><rect x="96.3982%" y="213" width="2.5013%" height="15" fill="rgb(209,34,43)" fg:x="1927" fg:w="50"/><text x="96.6482%" y="223.50">li..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (49 samples, 2.45%)</title><rect x="96.4482%" y="197" width="2.4512%" height="15" fill="rgb(223,11,35)" fg:x="1928" fg:w="49"/><text x="96.6982%" y="207.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3 samples, 0.15%)</title><rect x="98.8994%" y="213" width="0.1501%" height="15" fill="rgb(251,219,26)" fg:x="1977" fg:w="3"/><text x="99.1494%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (3 samples, 0.15%)</title><rect x="98.8994%" y="197" width="0.1501%" height="15" fill="rgb(231,119,3)" fg:x="1977" fg:w="3"/><text x="99.1494%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (1 samples, 0.05%)</title><rect x="99.0495%" y="213" width="0.0500%" height="15" fill="rgb(216,97,11)" fg:x="1980" fg:w="1"/><text x="99.2995%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.45%)</title><rect x="99.0995%" y="213" width="0.4502%" height="15" fill="rgb(223,59,9)" fg:x="1981" fg:w="9"/><text x="99.3495%" y="223.50"></text></g><g><title>block-stm-revm`block_stm_revm::scheduler::Scheduler::next_task (184 samples, 9.20%)</title><rect x="90.6453%" y="229" width="9.2046%" height="15" fill="rgb(233,93,31)" fg:x="1812" fg:w="184"/><text x="90.8953%" y="239.50">block-stm-rev..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.30%)</title><rect x="99.5498%" y="213" width="0.3002%" height="15" fill="rgb(239,81,33)" fg:x="1990" fg:w="6"/><text x="99.7998%" y="223.50"></text></g><g><title>all (1,999 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(213,120,34)" fg:x="0" fg:w="1999"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,366 samples, 68.33%)</title><rect x="31.6658%" y="309" width="68.3342%" height="15" fill="rgb(243,49,53)" fg:x="633" fg:w="1366"/><text x="31.9158%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,366 samples, 68.33%)</title><rect x="31.6658%" y="293" width="68.3342%" height="15" fill="rgb(247,216,33)" fg:x="633" fg:w="1366"/><text x="31.9158%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>block-stm-revm`std::sys::unix::thread::Thread::new::thread_start (1,366 samples, 68.33%)</title><rect x="31.6658%" y="277" width="68.3342%" height="15" fill="rgb(226,26,14)" fg:x="633" fg:w="1366"/><text x="31.9158%" y="287.50">block-stm-revm`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>block-stm-revm`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,366 samples, 68.33%)</title><rect x="31.6658%" y="261" width="68.3342%" height="15" fill="rgb(215,49,53)" fg:x="633" fg:w="1366"/><text x="31.9158%" y="271.50">block-stm-revm`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>block-stm-revm`std::sys_common::backtrace::__rust_begin_short_backtrace (1,364 samples, 68.23%)</title><rect x="31.7659%" y="245" width="68.2341%" height="15" fill="rgb(245,162,40)" fg:x="635" fg:w="1364"/><text x="32.0159%" y="255.50">block-stm-revm`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.15%)</title><rect x="99.8499%" y="229" width="0.1501%" height="15" fill="rgb(229,68,17)" fg:x="1996" fg:w="3"/><text x="100.0999%" y="239.50"></text></g></svg></svg>