<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="8472"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.0000%" y="1045" width="0.0118%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0118%" y="1013" width="0.0118%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2618%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1 samples, 0.01%)</title><rect x="0.0118%" y="997" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2618%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0118%" y="981" width="0.0118%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2618%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="0.0118%" y="965" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2618%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.01%)</title><rect x="0.0118%" y="949" width="0.0118%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2618%" y="959.50"></text></g><g><title>block_stm_revm::vm::Vm::execute::_{{closure}} (1 samples, 0.01%)</title><rect x="0.0118%" y="933" width="0.0118%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2618%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="0.0118%" y="917" width="0.0118%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2618%" y="927.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="0.0118%" y="901" width="0.0118%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2618%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.0118%" y="1045" width="0.0236%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.2618%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.0118%" y="1029" width="0.0236%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.2618%" y="1039.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.01%)</title><rect x="0.0236%" y="1013" width="0.0118%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2736%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.0236%" y="997" width="0.0118%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2736%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.0236%" y="981" width="0.0118%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2736%" y="991.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.0236%" y="965" width="0.0118%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2736%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue),alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="0.0236%" y="949" width="0.0118%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2736%" y="959.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.0236%" y="933" width="0.0118%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2736%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.0236%" y="917" width="0.0118%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2736%" y="927.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.0236%" y="901" width="0.0118%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2736%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="0.0236%" y="885" width="0.0118%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2736%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="0.0236%" y="869" width="0.0118%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2736%" y="879.50"></text></g><g><title>[block-stm-revm] (3 samples, 0.04%)</title><rect x="0.0354%" y="1029" width="0.0354%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="3"/><text x="0.2854%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="0.0354%" y="1013" width="0.0354%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="3"/><text x="0.2854%" y="1023.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="0.0708%" y="1029" width="0.0236%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="2"/><text x="0.3208%" y="1039.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="0.0944%" y="1029" width="0.0472%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="4"/><text x="0.3444%" y="1039.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="0.1416%" y="1029" width="0.0708%" height="15" fill="rgb(249,31,29)" fg:x="12" fg:w="6"/><text x="0.3916%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="0.2125%" y="1029" width="0.0118%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="1"/><text x="0.4625%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="0.2243%" y="1029" width="0.0118%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="1"/><text x="0.4743%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="0.2243%" y="1013" width="0.0118%" height="15" fill="rgb(214,148,48)" fg:x="19" fg:w="1"/><text x="0.4743%" y="1023.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (1 samples, 0.01%)</title><rect x="0.2243%" y="997" width="0.0118%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="1"/><text x="0.4743%" y="1007.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (1 samples, 0.01%)</title><rect x="0.2243%" y="981" width="0.0118%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="1"/><text x="0.4743%" y="991.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (1 samples, 0.01%)</title><rect x="0.2243%" y="965" width="0.0118%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="1"/><text x="0.4743%" y="975.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="0.2243%" y="949" width="0.0118%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="0.4743%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="0.2243%" y="933" width="0.0118%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="0.4743%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="0.2243%" y="917" width="0.0118%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="1"/><text x="0.4743%" y="927.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.2243%" y="901" width="0.0118%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="1"/><text x="0.4743%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="0.2243%" y="885" width="0.0118%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="1"/><text x="0.4743%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="0.2243%" y="869" width="0.0118%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="1"/><text x="0.4743%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.2361%" y="1029" width="0.0118%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="0.4861%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.2361%" y="1013" width="0.0118%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="0.4861%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.2361%" y="997" width="0.0118%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="0.4861%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.2715%" y="981" width="0.0236%" height="15" fill="rgb(208,69,12)" fg:x="23" fg:w="2"/><text x="0.5215%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.2715%" y="965" width="0.0236%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="2"/><text x="0.5215%" y="975.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="0.2715%" y="949" width="0.0236%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="2"/><text x="0.5215%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="0.2715%" y="933" width="0.0236%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="2"/><text x="0.5215%" y="943.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="0.2715%" y="917" width="0.0236%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="2"/><text x="0.5215%" y="927.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="0.2715%" y="901" width="0.0236%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="2"/><text x="0.5215%" y="911.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (5 samples, 0.06%)</title><rect x="0.2479%" y="1029" width="0.0590%" height="15" fill="rgb(250,191,14)" fg:x="21" fg:w="5"/><text x="0.4979%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.06%)</title><rect x="0.2479%" y="1013" width="0.0590%" height="15" fill="rgb(239,60,40)" fg:x="21" fg:w="5"/><text x="0.4979%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="0.2479%" y="997" width="0.0590%" height="15" fill="rgb(206,27,48)" fg:x="21" fg:w="5"/><text x="0.4979%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="0.2951%" y="981" width="0.0118%" height="15" fill="rgb(225,35,8)" fg:x="25" fg:w="1"/><text x="0.5451%" y="991.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="0.2951%" y="965" width="0.0118%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="1"/><text x="0.5451%" y="975.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="0.3069%" y="1029" width="0.0472%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="4"/><text x="0.5569%" y="1039.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="0.3069%" y="1013" width="0.0472%" height="15" fill="rgb(231,138,38)" fg:x="26" fg:w="4"/><text x="0.5569%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.02%)</title><rect x="0.3305%" y="997" width="0.0236%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="2"/><text x="0.5805%" y="1007.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.02%)</title><rect x="0.3305%" y="981" width="0.0236%" height="15" fill="rgb(251,118,11)" fg:x="28" fg:w="2"/><text x="0.5805%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="0.3541%" y="1029" width="0.0118%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="1"/><text x="0.6041%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (1 samples, 0.01%)</title><rect x="0.3659%" y="1029" width="0.0118%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="0.6159%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (1 samples, 0.01%)</title><rect x="0.3659%" y="1013" width="0.0118%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="1"/><text x="0.6159%" y="1023.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (1 samples, 0.01%)</title><rect x="0.3659%" y="997" width="0.0118%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="1"/><text x="0.6159%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="0.3659%" y="981" width="0.0118%" height="15" fill="rgb(248,47,43)" fg:x="31" fg:w="1"/><text x="0.6159%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (1 samples, 0.01%)</title><rect x="0.3777%" y="1029" width="0.0118%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="1"/><text x="0.6277%" y="1039.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (1 samples, 0.01%)</title><rect x="0.3777%" y="1013" width="0.0118%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="1"/><text x="0.6277%" y="1023.50"></text></g><g><title>[[heap]] (31 samples, 0.37%)</title><rect x="0.0354%" y="1045" width="0.3659%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="31"/><text x="0.2854%" y="1055.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="0.3895%" y="1029" width="0.0118%" height="15" fill="rgb(234,67,33)" fg:x="33" fg:w="1"/><text x="0.6395%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.4013%" y="997" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="34" fg:w="1"/><text x="0.6513%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.4013%" y="981" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="34" fg:w="1"/><text x="0.6513%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="0.4013%" y="965" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="34" fg:w="1"/><text x="0.6513%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="0.4013%" y="949" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="34" fg:w="1"/><text x="0.6513%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="0.4013%" y="933" width="0.0118%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="0.6513%" y="943.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="0.4013%" y="917" width="0.0118%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="1"/><text x="0.6513%" y="927.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.4013%" y="1029" width="0.0236%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="2"/><text x="0.6513%" y="1039.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (2 samples, 0.02%)</title><rect x="0.4013%" y="1013" width="0.0236%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="2"/><text x="0.6513%" y="1023.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="0.4131%" y="997" width="0.0118%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="0.6631%" y="1007.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (1 samples, 0.01%)</title><rect x="0.4131%" y="981" width="0.0118%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="1"/><text x="0.6631%" y="991.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="0.4131%" y="965" width="0.0118%" height="15" fill="rgb(207,117,47)" fg:x="35" fg:w="1"/><text x="0.6631%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="0.4249%" y="1029" width="0.0354%" height="15" fill="rgb(249,43,39)" fg:x="36" fg:w="3"/><text x="0.6749%" y="1039.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="0.4603%" y="1029" width="0.0118%" height="15" fill="rgb(209,38,44)" fg:x="39" fg:w="1"/><text x="0.7103%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.4721%" y="1029" width="0.0236%" height="15" fill="rgb(236,212,23)" fg:x="40" fg:w="2"/><text x="0.7221%" y="1039.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="0.4958%" y="1029" width="0.0236%" height="15" fill="rgb(242,79,21)" fg:x="42" fg:w="2"/><text x="0.7458%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.07%)</title><rect x="0.5194%" y="1029" width="0.0708%" height="15" fill="rgb(211,96,35)" fg:x="44" fg:w="6"/><text x="0.7694%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="0.5194%" y="1013" width="0.0708%" height="15" fill="rgb(253,215,40)" fg:x="44" fg:w="6"/><text x="0.7694%" y="1023.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (1 samples, 0.01%)</title><rect x="0.5902%" y="1029" width="0.0118%" height="15" fill="rgb(211,81,21)" fg:x="50" fg:w="1"/><text x="0.8402%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="0.6020%" y="933" width="0.0236%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="2"/><text x="0.8520%" y="943.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="0.6020%" y="917" width="0.0236%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="2"/><text x="0.8520%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="0.6020%" y="997" width="0.0590%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="5"/><text x="0.8520%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="0.6020%" y="981" width="0.0590%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="5"/><text x="0.8520%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.06%)</title><rect x="0.6020%" y="965" width="0.0590%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="5"/><text x="0.8520%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.06%)</title><rect x="0.6020%" y="949" width="0.0590%" height="15" fill="rgb(210,16,53)" fg:x="51" fg:w="5"/><text x="0.8520%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="0.6256%" y="933" width="0.0354%" height="15" fill="rgb(235,124,12)" fg:x="53" fg:w="3"/><text x="0.8756%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="0.6020%" y="1029" width="0.0708%" height="15" fill="rgb(224,169,11)" fg:x="51" fg:w="6"/><text x="0.8520%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="0.6020%" y="1013" width="0.0708%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="6"/><text x="0.8520%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.6610%" y="997" width="0.0118%" height="15" fill="rgb(242,216,29)" fg:x="56" fg:w="1"/><text x="0.9110%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="0.6728%" y="1029" width="0.0118%" height="15" fill="rgb(230,116,27)" fg:x="57" fg:w="1"/><text x="0.9228%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (1 samples, 0.01%)</title><rect x="0.6728%" y="1013" width="0.0118%" height="15" fill="rgb(228,99,48)" fg:x="57" fg:w="1"/><text x="0.9228%" y="1023.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.6728%" y="997" width="0.0118%" height="15" fill="rgb(253,11,6)" fg:x="57" fg:w="1"/><text x="0.9228%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.6728%" y="981" width="0.0118%" height="15" fill="rgb(247,143,39)" fg:x="57" fg:w="1"/><text x="0.9228%" y="991.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.6728%" y="965" width="0.0118%" height="15" fill="rgb(236,97,10)" fg:x="57" fg:w="1"/><text x="0.9228%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6846%" y="1029" width="0.0118%" height="15" fill="rgb(233,208,19)" fg:x="58" fg:w="1"/><text x="0.9346%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6846%" y="1013" width="0.0118%" height="15" fill="rgb(216,164,2)" fg:x="58" fg:w="1"/><text x="0.9346%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.6846%" y="997" width="0.0118%" height="15" fill="rgb(220,129,5)" fg:x="58" fg:w="1"/><text x="0.9346%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="0.6846%" y="981" width="0.0118%" height="15" fill="rgb(242,17,10)" fg:x="58" fg:w="1"/><text x="0.9346%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="0.6846%" y="965" width="0.0118%" height="15" fill="rgb(242,107,0)" fg:x="58" fg:w="1"/><text x="0.9346%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6964%" y="1029" width="0.0118%" height="15" fill="rgb(251,28,31)" fg:x="59" fg:w="1"/><text x="0.9464%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::handler::register::HandleRegisters&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6964%" y="1013" width="0.0118%" height="15" fill="rgb(233,223,10)" fg:x="59" fg:w="1"/><text x="0.9464%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::execution::call_return&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.7082%" y="1029" width="0.0118%" height="15" fill="rgb(215,21,27)" fg:x="60" fg:w="1"/><text x="0.9582%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::validation::validate_env&lt;revm_primitives::specification::MergeSpec,revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.7200%" y="1029" width="0.0118%" height="15" fill="rgb(232,23,21)" fg:x="61" fg:w="1"/><text x="0.9700%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.05%)</title><rect x="0.7318%" y="1029" width="0.0472%" height="15" fill="rgb(244,5,23)" fg:x="62" fg:w="4"/><text x="0.9818%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="0.7554%" y="1013" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="64" fg:w="2"/><text x="1.0054%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="0.7790%" y="981" width="0.0118%" height="15" fill="rgb(247,70,30)" fg:x="66" fg:w="1"/><text x="1.0290%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="0.7790%" y="1029" width="0.0236%" height="15" fill="rgb(212,68,19)" fg:x="66" fg:w="2"/><text x="1.0290%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.02%)</title><rect x="0.7790%" y="1013" width="0.0236%" height="15" fill="rgb(240,187,13)" fg:x="66" fg:w="2"/><text x="1.0290%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.02%)</title><rect x="0.7790%" y="997" width="0.0236%" height="15" fill="rgb(223,113,26)" fg:x="66" fg:w="2"/><text x="1.0290%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.01%)</title><rect x="0.7908%" y="981" width="0.0118%" height="15" fill="rgb(206,192,2)" fg:x="67" fg:w="1"/><text x="1.0408%" y="991.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.01%)</title><rect x="0.7908%" y="965" width="0.0118%" height="15" fill="rgb(241,108,4)" fg:x="67" fg:w="1"/><text x="1.0408%" y="975.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="0.7908%" y="949" width="0.0118%" height="15" fill="rgb(247,173,49)" fg:x="67" fg:w="1"/><text x="1.0408%" y="959.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (1 samples, 0.01%)</title><rect x="0.8026%" y="1029" width="0.0118%" height="15" fill="rgb(224,114,35)" fg:x="68" fg:w="1"/><text x="1.0526%" y="1039.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="0.8144%" y="1029" width="0.0236%" height="15" fill="rgb(245,159,27)" fg:x="69" fg:w="2"/><text x="1.0644%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.8263%" y="1013" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="70" fg:w="1"/><text x="1.0763%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.8263%" y="997" width="0.0118%" height="15" fill="rgb(236,23,11)" fg:x="70" fg:w="1"/><text x="1.0763%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="0.8263%" y="981" width="0.0118%" height="15" fill="rgb(205,117,38)" fg:x="70" fg:w="1"/><text x="1.0763%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="0.8263%" y="965" width="0.0118%" height="15" fill="rgb(237,72,25)" fg:x="70" fg:w="1"/><text x="1.0763%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="0.8263%" y="949" width="0.0118%" height="15" fill="rgb(244,70,9)" fg:x="70" fg:w="1"/><text x="1.0763%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="0.8263%" y="933" width="0.0118%" height="15" fill="rgb(217,125,39)" fg:x="70" fg:w="1"/><text x="1.0763%" y="943.50"></text></g><g><title>[[stack]] (38 samples, 0.45%)</title><rect x="0.4013%" y="1045" width="0.4485%" height="15" fill="rgb(235,36,10)" fg:x="34" fg:w="38"/><text x="0.6513%" y="1055.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (1 samples, 0.01%)</title><rect x="0.8381%" y="1029" width="0.0118%" height="15" fill="rgb(251,123,47)" fg:x="71" fg:w="1"/><text x="1.0881%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.8499%" y="1029" width="0.0118%" height="15" fill="rgb(221,13,13)" fg:x="72" fg:w="1"/><text x="1.0999%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.01%)</title><rect x="0.8499%" y="1013" width="0.0118%" height="15" fill="rgb(238,131,9)" fg:x="72" fg:w="1"/><text x="1.0999%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.8499%" y="997" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="72" fg:w="1"/><text x="1.0999%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.8499%" y="981" width="0.0118%" height="15" fill="rgb(245,182,24)" fg:x="72" fg:w="1"/><text x="1.0999%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.8499%" y="965" width="0.0118%" height="15" fill="rgb(242,14,37)" fg:x="72" fg:w="1"/><text x="1.0999%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="0.8499%" y="949" width="0.0118%" height="15" fill="rgb(246,228,12)" fg:x="72" fg:w="1"/><text x="1.0999%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="0.8499%" y="933" width="0.0118%" height="15" fill="rgb(213,55,15)" fg:x="72" fg:w="1"/><text x="1.0999%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="0.8499%" y="917" width="0.0118%" height="15" fill="rgb(209,9,3)" fg:x="72" fg:w="1"/><text x="1.0999%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.8499%" y="901" width="0.0118%" height="15" fill="rgb(230,59,30)" fg:x="72" fg:w="1"/><text x="1.0999%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="0.8499%" y="885" width="0.0118%" height="15" fill="rgb(209,121,21)" fg:x="72" fg:w="1"/><text x="1.0999%" y="895.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="0.8499%" y="869" width="0.0118%" height="15" fill="rgb(220,109,13)" fg:x="72" fg:w="1"/><text x="1.0999%" y="879.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount::_{{closure}} (1 samples, 0.01%)</title><rect x="0.8499%" y="853" width="0.0118%" height="15" fill="rgb(232,18,1)" fg:x="72" fg:w="1"/><text x="1.0999%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.01%)</title><rect x="0.8499%" y="837" width="0.0118%" height="15" fill="rgb(215,41,42)" fg:x="72" fg:w="1"/><text x="1.0999%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="0.8499%" y="821" width="0.0118%" height="15" fill="rgb(224,123,36)" fg:x="72" fg:w="1"/><text x="1.0999%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.8499%" y="805" width="0.0118%" height="15" fill="rgb(240,125,3)" fg:x="72" fg:w="1"/><text x="1.0999%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (1 samples, 0.01%)</title><rect x="0.8499%" y="789" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="72" fg:w="1"/><text x="1.0999%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.8617%" y="1029" width="0.0118%" height="15" fill="rgb(205,185,37)" fg:x="73" fg:w="1"/><text x="1.1117%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="0.8617%" y="1013" width="0.0118%" height="15" fill="rgb(238,207,15)" fg:x="73" fg:w="1"/><text x="1.1117%" y="1023.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (2 samples, 0.02%)</title><rect x="0.8735%" y="1029" width="0.0236%" height="15" fill="rgb(213,199,42)" fg:x="74" fg:w="2"/><text x="1.1235%" y="1039.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (2 samples, 0.02%)</title><rect x="0.8735%" y="1013" width="0.0236%" height="15" fill="rgb(235,201,11)" fg:x="74" fg:w="2"/><text x="1.1235%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.8735%" y="997" width="0.0236%" height="15" fill="rgb(207,46,11)" fg:x="74" fg:w="2"/><text x="1.1235%" y="1007.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.8971%" y="1013" width="0.0118%" height="15" fill="rgb(241,35,35)" fg:x="76" fg:w="1"/><text x="1.1471%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="0.8971%" y="997" width="0.0118%" height="15" fill="rgb(243,32,47)" fg:x="76" fg:w="1"/><text x="1.1471%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="0.8971%" y="981" width="0.0118%" height="15" fill="rgb(247,202,23)" fg:x="76" fg:w="1"/><text x="1.1471%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="0.8971%" y="965" width="0.0118%" height="15" fill="rgb(219,102,11)" fg:x="76" fg:w="1"/><text x="1.1471%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="0.8971%" y="949" width="0.0118%" height="15" fill="rgb(243,110,44)" fg:x="76" fg:w="1"/><text x="1.1471%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="0.8971%" y="933" width="0.0118%" height="15" fill="rgb(222,74,54)" fg:x="76" fg:w="1"/><text x="1.1471%" y="943.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.8971%" y="1029" width="0.0236%" height="15" fill="rgb(216,99,12)" fg:x="76" fg:w="2"/><text x="1.1471%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9089%" y="1013" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="77" fg:w="1"/><text x="1.1589%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (1 samples, 0.01%)</title><rect x="0.9089%" y="997" width="0.0118%" height="15" fill="rgb(217,163,10)" fg:x="77" fg:w="1"/><text x="1.1589%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9089%" y="981" width="0.0118%" height="15" fill="rgb(213,25,53)" fg:x="77" fg:w="1"/><text x="1.1589%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.9089%" y="965" width="0.0118%" height="15" fill="rgb(252,105,26)" fg:x="77" fg:w="1"/><text x="1.1589%" y="975.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="981" width="0.0118%" height="15" fill="rgb(220,39,43)" fg:x="78" fg:w="1"/><text x="1.1707%" y="991.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="965" width="0.0118%" height="15" fill="rgb(229,68,48)" fg:x="78" fg:w="1"/><text x="1.1707%" y="975.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="949" width="0.0118%" height="15" fill="rgb(252,8,32)" fg:x="78" fg:w="1"/><text x="1.1707%" y="959.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="933" width="0.0118%" height="15" fill="rgb(223,20,43)" fg:x="78" fg:w="1"/><text x="1.1707%" y="943.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="917" width="0.0118%" height="15" fill="rgb(229,81,49)" fg:x="78" fg:w="1"/><text x="1.1707%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="901" width="0.0118%" height="15" fill="rgb(236,28,36)" fg:x="78" fg:w="1"/><text x="1.1707%" y="911.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.9207%" y="885" width="0.0118%" height="15" fill="rgb(249,185,26)" fg:x="78" fg:w="1"/><text x="1.1707%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.9207%" y="1029" width="0.0236%" height="15" fill="rgb(249,174,33)" fg:x="78" fg:w="2"/><text x="1.1707%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2 samples, 0.02%)</title><rect x="0.9207%" y="1013" width="0.0236%" height="15" fill="rgb(233,201,37)" fg:x="78" fg:w="2"/><text x="1.1707%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2 samples, 0.02%)</title><rect x="0.9207%" y="997" width="0.0236%" height="15" fill="rgb(221,78,26)" fg:x="78" fg:w="2"/><text x="1.1707%" y="1007.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="0.9325%" y="981" width="0.0118%" height="15" fill="rgb(250,127,30)" fg:x="79" fg:w="1"/><text x="1.1825%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="0.9325%" y="965" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="79" fg:w="1"/><text x="1.1825%" y="975.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="0.9325%" y="949" width="0.0118%" height="15" fill="rgb(229,67,23)" fg:x="79" fg:w="1"/><text x="1.1825%" y="959.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.9443%" y="1029" width="0.0236%" height="15" fill="rgb(249,83,47)" fg:x="80" fg:w="2"/><text x="1.1943%" y="1039.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (1 samples, 0.01%)</title><rect x="0.9561%" y="1013" width="0.0118%" height="15" fill="rgb(215,43,3)" fg:x="81" fg:w="1"/><text x="1.2061%" y="1023.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="0.9561%" y="997" width="0.0118%" height="15" fill="rgb(238,154,13)" fg:x="81" fg:w="1"/><text x="1.2061%" y="1007.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (1 samples, 0.01%)</title><rect x="0.9561%" y="981" width="0.0118%" height="15" fill="rgb(219,56,2)" fg:x="81" fg:w="1"/><text x="1.2061%" y="991.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="0.9561%" y="965" width="0.0118%" height="15" fill="rgb(233,0,4)" fg:x="81" fg:w="1"/><text x="1.2061%" y="975.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="0.9679%" y="1029" width="0.0590%" height="15" fill="rgb(235,30,7)" fg:x="82" fg:w="5"/><text x="1.2179%" y="1039.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="1.0269%" y="1029" width="0.0354%" height="15" fill="rgb(250,79,13)" fg:x="87" fg:w="3"/><text x="1.2769%" y="1039.50"></text></g><g><title>__bss_start (1 samples, 0.01%)</title><rect x="1.0623%" y="1029" width="0.0118%" height="15" fill="rgb(211,146,34)" fg:x="90" fg:w="1"/><text x="1.3123%" y="1039.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1.0623%" y="1013" width="0.0118%" height="15" fill="rgb(228,22,38)" fg:x="90" fg:w="1"/><text x="1.3123%" y="1023.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1.0741%" y="1029" width="0.0118%" height="15" fill="rgb(235,168,5)" fg:x="91" fg:w="1"/><text x="1.3241%" y="1039.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="1.0859%" y="1029" width="0.0826%" height="15" fill="rgb(221,155,16)" fg:x="92" fg:w="7"/><text x="1.3359%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1.1686%" y="1029" width="0.0118%" height="15" fill="rgb(215,215,53)" fg:x="99" fg:w="1"/><text x="1.4186%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="1.1804%" y="1029" width="0.0118%" height="15" fill="rgb(223,4,10)" fg:x="100" fg:w="1"/><text x="1.4304%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="1.1922%" y="1029" width="0.0118%" height="15" fill="rgb(234,103,6)" fg:x="101" fg:w="1"/><text x="1.4422%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.01%)</title><rect x="1.1922%" y="1013" width="0.0118%" height="15" fill="rgb(227,97,0)" fg:x="101" fg:w="1"/><text x="1.4422%" y="1023.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.01%)</title><rect x="1.1922%" y="997" width="0.0118%" height="15" fill="rgb(234,150,53)" fg:x="101" fg:w="1"/><text x="1.4422%" y="1007.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1.1922%" y="981" width="0.0118%" height="15" fill="rgb(228,201,54)" fg:x="101" fg:w="1"/><text x="1.4422%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="1.2040%" y="1029" width="0.0118%" height="15" fill="rgb(222,22,37)" fg:x="102" fg:w="1"/><text x="1.4540%" y="1039.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="1.2040%" y="1013" width="0.0118%" height="15" fill="rgb(237,53,32)" fg:x="102" fg:w="1"/><text x="1.4540%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="1.2040%" y="997" width="0.0118%" height="15" fill="rgb(233,25,53)" fg:x="102" fg:w="1"/><text x="1.4540%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.2040%" y="981" width="0.0118%" height="15" fill="rgb(210,40,34)" fg:x="102" fg:w="1"/><text x="1.4540%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="1.2040%" y="965" width="0.0118%" height="15" fill="rgb(241,220,44)" fg:x="102" fg:w="1"/><text x="1.4540%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="1.2040%" y="949" width="0.0118%" height="15" fill="rgb(235,28,35)" fg:x="102" fg:w="1"/><text x="1.4540%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="1.2040%" y="933" width="0.0118%" height="15" fill="rgb(210,56,17)" fg:x="102" fg:w="1"/><text x="1.4540%" y="943.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (2 samples, 0.02%)</title><rect x="1.2158%" y="1029" width="0.0236%" height="15" fill="rgb(224,130,29)" fg:x="103" fg:w="2"/><text x="1.4658%" y="1039.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (1 samples, 0.01%)</title><rect x="1.2394%" y="1029" width="0.0118%" height="15" fill="rgb(235,212,8)" fg:x="105" fg:w="1"/><text x="1.4894%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="1.2512%" y="933" width="0.0354%" height="15" fill="rgb(223,33,50)" fg:x="106" fg:w="3"/><text x="1.5012%" y="943.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="1.2512%" y="917" width="0.0354%" height="15" fill="rgb(219,149,13)" fg:x="106" fg:w="3"/><text x="1.5012%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.09%)</title><rect x="1.2512%" y="997" width="0.0944%" height="15" fill="rgb(250,156,29)" fg:x="106" fg:w="8"/><text x="1.5012%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.09%)</title><rect x="1.2512%" y="981" width="0.0944%" height="15" fill="rgb(216,193,19)" fg:x="106" fg:w="8"/><text x="1.5012%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.09%)</title><rect x="1.2512%" y="965" width="0.0944%" height="15" fill="rgb(216,135,14)" fg:x="106" fg:w="8"/><text x="1.5012%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.09%)</title><rect x="1.2512%" y="949" width="0.0944%" height="15" fill="rgb(241,47,5)" fg:x="106" fg:w="8"/><text x="1.5012%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.06%)</title><rect x="1.2866%" y="933" width="0.0590%" height="15" fill="rgb(233,42,35)" fg:x="109" fg:w="5"/><text x="1.5366%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.11%)</title><rect x="1.2512%" y="1029" width="0.1062%" height="15" fill="rgb(231,13,6)" fg:x="106" fg:w="9"/><text x="1.5012%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.11%)</title><rect x="1.2512%" y="1013" width="0.1062%" height="15" fill="rgb(207,181,40)" fg:x="106" fg:w="9"/><text x="1.5012%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="1.3456%" y="997" width="0.0118%" height="15" fill="rgb(254,173,49)" fg:x="114" fg:w="1"/><text x="1.5956%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="1.3456%" y="981" width="0.0118%" height="15" fill="rgb(221,1,38)" fg:x="114" fg:w="1"/><text x="1.5956%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="1.3456%" y="965" width="0.0118%" height="15" fill="rgb(206,124,46)" fg:x="114" fg:w="1"/><text x="1.5956%" y="975.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="1.3456%" y="949" width="0.0118%" height="15" fill="rgb(249,21,11)" fg:x="114" fg:w="1"/><text x="1.5956%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="1.3456%" y="933" width="0.0118%" height="15" fill="rgb(222,201,40)" fg:x="114" fg:w="1"/><text x="1.5956%" y="943.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="1.3456%" y="917" width="0.0118%" height="15" fill="rgb(235,61,29)" fg:x="114" fg:w="1"/><text x="1.5956%" y="927.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="1.3456%" y="901" width="0.0118%" height="15" fill="rgb(219,207,3)" fg:x="114" fg:w="1"/><text x="1.5956%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt; (1 samples, 0.01%)</title><rect x="1.3574%" y="1029" width="0.0118%" height="15" fill="rgb(222,56,46)" fg:x="115" fg:w="1"/><text x="1.6074%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3692%" y="1029" width="0.0118%" height="15" fill="rgb(239,76,54)" fg:x="116" fg:w="1"/><text x="1.6192%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::handler::register::HandleRegisters&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3692%" y="1013" width="0.0118%" height="15" fill="rgb(231,124,27)" fg:x="116" fg:w="1"/><text x="1.6192%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3810%" y="1029" width="0.0118%" height="15" fill="rgb(249,195,6)" fg:x="117" fg:w="1"/><text x="1.6310%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3810%" y="1013" width="0.0118%" height="15" fill="rgb(237,174,47)" fg:x="117" fg:w="1"/><text x="1.6310%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.3810%" y="997" width="0.0118%" height="15" fill="rgb(206,201,31)" fg:x="117" fg:w="1"/><text x="1.6310%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3928%" y="1029" width="0.0118%" height="15" fill="rgb(231,57,52)" fg:x="118" fg:w="1"/><text x="1.6428%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3928%" y="1013" width="0.0118%" height="15" fill="rgb(248,177,22)" fg:x="118" fg:w="1"/><text x="1.6428%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.3928%" y="997" width="0.0118%" height="15" fill="rgb(215,211,37)" fg:x="118" fg:w="1"/><text x="1.6428%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="1.4046%" y="1029" width="0.0354%" height="15" fill="rgb(241,128,51)" fg:x="119" fg:w="3"/><text x="1.6546%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.4282%" y="1013" width="0.0118%" height="15" fill="rgb(227,165,31)" fg:x="121" fg:w="1"/><text x="1.6782%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.4282%" y="997" width="0.0118%" height="15" fill="rgb(228,167,24)" fg:x="121" fg:w="1"/><text x="1.6782%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="1.4400%" y="1013" width="0.0236%" height="15" fill="rgb(228,143,12)" fg:x="122" fg:w="2"/><text x="1.6900%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="1.4400%" y="997" width="0.0236%" height="15" fill="rgb(249,149,8)" fg:x="122" fg:w="2"/><text x="1.6900%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.04%)</title><rect x="1.4400%" y="1029" width="0.0354%" height="15" fill="rgb(243,35,44)" fg:x="122" fg:w="3"/><text x="1.6900%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.4636%" y="1013" width="0.0118%" height="15" fill="rgb(246,89,9)" fg:x="124" fg:w="1"/><text x="1.7136%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.4636%" y="997" width="0.0118%" height="15" fill="rgb(233,213,13)" fg:x="124" fg:w="1"/><text x="1.7136%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::pre_execution::load_precompiles&lt;revm_primitives::specification::MergeSpec,revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="1.4754%" y="1029" width="0.0236%" height="15" fill="rgb(233,141,41)" fg:x="125" fg:w="2"/><text x="1.7254%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (4 samples, 0.05%)</title><rect x="1.4991%" y="1029" width="0.0472%" height="15" fill="rgb(239,167,4)" fg:x="127" fg:w="4"/><text x="1.7491%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.5345%" y="1013" width="0.0118%" height="15" fill="rgb(209,217,16)" fg:x="130" fg:w="1"/><text x="1.7845%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.5345%" y="997" width="0.0118%" height="15" fill="rgb(219,88,35)" fg:x="130" fg:w="1"/><text x="1.7845%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.5345%" y="981" width="0.0118%" height="15" fill="rgb(220,193,23)" fg:x="130" fg:w="1"/><text x="1.7845%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (2 samples, 0.02%)</title><rect x="1.5463%" y="1029" width="0.0236%" height="15" fill="rgb(230,90,52)" fg:x="131" fg:w="2"/><text x="1.7963%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (2 samples, 0.02%)</title><rect x="1.5463%" y="1013" width="0.0236%" height="15" fill="rgb(252,106,19)" fg:x="131" fg:w="2"/><text x="1.7963%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (1 samples, 0.01%)</title><rect x="1.5581%" y="997" width="0.0118%" height="15" fill="rgb(206,74,20)" fg:x="132" fg:w="1"/><text x="1.8081%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::local::AccessError&gt; (1 samples, 0.01%)</title><rect x="1.5699%" y="1029" width="0.0118%" height="15" fill="rgb(230,138,44)" fg:x="133" fg:w="1"/><text x="1.8199%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.04%)</title><rect x="1.5817%" y="1029" width="0.0354%" height="15" fill="rgb(235,182,43)" fg:x="134" fg:w="3"/><text x="1.8317%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="1.6171%" y="1029" width="0.0236%" height="15" fill="rgb(242,16,51)" fg:x="137" fg:w="2"/><text x="1.8671%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="1.6289%" y="1013" width="0.0118%" height="15" fill="rgb(248,9,4)" fg:x="138" fg:w="1"/><text x="1.8789%" y="1023.50"></text></g><g><title>malloc_consolidate (1 samples, 0.01%)</title><rect x="1.6407%" y="1029" width="0.0118%" height="15" fill="rgb(210,31,22)" fg:x="139" fg:w="1"/><text x="1.8907%" y="1039.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.6525%" y="1013" width="0.0236%" height="15" fill="rgb(239,54,39)" fg:x="140" fg:w="2"/><text x="1.9025%" y="1023.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.6525%" y="997" width="0.0236%" height="15" fill="rgb(230,99,41)" fg:x="140" fg:w="2"/><text x="1.9025%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.6525%" y="981" width="0.0236%" height="15" fill="rgb(253,106,12)" fg:x="140" fg:w="2"/><text x="1.9025%" y="991.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.6525%" y="965" width="0.0236%" height="15" fill="rgb(213,46,41)" fg:x="140" fg:w="2"/><text x="1.9025%" y="975.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (3 samples, 0.04%)</title><rect x="1.6525%" y="1029" width="0.0354%" height="15" fill="rgb(215,133,35)" fg:x="140" fg:w="3"/><text x="1.9025%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (1 samples, 0.01%)</title><rect x="1.6761%" y="1013" width="0.0118%" height="15" fill="rgb(213,28,5)" fg:x="142" fg:w="1"/><text x="1.9261%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.01%)</title><rect x="1.6761%" y="997" width="0.0118%" height="15" fill="rgb(215,77,49)" fg:x="142" fg:w="1"/><text x="1.9261%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="1.6761%" y="981" width="0.0118%" height="15" fill="rgb(248,100,22)" fg:x="142" fg:w="1"/><text x="1.9261%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.01%)</title><rect x="1.6761%" y="965" width="0.0118%" height="15" fill="rgb(208,67,9)" fg:x="142" fg:w="1"/><text x="1.9261%" y="975.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="1.6761%" y="949" width="0.0118%" height="15" fill="rgb(219,133,21)" fg:x="142" fg:w="1"/><text x="1.9261%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (1 samples, 0.01%)</title><rect x="1.6879%" y="1029" width="0.0118%" height="15" fill="rgb(246,46,29)" fg:x="143" fg:w="1"/><text x="1.9379%" y="1039.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (1 samples, 0.01%)</title><rect x="1.6879%" y="1013" width="0.0118%" height="15" fill="rgb(246,185,52)" fg:x="143" fg:w="1"/><text x="1.9379%" y="1023.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="1.6997%" y="1029" width="0.0118%" height="15" fill="rgb(252,136,11)" fg:x="144" fg:w="1"/><text x="1.9497%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.6997%" y="1013" width="0.0118%" height="15" fill="rgb(219,138,53)" fg:x="144" fg:w="1"/><text x="1.9497%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.6997%" y="997" width="0.0118%" height="15" fill="rgb(211,51,23)" fg:x="144" fg:w="1"/><text x="1.9497%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="1.6997%" y="981" width="0.0118%" height="15" fill="rgb(247,221,28)" fg:x="144" fg:w="1"/><text x="1.9497%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="1.6997%" y="965" width="0.0118%" height="15" fill="rgb(251,222,45)" fg:x="144" fg:w="1"/><text x="1.9497%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="1.6997%" y="949" width="0.0118%" height="15" fill="rgb(217,162,53)" fg:x="144" fg:w="1"/><text x="1.9497%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1.6997%" y="933" width="0.0118%" height="15" fill="rgb(229,93,14)" fg:x="144" fg:w="1"/><text x="1.9497%" y="943.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (1 samples, 0.01%)</title><rect x="1.7115%" y="1029" width="0.0118%" height="15" fill="rgb(209,67,49)" fg:x="145" fg:w="1"/><text x="1.9615%" y="1039.50"></text></g><g><title>revm::frame::FrameResult::output (1 samples, 0.01%)</title><rect x="1.7115%" y="1013" width="0.0118%" height="15" fill="rgb(213,87,29)" fg:x="145" fg:w="1"/><text x="1.9615%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.7115%" y="997" width="0.0118%" height="15" fill="rgb(205,151,52)" fg:x="145" fg:w="1"/><text x="1.9615%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.7115%" y="981" width="0.0118%" height="15" fill="rgb(253,215,39)" fg:x="145" fg:w="1"/><text x="1.9615%" y="991.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (1 samples, 0.01%)</title><rect x="1.7233%" y="1029" width="0.0118%" height="15" fill="rgb(221,220,41)" fg:x="146" fg:w="1"/><text x="1.9733%" y="1039.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (1 samples, 0.01%)</title><rect x="1.7351%" y="1029" width="0.0118%" height="15" fill="rgb(218,133,21)" fg:x="147" fg:w="1"/><text x="1.9851%" y="1039.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (1 samples, 0.01%)</title><rect x="1.7941%" y="997" width="0.0118%" height="15" fill="rgb(221,193,43)" fg:x="152" fg:w="1"/><text x="2.0441%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="1.7941%" y="981" width="0.0118%" height="15" fill="rgb(240,128,52)" fg:x="152" fg:w="1"/><text x="2.0441%" y="991.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7941%" y="965" width="0.0118%" height="15" fill="rgb(253,114,12)" fg:x="152" fg:w="1"/><text x="2.0441%" y="975.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (1 samples, 0.01%)</title><rect x="1.7941%" y="949" width="0.0118%" height="15" fill="rgb(215,223,47)" fg:x="152" fg:w="1"/><text x="2.0441%" y="959.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (6 samples, 0.07%)</title><rect x="1.7469%" y="1029" width="0.0708%" height="15" fill="rgb(248,225,23)" fg:x="148" fg:w="6"/><text x="1.9969%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (2 samples, 0.02%)</title><rect x="1.7941%" y="1013" width="0.0236%" height="15" fill="rgb(250,108,0)" fg:x="152" fg:w="2"/><text x="2.0441%" y="1023.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (1 samples, 0.01%)</title><rect x="1.8059%" y="997" width="0.0118%" height="15" fill="rgb(228,208,7)" fg:x="153" fg:w="1"/><text x="2.0559%" y="1007.50"></text></g><g><title>[anon] (83 samples, 0.98%)</title><rect x="0.8499%" y="1045" width="0.9797%" height="15" fill="rgb(244,45,10)" fg:x="72" fg:w="83"/><text x="1.0999%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.01%)</title><rect x="1.8178%" y="1029" width="0.0118%" height="15" fill="rgb(207,125,25)" fg:x="154" fg:w="1"/><text x="2.0678%" y="1039.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.01%)</title><rect x="1.8178%" y="1013" width="0.0118%" height="15" fill="rgb(210,195,18)" fg:x="154" fg:w="1"/><text x="2.0678%" y="1023.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="1.8178%" y="997" width="0.0118%" height="15" fill="rgb(249,80,12)" fg:x="154" fg:w="1"/><text x="2.0678%" y="1007.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="1.8178%" y="981" width="0.0118%" height="15" fill="rgb(221,65,9)" fg:x="154" fg:w="1"/><text x="2.0678%" y="991.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1.8296%" y="1029" width="0.0118%" height="15" fill="rgb(235,49,36)" fg:x="155" fg:w="1"/><text x="2.0796%" y="1039.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1.8414%" y="1029" width="0.0118%" height="15" fill="rgb(225,32,20)" fg:x="156" fg:w="1"/><text x="2.0914%" y="1039.50"></text></g><g><title>__bss_start (2 samples, 0.02%)</title><rect x="1.8532%" y="1029" width="0.0236%" height="15" fill="rgb(215,141,46)" fg:x="157" fg:w="2"/><text x="2.1032%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="1.8532%" y="1013" width="0.0236%" height="15" fill="rgb(250,160,47)" fg:x="157" fg:w="2"/><text x="2.1032%" y="1023.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="1.8768%" y="1029" width="0.0118%" height="15" fill="rgb(216,222,40)" fg:x="159" fg:w="1"/><text x="2.1268%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="1.8886%" y="1029" width="0.0118%" height="15" fill="rgb(234,217,39)" fg:x="160" fg:w="1"/><text x="2.1386%" y="1039.50"></text></g><g><title>revm::handler::mainnet::execution::call (1 samples, 0.01%)</title><rect x="1.8886%" y="1013" width="0.0118%" height="15" fill="rgb(207,178,40)" fg:x="160" fg:w="1"/><text x="2.1386%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (1 samples, 0.01%)</title><rect x="1.8886%" y="997" width="0.0118%" height="15" fill="rgb(221,136,13)" fg:x="160" fg:w="1"/><text x="2.1386%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::inner_models::CallInputs&gt; (1 samples, 0.01%)</title><rect x="1.8886%" y="981" width="0.0118%" height="15" fill="rgb(249,199,10)" fg:x="160" fg:w="1"/><text x="2.1386%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.8886%" y="965" width="0.0118%" height="15" fill="rgb(249,222,13)" fg:x="160" fg:w="1"/><text x="2.1386%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.8886%" y="949" width="0.0118%" height="15" fill="rgb(244,185,38)" fg:x="160" fg:w="1"/><text x="2.1386%" y="959.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.8886%" y="933" width="0.0118%" height="15" fill="rgb(236,202,9)" fg:x="160" fg:w="1"/><text x="2.1386%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="1.9004%" y="1029" width="0.0118%" height="15" fill="rgb(250,229,37)" fg:x="161" fg:w="1"/><text x="2.1504%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::handler::register::HandleRegisters&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.9004%" y="1013" width="0.0118%" height="15" fill="rgb(206,174,23)" fg:x="161" fg:w="1"/><text x="2.1504%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.01%)</title><rect x="1.9122%" y="1029" width="0.0118%" height="15" fill="rgb(211,33,43)" fg:x="162" fg:w="1"/><text x="2.1622%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.02%)</title><rect x="1.9240%" y="1029" width="0.0236%" height="15" fill="rgb(245,58,50)" fg:x="163" fg:w="2"/><text x="2.1740%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="1.9476%" y="1029" width="0.0118%" height="15" fill="rgb(244,68,36)" fg:x="165" fg:w="1"/><text x="2.1976%" y="1039.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1 samples, 0.01%)</title><rect x="1.9594%" y="1029" width="0.0118%" height="15" fill="rgb(232,229,15)" fg:x="166" fg:w="1"/><text x="2.2094%" y="1039.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="1.9712%" y="1029" width="0.0118%" height="15" fill="rgb(254,30,23)" fg:x="167" fg:w="1"/><text x="2.2212%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.9712%" y="1013" width="0.0118%" height="15" fill="rgb(235,160,14)" fg:x="167" fg:w="1"/><text x="2.2212%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.9712%" y="997" width="0.0118%" height="15" fill="rgb(212,155,44)" fg:x="167" fg:w="1"/><text x="2.2212%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="1.9712%" y="981" width="0.0118%" height="15" fill="rgb(226,2,50)" fg:x="167" fg:w="1"/><text x="2.2212%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="1.9712%" y="965" width="0.0118%" height="15" fill="rgb(234,177,6)" fg:x="167" fg:w="1"/><text x="2.2212%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="1.9712%" y="949" width="0.0118%" height="15" fill="rgb(217,24,9)" fg:x="167" fg:w="1"/><text x="2.2212%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1.9712%" y="933" width="0.0118%" height="15" fill="rgb(220,13,46)" fg:x="167" fg:w="1"/><text x="2.2212%" y="943.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="1.9830%" y="1029" width="0.0118%" height="15" fill="rgb(239,221,27)" fg:x="168" fg:w="1"/><text x="2.2330%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.01%)</title><rect x="1.9948%" y="1029" width="0.0118%" height="15" fill="rgb(222,198,25)" fg:x="169" fg:w="1"/><text x="2.2448%" y="1039.50"></text></g><g><title>[block-stm-revm] (18 samples, 0.21%)</title><rect x="1.8296%" y="1045" width="0.2125%" height="15" fill="rgb(211,99,13)" fg:x="155" fg:w="18"/><text x="2.0796%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::stack::swap (3 samples, 0.04%)</title><rect x="2.0066%" y="1029" width="0.0354%" height="15" fill="rgb(232,111,31)" fg:x="170" fg:w="3"/><text x="2.2566%" y="1039.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::swap (3 samples, 0.04%)</title><rect x="2.0066%" y="1013" width="0.0354%" height="15" fill="rgb(245,82,37)" fg:x="170" fg:w="3"/><text x="2.2566%" y="1023.50"></text></g><g><title>_int_malloc (3 samples, 0.04%)</title><rect x="2.0066%" y="997" width="0.0354%" height="15" fill="rgb(227,149,46)" fg:x="170" fg:w="3"/><text x="2.2566%" y="1007.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.0420%" y="1029" width="0.0118%" height="15" fill="rgb(218,36,50)" fg:x="173" fg:w="1"/><text x="2.2920%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="2.0538%" y="1029" width="0.0118%" height="15" fill="rgb(226,80,48)" fg:x="174" fg:w="1"/><text x="2.3038%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (1 samples, 0.01%)</title><rect x="2.0538%" y="1013" width="0.0118%" height="15" fill="rgb(238,224,15)" fg:x="174" fg:w="1"/><text x="2.3038%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="2.0774%" y="853" width="0.0118%" height="15" fill="rgb(241,136,10)" fg:x="176" fg:w="1"/><text x="2.3274%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="2.0774%" y="837" width="0.0118%" height="15" fill="rgb(208,32,45)" fg:x="176" fg:w="1"/><text x="2.3274%" y="847.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="2.0774%" y="821" width="0.0118%" height="15" fill="rgb(207,135,9)" fg:x="176" fg:w="1"/><text x="2.3274%" y="831.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (3 samples, 0.04%)</title><rect x="2.0656%" y="1029" width="0.0354%" height="15" fill="rgb(206,86,44)" fg:x="175" fg:w="3"/><text x="2.3156%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (2 samples, 0.02%)</title><rect x="2.0774%" y="1013" width="0.0236%" height="15" fill="rgb(245,177,15)" fg:x="176" fg:w="2"/><text x="2.3274%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="2.0774%" y="997" width="0.0236%" height="15" fill="rgb(206,64,50)" fg:x="176" fg:w="2"/><text x="2.3274%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="2.0774%" y="981" width="0.0236%" height="15" fill="rgb(234,36,40)" fg:x="176" fg:w="2"/><text x="2.3274%" y="991.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="2.0774%" y="965" width="0.0236%" height="15" fill="rgb(213,64,8)" fg:x="176" fg:w="2"/><text x="2.3274%" y="975.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="2.0774%" y="949" width="0.0236%" height="15" fill="rgb(210,75,36)" fg:x="176" fg:w="2"/><text x="2.3274%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="2.0774%" y="933" width="0.0236%" height="15" fill="rgb(229,88,21)" fg:x="176" fg:w="2"/><text x="2.3274%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="2.0774%" y="917" width="0.0236%" height="15" fill="rgb(252,204,47)" fg:x="176" fg:w="2"/><text x="2.3274%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="2.0774%" y="901" width="0.0236%" height="15" fill="rgb(208,77,27)" fg:x="176" fg:w="2"/><text x="2.3274%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="2.0774%" y="885" width="0.0236%" height="15" fill="rgb(221,76,26)" fg:x="176" fg:w="2"/><text x="2.3274%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="2.0774%" y="869" width="0.0236%" height="15" fill="rgb(225,139,18)" fg:x="176" fg:w="2"/><text x="2.3274%" y="879.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="2.0892%" y="853" width="0.0118%" height="15" fill="rgb(230,137,11)" fg:x="177" fg:w="1"/><text x="2.3392%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="2.0892%" y="837" width="0.0118%" height="15" fill="rgb(212,28,1)" fg:x="177" fg:w="1"/><text x="2.3392%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="2.0892%" y="821" width="0.0118%" height="15" fill="rgb(248,164,17)" fg:x="177" fg:w="1"/><text x="2.3392%" y="831.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.01%)</title><rect x="2.0892%" y="805" width="0.0118%" height="15" fill="rgb(222,171,42)" fg:x="177" fg:w="1"/><text x="2.3392%" y="815.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="2.0420%" y="1045" width="0.0708%" height="15" fill="rgb(243,84,45)" fg:x="173" fg:w="6"/><text x="2.2920%" y="1055.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (1 samples, 0.01%)</title><rect x="2.1010%" y="1029" width="0.0118%" height="15" fill="rgb(252,49,23)" fg:x="178" fg:w="1"/><text x="2.3510%" y="1039.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (1 samples, 0.01%)</title><rect x="2.1010%" y="1013" width="0.0118%" height="15" fill="rgb(215,19,7)" fg:x="178" fg:w="1"/><text x="2.3510%" y="1023.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (1 samples, 0.01%)</title><rect x="2.1010%" y="997" width="0.0118%" height="15" fill="rgb(238,81,41)" fg:x="178" fg:w="1"/><text x="2.3510%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.1128%" y="1029" width="0.0118%" height="15" fill="rgb(210,199,37)" fg:x="179" fg:w="1"/><text x="2.3628%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.1246%" y="1029" width="0.0236%" height="15" fill="rgb(244,192,49)" fg:x="180" fg:w="2"/><text x="2.3746%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="2.1364%" y="1013" width="0.0118%" height="15" fill="rgb(226,211,11)" fg:x="181" fg:w="1"/><text x="2.3864%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="2.1364%" y="997" width="0.0118%" height="15" fill="rgb(236,162,54)" fg:x="181" fg:w="1"/><text x="2.3864%" y="1007.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (1 samples, 0.01%)</title><rect x="2.1483%" y="1029" width="0.0118%" height="15" fill="rgb(220,229,9)" fg:x="182" fg:w="1"/><text x="2.3983%" y="1039.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="2.1719%" y="949" width="0.0354%" height="15" fill="rgb(250,87,22)" fg:x="184" fg:w="3"/><text x="2.4219%" y="959.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.2073%" y="949" width="0.0118%" height="15" fill="rgb(239,43,17)" fg:x="187" fg:w="1"/><text x="2.4573%" y="959.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.2073%" y="933" width="0.0118%" height="15" fill="rgb(231,177,25)" fg:x="187" fg:w="1"/><text x="2.4573%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="2.2191%" y="949" width="0.0236%" height="15" fill="rgb(219,179,1)" fg:x="188" fg:w="2"/><text x="2.4691%" y="959.50"></text></g><g><title>&lt;revm_primitives::env::TransactTo as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.2427%" y="949" width="0.0118%" height="15" fill="rgb(238,219,53)" fg:x="190" fg:w="1"/><text x="2.4927%" y="959.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="2.1601%" y="965" width="0.1062%" height="15" fill="rgb(232,167,36)" fg:x="183" fg:w="9"/><text x="2.4101%" y="975.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (1 samples, 0.01%)</title><rect x="2.2545%" y="949" width="0.0118%" height="15" fill="rgb(244,19,51)" fg:x="191" fg:w="1"/><text x="2.5045%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="2.2663%" y="965" width="0.0118%" height="15" fill="rgb(224,6,22)" fg:x="192" fg:w="1"/><text x="2.5163%" y="975.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="2.2781%" y="949" width="0.0118%" height="15" fill="rgb(224,145,5)" fg:x="193" fg:w="1"/><text x="2.5281%" y="959.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.2781%" y="933" width="0.0118%" height="15" fill="rgb(234,130,49)" fg:x="193" fg:w="1"/><text x="2.5281%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="2.2899%" y="949" width="0.0118%" height="15" fill="rgb(254,6,2)" fg:x="194" fg:w="1"/><text x="2.5399%" y="959.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="2.2899%" y="933" width="0.0118%" height="15" fill="rgb(208,96,46)" fg:x="194" fg:w="1"/><text x="2.5399%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="2.2899%" y="917" width="0.0118%" height="15" fill="rgb(239,3,39)" fg:x="194" fg:w="1"/><text x="2.5399%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.2899%" y="901" width="0.0118%" height="15" fill="rgb(233,210,1)" fg:x="194" fg:w="1"/><text x="2.5399%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="2.2899%" y="885" width="0.0118%" height="15" fill="rgb(244,137,37)" fg:x="194" fg:w="1"/><text x="2.5399%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="2.2899%" y="869" width="0.0118%" height="15" fill="rgb(240,136,2)" fg:x="194" fg:w="1"/><text x="2.5399%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="2.3017%" y="805" width="0.0118%" height="15" fill="rgb(239,18,37)" fg:x="195" fg:w="1"/><text x="2.5517%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.04%)</title><rect x="2.3017%" y="821" width="0.0354%" height="15" fill="rgb(218,185,22)" fg:x="195" fg:w="3"/><text x="2.5517%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.02%)</title><rect x="2.3135%" y="805" width="0.0236%" height="15" fill="rgb(225,218,4)" fg:x="196" fg:w="2"/><text x="2.5635%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.02%)</title><rect x="2.3135%" y="789" width="0.0236%" height="15" fill="rgb(230,182,32)" fg:x="196" fg:w="2"/><text x="2.5635%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;)&gt; (2 samples, 0.02%)</title><rect x="2.3135%" y="773" width="0.0236%" height="15" fill="rgb(242,56,43)" fg:x="196" fg:w="2"/><text x="2.5635%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="2.3135%" y="757" width="0.0236%" height="15" fill="rgb(233,99,24)" fg:x="196" fg:w="2"/><text x="2.5635%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::precompile::Precompile&gt; (1 samples, 0.01%)</title><rect x="2.3253%" y="741" width="0.0118%" height="15" fill="rgb(234,209,42)" fg:x="197" fg:w="1"/><text x="2.5753%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="2.3017%" y="917" width="0.0472%" height="15" fill="rgb(227,7,12)" fg:x="195" fg:w="4"/><text x="2.5517%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="2.3017%" y="901" width="0.0472%" height="15" fill="rgb(245,203,43)" fg:x="195" fg:w="4"/><text x="2.5517%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,std::hash::random::RandomState&gt;&gt; (4 samples, 0.05%)</title><rect x="2.3017%" y="885" width="0.0472%" height="15" fill="rgb(238,205,33)" fg:x="195" fg:w="4"/><text x="2.5517%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;)&gt;&gt; (4 samples, 0.05%)</title><rect x="2.3017%" y="869" width="0.0472%" height="15" fill="rgb(231,56,7)" fg:x="195" fg:w="4"/><text x="2.5517%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="2.3017%" y="853" width="0.0472%" height="15" fill="rgb(244,186,29)" fg:x="195" fg:w="4"/><text x="2.5517%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 0.05%)</title><rect x="2.3017%" y="837" width="0.0472%" height="15" fill="rgb(234,111,31)" fg:x="195" fg:w="4"/><text x="2.5517%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.01%)</title><rect x="2.3371%" y="821" width="0.0118%" height="15" fill="rgb(241,149,10)" fg:x="198" fg:w="1"/><text x="2.5871%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.3371%" y="805" width="0.0118%" height="15" fill="rgb(249,206,44)" fg:x="198" fg:w="1"/><text x="2.5871%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="2.3371%" y="789" width="0.0118%" height="15" fill="rgb(251,153,30)" fg:x="198" fg:w="1"/><text x="2.5871%" y="799.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="2.3371%" y="773" width="0.0118%" height="15" fill="rgb(239,152,38)" fg:x="198" fg:w="1"/><text x="2.5871%" y="783.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="2.3371%" y="757" width="0.0118%" height="15" fill="rgb(249,139,47)" fg:x="198" fg:w="1"/><text x="2.5871%" y="767.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.3489%" y="901" width="0.0236%" height="15" fill="rgb(244,64,35)" fg:x="199" fg:w="2"/><text x="2.5989%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="2.3489%" y="885" width="0.0236%" height="15" fill="rgb(216,46,15)" fg:x="199" fg:w="2"/><text x="2.5989%" y="895.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="2.3725%" y="901" width="0.0118%" height="15" fill="rgb(250,74,19)" fg:x="201" fg:w="1"/><text x="2.6225%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.3843%" y="885" width="0.0236%" height="15" fill="rgb(249,42,33)" fg:x="202" fg:w="2"/><text x="2.6343%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="2.3843%" y="869" width="0.0236%" height="15" fill="rgb(242,149,17)" fg:x="202" fg:w="2"/><text x="2.6343%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="2.3843%" y="853" width="0.0236%" height="15" fill="rgb(244,29,21)" fg:x="202" fg:w="2"/><text x="2.6343%" y="863.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.3843%" y="837" width="0.0236%" height="15" fill="rgb(220,130,37)" fg:x="202" fg:w="2"/><text x="2.6343%" y="847.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.3961%" y="821" width="0.0118%" height="15" fill="rgb(211,67,2)" fg:x="203" fg:w="1"/><text x="2.6461%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (3 samples, 0.04%)</title><rect x="2.3843%" y="901" width="0.0354%" height="15" fill="rgb(235,68,52)" fg:x="202" fg:w="3"/><text x="2.6343%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (1 samples, 0.01%)</title><rect x="2.4079%" y="885" width="0.0118%" height="15" fill="rgb(246,142,3)" fg:x="204" fg:w="1"/><text x="2.6579%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::CfgEnv&gt; (1 samples, 0.01%)</title><rect x="2.4079%" y="869" width="0.0118%" height="15" fill="rgb(241,25,7)" fg:x="204" fg:w="1"/><text x="2.6579%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::kzg::env_settings::EnvKzgSettings&gt; (1 samples, 0.01%)</title><rect x="2.4079%" y="853" width="0.0118%" height="15" fill="rgb(242,119,39)" fg:x="204" fg:w="1"/><text x="2.6579%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="2.4197%" y="885" width="0.0118%" height="15" fill="rgb(241,98,45)" fg:x="205" fg:w="1"/><text x="2.6697%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="2.4197%" y="869" width="0.0118%" height="15" fill="rgb(254,28,30)" fg:x="205" fg:w="1"/><text x="2.6697%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.4197%" y="853" width="0.0118%" height="15" fill="rgb(241,142,54)" fg:x="205" fg:w="1"/><text x="2.6697%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.4197%" y="837" width="0.0118%" height="15" fill="rgb(222,85,15)" fg:x="205" fg:w="1"/><text x="2.6697%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="2.4197%" y="821" width="0.0118%" height="15" fill="rgb(210,85,47)" fg:x="205" fg:w="1"/><text x="2.6697%" y="831.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="2.4197%" y="805" width="0.0118%" height="15" fill="rgb(224,206,25)" fg:x="205" fg:w="1"/><text x="2.6697%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (2 samples, 0.02%)</title><rect x="2.4315%" y="885" width="0.0236%" height="15" fill="rgb(243,201,19)" fg:x="206" fg:w="2"/><text x="2.6815%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::log::Log&gt;&gt; (2 samples, 0.02%)</title><rect x="2.4315%" y="869" width="0.0236%" height="15" fill="rgb(236,59,4)" fg:x="206" fg:w="2"/><text x="2.6815%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.4315%" y="853" width="0.0236%" height="15" fill="rgb(254,179,45)" fg:x="206" fg:w="2"/><text x="2.6815%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="2.4315%" y="837" width="0.0236%" height="15" fill="rgb(226,14,10)" fg:x="206" fg:w="2"/><text x="2.6815%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="2.3017%" y="949" width="0.1653%" height="15" fill="rgb(244,27,41)" fg:x="195" fg:w="14"/><text x="2.5517%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="2.3017%" y="933" width="0.1653%" height="15" fill="rgb(235,35,32)" fg:x="195" fg:w="14"/><text x="2.5517%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="2.3489%" y="917" width="0.1180%" height="15" fill="rgb(218,68,31)" fg:x="199" fg:w="10"/><text x="2.5989%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (4 samples, 0.05%)</title><rect x="2.4197%" y="901" width="0.0472%" height="15" fill="rgb(207,120,37)" fg:x="205" fg:w="4"/><text x="2.6697%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;(alloy_primitives::bits::address::Address,ruint::Uint&lt;256_usize,4_usize&gt;),ruint::Uint&lt;256_usize,4_usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="2.4551%" y="885" width="0.0118%" height="15" fill="rgb(227,98,0)" fg:x="208" fg:w="1"/><text x="2.7051%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;(alloy_primitives::bits::address::Address,ruint::Uint&lt;256_usize,4_usize&gt;),ruint::Uint&lt;256_usize,4_usize&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="2.4551%" y="869" width="0.0118%" height="15" fill="rgb(207,7,3)" fg:x="208" fg:w="1"/><text x="2.7051%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;((alloy_primitives::bits::address::Address,ruint::Uint&lt;256_usize,4_usize&gt;),ruint::Uint&lt;256_usize,4_usize&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="2.4551%" y="853" width="0.0118%" height="15" fill="rgb(206,98,19)" fg:x="208" fg:w="1"/><text x="2.7051%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.4551%" y="837" width="0.0118%" height="15" fill="rgb(217,5,26)" fg:x="208" fg:w="1"/><text x="2.7051%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="2.4551%" y="821" width="0.0118%" height="15" fill="rgb(235,190,38)" fg:x="208" fg:w="1"/><text x="2.7051%" y="831.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.4669%" y="933" width="0.0236%" height="15" fill="rgb(247,86,24)" fg:x="209" fg:w="2"/><text x="2.7169%" y="943.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="2.4669%" y="917" width="0.0236%" height="15" fill="rgb(205,101,16)" fg:x="209" fg:w="2"/><text x="2.7169%" y="927.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="2.4788%" y="901" width="0.0118%" height="15" fill="rgb(246,168,33)" fg:x="210" fg:w="1"/><text x="2.7288%" y="911.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="2.4906%" y="933" width="0.0118%" height="15" fill="rgb(231,114,1)" fg:x="211" fg:w="1"/><text x="2.7406%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="2.5024%" y="917" width="0.0118%" height="15" fill="rgb(207,184,53)" fg:x="212" fg:w="1"/><text x="2.7524%" y="927.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.5142%" y="869" width="0.0118%" height="15" fill="rgb(224,95,51)" fg:x="213" fg:w="1"/><text x="2.7642%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.5142%" y="853" width="0.0118%" height="15" fill="rgb(212,188,45)" fg:x="213" fg:w="1"/><text x="2.7642%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="2.5142%" y="837" width="0.0118%" height="15" fill="rgb(223,154,38)" fg:x="213" fg:w="1"/><text x="2.7642%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.12%)</title><rect x="2.5024%" y="933" width="0.1180%" height="15" fill="rgb(251,22,52)" fg:x="212" fg:w="10"/><text x="2.7524%" y="943.50"></text></g><g><title>core::mem::drop (9 samples, 0.11%)</title><rect x="2.5142%" y="917" width="0.1062%" height="15" fill="rgb(229,209,22)" fg:x="213" fg:w="9"/><text x="2.7642%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (9 samples, 0.11%)</title><rect x="2.5142%" y="901" width="0.1062%" height="15" fill="rgb(234,138,34)" fg:x="213" fg:w="9"/><text x="2.7642%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.11%)</title><rect x="2.5142%" y="885" width="0.1062%" height="15" fill="rgb(212,95,11)" fg:x="213" fg:w="9"/><text x="2.7642%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.09%)</title><rect x="2.5260%" y="869" width="0.0944%" height="15" fill="rgb(240,179,47)" fg:x="214" fg:w="8"/><text x="2.7760%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.09%)</title><rect x="2.5260%" y="853" width="0.0944%" height="15" fill="rgb(240,163,11)" fg:x="214" fg:w="8"/><text x="2.7760%" y="863.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.6322%" y="869" width="0.0118%" height="15" fill="rgb(236,37,12)" fg:x="223" fg:w="1"/><text x="2.8822%" y="879.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="2.6204%" y="885" width="0.0354%" height="15" fill="rgb(232,164,16)" fg:x="222" fg:w="3"/><text x="2.8704%" y="895.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="2.6440%" y="869" width="0.0118%" height="15" fill="rgb(244,205,15)" fg:x="224" fg:w="1"/><text x="2.8940%" y="879.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="2.6558%" y="885" width="0.0118%" height="15" fill="rgb(223,117,47)" fg:x="225" fg:w="1"/><text x="2.9058%" y="895.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="2.6558%" y="869" width="0.0118%" height="15" fill="rgb(244,107,35)" fg:x="225" fg:w="1"/><text x="2.9058%" y="879.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="2.6676%" y="821" width="0.0118%" height="15" fill="rgb(205,140,8)" fg:x="226" fg:w="1"/><text x="2.9176%" y="831.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="2.6676%" y="805" width="0.0118%" height="15" fill="rgb(228,84,46)" fg:x="226" fg:w="1"/><text x="2.9176%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.07%)</title><rect x="2.6676%" y="885" width="0.0708%" height="15" fill="rgb(254,188,9)" fg:x="226" fg:w="6"/><text x="2.9176%" y="895.50"></text></g><g><title>core::mem::drop (6 samples, 0.07%)</title><rect x="2.6676%" y="869" width="0.0708%" height="15" fill="rgb(206,112,54)" fg:x="226" fg:w="6"/><text x="2.9176%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.07%)</title><rect x="2.6676%" y="853" width="0.0708%" height="15" fill="rgb(216,84,49)" fg:x="226" fg:w="6"/><text x="2.9176%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="2.6676%" y="837" width="0.0708%" height="15" fill="rgb(214,194,35)" fg:x="226" fg:w="6"/><text x="2.9176%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="2.6794%" y="821" width="0.0590%" height="15" fill="rgb(249,28,3)" fg:x="227" fg:w="5"/><text x="2.9294%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="2.6794%" y="805" width="0.0590%" height="15" fill="rgb(222,56,52)" fg:x="227" fg:w="5"/><text x="2.9294%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (13 samples, 0.15%)</title><rect x="2.6204%" y="917" width="0.1534%" height="15" fill="rgb(245,217,50)" fg:x="222" fg:w="13"/><text x="2.8704%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.15%)</title><rect x="2.6204%" y="901" width="0.1534%" height="15" fill="rgb(213,201,24)" fg:x="222" fg:w="13"/><text x="2.8704%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="2.7384%" y="885" width="0.0354%" height="15" fill="rgb(248,116,28)" fg:x="232" fg:w="3"/><text x="2.9884%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="2.7384%" y="869" width="0.0354%" height="15" fill="rgb(219,72,43)" fg:x="232" fg:w="3"/><text x="2.9884%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="2.7738%" y="917" width="0.0354%" height="15" fill="rgb(209,138,14)" fg:x="235" fg:w="3"/><text x="3.0238%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="2.7738%" y="901" width="0.0354%" height="15" fill="rgb(222,18,33)" fg:x="235" fg:w="3"/><text x="3.0238%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="2.7738%" y="885" width="0.0354%" height="15" fill="rgb(213,199,7)" fg:x="235" fg:w="3"/><text x="3.0238%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="2.7738%" y="869" width="0.0354%" height="15" fill="rgb(250,110,10)" fg:x="235" fg:w="3"/><text x="3.0238%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="2.8093%" y="885" width="0.0118%" height="15" fill="rgb(248,123,6)" fg:x="238" fg:w="1"/><text x="3.0593%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.8093%" y="869" width="0.0118%" height="15" fill="rgb(206,91,31)" fg:x="238" fg:w="1"/><text x="3.0593%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (18 samples, 0.21%)</title><rect x="2.6204%" y="933" width="0.2125%" height="15" fill="rgb(211,154,13)" fg:x="222" fg:w="18"/><text x="2.8704%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="2.8093%" y="917" width="0.0236%" height="15" fill="rgb(225,148,7)" fg:x="238" fg:w="2"/><text x="3.0593%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.8093%" y="901" width="0.0236%" height="15" fill="rgb(220,160,43)" fg:x="238" fg:w="2"/><text x="3.0593%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="2.8211%" y="885" width="0.0118%" height="15" fill="rgb(213,52,39)" fg:x="239" fg:w="1"/><text x="3.0711%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="2.8211%" y="869" width="0.0118%" height="15" fill="rgb(243,137,7)" fg:x="239" fg:w="1"/><text x="3.0711%" y="879.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="2.8329%" y="885" width="0.0354%" height="15" fill="rgb(230,79,13)" fg:x="240" fg:w="3"/><text x="3.0829%" y="895.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="2.8329%" y="869" width="0.0354%" height="15" fill="rgb(247,105,23)" fg:x="240" fg:w="3"/><text x="3.0829%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="2.8683%" y="885" width="0.0118%" height="15" fill="rgb(223,179,41)" fg:x="243" fg:w="1"/><text x="3.1183%" y="895.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="2.8683%" y="869" width="0.0118%" height="15" fill="rgb(218,9,34)" fg:x="243" fg:w="1"/><text x="3.1183%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="2.8683%" y="853" width="0.0118%" height="15" fill="rgb(222,106,8)" fg:x="243" fg:w="1"/><text x="3.1183%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.8683%" y="837" width="0.0118%" height="15" fill="rgb(211,220,0)" fg:x="243" fg:w="1"/><text x="3.1183%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="2.8683%" y="821" width="0.0118%" height="15" fill="rgb(229,52,16)" fg:x="243" fg:w="1"/><text x="3.1183%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="2.8683%" y="805" width="0.0118%" height="15" fill="rgb(212,155,18)" fg:x="243" fg:w="1"/><text x="3.1183%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="2.8329%" y="917" width="0.1062%" height="15" fill="rgb(242,21,14)" fg:x="240" fg:w="9"/><text x="3.0829%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.11%)</title><rect x="2.8329%" y="901" width="0.1062%" height="15" fill="rgb(222,19,48)" fg:x="240" fg:w="9"/><text x="3.0829%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="2.8801%" y="885" width="0.0590%" height="15" fill="rgb(232,45,27)" fg:x="244" fg:w="5"/><text x="3.1301%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="2.8801%" y="869" width="0.0590%" height="15" fill="rgb(249,103,42)" fg:x="244" fg:w="5"/><text x="3.1301%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.9391%" y="885" width="0.0236%" height="15" fill="rgb(246,81,33)" fg:x="249" fg:w="2"/><text x="3.1891%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.9509%" y="869" width="0.0118%" height="15" fill="rgb(252,33,42)" fg:x="250" fg:w="1"/><text x="3.2009%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="2.9627%" y="885" width="0.0236%" height="15" fill="rgb(209,212,41)" fg:x="251" fg:w="2"/><text x="3.2127%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="2.9627%" y="869" width="0.0236%" height="15" fill="rgb(207,154,6)" fg:x="251" fg:w="2"/><text x="3.2127%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="2.9627%" y="853" width="0.0236%" height="15" fill="rgb(223,64,47)" fg:x="251" fg:w="2"/><text x="3.2127%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.9627%" y="837" width="0.0236%" height="15" fill="rgb(211,161,38)" fg:x="251" fg:w="2"/><text x="3.2127%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="2.9745%" y="821" width="0.0118%" height="15" fill="rgb(219,138,40)" fg:x="252" fg:w="1"/><text x="3.2245%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="2.9745%" y="805" width="0.0118%" height="15" fill="rgb(241,228,46)" fg:x="252" fg:w="1"/><text x="3.2245%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="2.8329%" y="933" width="0.1771%" height="15" fill="rgb(223,209,38)" fg:x="240" fg:w="15"/><text x="3.0829%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="2.9391%" y="917" width="0.0708%" height="15" fill="rgb(236,164,45)" fg:x="249" fg:w="6"/><text x="3.1891%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="2.9391%" y="901" width="0.0708%" height="15" fill="rgb(231,15,5)" fg:x="249" fg:w="6"/><text x="3.1891%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="2.9863%" y="885" width="0.0236%" height="15" fill="rgb(252,35,15)" fg:x="253" fg:w="2"/><text x="3.2363%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="2.9863%" y="869" width="0.0236%" height="15" fill="rgb(248,181,18)" fg:x="253" fg:w="2"/><text x="3.2363%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="3.0099%" y="885" width="0.0236%" height="15" fill="rgb(233,39,42)" fg:x="255" fg:w="2"/><text x="3.2599%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="3.0099%" y="869" width="0.0236%" height="15" fill="rgb(238,110,33)" fg:x="255" fg:w="2"/><text x="3.2599%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="3.0099%" y="853" width="0.0236%" height="15" fill="rgb(233,195,10)" fg:x="255" fg:w="2"/><text x="3.2599%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.0099%" y="837" width="0.0236%" height="15" fill="rgb(254,105,3)" fg:x="255" fg:w="2"/><text x="3.2599%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.0099%" y="821" width="0.0236%" height="15" fill="rgb(221,225,9)" fg:x="255" fg:w="2"/><text x="3.2599%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.0099%" y="805" width="0.0236%" height="15" fill="rgb(224,227,45)" fg:x="255" fg:w="2"/><text x="3.2599%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="3.0099%" y="917" width="0.0472%" height="15" fill="rgb(229,198,43)" fg:x="255" fg:w="4"/><text x="3.2599%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="3.0099%" y="901" width="0.0472%" height="15" fill="rgb(206,209,35)" fg:x="255" fg:w="4"/><text x="3.2599%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.0335%" y="885" width="0.0236%" height="15" fill="rgb(245,195,53)" fg:x="257" fg:w="2"/><text x="3.2835%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.0335%" y="869" width="0.0236%" height="15" fill="rgb(240,92,26)" fg:x="257" fg:w="2"/><text x="3.2835%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="3.0571%" y="917" width="0.0118%" height="15" fill="rgb(207,40,23)" fg:x="259" fg:w="1"/><text x="3.3071%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.0571%" y="901" width="0.0118%" height="15" fill="rgb(223,111,35)" fg:x="259" fg:w="1"/><text x="3.3071%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.0571%" y="885" width="0.0118%" height="15" fill="rgb(229,147,28)" fg:x="259" fg:w="1"/><text x="3.3071%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.0571%" y="869" width="0.0118%" height="15" fill="rgb(211,29,28)" fg:x="259" fg:w="1"/><text x="3.3071%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="3.0689%" y="885" width="0.0118%" height="15" fill="rgb(228,72,33)" fg:x="260" fg:w="1"/><text x="3.3189%" y="895.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.0689%" y="869" width="0.0118%" height="15" fill="rgb(205,214,31)" fg:x="260" fg:w="1"/><text x="3.3189%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.0689%" y="853" width="0.0118%" height="15" fill="rgb(224,111,15)" fg:x="260" fg:w="1"/><text x="3.3189%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.0689%" y="837" width="0.0118%" height="15" fill="rgb(253,21,26)" fg:x="260" fg:w="1"/><text x="3.3189%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.0689%" y="821" width="0.0118%" height="15" fill="rgb(245,139,43)" fg:x="260" fg:w="1"/><text x="3.3189%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.0689%" y="805" width="0.0118%" height="15" fill="rgb(252,170,7)" fg:x="260" fg:w="1"/><text x="3.3189%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (53 samples, 0.63%)</title><rect x="2.4669%" y="949" width="0.6256%" height="15" fill="rgb(231,118,14)" fg:x="209" fg:w="53"/><text x="2.7169%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="3.0099%" y="933" width="0.0826%" height="15" fill="rgb(238,83,0)" fg:x="255" fg:w="7"/><text x="3.2599%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.0689%" y="917" width="0.0236%" height="15" fill="rgb(221,39,39)" fg:x="260" fg:w="2"/><text x="3.3189%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.0689%" y="901" width="0.0236%" height="15" fill="rgb(222,119,46)" fg:x="260" fg:w="2"/><text x="3.3189%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.0807%" y="885" width="0.0118%" height="15" fill="rgb(222,165,49)" fg:x="261" fg:w="1"/><text x="3.3307%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.0807%" y="869" width="0.0118%" height="15" fill="rgb(219,113,52)" fg:x="261" fg:w="1"/><text x="3.3307%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.0925%" y="901" width="0.0118%" height="15" fill="rgb(214,7,15)" fg:x="262" fg:w="1"/><text x="3.3425%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.0925%" y="885" width="0.0118%" height="15" fill="rgb(235,32,4)" fg:x="262" fg:w="1"/><text x="3.3425%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="3.0925%" y="933" width="0.0472%" height="15" fill="rgb(238,90,54)" fg:x="262" fg:w="4"/><text x="3.3425%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="3.0925%" y="917" width="0.0472%" height="15" fill="rgb(213,208,19)" fg:x="262" fg:w="4"/><text x="3.3425%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="3.1043%" y="901" width="0.0354%" height="15" fill="rgb(233,156,4)" fg:x="263" fg:w="3"/><text x="3.3543%" y="911.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="3.1043%" y="885" width="0.0354%" height="15" fill="rgb(207,194,5)" fg:x="263" fg:w="3"/><text x="3.3543%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="3.1043%" y="869" width="0.0354%" height="15" fill="rgb(206,111,30)" fg:x="263" fg:w="3"/><text x="3.3543%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.1043%" y="853" width="0.0354%" height="15" fill="rgb(243,70,54)" fg:x="263" fg:w="3"/><text x="3.3543%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.1043%" y="837" width="0.0354%" height="15" fill="rgb(242,28,8)" fg:x="263" fg:w="3"/><text x="3.3543%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.1043%" y="821" width="0.0354%" height="15" fill="rgb(219,106,18)" fg:x="263" fg:w="3"/><text x="3.3543%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="3.1398%" y="933" width="0.0354%" height="15" fill="rgb(244,222,10)" fg:x="266" fg:w="3"/><text x="3.3898%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.1398%" y="917" width="0.0354%" height="15" fill="rgb(236,179,52)" fg:x="266" fg:w="3"/><text x="3.3898%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.1398%" y="901" width="0.0354%" height="15" fill="rgb(213,23,39)" fg:x="266" fg:w="3"/><text x="3.3898%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.1398%" y="885" width="0.0354%" height="15" fill="rgb(238,48,10)" fg:x="266" fg:w="3"/><text x="3.3898%" y="895.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="3.1870%" y="901" width="0.0354%" height="15" fill="rgb(251,196,23)" fg:x="270" fg:w="3"/><text x="3.4370%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.1988%" y="885" width="0.0236%" height="15" fill="rgb(250,152,24)" fg:x="271" fg:w="2"/><text x="3.4488%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="3.2224%" y="901" width="0.0118%" height="15" fill="rgb(209,150,17)" fg:x="273" fg:w="1"/><text x="3.4724%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.2224%" y="885" width="0.0118%" height="15" fill="rgb(234,202,34)" fg:x="273" fg:w="1"/><text x="3.4724%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.2224%" y="869" width="0.0118%" height="15" fill="rgb(253,148,53)" fg:x="273" fg:w="1"/><text x="3.4724%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.2224%" y="853" width="0.0118%" height="15" fill="rgb(218,129,16)" fg:x="273" fg:w="1"/><text x="3.4724%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.2224%" y="837" width="0.0118%" height="15" fill="rgb(216,85,19)" fg:x="273" fg:w="1"/><text x="3.4724%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.2224%" y="821" width="0.0118%" height="15" fill="rgb(235,228,7)" fg:x="273" fg:w="1"/><text x="3.4724%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="3.1752%" y="933" width="0.0708%" height="15" fill="rgb(245,175,0)" fg:x="269" fg:w="6"/><text x="3.4252%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="3.1752%" y="917" width="0.0708%" height="15" fill="rgb(208,168,36)" fg:x="269" fg:w="6"/><text x="3.4252%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.2342%" y="901" width="0.0118%" height="15" fill="rgb(246,171,24)" fg:x="274" fg:w="1"/><text x="3.4842%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.2342%" y="885" width="0.0118%" height="15" fill="rgb(215,142,24)" fg:x="274" fg:w="1"/><text x="3.4842%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.2460%" y="901" width="0.0118%" height="15" fill="rgb(250,187,7)" fg:x="275" fg:w="1"/><text x="3.4960%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.2460%" y="885" width="0.0118%" height="15" fill="rgb(228,66,33)" fg:x="275" fg:w="1"/><text x="3.4960%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (2 samples, 0.02%)</title><rect x="3.2578%" y="885" width="0.0236%" height="15" fill="rgb(234,215,21)" fg:x="276" fg:w="2"/><text x="3.5078%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="3.2814%" y="837" width="0.0118%" height="15" fill="rgb(222,191,20)" fg:x="278" fg:w="1"/><text x="3.5314%" y="847.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="3.2814%" y="821" width="0.0118%" height="15" fill="rgb(245,79,54)" fg:x="278" fg:w="1"/><text x="3.5314%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="3.2578%" y="901" width="0.0472%" height="15" fill="rgb(240,10,37)" fg:x="276" fg:w="4"/><text x="3.5078%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="3.2814%" y="885" width="0.0236%" height="15" fill="rgb(214,192,32)" fg:x="278" fg:w="2"/><text x="3.5314%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="3.2814%" y="869" width="0.0236%" height="15" fill="rgb(209,36,54)" fg:x="278" fg:w="2"/><text x="3.5314%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.2814%" y="853" width="0.0236%" height="15" fill="rgb(220,10,11)" fg:x="278" fg:w="2"/><text x="3.5314%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.2932%" y="837" width="0.0118%" height="15" fill="rgb(221,106,17)" fg:x="279" fg:w="1"/><text x="3.5432%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.2932%" y="821" width="0.0118%" height="15" fill="rgb(251,142,44)" fg:x="279" fg:w="1"/><text x="3.5432%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="3.2460%" y="933" width="0.0708%" height="15" fill="rgb(238,13,15)" fg:x="275" fg:w="6"/><text x="3.4960%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="3.2460%" y="917" width="0.0708%" height="15" fill="rgb(208,107,27)" fg:x="275" fg:w="6"/><text x="3.4960%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.3050%" y="901" width="0.0118%" height="15" fill="rgb(205,136,37)" fg:x="280" fg:w="1"/><text x="3.5550%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.3050%" y="885" width="0.0118%" height="15" fill="rgb(250,205,27)" fg:x="280" fg:w="1"/><text x="3.5550%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.3168%" y="901" width="0.0118%" height="15" fill="rgb(210,80,43)" fg:x="281" fg:w="1"/><text x="3.5668%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.3168%" y="885" width="0.0118%" height="15" fill="rgb(247,160,36)" fg:x="281" fg:w="1"/><text x="3.5668%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="3.3286%" y="901" width="0.0354%" height="15" fill="rgb(234,13,49)" fg:x="282" fg:w="3"/><text x="3.5786%" y="911.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="3.3286%" y="885" width="0.0354%" height="15" fill="rgb(234,122,0)" fg:x="282" fg:w="3"/><text x="3.5786%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="3.3286%" y="869" width="0.0354%" height="15" fill="rgb(207,146,38)" fg:x="282" fg:w="3"/><text x="3.5786%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.3286%" y="853" width="0.0354%" height="15" fill="rgb(207,177,25)" fg:x="282" fg:w="3"/><text x="3.5786%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.3286%" y="837" width="0.0354%" height="15" fill="rgb(211,178,42)" fg:x="282" fg:w="3"/><text x="3.5786%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.3286%" y="821" width="0.0354%" height="15" fill="rgb(230,69,54)" fg:x="282" fg:w="3"/><text x="3.5786%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="3.3168%" y="933" width="0.0708%" height="15" fill="rgb(214,135,41)" fg:x="281" fg:w="6"/><text x="3.5668%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="3.3168%" y="917" width="0.0708%" height="15" fill="rgb(237,67,25)" fg:x="281" fg:w="6"/><text x="3.5668%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.3640%" y="901" width="0.0236%" height="15" fill="rgb(222,189,50)" fg:x="285" fg:w="2"/><text x="3.6140%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.3640%" y="885" width="0.0236%" height="15" fill="rgb(245,148,34)" fg:x="285" fg:w="2"/><text x="3.6140%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="3.3876%" y="933" width="0.0118%" height="15" fill="rgb(222,29,6)" fg:x="287" fg:w="1"/><text x="3.6376%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.3876%" y="917" width="0.0118%" height="15" fill="rgb(221,189,43)" fg:x="287" fg:w="1"/><text x="3.6376%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="3.3876%" y="901" width="0.0118%" height="15" fill="rgb(207,36,27)" fg:x="287" fg:w="1"/><text x="3.6376%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.3876%" y="885" width="0.0118%" height="15" fill="rgb(217,90,24)" fg:x="287" fg:w="1"/><text x="3.6376%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.3876%" y="869" width="0.0118%" height="15" fill="rgb(224,66,35)" fg:x="287" fg:w="1"/><text x="3.6376%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.3876%" y="853" width="0.0118%" height="15" fill="rgb(221,13,50)" fg:x="287" fg:w="1"/><text x="3.6376%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.3876%" y="837" width="0.0118%" height="15" fill="rgb(236,68,49)" fg:x="287" fg:w="1"/><text x="3.6376%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.3876%" y="821" width="0.0118%" height="15" fill="rgb(229,146,28)" fg:x="287" fg:w="1"/><text x="3.6376%" y="831.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.3994%" y="885" width="0.0236%" height="15" fill="rgb(225,31,38)" fg:x="288" fg:w="2"/><text x="3.6494%" y="895.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="3.3994%" y="901" width="0.0354%" height="15" fill="rgb(250,208,3)" fg:x="288" fg:w="3"/><text x="3.6494%" y="911.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="3.4230%" y="885" width="0.0118%" height="15" fill="rgb(246,54,23)" fg:x="290" fg:w="1"/><text x="3.6730%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="3.4348%" y="885" width="0.0118%" height="15" fill="rgb(243,76,11)" fg:x="291" fg:w="1"/><text x="3.6848%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="3.4348%" y="901" width="0.0236%" height="15" fill="rgb(245,21,50)" fg:x="291" fg:w="2"/><text x="3.6848%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.4466%" y="885" width="0.0118%" height="15" fill="rgb(228,9,43)" fg:x="292" fg:w="1"/><text x="3.6966%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.4466%" y="869" width="0.0118%" height="15" fill="rgb(208,100,47)" fg:x="292" fg:w="1"/><text x="3.6966%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.4466%" y="853" width="0.0118%" height="15" fill="rgb(232,26,8)" fg:x="292" fg:w="1"/><text x="3.6966%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.4466%" y="837" width="0.0118%" height="15" fill="rgb(216,166,38)" fg:x="292" fg:w="1"/><text x="3.6966%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.4466%" y="821" width="0.0118%" height="15" fill="rgb(251,202,51)" fg:x="292" fg:w="1"/><text x="3.6966%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (102 samples, 1.20%)</title><rect x="2.2781%" y="965" width="1.2040%" height="15" fill="rgb(254,216,34)" fg:x="193" fg:w="102"/><text x="2.5281%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (33 samples, 0.39%)</title><rect x="3.0925%" y="949" width="0.3895%" height="15" fill="rgb(251,32,27)" fg:x="262" fg:w="33"/><text x="3.3425%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="3.3994%" y="933" width="0.0826%" height="15" fill="rgb(208,127,28)" fg:x="288" fg:w="7"/><text x="3.6494%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="3.3994%" y="917" width="0.0826%" height="15" fill="rgb(224,137,22)" fg:x="288" fg:w="7"/><text x="3.6494%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.4585%" y="901" width="0.0236%" height="15" fill="rgb(254,70,32)" fg:x="293" fg:w="2"/><text x="3.7085%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.4585%" y="885" width="0.0236%" height="15" fill="rgb(229,75,37)" fg:x="293" fg:w="2"/><text x="3.7085%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.01%)</title><rect x="3.4821%" y="965" width="0.0118%" height="15" fill="rgb(252,64,23)" fg:x="295" fg:w="1"/><text x="3.7321%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="3.4821%" y="949" width="0.0118%" height="15" fill="rgb(232,162,48)" fg:x="295" fg:w="1"/><text x="3.7321%" y="959.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (11 samples, 0.13%)</title><rect x="3.4939%" y="965" width="0.1298%" height="15" fill="rgb(246,160,12)" fg:x="296" fg:w="11"/><text x="3.7439%" y="975.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (7 samples, 0.08%)</title><rect x="3.6237%" y="965" width="0.0826%" height="15" fill="rgb(247,166,0)" fg:x="307" fg:w="7"/><text x="3.8737%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.07%)</title><rect x="3.6355%" y="949" width="0.0708%" height="15" fill="rgb(249,219,21)" fg:x="308" fg:w="6"/><text x="3.8855%" y="959.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="3.7063%" y="949" width="0.0236%" height="15" fill="rgb(205,209,3)" fg:x="314" fg:w="2"/><text x="3.9563%" y="959.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.7063%" y="933" width="0.0236%" height="15" fill="rgb(243,44,1)" fg:x="314" fg:w="2"/><text x="3.9563%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (31 samples, 0.37%)</title><rect x="3.7299%" y="949" width="0.3659%" height="15" fill="rgb(206,159,16)" fg:x="316" fg:w="31"/><text x="3.9799%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="4.0958%" y="949" width="0.0118%" height="15" fill="rgb(244,77,30)" fg:x="347" fg:w="1"/><text x="4.3458%" y="959.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="4.0958%" y="933" width="0.0118%" height="15" fill="rgb(218,69,12)" fg:x="347" fg:w="1"/><text x="4.3458%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="4.0958%" y="917" width="0.0118%" height="15" fill="rgb(212,87,7)" fg:x="347" fg:w="1"/><text x="4.3458%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.0958%" y="901" width="0.0118%" height="15" fill="rgb(245,114,25)" fg:x="347" fg:w="1"/><text x="4.3458%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="4.0958%" y="885" width="0.0118%" height="15" fill="rgb(210,61,42)" fg:x="347" fg:w="1"/><text x="4.3458%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="4.0958%" y="869" width="0.0118%" height="15" fill="rgb(211,52,33)" fg:x="347" fg:w="1"/><text x="4.3458%" y="879.50"></text></g><g><title>__GI___libc_free (7 samples, 0.08%)</title><rect x="4.1076%" y="933" width="0.0826%" height="15" fill="rgb(234,58,33)" fg:x="348" fg:w="7"/><text x="4.3576%" y="943.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="4.1313%" y="917" width="0.0590%" height="15" fill="rgb(220,115,36)" fg:x="350" fg:w="5"/><text x="4.3813%" y="927.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="4.1903%" y="869" width="0.0118%" height="15" fill="rgb(243,153,54)" fg:x="355" fg:w="1"/><text x="4.4403%" y="879.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="4.1903%" y="853" width="0.0118%" height="15" fill="rgb(251,47,18)" fg:x="355" fg:w="1"/><text x="4.4403%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="4.1903%" y="933" width="0.0472%" height="15" fill="rgb(242,102,42)" fg:x="355" fg:w="4"/><text x="4.4403%" y="943.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="4.1903%" y="917" width="0.0472%" height="15" fill="rgb(234,31,38)" fg:x="355" fg:w="4"/><text x="4.4403%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="4.1903%" y="901" width="0.0472%" height="15" fill="rgb(221,117,51)" fg:x="355" fg:w="4"/><text x="4.4403%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="4.1903%" y="885" width="0.0472%" height="15" fill="rgb(212,20,18)" fg:x="355" fg:w="4"/><text x="4.4403%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="4.2021%" y="869" width="0.0354%" height="15" fill="rgb(245,133,36)" fg:x="356" fg:w="3"/><text x="4.4521%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="4.2021%" y="853" width="0.0354%" height="15" fill="rgb(212,6,19)" fg:x="356" fg:w="3"/><text x="4.4521%" y="863.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="4.2375%" y="885" width="0.0472%" height="15" fill="rgb(218,1,36)" fg:x="359" fg:w="4"/><text x="4.4875%" y="895.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="4.2611%" y="869" width="0.0236%" height="15" fill="rgb(246,84,54)" fg:x="361" fg:w="2"/><text x="4.5111%" y="879.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="4.2847%" y="821" width="0.0118%" height="15" fill="rgb(242,110,6)" fg:x="363" fg:w="1"/><text x="4.5347%" y="831.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="4.2847%" y="805" width="0.0118%" height="15" fill="rgb(214,47,5)" fg:x="363" fg:w="1"/><text x="4.5347%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.06%)</title><rect x="4.2847%" y="885" width="0.0590%" height="15" fill="rgb(218,159,25)" fg:x="363" fg:w="5"/><text x="4.5347%" y="895.50"></text></g><g><title>core::mem::drop (5 samples, 0.06%)</title><rect x="4.2847%" y="869" width="0.0590%" height="15" fill="rgb(215,211,28)" fg:x="363" fg:w="5"/><text x="4.5347%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.06%)</title><rect x="4.2847%" y="853" width="0.0590%" height="15" fill="rgb(238,59,32)" fg:x="363" fg:w="5"/><text x="4.5347%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="4.2847%" y="837" width="0.0590%" height="15" fill="rgb(226,82,3)" fg:x="363" fg:w="5"/><text x="4.5347%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="4.2965%" y="821" width="0.0472%" height="15" fill="rgb(240,164,32)" fg:x="364" fg:w="4"/><text x="4.5465%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="4.2965%" y="805" width="0.0472%" height="15" fill="rgb(232,46,7)" fg:x="364" fg:w="4"/><text x="4.5465%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (16 samples, 0.19%)</title><rect x="4.2375%" y="917" width="0.1889%" height="15" fill="rgb(229,129,53)" fg:x="359" fg:w="16"/><text x="4.4875%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.19%)</title><rect x="4.2375%" y="901" width="0.1889%" height="15" fill="rgb(234,188,29)" fg:x="359" fg:w="16"/><text x="4.4875%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.08%)</title><rect x="4.3437%" y="885" width="0.0826%" height="15" fill="rgb(246,141,4)" fg:x="368" fg:w="7"/><text x="4.5937%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.08%)</title><rect x="4.3437%" y="869" width="0.0826%" height="15" fill="rgb(229,23,39)" fg:x="368" fg:w="7"/><text x="4.5937%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.4381%" y="885" width="0.0236%" height="15" fill="rgb(206,12,3)" fg:x="376" fg:w="2"/><text x="4.6881%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="4.4500%" y="869" width="0.0118%" height="15" fill="rgb(252,226,20)" fg:x="377" fg:w="1"/><text x="4.7000%" y="879.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="4.4618%" y="821" width="0.0118%" height="15" fill="rgb(216,123,35)" fg:x="378" fg:w="1"/><text x="4.7118%" y="831.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="4.4618%" y="805" width="0.0118%" height="15" fill="rgb(212,68,40)" fg:x="378" fg:w="1"/><text x="4.7118%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="4.4618%" y="885" width="0.0354%" height="15" fill="rgb(254,125,32)" fg:x="378" fg:w="3"/><text x="4.7118%" y="895.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="4.4618%" y="869" width="0.0354%" height="15" fill="rgb(253,97,22)" fg:x="378" fg:w="3"/><text x="4.7118%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="4.4618%" y="853" width="0.0354%" height="15" fill="rgb(241,101,14)" fg:x="378" fg:w="3"/><text x="4.7118%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="4.4618%" y="837" width="0.0354%" height="15" fill="rgb(238,103,29)" fg:x="378" fg:w="3"/><text x="4.7118%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.4736%" y="821" width="0.0236%" height="15" fill="rgb(233,195,47)" fg:x="379" fg:w="2"/><text x="4.7236%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.4736%" y="805" width="0.0236%" height="15" fill="rgb(246,218,30)" fg:x="379" fg:w="2"/><text x="4.7236%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (23 samples, 0.27%)</title><rect x="4.2375%" y="933" width="0.2715%" height="15" fill="rgb(219,145,47)" fg:x="359" fg:w="23"/><text x="4.4875%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="4.4263%" y="917" width="0.0826%" height="15" fill="rgb(243,12,26)" fg:x="375" fg:w="7"/><text x="4.6763%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="4.4263%" y="901" width="0.0826%" height="15" fill="rgb(214,87,16)" fg:x="375" fg:w="7"/><text x="4.6763%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="4.4972%" y="885" width="0.0118%" height="15" fill="rgb(208,99,42)" fg:x="381" fg:w="1"/><text x="4.7472%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="4.4972%" y="869" width="0.0118%" height="15" fill="rgb(253,99,2)" fg:x="381" fg:w="1"/><text x="4.7472%" y="879.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="4.5208%" y="885" width="0.0118%" height="15" fill="rgb(220,168,23)" fg:x="383" fg:w="1"/><text x="4.7708%" y="895.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="4.5208%" y="869" width="0.0118%" height="15" fill="rgb(242,38,24)" fg:x="383" fg:w="1"/><text x="4.7708%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="4.5208%" y="917" width="0.0472%" height="15" fill="rgb(225,182,9)" fg:x="383" fg:w="4"/><text x="4.7708%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="4.5208%" y="901" width="0.0472%" height="15" fill="rgb(243,178,37)" fg:x="383" fg:w="4"/><text x="4.7708%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="4.5326%" y="885" width="0.0354%" height="15" fill="rgb(232,139,19)" fg:x="384" fg:w="3"/><text x="4.7826%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="4.5326%" y="869" width="0.0354%" height="15" fill="rgb(225,201,24)" fg:x="384" fg:w="3"/><text x="4.7826%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.5680%" y="885" width="0.0236%" height="15" fill="rgb(221,47,46)" fg:x="387" fg:w="2"/><text x="4.8180%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="4.5798%" y="869" width="0.0118%" height="15" fill="rgb(249,23,13)" fg:x="388" fg:w="1"/><text x="4.8298%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (8 samples, 0.09%)</title><rect x="4.5090%" y="933" width="0.0944%" height="15" fill="rgb(219,9,5)" fg:x="382" fg:w="8"/><text x="4.7590%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="4.5680%" y="917" width="0.0354%" height="15" fill="rgb(254,171,16)" fg:x="387" fg:w="3"/><text x="4.8180%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="4.5680%" y="901" width="0.0354%" height="15" fill="rgb(230,171,20)" fg:x="387" fg:w="3"/><text x="4.8180%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="4.5916%" y="885" width="0.0118%" height="15" fill="rgb(210,71,41)" fg:x="389" fg:w="1"/><text x="4.8416%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="4.5916%" y="869" width="0.0118%" height="15" fill="rgb(206,173,20)" fg:x="389" fg:w="1"/><text x="4.8416%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.6034%" y="885" width="0.0236%" height="15" fill="rgb(233,88,34)" fg:x="390" fg:w="2"/><text x="4.8534%" y="895.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="4.6034%" y="869" width="0.0236%" height="15" fill="rgb(223,209,46)" fg:x="390" fg:w="2"/><text x="4.8534%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="4.6034%" y="917" width="0.0472%" height="15" fill="rgb(250,43,18)" fg:x="390" fg:w="4"/><text x="4.8534%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="4.6034%" y="901" width="0.0472%" height="15" fill="rgb(208,13,10)" fg:x="390" fg:w="4"/><text x="4.8534%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.6270%" y="885" width="0.0236%" height="15" fill="rgb(212,200,36)" fg:x="392" fg:w="2"/><text x="4.8770%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="4.6270%" y="869" width="0.0236%" height="15" fill="rgb(225,90,30)" fg:x="392" fg:w="2"/><text x="4.8770%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="4.6270%" y="853" width="0.0236%" height="15" fill="rgb(236,182,39)" fg:x="392" fg:w="2"/><text x="4.8770%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.6270%" y="837" width="0.0236%" height="15" fill="rgb(212,144,35)" fg:x="392" fg:w="2"/><text x="4.8770%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.6270%" y="821" width="0.0236%" height="15" fill="rgb(228,63,44)" fg:x="392" fg:w="2"/><text x="4.8770%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.6270%" y="805" width="0.0236%" height="15" fill="rgb(228,109,6)" fg:x="392" fg:w="2"/><text x="4.8770%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="4.6506%" y="917" width="0.0472%" height="15" fill="rgb(238,117,24)" fg:x="394" fg:w="4"/><text x="4.9006%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="4.6506%" y="901" width="0.0472%" height="15" fill="rgb(242,26,26)" fg:x="394" fg:w="4"/><text x="4.9006%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="4.6506%" y="885" width="0.0472%" height="15" fill="rgb(221,92,48)" fg:x="394" fg:w="4"/><text x="4.9006%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="4.6506%" y="869" width="0.0472%" height="15" fill="rgb(209,209,32)" fg:x="394" fg:w="4"/><text x="4.9006%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="4.6978%" y="885" width="0.0354%" height="15" fill="rgb(221,70,22)" fg:x="398" fg:w="3"/><text x="4.9478%" y="895.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="4.6978%" y="869" width="0.0354%" height="15" fill="rgb(248,145,5)" fg:x="398" fg:w="3"/><text x="4.9478%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="4.6978%" y="853" width="0.0354%" height="15" fill="rgb(226,116,26)" fg:x="398" fg:w="3"/><text x="4.9478%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="4.6978%" y="837" width="0.0354%" height="15" fill="rgb(244,5,17)" fg:x="398" fg:w="3"/><text x="4.9478%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="4.6978%" y="821" width="0.0354%" height="15" fill="rgb(252,159,33)" fg:x="398" fg:w="3"/><text x="4.9478%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="4.6978%" y="805" width="0.0354%" height="15" fill="rgb(206,71,0)" fg:x="398" fg:w="3"/><text x="4.9478%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (68 samples, 0.80%)</title><rect x="4.1076%" y="949" width="0.8026%" height="15" fill="rgb(233,118,54)" fg:x="348" fg:w="68"/><text x="4.3576%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (26 samples, 0.31%)</title><rect x="4.6034%" y="933" width="0.3069%" height="15" fill="rgb(234,83,48)" fg:x="390" fg:w="26"/><text x="4.8534%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (18 samples, 0.21%)</title><rect x="4.6978%" y="917" width="0.2125%" height="15" fill="rgb(228,3,54)" fg:x="398" fg:w="18"/><text x="4.9478%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.21%)</title><rect x="4.6978%" y="901" width="0.2125%" height="15" fill="rgb(226,155,13)" fg:x="398" fg:w="18"/><text x="4.9478%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.18%)</title><rect x="4.7332%" y="885" width="0.1771%" height="15" fill="rgb(241,28,37)" fg:x="401" fg:w="15"/><text x="4.9832%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.18%)</title><rect x="4.7332%" y="869" width="0.1771%" height="15" fill="rgb(233,93,10)" fg:x="401" fg:w="15"/><text x="4.9832%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="4.9103%" y="901" width="0.0118%" height="15" fill="rgb(225,113,19)" fg:x="416" fg:w="1"/><text x="5.1603%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="4.9103%" y="885" width="0.0118%" height="15" fill="rgb(241,2,18)" fg:x="416" fg:w="1"/><text x="5.1603%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="4.9221%" y="901" width="0.0354%" height="15" fill="rgb(228,207,21)" fg:x="417" fg:w="3"/><text x="5.1721%" y="911.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="4.9221%" y="885" width="0.0354%" height="15" fill="rgb(213,211,35)" fg:x="417" fg:w="3"/><text x="5.1721%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="4.9221%" y="869" width="0.0354%" height="15" fill="rgb(209,83,10)" fg:x="417" fg:w="3"/><text x="5.1721%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="4.9221%" y="853" width="0.0354%" height="15" fill="rgb(209,164,1)" fg:x="417" fg:w="3"/><text x="5.1721%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="4.9221%" y="837" width="0.0354%" height="15" fill="rgb(213,184,43)" fg:x="417" fg:w="3"/><text x="5.1721%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="4.9221%" y="821" width="0.0354%" height="15" fill="rgb(231,61,34)" fg:x="417" fg:w="3"/><text x="5.1721%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="4.9103%" y="933" width="0.0826%" height="15" fill="rgb(235,75,3)" fg:x="416" fg:w="7"/><text x="5.1603%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="4.9103%" y="917" width="0.0826%" height="15" fill="rgb(220,106,47)" fg:x="416" fg:w="7"/><text x="5.1603%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="4.9575%" y="901" width="0.0354%" height="15" fill="rgb(210,196,33)" fg:x="420" fg:w="3"/><text x="5.2075%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="4.9575%" y="885" width="0.0354%" height="15" fill="rgb(229,154,42)" fg:x="420" fg:w="3"/><text x="5.2075%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="4.9929%" y="933" width="0.0236%" height="15" fill="rgb(228,114,26)" fg:x="423" fg:w="2"/><text x="5.2429%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.9929%" y="917" width="0.0236%" height="15" fill="rgb(208,144,1)" fg:x="423" fg:w="2"/><text x="5.2429%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.9929%" y="901" width="0.0236%" height="15" fill="rgb(239,112,37)" fg:x="423" fg:w="2"/><text x="5.2429%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.9929%" y="885" width="0.0236%" height="15" fill="rgb(210,96,50)" fg:x="423" fg:w="2"/><text x="5.2429%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="5.0165%" y="901" width="0.0118%" height="15" fill="rgb(222,178,2)" fg:x="425" fg:w="1"/><text x="5.2665%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="5.0165%" y="885" width="0.0118%" height="15" fill="rgb(226,74,18)" fg:x="425" fg:w="1"/><text x="5.2665%" y="895.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="5.0283%" y="901" width="0.0118%" height="15" fill="rgb(225,67,54)" fg:x="426" fg:w="1"/><text x="5.2783%" y="911.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="5.0283%" y="885" width="0.0118%" height="15" fill="rgb(251,92,32)" fg:x="426" fg:w="1"/><text x="5.2783%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="5.0401%" y="901" width="0.0236%" height="15" fill="rgb(228,149,22)" fg:x="427" fg:w="2"/><text x="5.2901%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="5.0401%" y="885" width="0.0236%" height="15" fill="rgb(243,54,13)" fg:x="427" fg:w="2"/><text x="5.2901%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="5.0401%" y="869" width="0.0236%" height="15" fill="rgb(243,180,28)" fg:x="427" fg:w="2"/><text x="5.2901%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="5.0401%" y="853" width="0.0236%" height="15" fill="rgb(208,167,24)" fg:x="427" fg:w="2"/><text x="5.2901%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="5.0401%" y="837" width="0.0236%" height="15" fill="rgb(245,73,45)" fg:x="427" fg:w="2"/><text x="5.2901%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="5.0401%" y="821" width="0.0236%" height="15" fill="rgb(237,203,48)" fg:x="427" fg:w="2"/><text x="5.2901%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="5.0165%" y="933" width="0.0590%" height="15" fill="rgb(211,197,16)" fg:x="425" fg:w="5"/><text x="5.2665%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="5.0165%" y="917" width="0.0590%" height="15" fill="rgb(243,99,51)" fg:x="425" fg:w="5"/><text x="5.2665%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="5.0637%" y="901" width="0.0118%" height="15" fill="rgb(215,123,29)" fg:x="429" fg:w="1"/><text x="5.3137%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="5.0637%" y="885" width="0.0118%" height="15" fill="rgb(239,186,37)" fg:x="429" fg:w="1"/><text x="5.3137%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="5.0755%" y="901" width="0.0118%" height="15" fill="rgb(252,136,39)" fg:x="430" fg:w="1"/><text x="5.3255%" y="911.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="5.0755%" y="885" width="0.0118%" height="15" fill="rgb(223,213,32)" fg:x="430" fg:w="1"/><text x="5.3255%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="5.0873%" y="901" width="0.0118%" height="15" fill="rgb(233,115,5)" fg:x="431" fg:w="1"/><text x="5.3373%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="5.0873%" y="885" width="0.0118%" height="15" fill="rgb(207,226,44)" fg:x="431" fg:w="1"/><text x="5.3373%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="5.0873%" y="869" width="0.0118%" height="15" fill="rgb(208,126,0)" fg:x="431" fg:w="1"/><text x="5.3373%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="5.0873%" y="853" width="0.0118%" height="15" fill="rgb(244,66,21)" fg:x="431" fg:w="1"/><text x="5.3373%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="5.0873%" y="837" width="0.0118%" height="15" fill="rgb(222,97,12)" fg:x="431" fg:w="1"/><text x="5.3373%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="5.0873%" y="821" width="0.0118%" height="15" fill="rgb(219,213,19)" fg:x="431" fg:w="1"/><text x="5.3373%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="5.0755%" y="933" width="0.0590%" height="15" fill="rgb(252,169,30)" fg:x="430" fg:w="5"/><text x="5.3255%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="5.0755%" y="917" width="0.0590%" height="15" fill="rgb(206,32,51)" fg:x="430" fg:w="5"/><text x="5.3255%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="5.0992%" y="901" width="0.0354%" height="15" fill="rgb(250,172,42)" fg:x="432" fg:w="3"/><text x="5.3492%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="5.0992%" y="885" width="0.0354%" height="15" fill="rgb(209,34,43)" fg:x="432" fg:w="3"/><text x="5.3492%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="5.1346%" y="901" width="0.0236%" height="15" fill="rgb(223,11,35)" fg:x="435" fg:w="2"/><text x="5.3846%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="5.1346%" y="885" width="0.0236%" height="15" fill="rgb(251,219,26)" fg:x="435" fg:w="2"/><text x="5.3846%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="5.1582%" y="901" width="0.0472%" height="15" fill="rgb(231,119,3)" fg:x="437" fg:w="4"/><text x="5.4082%" y="911.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="5.1582%" y="885" width="0.0472%" height="15" fill="rgb(216,97,11)" fg:x="437" fg:w="4"/><text x="5.4082%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="5.1582%" y="869" width="0.0472%" height="15" fill="rgb(223,59,9)" fg:x="437" fg:w="4"/><text x="5.4082%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="5.1582%" y="853" width="0.0472%" height="15" fill="rgb(233,93,31)" fg:x="437" fg:w="4"/><text x="5.4082%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="5.1582%" y="837" width="0.0472%" height="15" fill="rgb(239,81,33)" fg:x="437" fg:w="4"/><text x="5.4082%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="5.1582%" y="821" width="0.0472%" height="15" fill="rgb(213,120,34)" fg:x="437" fg:w="4"/><text x="5.4082%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="5.1346%" y="933" width="0.0826%" height="15" fill="rgb(243,49,53)" fg:x="435" fg:w="7"/><text x="5.3846%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="5.1346%" y="917" width="0.0826%" height="15" fill="rgb(247,216,33)" fg:x="435" fg:w="7"/><text x="5.3846%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="5.2054%" y="901" width="0.0118%" height="15" fill="rgb(226,26,14)" fg:x="441" fg:w="1"/><text x="5.4554%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="5.2054%" y="885" width="0.0118%" height="15" fill="rgb(215,49,53)" fg:x="441" fg:w="1"/><text x="5.4554%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="5.2172%" y="901" width="0.0236%" height="15" fill="rgb(245,162,40)" fg:x="442" fg:w="2"/><text x="5.4672%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="5.2172%" y="885" width="0.0236%" height="15" fill="rgb(229,68,17)" fg:x="442" fg:w="2"/><text x="5.4672%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="5.2172%" y="933" width="0.0354%" height="15" fill="rgb(213,182,10)" fg:x="442" fg:w="3"/><text x="5.4672%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="5.2172%" y="917" width="0.0354%" height="15" fill="rgb(245,125,30)" fg:x="442" fg:w="3"/><text x="5.4672%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="5.2408%" y="901" width="0.0118%" height="15" fill="rgb(232,202,2)" fg:x="444" fg:w="1"/><text x="5.4908%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="5.2408%" y="885" width="0.0118%" height="15" fill="rgb(237,140,51)" fg:x="444" fg:w="1"/><text x="5.4908%" y="895.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="5.2526%" y="901" width="0.0354%" height="15" fill="rgb(236,157,25)" fg:x="445" fg:w="3"/><text x="5.5026%" y="911.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="5.2526%" y="885" width="0.0354%" height="15" fill="rgb(219,209,0)" fg:x="445" fg:w="3"/><text x="5.5026%" y="895.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="5.2880%" y="901" width="0.0118%" height="15" fill="rgb(240,116,54)" fg:x="448" fg:w="1"/><text x="5.5380%" y="911.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="5.2998%" y="837" width="0.0118%" height="15" fill="rgb(216,10,36)" fg:x="449" fg:w="1"/><text x="5.5498%" y="847.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="5.2998%" y="821" width="0.0118%" height="15" fill="rgb(222,72,44)" fg:x="449" fg:w="1"/><text x="5.5498%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="5.2998%" y="901" width="0.0472%" height="15" fill="rgb(232,159,9)" fg:x="449" fg:w="4"/><text x="5.5498%" y="911.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="5.2998%" y="885" width="0.0472%" height="15" fill="rgb(210,39,32)" fg:x="449" fg:w="4"/><text x="5.5498%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="5.2998%" y="869" width="0.0472%" height="15" fill="rgb(216,194,45)" fg:x="449" fg:w="4"/><text x="5.5498%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="5.2998%" y="853" width="0.0472%" height="15" fill="rgb(218,18,35)" fg:x="449" fg:w="4"/><text x="5.5498%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="5.3116%" y="837" width="0.0354%" height="15" fill="rgb(207,83,51)" fg:x="450" fg:w="3"/><text x="5.5616%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="5.3116%" y="821" width="0.0354%" height="15" fill="rgb(225,63,43)" fg:x="450" fg:w="3"/><text x="5.5616%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (39 samples, 0.46%)</title><rect x="4.9103%" y="949" width="0.4603%" height="15" fill="rgb(207,57,36)" fg:x="416" fg:w="39"/><text x="5.1603%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="5.2526%" y="933" width="0.1180%" height="15" fill="rgb(216,99,33)" fg:x="445" fg:w="10"/><text x="5.5026%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="5.2526%" y="917" width="0.1180%" height="15" fill="rgb(225,42,16)" fg:x="445" fg:w="10"/><text x="5.5026%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="5.3470%" y="901" width="0.0236%" height="15" fill="rgb(220,201,45)" fg:x="453" fg:w="2"/><text x="5.5970%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="5.3470%" y="885" width="0.0236%" height="15" fill="rgb(225,33,4)" fg:x="453" fg:w="2"/><text x="5.5970%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.22%)</title><rect x="5.3824%" y="885" width="0.2243%" height="15" fill="rgb(224,33,50)" fg:x="456" fg:w="19"/><text x="5.6324%" y="895.50"></text></g><g><title>_int_malloc (7 samples, 0.08%)</title><rect x="5.6303%" y="757" width="0.0826%" height="15" fill="rgb(246,198,51)" fg:x="477" fg:w="7"/><text x="5.8803%" y="767.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.11%)</title><rect x="5.6185%" y="773" width="0.1062%" height="15" fill="rgb(205,22,4)" fg:x="476" fg:w="9"/><text x="5.8685%" y="783.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="5.7129%" y="757" width="0.0118%" height="15" fill="rgb(206,3,8)" fg:x="484" fg:w="1"/><text x="5.9629%" y="767.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="5.7129%" y="741" width="0.0118%" height="15" fill="rgb(251,23,15)" fg:x="484" fg:w="1"/><text x="5.9629%" y="751.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (11 samples, 0.13%)</title><rect x="5.6067%" y="885" width="0.1298%" height="15" fill="rgb(252,88,28)" fg:x="475" fg:w="11"/><text x="5.8567%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (11 samples, 0.13%)</title><rect x="5.6067%" y="869" width="0.1298%" height="15" fill="rgb(212,127,14)" fg:x="475" fg:w="11"/><text x="5.8567%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (11 samples, 0.13%)</title><rect x="5.6067%" y="853" width="0.1298%" height="15" fill="rgb(247,145,37)" fg:x="475" fg:w="11"/><text x="5.8567%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (11 samples, 0.13%)</title><rect x="5.6067%" y="837" width="0.1298%" height="15" fill="rgb(209,117,53)" fg:x="475" fg:w="11"/><text x="5.8567%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.13%)</title><rect x="5.6067%" y="821" width="0.1298%" height="15" fill="rgb(212,90,42)" fg:x="475" fg:w="11"/><text x="5.8567%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.13%)</title><rect x="5.6067%" y="805" width="0.1298%" height="15" fill="rgb(218,164,37)" fg:x="475" fg:w="11"/><text x="5.8567%" y="815.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.13%)</title><rect x="5.6067%" y="789" width="0.1298%" height="15" fill="rgb(246,65,34)" fg:x="475" fg:w="11"/><text x="5.8567%" y="799.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="5.7247%" y="773" width="0.0118%" height="15" fill="rgb(231,100,33)" fg:x="485" fg:w="1"/><text x="5.9747%" y="783.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="5.7483%" y="773" width="0.0354%" height="15" fill="rgb(228,126,14)" fg:x="487" fg:w="3"/><text x="5.9983%" y="783.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="5.7720%" y="757" width="0.0118%" height="15" fill="rgb(215,173,21)" fg:x="489" fg:w="1"/><text x="6.0220%" y="767.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="5.7720%" y="741" width="0.0118%" height="15" fill="rgb(210,6,40)" fg:x="489" fg:w="1"/><text x="6.0220%" y="751.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (5 samples, 0.06%)</title><rect x="5.7365%" y="885" width="0.0590%" height="15" fill="rgb(212,48,18)" fg:x="486" fg:w="5"/><text x="5.9865%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="5.7483%" y="869" width="0.0472%" height="15" fill="rgb(230,214,11)" fg:x="487" fg:w="4"/><text x="5.9983%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="5.7483%" y="853" width="0.0472%" height="15" fill="rgb(254,105,39)" fg:x="487" fg:w="4"/><text x="5.9983%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="5.7483%" y="837" width="0.0472%" height="15" fill="rgb(245,158,5)" fg:x="487" fg:w="4"/><text x="5.9983%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="5.7483%" y="821" width="0.0472%" height="15" fill="rgb(249,208,11)" fg:x="487" fg:w="4"/><text x="5.9983%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="5.7483%" y="805" width="0.0472%" height="15" fill="rgb(210,39,28)" fg:x="487" fg:w="4"/><text x="5.9983%" y="815.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="5.7483%" y="789" width="0.0472%" height="15" fill="rgb(211,56,53)" fg:x="487" fg:w="4"/><text x="5.9983%" y="799.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="5.7838%" y="773" width="0.0118%" height="15" fill="rgb(226,201,30)" fg:x="490" fg:w="1"/><text x="6.0338%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (12 samples, 0.14%)</title><rect x="5.7956%" y="885" width="0.1416%" height="15" fill="rgb(239,101,34)" fg:x="491" fg:w="12"/><text x="6.0456%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (11 samples, 0.13%)</title><rect x="5.8074%" y="869" width="0.1298%" height="15" fill="rgb(226,209,5)" fg:x="492" fg:w="11"/><text x="6.0574%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (11 samples, 0.13%)</title><rect x="5.8074%" y="853" width="0.1298%" height="15" fill="rgb(250,105,47)" fg:x="492" fg:w="11"/><text x="6.0574%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (11 samples, 0.13%)</title><rect x="5.8074%" y="837" width="0.1298%" height="15" fill="rgb(230,72,3)" fg:x="492" fg:w="11"/><text x="6.0574%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.13%)</title><rect x="5.8074%" y="821" width="0.1298%" height="15" fill="rgb(232,218,39)" fg:x="492" fg:w="11"/><text x="6.0574%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.13%)</title><rect x="5.8074%" y="805" width="0.1298%" height="15" fill="rgb(248,166,6)" fg:x="492" fg:w="11"/><text x="6.0574%" y="815.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.13%)</title><rect x="5.8074%" y="789" width="0.1298%" height="15" fill="rgb(247,89,20)" fg:x="492" fg:w="11"/><text x="6.0574%" y="799.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.13%)</title><rect x="5.8074%" y="773" width="0.1298%" height="15" fill="rgb(248,130,54)" fg:x="492" fg:w="11"/><text x="6.0574%" y="783.50"></text></g><g><title>_int_malloc (10 samples, 0.12%)</title><rect x="5.8192%" y="757" width="0.1180%" height="15" fill="rgb(234,196,4)" fg:x="493" fg:w="10"/><text x="6.0692%" y="767.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="5.9136%" y="741" width="0.0236%" height="15" fill="rgb(250,143,31)" fg:x="501" fg:w="2"/><text x="6.1636%" y="751.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="5.9372%" y="773" width="0.0236%" height="15" fill="rgb(211,110,34)" fg:x="503" fg:w="2"/><text x="6.1872%" y="783.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="5.9372%" y="757" width="0.0236%" height="15" fill="rgb(215,124,48)" fg:x="503" fg:w="2"/><text x="6.1872%" y="767.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="5.9372%" y="741" width="0.0236%" height="15" fill="rgb(216,46,13)" fg:x="503" fg:w="2"/><text x="6.1872%" y="751.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="5.9608%" y="773" width="0.0118%" height="15" fill="rgb(205,184,25)" fg:x="505" fg:w="1"/><text x="6.2108%" y="783.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="5.9608%" y="757" width="0.0118%" height="15" fill="rgb(228,1,10)" fg:x="505" fg:w="1"/><text x="6.2108%" y="767.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (52 samples, 0.61%)</title><rect x="5.3706%" y="949" width="0.6138%" height="15" fill="rgb(213,116,27)" fg:x="455" fg:w="52"/><text x="5.6206%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (52 samples, 0.61%)</title><rect x="5.3706%" y="933" width="0.6138%" height="15" fill="rgb(241,95,50)" fg:x="455" fg:w="52"/><text x="5.6206%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (52 samples, 0.61%)</title><rect x="5.3706%" y="917" width="0.6138%" height="15" fill="rgb(238,48,32)" fg:x="455" fg:w="52"/><text x="5.6206%" y="927.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (52 samples, 0.61%)</title><rect x="5.3706%" y="901" width="0.6138%" height="15" fill="rgb(235,113,49)" fg:x="455" fg:w="52"/><text x="5.6206%" y="911.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (4 samples, 0.05%)</title><rect x="5.9372%" y="885" width="0.0472%" height="15" fill="rgb(205,127,43)" fg:x="503" fg:w="4"/><text x="6.1872%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="5.9372%" y="869" width="0.0472%" height="15" fill="rgb(250,162,2)" fg:x="503" fg:w="4"/><text x="6.1872%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="5.9372%" y="853" width="0.0472%" height="15" fill="rgb(220,13,41)" fg:x="503" fg:w="4"/><text x="6.1872%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="5.9372%" y="837" width="0.0472%" height="15" fill="rgb(249,221,25)" fg:x="503" fg:w="4"/><text x="6.1872%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="5.9372%" y="821" width="0.0472%" height="15" fill="rgb(215,208,19)" fg:x="503" fg:w="4"/><text x="6.1872%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="5.9372%" y="805" width="0.0472%" height="15" fill="rgb(236,175,2)" fg:x="503" fg:w="4"/><text x="6.1872%" y="815.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="5.9372%" y="789" width="0.0472%" height="15" fill="rgb(241,52,2)" fg:x="503" fg:w="4"/><text x="6.1872%" y="799.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="5.9726%" y="773" width="0.0118%" height="15" fill="rgb(248,140,14)" fg:x="506" fg:w="1"/><text x="6.2226%" y="783.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="5.9844%" y="949" width="0.0236%" height="15" fill="rgb(253,22,42)" fg:x="507" fg:w="2"/><text x="6.2344%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="5.9844%" y="933" width="0.0236%" height="15" fill="rgb(234,61,47)" fg:x="507" fg:w="2"/><text x="6.2344%" y="943.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="6.0198%" y="933" width="0.0118%" height="15" fill="rgb(208,226,15)" fg:x="510" fg:w="1"/><text x="6.2698%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="6.0198%" y="917" width="0.0118%" height="15" fill="rgb(217,221,4)" fg:x="510" fg:w="1"/><text x="6.2698%" y="927.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="6.0198%" y="901" width="0.0118%" height="15" fill="rgb(212,174,34)" fg:x="510" fg:w="1"/><text x="6.2698%" y="911.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="6.0198%" y="885" width="0.0118%" height="15" fill="rgb(253,83,4)" fg:x="510" fg:w="1"/><text x="6.2698%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="6.0198%" y="869" width="0.0118%" height="15" fill="rgb(250,195,49)" fg:x="510" fg:w="1"/><text x="6.2698%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="6.0198%" y="853" width="0.0118%" height="15" fill="rgb(241,192,25)" fg:x="510" fg:w="1"/><text x="6.2698%" y="863.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (1 samples, 0.01%)</title><rect x="6.0198%" y="837" width="0.0118%" height="15" fill="rgb(208,124,10)" fg:x="510" fg:w="1"/><text x="6.2698%" y="847.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="6.0198%" y="821" width="0.0118%" height="15" fill="rgb(222,33,0)" fg:x="510" fg:w="1"/><text x="6.2698%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="6.0198%" y="805" width="0.0118%" height="15" fill="rgb(234,209,28)" fg:x="510" fg:w="1"/><text x="6.2698%" y="815.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="6.0198%" y="789" width="0.0118%" height="15" fill="rgb(224,11,23)" fg:x="510" fg:w="1"/><text x="6.2698%" y="799.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="6.0198%" y="773" width="0.0118%" height="15" fill="rgb(232,99,1)" fg:x="510" fg:w="1"/><text x="6.2698%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="6.0316%" y="933" width="0.0236%" height="15" fill="rgb(237,95,45)" fg:x="511" fg:w="2"/><text x="6.2816%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="6.0552%" y="933" width="0.0118%" height="15" fill="rgb(208,109,11)" fg:x="513" fg:w="1"/><text x="6.3052%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="6.0552%" y="917" width="0.0118%" height="15" fill="rgb(216,190,48)" fg:x="513" fg:w="1"/><text x="6.3052%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="6.0552%" y="901" width="0.0118%" height="15" fill="rgb(251,171,36)" fg:x="513" fg:w="1"/><text x="6.3052%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="6.0552%" y="885" width="0.0118%" height="15" fill="rgb(230,62,22)" fg:x="513" fg:w="1"/><text x="6.3052%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="6.0552%" y="869" width="0.0118%" height="15" fill="rgb(225,114,35)" fg:x="513" fg:w="1"/><text x="6.3052%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="6.0552%" y="853" width="0.0118%" height="15" fill="rgb(215,118,42)" fg:x="513" fg:w="1"/><text x="6.3052%" y="863.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (202 samples, 2.38%)</title><rect x="3.7063%" y="965" width="2.3843%" height="15" fill="rgb(243,119,21)" fg:x="314" fg:w="202"/><text x="3.9563%" y="975.50">re..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (7 samples, 0.08%)</title><rect x="6.0080%" y="949" width="0.0826%" height="15" fill="rgb(252,177,53)" fg:x="509" fg:w="7"/><text x="6.2580%" y="959.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (2 samples, 0.02%)</title><rect x="6.0670%" y="933" width="0.0236%" height="15" fill="rgb(237,209,29)" fg:x="514" fg:w="2"/><text x="6.3170%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="6.0907%" y="901" width="0.0472%" height="15" fill="rgb(212,65,23)" fg:x="516" fg:w="4"/><text x="6.3407%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="6.1497%" y="885" width="0.0354%" height="15" fill="rgb(230,222,46)" fg:x="521" fg:w="3"/><text x="6.3997%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.07%)</title><rect x="6.1969%" y="837" width="0.0708%" height="15" fill="rgb(215,135,32)" fg:x="525" fg:w="6"/><text x="6.4469%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (8 samples, 0.09%)</title><rect x="6.1969%" y="869" width="0.0944%" height="15" fill="rgb(246,101,22)" fg:x="525" fg:w="8"/><text x="6.4469%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 0.09%)</title><rect x="6.1969%" y="853" width="0.0944%" height="15" fill="rgb(206,107,13)" fg:x="525" fg:w="8"/><text x="6.4469%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="6.2677%" y="837" width="0.0236%" height="15" fill="rgb(250,100,44)" fg:x="531" fg:w="2"/><text x="6.5177%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="6.2677%" y="821" width="0.0236%" height="15" fill="rgb(231,147,38)" fg:x="531" fg:w="2"/><text x="6.5177%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="6.2677%" y="805" width="0.0236%" height="15" fill="rgb(229,8,40)" fg:x="531" fg:w="2"/><text x="6.5177%" y="815.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="6.2677%" y="789" width="0.0236%" height="15" fill="rgb(221,135,30)" fg:x="531" fg:w="2"/><text x="6.5177%" y="799.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="6.2677%" y="773" width="0.0236%" height="15" fill="rgb(249,193,18)" fg:x="531" fg:w="2"/><text x="6.5177%" y="783.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="6.2795%" y="757" width="0.0118%" height="15" fill="rgb(209,133,39)" fg:x="532" fg:w="1"/><text x="6.5295%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.08%)</title><rect x="6.2913%" y="869" width="0.0826%" height="15" fill="rgb(232,100,14)" fg:x="533" fg:w="7"/><text x="6.5413%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="6.3975%" y="853" width="0.0118%" height="15" fill="rgb(224,185,1)" fg:x="542" fg:w="1"/><text x="6.6475%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="6.3975%" y="837" width="0.0118%" height="15" fill="rgb(223,139,8)" fg:x="542" fg:w="1"/><text x="6.6475%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="6.3975%" y="821" width="0.0118%" height="15" fill="rgb(232,213,38)" fg:x="542" fg:w="1"/><text x="6.6475%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="6.3975%" y="805" width="0.0118%" height="15" fill="rgb(207,94,22)" fg:x="542" fg:w="1"/><text x="6.6475%" y="815.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="6.3975%" y="789" width="0.0118%" height="15" fill="rgb(219,183,54)" fg:x="542" fg:w="1"/><text x="6.6475%" y="799.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="6.3975%" y="773" width="0.0118%" height="15" fill="rgb(216,185,54)" fg:x="542" fg:w="1"/><text x="6.6475%" y="783.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="6.3975%" y="757" width="0.0118%" height="15" fill="rgb(254,217,39)" fg:x="542" fg:w="1"/><text x="6.6475%" y="767.50"></text></g><g><title>revm::journaled_state::JournaledState::new (4 samples, 0.05%)</title><rect x="6.3739%" y="869" width="0.0472%" height="15" fill="rgb(240,178,23)" fg:x="540" fg:w="4"/><text x="6.6239%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="6.4093%" y="853" width="0.0118%" height="15" fill="rgb(218,11,47)" fg:x="543" fg:w="1"/><text x="6.6593%" y="863.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (29 samples, 0.34%)</title><rect x="6.0907%" y="933" width="0.3423%" height="15" fill="rgb(218,51,51)" fg:x="516" fg:w="29"/><text x="6.3407%" y="943.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (29 samples, 0.34%)</title><rect x="6.0907%" y="917" width="0.3423%" height="15" fill="rgb(238,126,27)" fg:x="516" fg:w="29"/><text x="6.3407%" y="927.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (25 samples, 0.30%)</title><rect x="6.1379%" y="901" width="0.2951%" height="15" fill="rgb(249,202,22)" fg:x="520" fg:w="25"/><text x="6.3879%" y="911.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (21 samples, 0.25%)</title><rect x="6.1851%" y="885" width="0.2479%" height="15" fill="rgb(254,195,49)" fg:x="524" fg:w="21"/><text x="6.4351%" y="895.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="6.4212%" y="869" width="0.0118%" height="15" fill="rgb(208,123,14)" fg:x="544" fg:w="1"/><text x="6.6712%" y="879.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="6.4212%" y="853" width="0.0118%" height="15" fill="rgb(224,200,8)" fg:x="544" fg:w="1"/><text x="6.6712%" y="863.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="6.4212%" y="837" width="0.0118%" height="15" fill="rgb(217,61,36)" fg:x="544" fg:w="1"/><text x="6.6712%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.11%)</title><rect x="6.4330%" y="933" width="0.1062%" height="15" fill="rgb(206,35,45)" fg:x="545" fg:w="9"/><text x="6.6830%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.15%)</title><rect x="6.5510%" y="885" width="0.1534%" height="15" fill="rgb(217,65,33)" fg:x="555" fg:w="13"/><text x="6.8010%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.11%)</title><rect x="6.7044%" y="869" width="0.1062%" height="15" fill="rgb(222,158,48)" fg:x="568" fg:w="9"/><text x="6.9544%" y="879.50"></text></g><g><title>_int_malloc (8 samples, 0.09%)</title><rect x="6.8343%" y="741" width="0.0944%" height="15" fill="rgb(254,2,54)" fg:x="579" fg:w="8"/><text x="7.0843%" y="751.50"></text></g><g><title>tcache_put (4 samples, 0.05%)</title><rect x="6.8815%" y="725" width="0.0472%" height="15" fill="rgb(250,143,38)" fg:x="583" fg:w="4"/><text x="7.1315%" y="735.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.13%)</title><rect x="6.8107%" y="757" width="0.1298%" height="15" fill="rgb(248,25,0)" fg:x="577" fg:w="11"/><text x="7.0607%" y="767.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="6.9287%" y="741" width="0.0118%" height="15" fill="rgb(206,152,27)" fg:x="587" fg:w="1"/><text x="7.1787%" y="751.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="6.9287%" y="725" width="0.0118%" height="15" fill="rgb(240,77,30)" fg:x="587" fg:w="1"/><text x="7.1787%" y="735.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="6.9405%" y="757" width="0.0354%" height="15" fill="rgb(231,5,3)" fg:x="588" fg:w="3"/><text x="7.1905%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.04%)</title><rect x="6.9405%" y="741" width="0.0354%" height="15" fill="rgb(207,226,32)" fg:x="588" fg:w="3"/><text x="7.1905%" y="751.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="6.9759%" y="757" width="0.0118%" height="15" fill="rgb(222,207,47)" fg:x="591" fg:w="1"/><text x="7.2259%" y="767.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (17 samples, 0.20%)</title><rect x="6.8107%" y="869" width="0.2007%" height="15" fill="rgb(229,115,45)" fg:x="577" fg:w="17"/><text x="7.0607%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (17 samples, 0.20%)</title><rect x="6.8107%" y="853" width="0.2007%" height="15" fill="rgb(224,191,6)" fg:x="577" fg:w="17"/><text x="7.0607%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.20%)</title><rect x="6.8107%" y="837" width="0.2007%" height="15" fill="rgb(230,227,24)" fg:x="577" fg:w="17"/><text x="7.0607%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.20%)</title><rect x="6.8107%" y="821" width="0.2007%" height="15" fill="rgb(228,80,19)" fg:x="577" fg:w="17"/><text x="7.0607%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.20%)</title><rect x="6.8107%" y="805" width="0.2007%" height="15" fill="rgb(247,229,0)" fg:x="577" fg:w="17"/><text x="7.0607%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.20%)</title><rect x="6.8107%" y="789" width="0.2007%" height="15" fill="rgb(237,194,15)" fg:x="577" fg:w="17"/><text x="7.0607%" y="799.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.20%)</title><rect x="6.8107%" y="773" width="0.2007%" height="15" fill="rgb(219,203,20)" fg:x="577" fg:w="17"/><text x="7.0607%" y="783.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.02%)</title><rect x="6.9877%" y="757" width="0.0236%" height="15" fill="rgb(234,128,8)" fg:x="592" fg:w="2"/><text x="7.2377%" y="767.50"></text></g><g><title>_int_malloc (8 samples, 0.09%)</title><rect x="7.0585%" y="741" width="0.0944%" height="15" fill="rgb(248,202,8)" fg:x="598" fg:w="8"/><text x="7.3085%" y="751.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="7.1412%" y="725" width="0.0118%" height="15" fill="rgb(206,104,37)" fg:x="605" fg:w="1"/><text x="7.3912%" y="735.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (13 samples, 0.15%)</title><rect x="7.0113%" y="869" width="0.1534%" height="15" fill="rgb(223,8,27)" fg:x="594" fg:w="13"/><text x="7.2613%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (13 samples, 0.15%)</title><rect x="7.0113%" y="853" width="0.1534%" height="15" fill="rgb(216,217,28)" fg:x="594" fg:w="13"/><text x="7.2613%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.15%)</title><rect x="7.0113%" y="837" width="0.1534%" height="15" fill="rgb(249,199,1)" fg:x="594" fg:w="13"/><text x="7.2613%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.14%)</title><rect x="7.0231%" y="821" width="0.1416%" height="15" fill="rgb(240,85,17)" fg:x="595" fg:w="12"/><text x="7.2731%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.14%)</title><rect x="7.0231%" y="805" width="0.1416%" height="15" fill="rgb(206,108,45)" fg:x="595" fg:w="12"/><text x="7.2731%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.14%)</title><rect x="7.0231%" y="789" width="0.1416%" height="15" fill="rgb(245,210,41)" fg:x="595" fg:w="12"/><text x="7.2731%" y="799.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.14%)</title><rect x="7.0231%" y="773" width="0.1416%" height="15" fill="rgb(206,13,37)" fg:x="595" fg:w="12"/><text x="7.2731%" y="783.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.14%)</title><rect x="7.0231%" y="757" width="0.1416%" height="15" fill="rgb(250,61,18)" fg:x="595" fg:w="12"/><text x="7.2731%" y="767.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="7.1530%" y="741" width="0.0118%" height="15" fill="rgb(235,172,48)" fg:x="606" fg:w="1"/><text x="7.4030%" y="751.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="7.1648%" y="741" width="0.0118%" height="15" fill="rgb(249,201,17)" fg:x="607" fg:w="1"/><text x="7.4148%" y="751.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="7.1648%" y="869" width="0.0236%" height="15" fill="rgb(219,208,6)" fg:x="607" fg:w="2"/><text x="7.4148%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="7.1648%" y="853" width="0.0236%" height="15" fill="rgb(248,31,23)" fg:x="607" fg:w="2"/><text x="7.4148%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="7.1648%" y="837" width="0.0236%" height="15" fill="rgb(245,15,42)" fg:x="607" fg:w="2"/><text x="7.4148%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="7.1648%" y="821" width="0.0236%" height="15" fill="rgb(222,217,39)" fg:x="607" fg:w="2"/><text x="7.4148%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="7.1648%" y="805" width="0.0236%" height="15" fill="rgb(210,219,27)" fg:x="607" fg:w="2"/><text x="7.4148%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="7.1648%" y="789" width="0.0236%" height="15" fill="rgb(252,166,36)" fg:x="607" fg:w="2"/><text x="7.4148%" y="799.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="7.1648%" y="773" width="0.0236%" height="15" fill="rgb(245,132,34)" fg:x="607" fg:w="2"/><text x="7.4148%" y="783.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="7.1648%" y="757" width="0.0236%" height="15" fill="rgb(236,54,3)" fg:x="607" fg:w="2"/><text x="7.4148%" y="767.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="7.1766%" y="741" width="0.0118%" height="15" fill="rgb(241,173,43)" fg:x="608" fg:w="1"/><text x="7.4266%" y="751.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="7.1766%" y="725" width="0.0118%" height="15" fill="rgb(215,190,9)" fg:x="608" fg:w="1"/><text x="7.4266%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="7.1884%" y="757" width="0.0118%" height="15" fill="rgb(242,101,16)" fg:x="609" fg:w="1"/><text x="7.4384%" y="767.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="7.1884%" y="741" width="0.0118%" height="15" fill="rgb(223,190,21)" fg:x="609" fg:w="1"/><text x="7.4384%" y="751.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="7.1884%" y="725" width="0.0118%" height="15" fill="rgb(215,228,25)" fg:x="609" fg:w="1"/><text x="7.4384%" y="735.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (96 samples, 1.13%)</title><rect x="6.0907%" y="965" width="1.1331%" height="15" fill="rgb(225,36,22)" fg:x="516" fg:w="96"/><text x="6.3407%" y="975.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (96 samples, 1.13%)</title><rect x="6.0907%" y="949" width="1.1331%" height="15" fill="rgb(251,106,46)" fg:x="516" fg:w="96"/><text x="6.3407%" y="959.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (58 samples, 0.68%)</title><rect x="6.5392%" y="933" width="0.6846%" height="15" fill="rgb(208,90,1)" fg:x="554" fg:w="58"/><text x="6.7892%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (58 samples, 0.68%)</title><rect x="6.5392%" y="917" width="0.6846%" height="15" fill="rgb(243,10,4)" fg:x="554" fg:w="58"/><text x="6.7892%" y="927.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (58 samples, 0.68%)</title><rect x="6.5392%" y="901" width="0.6846%" height="15" fill="rgb(212,137,27)" fg:x="554" fg:w="58"/><text x="6.7892%" y="911.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (44 samples, 0.52%)</title><rect x="6.7044%" y="885" width="0.5194%" height="15" fill="rgb(231,220,49)" fg:x="568" fg:w="44"/><text x="6.9544%" y="895.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (3 samples, 0.04%)</title><rect x="7.1884%" y="869" width="0.0354%" height="15" fill="rgb(237,96,20)" fg:x="609" fg:w="3"/><text x="7.4384%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="7.1884%" y="853" width="0.0354%" height="15" fill="rgb(239,229,30)" fg:x="609" fg:w="3"/><text x="7.4384%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="7.1884%" y="837" width="0.0354%" height="15" fill="rgb(219,65,33)" fg:x="609" fg:w="3"/><text x="7.4384%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.04%)</title><rect x="7.1884%" y="821" width="0.0354%" height="15" fill="rgb(243,134,7)" fg:x="609" fg:w="3"/><text x="7.4384%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="7.1884%" y="805" width="0.0354%" height="15" fill="rgb(216,177,54)" fg:x="609" fg:w="3"/><text x="7.4384%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="7.1884%" y="789" width="0.0354%" height="15" fill="rgb(211,160,20)" fg:x="609" fg:w="3"/><text x="7.4384%" y="799.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="7.1884%" y="773" width="0.0354%" height="15" fill="rgb(239,85,39)" fg:x="609" fg:w="3"/><text x="7.4384%" y="783.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="7.2002%" y="757" width="0.0236%" height="15" fill="rgb(232,125,22)" fg:x="610" fg:w="2"/><text x="7.4502%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="7.2002%" y="741" width="0.0236%" height="15" fill="rgb(244,57,34)" fg:x="610" fg:w="2"/><text x="7.4502%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.3300%" y="773" width="0.0236%" height="15" fill="rgb(214,203,32)" fg:x="621" fg:w="2"/><text x="7.5800%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.3300%" y="757" width="0.0236%" height="15" fill="rgb(207,58,43)" fg:x="621" fg:w="2"/><text x="7.5800%" y="767.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.3300%" y="741" width="0.0236%" height="15" fill="rgb(215,193,15)" fg:x="621" fg:w="2"/><text x="7.5800%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.3300%" y="725" width="0.0236%" height="15" fill="rgb(232,15,44)" fg:x="621" fg:w="2"/><text x="7.5800%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="7.3300%" y="709" width="0.0236%" height="15" fill="rgb(212,3,48)" fg:x="621" fg:w="2"/><text x="7.5800%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.3300%" y="693" width="0.0236%" height="15" fill="rgb(218,128,7)" fg:x="621" fg:w="2"/><text x="7.5800%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="7.4245%" y="613" width="0.0354%" height="15" fill="rgb(226,216,39)" fg:x="629" fg:w="3"/><text x="7.6745%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="7.4363%" y="597" width="0.0236%" height="15" fill="rgb(243,47,51)" fg:x="630" fg:w="2"/><text x="7.6863%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="7.4008%" y="661" width="0.1416%" height="15" fill="rgb(241,183,40)" fg:x="627" fg:w="12"/><text x="7.6508%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="7.4008%" y="645" width="0.1416%" height="15" fill="rgb(231,217,32)" fg:x="627" fg:w="12"/><text x="7.6508%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="7.4008%" y="629" width="0.1416%" height="15" fill="rgb(229,61,38)" fg:x="627" fg:w="12"/><text x="7.6508%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.08%)</title><rect x="7.4599%" y="613" width="0.0826%" height="15" fill="rgb(225,210,5)" fg:x="632" fg:w="7"/><text x="7.7099%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="7.5071%" y="597" width="0.0354%" height="15" fill="rgb(231,79,45)" fg:x="636" fg:w="3"/><text x="7.7571%" y="607.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="7.5425%" y="661" width="0.0236%" height="15" fill="rgb(224,100,7)" fg:x="639" fg:w="2"/><text x="7.7925%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="7.6605%" y="501" width="0.0236%" height="15" fill="rgb(241,198,18)" fg:x="649" fg:w="2"/><text x="7.9105%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="7.6723%" y="485" width="0.0118%" height="15" fill="rgb(252,97,53)" fg:x="650" fg:w="1"/><text x="7.9223%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="7.5897%" y="549" width="0.1298%" height="15" fill="rgb(220,88,7)" fg:x="643" fg:w="11"/><text x="7.8397%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="7.5897%" y="533" width="0.1298%" height="15" fill="rgb(213,176,14)" fg:x="643" fg:w="11"/><text x="7.8397%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="7.5897%" y="517" width="0.1298%" height="15" fill="rgb(246,73,7)" fg:x="643" fg:w="11"/><text x="7.8397%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="7.6841%" y="501" width="0.0354%" height="15" fill="rgb(245,64,36)" fg:x="651" fg:w="3"/><text x="7.9341%" y="511.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (15 samples, 0.18%)</title><rect x="7.5661%" y="581" width="0.1771%" height="15" fill="rgb(245,80,10)" fg:x="641" fg:w="15"/><text x="7.8161%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.18%)</title><rect x="7.5661%" y="565" width="0.1771%" height="15" fill="rgb(232,107,50)" fg:x="641" fg:w="15"/><text x="7.8161%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.02%)</title><rect x="7.7195%" y="549" width="0.0236%" height="15" fill="rgb(253,3,0)" fg:x="654" fg:w="2"/><text x="7.9695%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="7.8022%" y="501" width="0.0236%" height="15" fill="rgb(212,99,53)" fg:x="661" fg:w="2"/><text x="8.0522%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="7.7904%" y="517" width="0.0472%" height="15" fill="rgb(249,111,54)" fg:x="660" fg:w="4"/><text x="8.0404%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="7.8258%" y="501" width="0.0118%" height="15" fill="rgb(249,55,30)" fg:x="663" fg:w="1"/><text x="8.0758%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (44 samples, 0.52%)</title><rect x="7.3772%" y="693" width="0.5194%" height="15" fill="rgb(237,47,42)" fg:x="625" fg:w="44"/><text x="7.6272%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (44 samples, 0.52%)</title><rect x="7.3772%" y="677" width="0.5194%" height="15" fill="rgb(211,20,18)" fg:x="625" fg:w="44"/><text x="7.6272%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.33%)</title><rect x="7.5661%" y="661" width="0.3305%" height="15" fill="rgb(231,203,46)" fg:x="641" fg:w="28"/><text x="7.8161%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (28 samples, 0.33%)</title><rect x="7.5661%" y="645" width="0.3305%" height="15" fill="rgb(237,142,3)" fg:x="641" fg:w="28"/><text x="7.8161%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (28 samples, 0.33%)</title><rect x="7.5661%" y="629" width="0.3305%" height="15" fill="rgb(241,107,1)" fg:x="641" fg:w="28"/><text x="7.8161%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (28 samples, 0.33%)</title><rect x="7.5661%" y="613" width="0.3305%" height="15" fill="rgb(229,83,13)" fg:x="641" fg:w="28"/><text x="7.8161%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (28 samples, 0.33%)</title><rect x="7.5661%" y="597" width="0.3305%" height="15" fill="rgb(241,91,40)" fg:x="641" fg:w="28"/><text x="7.8161%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (13 samples, 0.15%)</title><rect x="7.7432%" y="581" width="0.1534%" height="15" fill="rgb(225,3,45)" fg:x="656" fg:w="13"/><text x="7.9932%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="7.7432%" y="565" width="0.1534%" height="15" fill="rgb(244,223,14)" fg:x="656" fg:w="13"/><text x="7.9932%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="7.7432%" y="549" width="0.1534%" height="15" fill="rgb(224,124,37)" fg:x="656" fg:w="13"/><text x="7.9932%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="7.7432%" y="533" width="0.1534%" height="15" fill="rgb(251,171,30)" fg:x="656" fg:w="13"/><text x="7.9932%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.06%)</title><rect x="7.8376%" y="517" width="0.0590%" height="15" fill="rgb(236,46,54)" fg:x="664" fg:w="5"/><text x="8.0876%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="7.9202%" y="661" width="0.0118%" height="15" fill="rgb(245,213,5)" fg:x="671" fg:w="1"/><text x="8.1702%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.01%)</title><rect x="7.9320%" y="661" width="0.0118%" height="15" fill="rgb(230,144,27)" fg:x="672" fg:w="1"/><text x="8.1820%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="7.9320%" y="645" width="0.0118%" height="15" fill="rgb(220,86,6)" fg:x="672" fg:w="1"/><text x="8.1820%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.01%)</title><rect x="7.9320%" y="629" width="0.0118%" height="15" fill="rgb(240,20,13)" fg:x="672" fg:w="1"/><text x="8.1820%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="7.9320%" y="613" width="0.0118%" height="15" fill="rgb(217,89,34)" fg:x="672" fg:w="1"/><text x="8.1820%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="7.9320%" y="597" width="0.0118%" height="15" fill="rgb(229,13,5)" fg:x="672" fg:w="1"/><text x="8.1820%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="7.9438%" y="661" width="0.0118%" height="15" fill="rgb(244,67,35)" fg:x="673" fg:w="1"/><text x="8.1938%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.01%)</title><rect x="7.9438%" y="645" width="0.0118%" height="15" fill="rgb(221,40,2)" fg:x="673" fg:w="1"/><text x="8.1938%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="7.9438%" y="629" width="0.0118%" height="15" fill="rgb(237,157,21)" fg:x="673" fg:w="1"/><text x="8.1938%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.02%)</title><rect x="7.9556%" y="661" width="0.0236%" height="15" fill="rgb(222,94,11)" fg:x="674" fg:w="2"/><text x="8.2056%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9 samples, 0.11%)</title><rect x="7.8966%" y="693" width="0.1062%" height="15" fill="rgb(249,113,6)" fg:x="669" fg:w="9"/><text x="8.1466%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.11%)</title><rect x="7.8966%" y="677" width="0.1062%" height="15" fill="rgb(238,137,36)" fg:x="669" fg:w="9"/><text x="8.1466%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="7.9792%" y="661" width="0.0236%" height="15" fill="rgb(210,102,26)" fg:x="676" fg:w="2"/><text x="8.2292%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="7.9792%" y="645" width="0.0236%" height="15" fill="rgb(218,30,30)" fg:x="676" fg:w="2"/><text x="8.2292%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.05%)</title><rect x="8.0028%" y="677" width="0.0472%" height="15" fill="rgb(214,67,26)" fg:x="678" fg:w="4"/><text x="8.2528%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.05%)</title><rect x="8.0028%" y="661" width="0.0472%" height="15" fill="rgb(251,9,53)" fg:x="678" fg:w="4"/><text x="8.2528%" y="671.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="8.0028%" y="645" width="0.0472%" height="15" fill="rgb(228,204,25)" fg:x="678" fg:w="4"/><text x="8.2528%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="8.0500%" y="677" width="0.0118%" height="15" fill="rgb(207,153,8)" fg:x="682" fg:w="1"/><text x="8.3000%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="8.0500%" y="661" width="0.0118%" height="15" fill="rgb(242,9,16)" fg:x="682" fg:w="1"/><text x="8.3000%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="8.0500%" y="645" width="0.0118%" height="15" fill="rgb(217,211,10)" fg:x="682" fg:w="1"/><text x="8.3000%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (66 samples, 0.78%)</title><rect x="7.3064%" y="837" width="0.7790%" height="15" fill="rgb(219,228,52)" fg:x="619" fg:w="66"/><text x="7.5564%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.78%)</title><rect x="7.3064%" y="821" width="0.7790%" height="15" fill="rgb(231,92,29)" fg:x="619" fg:w="66"/><text x="7.5564%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.78%)</title><rect x="7.3064%" y="805" width="0.7790%" height="15" fill="rgb(232,8,23)" fg:x="619" fg:w="66"/><text x="7.5564%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 0.77%)</title><rect x="7.3182%" y="789" width="0.7672%" height="15" fill="rgb(216,211,34)" fg:x="620" fg:w="65"/><text x="7.5682%" y="799.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (62 samples, 0.73%)</title><rect x="7.3536%" y="773" width="0.7318%" height="15" fill="rgb(236,151,0)" fg:x="623" fg:w="62"/><text x="7.6036%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (62 samples, 0.73%)</title><rect x="7.3536%" y="757" width="0.7318%" height="15" fill="rgb(209,168,3)" fg:x="623" fg:w="62"/><text x="7.6036%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (61 samples, 0.72%)</title><rect x="7.3654%" y="741" width="0.7200%" height="15" fill="rgb(208,129,28)" fg:x="624" fg:w="61"/><text x="7.6154%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (61 samples, 0.72%)</title><rect x="7.3654%" y="725" width="0.7200%" height="15" fill="rgb(229,78,22)" fg:x="624" fg:w="61"/><text x="7.6154%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61 samples, 0.72%)</title><rect x="7.3654%" y="709" width="0.7200%" height="15" fill="rgb(228,187,13)" fg:x="624" fg:w="61"/><text x="7.6154%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (7 samples, 0.08%)</title><rect x="8.0028%" y="693" width="0.0826%" height="15" fill="rgb(240,119,24)" fg:x="678" fg:w="7"/><text x="8.2528%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.02%)</title><rect x="8.0619%" y="677" width="0.0236%" height="15" fill="rgb(209,194,42)" fg:x="683" fg:w="2"/><text x="8.3119%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="8.0855%" y="757" width="0.0118%" height="15" fill="rgb(247,200,46)" fg:x="685" fg:w="1"/><text x="8.3355%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.01%)</title><rect x="8.0973%" y="757" width="0.0118%" height="15" fill="rgb(218,76,16)" fg:x="686" fg:w="1"/><text x="8.3473%" y="767.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="8.0973%" y="741" width="0.0118%" height="15" fill="rgb(225,21,48)" fg:x="686" fg:w="1"/><text x="8.3473%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.01%)</title><rect x="8.0973%" y="725" width="0.0118%" height="15" fill="rgb(239,223,50)" fg:x="686" fg:w="1"/><text x="8.3473%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (71 samples, 0.84%)</title><rect x="7.2828%" y="917" width="0.8381%" height="15" fill="rgb(244,45,21)" fg:x="617" fg:w="71"/><text x="7.5328%" y="927.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (71 samples, 0.84%)</title><rect x="7.2828%" y="901" width="0.8381%" height="15" fill="rgb(232,33,43)" fg:x="617" fg:w="71"/><text x="7.5328%" y="911.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (69 samples, 0.81%)</title><rect x="7.3064%" y="885" width="0.8144%" height="15" fill="rgb(209,8,3)" fg:x="619" fg:w="69"/><text x="7.5564%" y="895.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (69 samples, 0.81%)</title><rect x="7.3064%" y="869" width="0.8144%" height="15" fill="rgb(214,25,53)" fg:x="619" fg:w="69"/><text x="7.5564%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (69 samples, 0.81%)</title><rect x="7.3064%" y="853" width="0.8144%" height="15" fill="rgb(254,186,54)" fg:x="619" fg:w="69"/><text x="7.5564%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.04%)</title><rect x="8.0855%" y="837" width="0.0354%" height="15" fill="rgb(208,174,49)" fg:x="685" fg:w="3"/><text x="8.3355%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.04%)</title><rect x="8.0855%" y="821" width="0.0354%" height="15" fill="rgb(233,191,51)" fg:x="685" fg:w="3"/><text x="8.3355%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.04%)</title><rect x="8.0855%" y="805" width="0.0354%" height="15" fill="rgb(222,134,10)" fg:x="685" fg:w="3"/><text x="8.3355%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.04%)</title><rect x="8.0855%" y="789" width="0.0354%" height="15" fill="rgb(230,226,20)" fg:x="685" fg:w="3"/><text x="8.3355%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.04%)</title><rect x="8.0855%" y="773" width="0.0354%" height="15" fill="rgb(251,111,25)" fg:x="685" fg:w="3"/><text x="8.3355%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.01%)</title><rect x="8.1091%" y="757" width="0.0118%" height="15" fill="rgb(224,40,46)" fg:x="687" fg:w="1"/><text x="8.3591%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.01%)</title><rect x="8.1091%" y="741" width="0.0118%" height="15" fill="rgb(236,108,47)" fg:x="687" fg:w="1"/><text x="8.3591%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="8.1091%" y="725" width="0.0118%" height="15" fill="rgb(234,93,0)" fg:x="687" fg:w="1"/><text x="8.3591%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="8.1091%" y="709" width="0.0118%" height="15" fill="rgb(224,213,32)" fg:x="687" fg:w="1"/><text x="8.3591%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="8.1091%" y="693" width="0.0118%" height="15" fill="rgb(251,11,48)" fg:x="687" fg:w="1"/><text x="8.3591%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="8.1091%" y="677" width="0.0118%" height="15" fill="rgb(236,173,5)" fg:x="687" fg:w="1"/><text x="8.3591%" y="687.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="8.1091%" y="661" width="0.0118%" height="15" fill="rgb(230,95,12)" fg:x="687" fg:w="1"/><text x="8.3591%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="8.1091%" y="645" width="0.0118%" height="15" fill="rgb(232,209,1)" fg:x="687" fg:w="1"/><text x="8.3591%" y="655.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="8.1091%" y="629" width="0.0118%" height="15" fill="rgb(232,6,1)" fg:x="687" fg:w="1"/><text x="8.3591%" y="639.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="8.1091%" y="613" width="0.0118%" height="15" fill="rgb(210,224,50)" fg:x="687" fg:w="1"/><text x="8.3591%" y="623.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (72 samples, 0.85%)</title><rect x="7.2828%" y="933" width="0.8499%" height="15" fill="rgb(228,127,35)" fg:x="617" fg:w="72"/><text x="7.5328%" y="943.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::addresses (1 samples, 0.01%)</title><rect x="8.1209%" y="917" width="0.0118%" height="15" fill="rgb(245,102,45)" fg:x="688" fg:w="1"/><text x="8.3709%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::keys (1 samples, 0.01%)</title><rect x="8.1209%" y="901" width="0.0118%" height="15" fill="rgb(214,1,49)" fg:x="688" fg:w="1"/><text x="8.3709%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.01%)</title><rect x="8.1209%" y="885" width="0.0118%" height="15" fill="rgb(226,163,40)" fg:x="688" fg:w="1"/><text x="8.3709%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.01%)</title><rect x="8.1209%" y="869" width="0.0118%" height="15" fill="rgb(239,212,28)" fg:x="688" fg:w="1"/><text x="8.3709%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.01%)</title><rect x="8.1209%" y="853" width="0.0118%" height="15" fill="rgb(220,20,13)" fg:x="688" fg:w="1"/><text x="8.3709%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.01%)</title><rect x="8.1209%" y="837" width="0.0118%" height="15" fill="rgb(210,164,35)" fg:x="688" fg:w="1"/><text x="8.3709%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="8.1209%" y="821" width="0.0118%" height="15" fill="rgb(248,109,41)" fg:x="688" fg:w="1"/><text x="8.3709%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.01%)</title><rect x="8.1209%" y="805" width="0.0118%" height="15" fill="rgb(238,23,50)" fg:x="688" fg:w="1"/><text x="8.3709%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.01%)</title><rect x="8.1209%" y="789" width="0.0118%" height="15" fill="rgb(211,48,49)" fg:x="688" fg:w="1"/><text x="8.3709%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="8.1563%" y="917" width="0.0236%" height="15" fill="rgb(223,36,21)" fg:x="691" fg:w="2"/><text x="8.4063%" y="927.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (2 samples, 0.02%)</title><rect x="8.1563%" y="901" width="0.0236%" height="15" fill="rgb(207,123,46)" fg:x="691" fg:w="2"/><text x="8.4063%" y="911.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="8.1563%" y="885" width="0.0236%" height="15" fill="rgb(240,218,32)" fg:x="691" fg:w="2"/><text x="8.4063%" y="895.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallContext as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.1681%" y="869" width="0.0118%" height="15" fill="rgb(252,5,43)" fg:x="692" fg:w="1"/><text x="8.4181%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.1681%" y="853" width="0.0118%" height="15" fill="rgb(252,84,19)" fg:x="692" fg:w="1"/><text x="8.4181%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (1 samples, 0.01%)</title><rect x="8.1799%" y="885" width="0.0118%" height="15" fill="rgb(243,152,39)" fg:x="693" fg:w="1"/><text x="8.4299%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="8.1799%" y="869" width="0.0118%" height="15" fill="rgb(234,160,15)" fg:x="693" fg:w="1"/><text x="8.4299%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="8.1799%" y="853" width="0.0118%" height="15" fill="rgb(237,34,20)" fg:x="693" fg:w="1"/><text x="8.4299%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="8.1799%" y="837" width="0.0118%" height="15" fill="rgb(229,97,13)" fg:x="693" fg:w="1"/><text x="8.4299%" y="847.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="8.1799%" y="821" width="0.0118%" height="15" fill="rgb(234,71,50)" fg:x="693" fg:w="1"/><text x="8.4299%" y="831.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="8.1799%" y="805" width="0.0118%" height="15" fill="rgb(253,155,4)" fg:x="693" fg:w="1"/><text x="8.4299%" y="815.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="8.2153%" y="869" width="0.0590%" height="15" fill="rgb(222,185,37)" fg:x="696" fg:w="5"/><text x="8.4653%" y="879.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="8.2153%" y="853" width="0.0590%" height="15" fill="rgb(251,177,13)" fg:x="696" fg:w="5"/><text x="8.4653%" y="863.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="8.2153%" y="837" width="0.0590%" height="15" fill="rgb(250,179,40)" fg:x="696" fg:w="5"/><text x="8.4653%" y="847.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="8.2153%" y="821" width="0.0590%" height="15" fill="rgb(242,44,2)" fg:x="696" fg:w="5"/><text x="8.4653%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="8.2153%" y="805" width="0.0590%" height="15" fill="rgb(216,177,13)" fg:x="696" fg:w="5"/><text x="8.4653%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.05%)</title><rect x="8.2271%" y="789" width="0.0472%" height="15" fill="rgb(216,106,43)" fg:x="697" fg:w="4"/><text x="8.4771%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.05%)</title><rect x="8.2271%" y="773" width="0.0472%" height="15" fill="rgb(216,183,2)" fg:x="697" fg:w="4"/><text x="8.4771%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="8.2743%" y="869" width="0.0118%" height="15" fill="rgb(249,75,3)" fg:x="701" fg:w="1"/><text x="8.5243%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (1 samples, 0.01%)</title><rect x="8.2861%" y="869" width="0.0118%" height="15" fill="rgb(219,67,39)" fg:x="702" fg:w="1"/><text x="8.5361%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="8.2861%" y="853" width="0.0118%" height="15" fill="rgb(253,228,2)" fg:x="702" fg:w="1"/><text x="8.5361%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="8.2861%" y="837" width="0.0118%" height="15" fill="rgb(235,138,27)" fg:x="702" fg:w="1"/><text x="8.5361%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="8.2861%" y="821" width="0.0118%" height="15" fill="rgb(236,97,51)" fg:x="702" fg:w="1"/><text x="8.5361%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="8.2861%" y="805" width="0.0118%" height="15" fill="rgb(240,80,30)" fg:x="702" fg:w="1"/><text x="8.5361%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="8.2861%" y="789" width="0.0118%" height="15" fill="rgb(230,178,19)" fg:x="702" fg:w="1"/><text x="8.5361%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="8.2861%" y="773" width="0.0118%" height="15" fill="rgb(210,190,27)" fg:x="702" fg:w="1"/><text x="8.5361%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="8.2979%" y="693" width="0.0118%" height="15" fill="rgb(222,107,31)" fg:x="703" fg:w="1"/><text x="8.5479%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="8.2979%" y="757" width="0.0236%" height="15" fill="rgb(216,127,34)" fg:x="703" fg:w="2"/><text x="8.5479%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="8.2979%" y="741" width="0.0236%" height="15" fill="rgb(234,116,52)" fg:x="703" fg:w="2"/><text x="8.5479%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="8.2979%" y="725" width="0.0236%" height="15" fill="rgb(222,124,15)" fg:x="703" fg:w="2"/><text x="8.5479%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="8.2979%" y="709" width="0.0236%" height="15" fill="rgb(231,179,28)" fg:x="703" fg:w="2"/><text x="8.5479%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="8.3097%" y="693" width="0.0118%" height="15" fill="rgb(226,93,45)" fg:x="704" fg:w="1"/><text x="8.5597%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="8.3215%" y="677" width="0.0236%" height="15" fill="rgb(215,8,51)" fg:x="705" fg:w="2"/><text x="8.5715%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="8.3215%" y="661" width="0.0236%" height="15" fill="rgb(223,106,5)" fg:x="705" fg:w="2"/><text x="8.5715%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.3215%" y="645" width="0.0236%" height="15" fill="rgb(250,191,5)" fg:x="705" fg:w="2"/><text x="8.5715%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.3215%" y="629" width="0.0236%" height="15" fill="rgb(242,132,44)" fg:x="705" fg:w="2"/><text x="8.5715%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.3215%" y="613" width="0.0236%" height="15" fill="rgb(251,152,29)" fg:x="705" fg:w="2"/><text x="8.5715%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="8.3333%" y="597" width="0.0118%" height="15" fill="rgb(218,179,5)" fg:x="706" fg:w="1"/><text x="8.5833%" y="607.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (8 samples, 0.09%)</title><rect x="8.2979%" y="869" width="0.0944%" height="15" fill="rgb(227,67,19)" fg:x="703" fg:w="8"/><text x="8.5479%" y="879.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (8 samples, 0.09%)</title><rect x="8.2979%" y="853" width="0.0944%" height="15" fill="rgb(233,119,31)" fg:x="703" fg:w="8"/><text x="8.5479%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (8 samples, 0.09%)</title><rect x="8.2979%" y="837" width="0.0944%" height="15" fill="rgb(241,120,22)" fg:x="703" fg:w="8"/><text x="8.5479%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (8 samples, 0.09%)</title><rect x="8.2979%" y="821" width="0.0944%" height="15" fill="rgb(224,102,30)" fg:x="703" fg:w="8"/><text x="8.5479%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (8 samples, 0.09%)</title><rect x="8.2979%" y="805" width="0.0944%" height="15" fill="rgb(210,164,37)" fg:x="703" fg:w="8"/><text x="8.5479%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.09%)</title><rect x="8.2979%" y="789" width="0.0944%" height="15" fill="rgb(226,191,16)" fg:x="703" fg:w="8"/><text x="8.5479%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.09%)</title><rect x="8.2979%" y="773" width="0.0944%" height="15" fill="rgb(214,40,45)" fg:x="703" fg:w="8"/><text x="8.5479%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="8.3215%" y="757" width="0.0708%" height="15" fill="rgb(244,29,26)" fg:x="705" fg:w="6"/><text x="8.5715%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="8.3215%" y="741" width="0.0708%" height="15" fill="rgb(216,16,5)" fg:x="705" fg:w="6"/><text x="8.5715%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="8.3215%" y="725" width="0.0708%" height="15" fill="rgb(249,76,35)" fg:x="705" fg:w="6"/><text x="8.5715%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="8.3215%" y="709" width="0.0708%" height="15" fill="rgb(207,11,44)" fg:x="705" fg:w="6"/><text x="8.5715%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="8.3215%" y="693" width="0.0708%" height="15" fill="rgb(228,190,49)" fg:x="705" fg:w="6"/><text x="8.5715%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.05%)</title><rect x="8.3451%" y="677" width="0.0472%" height="15" fill="rgb(214,173,12)" fg:x="707" fg:w="4"/><text x="8.5951%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.3451%" y="661" width="0.0472%" height="15" fill="rgb(218,26,35)" fg:x="707" fg:w="4"/><text x="8.5951%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.3451%" y="645" width="0.0472%" height="15" fill="rgb(220,200,19)" fg:x="707" fg:w="4"/><text x="8.5951%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.3451%" y="629" width="0.0472%" height="15" fill="rgb(239,95,49)" fg:x="707" fg:w="4"/><text x="8.5951%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="8.3687%" y="613" width="0.0236%" height="15" fill="rgb(235,85,53)" fg:x="709" fg:w="2"/><text x="8.6187%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="8.3805%" y="597" width="0.0118%" height="15" fill="rgb(233,133,31)" fg:x="710" fg:w="1"/><text x="8.6305%" y="607.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="8.3924%" y="773" width="0.0118%" height="15" fill="rgb(218,25,20)" fg:x="711" fg:w="1"/><text x="8.6424%" y="783.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (3 samples, 0.04%)</title><rect x="8.3924%" y="869" width="0.0354%" height="15" fill="rgb(252,210,38)" fg:x="711" fg:w="3"/><text x="8.6424%" y="879.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.04%)</title><rect x="8.3924%" y="853" width="0.0354%" height="15" fill="rgb(242,134,21)" fg:x="711" fg:w="3"/><text x="8.6424%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.04%)</title><rect x="8.3924%" y="837" width="0.0354%" height="15" fill="rgb(213,28,48)" fg:x="711" fg:w="3"/><text x="8.6424%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.04%)</title><rect x="8.3924%" y="821" width="0.0354%" height="15" fill="rgb(250,196,2)" fg:x="711" fg:w="3"/><text x="8.6424%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="8.3924%" y="805" width="0.0354%" height="15" fill="rgb(227,5,17)" fg:x="711" fg:w="3"/><text x="8.6424%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="8.3924%" y="789" width="0.0354%" height="15" fill="rgb(221,226,24)" fg:x="711" fg:w="3"/><text x="8.6424%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="8.4042%" y="773" width="0.0236%" height="15" fill="rgb(211,5,48)" fg:x="712" fg:w="2"/><text x="8.6542%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="8.4042%" y="757" width="0.0236%" height="15" fill="rgb(219,150,6)" fg:x="712" fg:w="2"/><text x="8.6542%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="8.4042%" y="741" width="0.0236%" height="15" fill="rgb(251,46,16)" fg:x="712" fg:w="2"/><text x="8.6542%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="8.4042%" y="725" width="0.0236%" height="15" fill="rgb(220,204,40)" fg:x="712" fg:w="2"/><text x="8.6542%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="8.4042%" y="709" width="0.0236%" height="15" fill="rgb(211,85,2)" fg:x="712" fg:w="2"/><text x="8.6542%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="8.4042%" y="693" width="0.0236%" height="15" fill="rgb(229,17,7)" fg:x="712" fg:w="2"/><text x="8.6542%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="8.4042%" y="677" width="0.0236%" height="15" fill="rgb(239,72,28)" fg:x="712" fg:w="2"/><text x="8.6542%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.4042%" y="661" width="0.0236%" height="15" fill="rgb(230,47,54)" fg:x="712" fg:w="2"/><text x="8.6542%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.4042%" y="645" width="0.0236%" height="15" fill="rgb(214,50,8)" fg:x="712" fg:w="2"/><text x="8.6542%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.4042%" y="629" width="0.0236%" height="15" fill="rgb(216,198,43)" fg:x="712" fg:w="2"/><text x="8.6542%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="8.4160%" y="613" width="0.0118%" height="15" fill="rgb(234,20,35)" fg:x="713" fg:w="1"/><text x="8.6660%" y="623.50"></text></g><g><title>__GI_memcpy (1 samples, 0.01%)</title><rect x="8.4514%" y="709" width="0.0118%" height="15" fill="rgb(254,45,19)" fg:x="716" fg:w="1"/><text x="8.7014%" y="719.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.01%)</title><rect x="8.4514%" y="693" width="0.0118%" height="15" fill="rgb(219,14,44)" fg:x="716" fg:w="1"/><text x="8.7014%" y="703.50"></text></g><g><title>_int_realloc (5 samples, 0.06%)</title><rect x="8.4396%" y="725" width="0.0590%" height="15" fill="rgb(217,220,26)" fg:x="715" fg:w="5"/><text x="8.6896%" y="735.50"></text></g><g><title>_int_malloc (3 samples, 0.04%)</title><rect x="8.4632%" y="709" width="0.0354%" height="15" fill="rgb(213,158,28)" fg:x="717" fg:w="3"/><text x="8.7132%" y="719.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="8.4986%" y="725" width="0.0118%" height="15" fill="rgb(252,51,52)" fg:x="720" fg:w="1"/><text x="8.7486%" y="735.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (8 samples, 0.09%)</title><rect x="8.4278%" y="869" width="0.0944%" height="15" fill="rgb(246,89,16)" fg:x="714" fg:w="8"/><text x="8.6778%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.09%)</title><rect x="8.4278%" y="853" width="0.0944%" height="15" fill="rgb(216,158,49)" fg:x="714" fg:w="8"/><text x="8.6778%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.09%)</title><rect x="8.4278%" y="837" width="0.0944%" height="15" fill="rgb(236,107,19)" fg:x="714" fg:w="8"/><text x="8.6778%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.09%)</title><rect x="8.4278%" y="821" width="0.0944%" height="15" fill="rgb(228,185,30)" fg:x="714" fg:w="8"/><text x="8.6778%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.08%)</title><rect x="8.4396%" y="805" width="0.0826%" height="15" fill="rgb(246,134,8)" fg:x="715" fg:w="7"/><text x="8.6896%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.08%)</title><rect x="8.4396%" y="789" width="0.0826%" height="15" fill="rgb(214,143,50)" fg:x="715" fg:w="7"/><text x="8.6896%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.08%)</title><rect x="8.4396%" y="773" width="0.0826%" height="15" fill="rgb(228,75,8)" fg:x="715" fg:w="7"/><text x="8.6896%" y="783.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.08%)</title><rect x="8.4396%" y="757" width="0.0826%" height="15" fill="rgb(207,175,4)" fg:x="715" fg:w="7"/><text x="8.6896%" y="767.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.08%)</title><rect x="8.4396%" y="741" width="0.0826%" height="15" fill="rgb(205,108,24)" fg:x="715" fg:w="7"/><text x="8.6896%" y="751.50"></text></g><g><title>musable (1 samples, 0.01%)</title><rect x="8.5104%" y="725" width="0.0118%" height="15" fill="rgb(244,120,49)" fg:x="721" fg:w="1"/><text x="8.7604%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.5222%" y="773" width="0.0118%" height="15" fill="rgb(223,47,38)" fg:x="722" fg:w="1"/><text x="8.7722%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.5222%" y="757" width="0.0118%" height="15" fill="rgb(229,179,11)" fg:x="722" fg:w="1"/><text x="8.7722%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.5222%" y="741" width="0.0118%" height="15" fill="rgb(231,122,1)" fg:x="722" fg:w="1"/><text x="8.7722%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="8.5222%" y="725" width="0.0118%" height="15" fill="rgb(245,119,9)" fg:x="722" fg:w="1"/><text x="8.7722%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="8.5222%" y="709" width="0.0118%" height="15" fill="rgb(241,163,25)" fg:x="722" fg:w="1"/><text x="8.7722%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="8.5340%" y="693" width="0.0236%" height="15" fill="rgb(217,214,3)" fg:x="723" fg:w="2"/><text x="8.7840%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="8.5340%" y="677" width="0.0236%" height="15" fill="rgb(240,86,28)" fg:x="723" fg:w="2"/><text x="8.7840%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.5340%" y="661" width="0.0236%" height="15" fill="rgb(215,47,9)" fg:x="723" fg:w="2"/><text x="8.7840%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.5340%" y="645" width="0.0236%" height="15" fill="rgb(252,25,45)" fg:x="723" fg:w="2"/><text x="8.7840%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="8.5340%" y="629" width="0.0236%" height="15" fill="rgb(251,164,9)" fg:x="723" fg:w="2"/><text x="8.7840%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="8.5340%" y="613" width="0.0236%" height="15" fill="rgb(233,194,0)" fg:x="723" fg:w="2"/><text x="8.7840%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="8.5222%" y="805" width="0.0472%" height="15" fill="rgb(249,111,24)" fg:x="722" fg:w="4"/><text x="8.7722%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.05%)</title><rect x="8.5222%" y="789" width="0.0472%" height="15" fill="rgb(250,223,3)" fg:x="722" fg:w="4"/><text x="8.7722%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="8.5340%" y="773" width="0.0354%" height="15" fill="rgb(236,178,37)" fg:x="723" fg:w="3"/><text x="8.7840%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="8.5340%" y="757" width="0.0354%" height="15" fill="rgb(241,158,50)" fg:x="723" fg:w="3"/><text x="8.7840%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="8.5340%" y="741" width="0.0354%" height="15" fill="rgb(213,121,41)" fg:x="723" fg:w="3"/><text x="8.7840%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="8.5340%" y="725" width="0.0354%" height="15" fill="rgb(240,92,3)" fg:x="723" fg:w="3"/><text x="8.7840%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="8.5340%" y="709" width="0.0354%" height="15" fill="rgb(205,123,3)" fg:x="723" fg:w="3"/><text x="8.7840%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="8.5576%" y="693" width="0.0118%" height="15" fill="rgb(205,97,47)" fg:x="725" fg:w="1"/><text x="8.8076%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="8.5576%" y="677" width="0.0118%" height="15" fill="rgb(247,152,14)" fg:x="725" fg:w="1"/><text x="8.8076%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="8.5576%" y="661" width="0.0118%" height="15" fill="rgb(248,195,53)" fg:x="725" fg:w="1"/><text x="8.8076%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="8.5576%" y="645" width="0.0118%" height="15" fill="rgb(226,201,16)" fg:x="725" fg:w="1"/><text x="8.8076%" y="655.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (6 samples, 0.07%)</title><rect x="8.5222%" y="869" width="0.0708%" height="15" fill="rgb(205,98,0)" fg:x="722" fg:w="6"/><text x="8.7722%" y="879.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (6 samples, 0.07%)</title><rect x="8.5222%" y="853" width="0.0708%" height="15" fill="rgb(214,191,48)" fg:x="722" fg:w="6"/><text x="8.7722%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (6 samples, 0.07%)</title><rect x="8.5222%" y="837" width="0.0708%" height="15" fill="rgb(237,112,39)" fg:x="722" fg:w="6"/><text x="8.7722%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.07%)</title><rect x="8.5222%" y="821" width="0.0708%" height="15" fill="rgb(247,203,27)" fg:x="722" fg:w="6"/><text x="8.7722%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="8.5694%" y="805" width="0.0236%" height="15" fill="rgb(235,124,28)" fg:x="726" fg:w="2"/><text x="8.8194%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="8.5694%" y="789" width="0.0236%" height="15" fill="rgb(208,207,46)" fg:x="726" fg:w="2"/><text x="8.8194%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="8.5694%" y="773" width="0.0236%" height="15" fill="rgb(234,176,4)" fg:x="726" fg:w="2"/><text x="8.8194%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.02%)</title><rect x="8.5694%" y="757" width="0.0236%" height="15" fill="rgb(230,133,28)" fg:x="726" fg:w="2"/><text x="8.8194%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.5694%" y="741" width="0.0236%" height="15" fill="rgb(211,137,40)" fg:x="726" fg:w="2"/><text x="8.8194%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.5694%" y="725" width="0.0236%" height="15" fill="rgb(254,35,13)" fg:x="726" fg:w="2"/><text x="8.8194%" y="735.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="8.5694%" y="709" width="0.0236%" height="15" fill="rgb(225,49,51)" fg:x="726" fg:w="2"/><text x="8.8194%" y="719.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="8.5694%" y="693" width="0.0236%" height="15" fill="rgb(251,10,15)" fg:x="726" fg:w="2"/><text x="8.8194%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="8.6048%" y="789" width="0.0118%" height="15" fill="rgb(228,207,15)" fg:x="729" fg:w="1"/><text x="8.8548%" y="799.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="8.6048%" y="773" width="0.0118%" height="15" fill="rgb(241,99,19)" fg:x="729" fg:w="1"/><text x="8.8548%" y="783.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (2 samples, 0.02%)</title><rect x="8.6048%" y="853" width="0.0236%" height="15" fill="rgb(207,104,49)" fg:x="729" fg:w="2"/><text x="8.8548%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="8.6048%" y="837" width="0.0236%" height="15" fill="rgb(234,99,18)" fg:x="729" fg:w="2"/><text x="8.8548%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="8.6048%" y="821" width="0.0236%" height="15" fill="rgb(213,191,49)" fg:x="729" fg:w="2"/><text x="8.8548%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="8.6048%" y="805" width="0.0236%" height="15" fill="rgb(210,226,19)" fg:x="729" fg:w="2"/><text x="8.8548%" y="815.50"></text></g><g><title>core::cmp::max (1 samples, 0.01%)</title><rect x="8.6166%" y="789" width="0.0118%" height="15" fill="rgb(229,97,18)" fg:x="730" fg:w="1"/><text x="8.8666%" y="799.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.01%)</title><rect x="8.6166%" y="773" width="0.0118%" height="15" fill="rgb(211,167,15)" fg:x="730" fg:w="1"/><text x="8.8666%" y="783.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.01%)</title><rect x="8.6166%" y="757" width="0.0118%" height="15" fill="rgb(210,169,34)" fg:x="730" fg:w="1"/><text x="8.8666%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.6284%" y="773" width="0.0118%" height="15" fill="rgb(241,121,31)" fg:x="731" fg:w="1"/><text x="8.8784%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.6284%" y="757" width="0.0118%" height="15" fill="rgb(232,40,11)" fg:x="731" fg:w="1"/><text x="8.8784%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="8.6284%" y="741" width="0.0118%" height="15" fill="rgb(205,86,26)" fg:x="731" fg:w="1"/><text x="8.8784%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="8.6284%" y="725" width="0.0118%" height="15" fill="rgb(231,126,28)" fg:x="731" fg:w="1"/><text x="8.8784%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="8.6284%" y="709" width="0.0118%" height="15" fill="rgb(219,221,18)" fg:x="731" fg:w="1"/><text x="8.8784%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="8.6402%" y="773" width="0.0118%" height="15" fill="rgb(211,40,0)" fg:x="732" fg:w="1"/><text x="8.8902%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="8.6284%" y="805" width="0.0590%" height="15" fill="rgb(239,85,43)" fg:x="731" fg:w="5"/><text x="8.8784%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="8.6284%" y="789" width="0.0590%" height="15" fill="rgb(231,55,21)" fg:x="731" fg:w="5"/><text x="8.8784%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="8.6520%" y="773" width="0.0354%" height="15" fill="rgb(225,184,43)" fg:x="733" fg:w="3"/><text x="8.9020%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="8.6520%" y="757" width="0.0354%" height="15" fill="rgb(251,158,41)" fg:x="733" fg:w="3"/><text x="8.9020%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="8.6520%" y="741" width="0.0354%" height="15" fill="rgb(234,159,37)" fg:x="733" fg:w="3"/><text x="8.9020%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="8.6520%" y="725" width="0.0354%" height="15" fill="rgb(216,204,22)" fg:x="733" fg:w="3"/><text x="8.9020%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="8.6520%" y="709" width="0.0354%" height="15" fill="rgb(214,17,3)" fg:x="733" fg:w="3"/><text x="8.9020%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="8.6520%" y="693" width="0.0354%" height="15" fill="rgb(212,111,17)" fg:x="733" fg:w="3"/><text x="8.9020%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="8.6520%" y="677" width="0.0354%" height="15" fill="rgb(221,157,24)" fg:x="733" fg:w="3"/><text x="8.9020%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="8.6520%" y="661" width="0.0354%" height="15" fill="rgb(252,16,13)" fg:x="733" fg:w="3"/><text x="8.9020%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="8.6520%" y="645" width="0.0354%" height="15" fill="rgb(221,62,2)" fg:x="733" fg:w="3"/><text x="8.9020%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="8.6756%" y="629" width="0.0118%" height="15" fill="rgb(247,87,22)" fg:x="735" fg:w="1"/><text x="8.9256%" y="639.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (9 samples, 0.11%)</title><rect x="8.5930%" y="869" width="0.1062%" height="15" fill="rgb(215,73,9)" fg:x="728" fg:w="9"/><text x="8.8430%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.07%)</title><rect x="8.6284%" y="853" width="0.0708%" height="15" fill="rgb(207,175,33)" fg:x="731" fg:w="6"/><text x="8.8784%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.07%)</title><rect x="8.6284%" y="837" width="0.0708%" height="15" fill="rgb(243,129,54)" fg:x="731" fg:w="6"/><text x="8.8784%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 0.07%)</title><rect x="8.6284%" y="821" width="0.0708%" height="15" fill="rgb(227,119,45)" fg:x="731" fg:w="6"/><text x="8.8784%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="8.6874%" y="805" width="0.0118%" height="15" fill="rgb(205,109,36)" fg:x="736" fg:w="1"/><text x="8.9374%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="8.6874%" y="789" width="0.0118%" height="15" fill="rgb(205,6,39)" fg:x="736" fg:w="1"/><text x="8.9374%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="8.6874%" y="773" width="0.0118%" height="15" fill="rgb(221,32,16)" fg:x="736" fg:w="1"/><text x="8.9374%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="8.6874%" y="757" width="0.0118%" height="15" fill="rgb(228,144,50)" fg:x="736" fg:w="1"/><text x="8.9374%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.01%)</title><rect x="8.6874%" y="741" width="0.0118%" height="15" fill="rgb(229,201,53)" fg:x="736" fg:w="1"/><text x="8.9374%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="8.6992%" y="853" width="0.0236%" height="15" fill="rgb(249,153,27)" fg:x="737" fg:w="2"/><text x="8.9492%" y="863.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="8.7110%" y="837" width="0.0118%" height="15" fill="rgb(227,106,25)" fg:x="738" fg:w="1"/><text x="8.9610%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="8.7347%" y="725" width="0.0118%" height="15" fill="rgb(230,65,29)" fg:x="740" fg:w="1"/><text x="8.9847%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="8.7347%" y="709" width="0.0118%" height="15" fill="rgb(221,57,46)" fg:x="740" fg:w="1"/><text x="8.9847%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="8.7229%" y="773" width="0.0590%" height="15" fill="rgb(229,161,17)" fg:x="739" fg:w="5"/><text x="8.9729%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="8.7229%" y="757" width="0.0590%" height="15" fill="rgb(222,213,11)" fg:x="739" fg:w="5"/><text x="8.9729%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="8.7229%" y="741" width="0.0590%" height="15" fill="rgb(235,35,13)" fg:x="739" fg:w="5"/><text x="8.9729%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.04%)</title><rect x="8.7465%" y="725" width="0.0354%" height="15" fill="rgb(233,158,34)" fg:x="741" fg:w="3"/><text x="8.9965%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="8.7701%" y="709" width="0.0118%" height="15" fill="rgb(215,151,48)" fg:x="743" fg:w="1"/><text x="9.0201%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="8.7819%" y="773" width="0.0118%" height="15" fill="rgb(229,84,14)" fg:x="744" fg:w="1"/><text x="9.0319%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="8.7937%" y="613" width="0.0354%" height="15" fill="rgb(229,68,14)" fg:x="745" fg:w="3"/><text x="9.0437%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="8.8055%" y="597" width="0.0236%" height="15" fill="rgb(243,106,26)" fg:x="746" fg:w="2"/><text x="9.0555%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.12%)</title><rect x="8.7229%" y="805" width="0.1180%" height="15" fill="rgb(206,45,38)" fg:x="739" fg:w="10"/><text x="8.9729%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.12%)</title><rect x="8.7229%" y="789" width="0.1180%" height="15" fill="rgb(226,6,15)" fg:x="739" fg:w="10"/><text x="8.9729%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="8.7937%" y="773" width="0.0472%" height="15" fill="rgb(232,22,54)" fg:x="745" fg:w="4"/><text x="9.0437%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="8.7937%" y="757" width="0.0472%" height="15" fill="rgb(229,222,32)" fg:x="745" fg:w="4"/><text x="9.0437%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="8.7937%" y="741" width="0.0472%" height="15" fill="rgb(228,62,29)" fg:x="745" fg:w="4"/><text x="9.0437%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="8.7937%" y="725" width="0.0472%" height="15" fill="rgb(251,103,34)" fg:x="745" fg:w="4"/><text x="9.0437%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="8.7937%" y="709" width="0.0472%" height="15" fill="rgb(233,12,30)" fg:x="745" fg:w="4"/><text x="9.0437%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.05%)</title><rect x="8.7937%" y="693" width="0.0472%" height="15" fill="rgb(238,52,0)" fg:x="745" fg:w="4"/><text x="9.0437%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.05%)</title><rect x="8.7937%" y="677" width="0.0472%" height="15" fill="rgb(223,98,5)" fg:x="745" fg:w="4"/><text x="9.0437%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.7937%" y="661" width="0.0472%" height="15" fill="rgb(228,75,37)" fg:x="745" fg:w="4"/><text x="9.0437%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.7937%" y="645" width="0.0472%" height="15" fill="rgb(205,115,49)" fg:x="745" fg:w="4"/><text x="9.0437%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="8.7937%" y="629" width="0.0472%" height="15" fill="rgb(250,154,43)" fg:x="745" fg:w="4"/><text x="9.0437%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="8.8291%" y="613" width="0.0118%" height="15" fill="rgb(226,43,29)" fg:x="748" fg:w="1"/><text x="9.0791%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="8.8409%" y="773" width="0.0118%" height="15" fill="rgb(249,228,39)" fg:x="749" fg:w="1"/><text x="9.0909%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="8.8409%" y="757" width="0.0118%" height="15" fill="rgb(216,79,43)" fg:x="749" fg:w="1"/><text x="9.0909%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="8.8527%" y="773" width="0.0236%" height="15" fill="rgb(228,95,12)" fg:x="750" fg:w="2"/><text x="9.1027%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.02%)</title><rect x="8.8527%" y="757" width="0.0236%" height="15" fill="rgb(249,221,15)" fg:x="750" fg:w="2"/><text x="9.1027%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.8527%" y="741" width="0.0236%" height="15" fill="rgb(233,34,13)" fg:x="750" fg:w="2"/><text x="9.1027%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.8527%" y="725" width="0.0236%" height="15" fill="rgb(214,103,39)" fg:x="750" fg:w="2"/><text x="9.1027%" y="735.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="8.8527%" y="709" width="0.0236%" height="15" fill="rgb(251,126,39)" fg:x="750" fg:w="2"/><text x="9.1027%" y="719.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="8.8527%" y="693" width="0.0236%" height="15" fill="rgb(214,216,36)" fg:x="750" fg:w="2"/><text x="9.1027%" y="703.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (14 samples, 0.17%)</title><rect x="8.7229%" y="853" width="0.1653%" height="15" fill="rgb(220,221,8)" fg:x="739" fg:w="14"/><text x="8.9729%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (14 samples, 0.17%)</title><rect x="8.7229%" y="837" width="0.1653%" height="15" fill="rgb(240,216,3)" fg:x="739" fg:w="14"/><text x="8.9729%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14 samples, 0.17%)</title><rect x="8.7229%" y="821" width="0.1653%" height="15" fill="rgb(232,218,17)" fg:x="739" fg:w="14"/><text x="8.9729%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.05%)</title><rect x="8.8409%" y="805" width="0.0472%" height="15" fill="rgb(229,163,45)" fg:x="749" fg:w="4"/><text x="9.0909%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.05%)</title><rect x="8.8409%" y="789" width="0.0472%" height="15" fill="rgb(231,110,42)" fg:x="749" fg:w="4"/><text x="9.0909%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="8.8763%" y="773" width="0.0118%" height="15" fill="rgb(208,170,48)" fg:x="752" fg:w="1"/><text x="9.1263%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="8.8763%" y="757" width="0.0118%" height="15" fill="rgb(239,116,25)" fg:x="752" fg:w="1"/><text x="9.1263%" y="767.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (3 samples, 0.04%)</title><rect x="8.8881%" y="853" width="0.0354%" height="15" fill="rgb(219,200,50)" fg:x="753" fg:w="3"/><text x="9.1381%" y="863.50"></text></g><g><title>revm_primitives::state::Account::is_touched (2 samples, 0.02%)</title><rect x="8.8999%" y="837" width="0.0236%" height="15" fill="rgb(245,200,0)" fg:x="754" fg:w="2"/><text x="9.1499%" y="847.50"></text></g><g><title>revm_primitives::state::_::&lt;impl revm_primitives::state::AccountStatus&gt;::contains (2 samples, 0.02%)</title><rect x="8.8999%" y="821" width="0.0236%" height="15" fill="rgb(245,119,33)" fg:x="754" fg:w="2"/><text x="9.1499%" y="831.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::contains (2 samples, 0.02%)</title><rect x="8.8999%" y="805" width="0.0236%" height="15" fill="rgb(231,125,12)" fg:x="754" fg:w="2"/><text x="9.1499%" y="815.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::bits (2 samples, 0.02%)</title><rect x="8.8999%" y="789" width="0.0236%" height="15" fill="rgb(216,96,41)" fg:x="754" fg:w="2"/><text x="9.1499%" y="799.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (1 samples, 0.01%)</title><rect x="8.9235%" y="853" width="0.0118%" height="15" fill="rgb(248,43,45)" fg:x="756" fg:w="1"/><text x="9.1735%" y="863.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="8.9235%" y="837" width="0.0118%" height="15" fill="rgb(217,222,7)" fg:x="756" fg:w="1"/><text x="9.1735%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="8.9471%" y="725" width="0.0118%" height="15" fill="rgb(233,28,6)" fg:x="758" fg:w="1"/><text x="9.1971%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="8.9471%" y="709" width="0.0118%" height="15" fill="rgb(231,218,15)" fg:x="758" fg:w="1"/><text x="9.1971%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="8.9353%" y="773" width="0.0354%" height="15" fill="rgb(226,171,48)" fg:x="757" fg:w="3"/><text x="9.1853%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="8.9353%" y="757" width="0.0354%" height="15" fill="rgb(235,201,9)" fg:x="757" fg:w="3"/><text x="9.1853%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="8.9353%" y="741" width="0.0354%" height="15" fill="rgb(217,80,15)" fg:x="757" fg:w="3"/><text x="9.1853%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="8.9589%" y="725" width="0.0118%" height="15" fill="rgb(219,152,8)" fg:x="759" fg:w="1"/><text x="9.2089%" y="735.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="8.9707%" y="773" width="0.0118%" height="15" fill="rgb(243,107,38)" fg:x="760" fg:w="1"/><text x="9.2207%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="9.0179%" y="613" width="0.0118%" height="15" fill="rgb(231,17,5)" fg:x="764" fg:w="1"/><text x="9.2679%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="9.0179%" y="597" width="0.0118%" height="15" fill="rgb(209,25,54)" fg:x="764" fg:w="1"/><text x="9.2679%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.07%)</title><rect x="8.9825%" y="693" width="0.0708%" height="15" fill="rgb(219,0,2)" fg:x="761" fg:w="6"/><text x="9.2325%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.07%)</title><rect x="8.9825%" y="677" width="0.0708%" height="15" fill="rgb(246,9,5)" fg:x="761" fg:w="6"/><text x="9.2325%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="8.9943%" y="661" width="0.0590%" height="15" fill="rgb(226,159,4)" fg:x="762" fg:w="5"/><text x="9.2443%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="8.9943%" y="645" width="0.0590%" height="15" fill="rgb(219,175,34)" fg:x="762" fg:w="5"/><text x="9.2443%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="8.9943%" y="629" width="0.0590%" height="15" fill="rgb(236,10,46)" fg:x="762" fg:w="5"/><text x="9.2443%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="9.0297%" y="613" width="0.0236%" height="15" fill="rgb(240,211,16)" fg:x="765" fg:w="2"/><text x="9.2797%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.13%)</title><rect x="8.9353%" y="805" width="0.1298%" height="15" fill="rgb(205,3,43)" fg:x="757" fg:w="11"/><text x="9.1853%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.13%)</title><rect x="8.9353%" y="789" width="0.1298%" height="15" fill="rgb(245,7,22)" fg:x="757" fg:w="11"/><text x="9.1853%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.08%)</title><rect x="8.9825%" y="773" width="0.0826%" height="15" fill="rgb(239,132,32)" fg:x="761" fg:w="7"/><text x="9.2325%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (7 samples, 0.08%)</title><rect x="8.9825%" y="757" width="0.0826%" height="15" fill="rgb(228,202,34)" fg:x="761" fg:w="7"/><text x="9.2325%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (7 samples, 0.08%)</title><rect x="8.9825%" y="741" width="0.0826%" height="15" fill="rgb(254,200,22)" fg:x="761" fg:w="7"/><text x="9.2325%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (7 samples, 0.08%)</title><rect x="8.9825%" y="725" width="0.0826%" height="15" fill="rgb(219,10,39)" fg:x="761" fg:w="7"/><text x="9.2325%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.08%)</title><rect x="8.9825%" y="709" width="0.0826%" height="15" fill="rgb(226,210,39)" fg:x="761" fg:w="7"/><text x="9.2325%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="9.0534%" y="693" width="0.0118%" height="15" fill="rgb(208,219,16)" fg:x="767" fg:w="1"/><text x="9.3034%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="9.0534%" y="677" width="0.0118%" height="15" fill="rgb(216,158,51)" fg:x="767" fg:w="1"/><text x="9.3034%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="9.0534%" y="661" width="0.0118%" height="15" fill="rgb(233,14,44)" fg:x="767" fg:w="1"/><text x="9.3034%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="9.0534%" y="645" width="0.0118%" height="15" fill="rgb(237,97,39)" fg:x="767" fg:w="1"/><text x="9.3034%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="9.0534%" y="629" width="0.0118%" height="15" fill="rgb(218,198,43)" fg:x="767" fg:w="1"/><text x="9.3034%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="9.0652%" y="757" width="0.0118%" height="15" fill="rgb(231,104,20)" fg:x="768" fg:w="1"/><text x="9.3152%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.01%)</title><rect x="9.0652%" y="741" width="0.0118%" height="15" fill="rgb(254,36,13)" fg:x="768" fg:w="1"/><text x="9.3152%" y="751.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.01%)</title><rect x="9.0770%" y="741" width="0.0118%" height="15" fill="rgb(248,14,50)" fg:x="769" fg:w="1"/><text x="9.3270%" y="751.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="9.0770%" y="725" width="0.0118%" height="15" fill="rgb(217,107,29)" fg:x="769" fg:w="1"/><text x="9.3270%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="9.0770%" y="709" width="0.0118%" height="15" fill="rgb(251,169,33)" fg:x="769" fg:w="1"/><text x="9.3270%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="9.0770%" y="693" width="0.0118%" height="15" fill="rgb(217,108,32)" fg:x="769" fg:w="1"/><text x="9.3270%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="9.0770%" y="677" width="0.0118%" height="15" fill="rgb(219,66,42)" fg:x="769" fg:w="1"/><text x="9.3270%" y="687.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="9.0770%" y="661" width="0.0118%" height="15" fill="rgb(206,180,7)" fg:x="769" fg:w="1"/><text x="9.3270%" y="671.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="9.0770%" y="645" width="0.0118%" height="15" fill="rgb(208,226,31)" fg:x="769" fg:w="1"/><text x="9.3270%" y="655.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (82 samples, 0.97%)</title><rect x="8.1327%" y="933" width="0.9679%" height="15" fill="rgb(218,26,49)" fg:x="689" fg:w="82"/><text x="8.3827%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (78 samples, 0.92%)</title><rect x="8.1799%" y="917" width="0.9207%" height="15" fill="rgb(233,197,48)" fg:x="693" fg:w="78"/><text x="8.4299%" y="927.50"></text></g><g><title>revm::handler::mainnet::execution::call (78 samples, 0.92%)</title><rect x="8.1799%" y="901" width="0.9207%" height="15" fill="rgb(252,181,51)" fg:x="693" fg:w="78"/><text x="8.4299%" y="911.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (77 samples, 0.91%)</title><rect x="8.1917%" y="885" width="0.9089%" height="15" fill="rgb(253,90,19)" fg:x="694" fg:w="77"/><text x="8.4417%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (34 samples, 0.40%)</title><rect x="8.6992%" y="869" width="0.4013%" height="15" fill="rgb(215,171,30)" fg:x="737" fg:w="34"/><text x="8.9492%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (14 samples, 0.17%)</title><rect x="8.9353%" y="853" width="0.1653%" height="15" fill="rgb(214,222,9)" fg:x="757" fg:w="14"/><text x="9.1853%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (14 samples, 0.17%)</title><rect x="8.9353%" y="837" width="0.1653%" height="15" fill="rgb(223,3,22)" fg:x="757" fg:w="14"/><text x="9.1853%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (14 samples, 0.17%)</title><rect x="8.9353%" y="821" width="0.1653%" height="15" fill="rgb(225,196,46)" fg:x="757" fg:w="14"/><text x="9.1853%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.04%)</title><rect x="9.0652%" y="805" width="0.0354%" height="15" fill="rgb(209,110,37)" fg:x="768" fg:w="3"/><text x="9.3152%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.04%)</title><rect x="9.0652%" y="789" width="0.0354%" height="15" fill="rgb(249,89,12)" fg:x="768" fg:w="3"/><text x="9.3152%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.04%)</title><rect x="9.0652%" y="773" width="0.0354%" height="15" fill="rgb(226,27,33)" fg:x="768" fg:w="3"/><text x="9.3152%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="9.0770%" y="757" width="0.0236%" height="15" fill="rgb(213,82,22)" fg:x="769" fg:w="2"/><text x="9.3270%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="9.0888%" y="741" width="0.0118%" height="15" fill="rgb(248,140,0)" fg:x="770" fg:w="1"/><text x="9.3388%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="9.0888%" y="725" width="0.0118%" height="15" fill="rgb(228,106,3)" fg:x="770" fg:w="1"/><text x="9.3388%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="9.0888%" y="709" width="0.0118%" height="15" fill="rgb(209,23,37)" fg:x="770" fg:w="1"/><text x="9.3388%" y="719.50"></text></g><g><title>revm::frame::FrameResult::output (4 samples, 0.05%)</title><rect x="9.1478%" y="885" width="0.0472%" height="15" fill="rgb(241,93,50)" fg:x="775" fg:w="4"/><text x="9.3978%" y="895.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="9.2068%" y="805" width="0.0236%" height="15" fill="rgb(253,46,43)" fg:x="780" fg:w="2"/><text x="9.4568%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="9.1950%" y="869" width="0.0472%" height="15" fill="rgb(226,206,43)" fg:x="779" fg:w="4"/><text x="9.4450%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="9.1950%" y="853" width="0.0472%" height="15" fill="rgb(217,54,7)" fg:x="779" fg:w="4"/><text x="9.4450%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="9.1950%" y="837" width="0.0472%" height="15" fill="rgb(223,5,52)" fg:x="779" fg:w="4"/><text x="9.4450%" y="847.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="9.1950%" y="821" width="0.0472%" height="15" fill="rgb(206,52,46)" fg:x="779" fg:w="4"/><text x="9.4450%" y="831.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="9.2304%" y="805" width="0.0118%" height="15" fill="rgb(253,136,11)" fg:x="782" fg:w="1"/><text x="9.4804%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="9.2304%" y="789" width="0.0118%" height="15" fill="rgb(208,106,33)" fg:x="782" fg:w="1"/><text x="9.4804%" y="799.50"></text></g><g><title>__GI___libc_free (6 samples, 0.07%)</title><rect x="9.2422%" y="741" width="0.0708%" height="15" fill="rgb(206,54,4)" fg:x="783" fg:w="6"/><text x="9.4922%" y="751.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="9.2540%" y="725" width="0.0590%" height="15" fill="rgb(213,3,15)" fg:x="784" fg:w="5"/><text x="9.5040%" y="735.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="9.3012%" y="709" width="0.0118%" height="15" fill="rgb(252,211,39)" fg:x="788" fg:w="1"/><text x="9.5512%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.08%)</title><rect x="9.2422%" y="773" width="0.0826%" height="15" fill="rgb(223,6,36)" fg:x="783" fg:w="7"/><text x="9.4922%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.08%)</title><rect x="9.2422%" y="757" width="0.0826%" height="15" fill="rgb(252,169,45)" fg:x="783" fg:w="7"/><text x="9.4922%" y="767.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="9.3130%" y="741" width="0.0118%" height="15" fill="rgb(212,48,26)" fg:x="789" fg:w="1"/><text x="9.5630%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="9.3130%" y="725" width="0.0118%" height="15" fill="rgb(251,102,48)" fg:x="789" fg:w="1"/><text x="9.5630%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.09%)</title><rect x="9.2422%" y="853" width="0.0944%" height="15" fill="rgb(243,208,16)" fg:x="783" fg:w="8"/><text x="9.4922%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (8 samples, 0.09%)</title><rect x="9.2422%" y="837" width="0.0944%" height="15" fill="rgb(219,96,24)" fg:x="783" fg:w="8"/><text x="9.4922%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (8 samples, 0.09%)</title><rect x="9.2422%" y="821" width="0.0944%" height="15" fill="rgb(219,33,29)" fg:x="783" fg:w="8"/><text x="9.4922%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (8 samples, 0.09%)</title><rect x="9.2422%" y="805" width="0.0944%" height="15" fill="rgb(223,176,5)" fg:x="783" fg:w="8"/><text x="9.4922%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.09%)</title><rect x="9.2422%" y="789" width="0.0944%" height="15" fill="rgb(228,140,14)" fg:x="783" fg:w="8"/><text x="9.4922%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="9.3248%" y="773" width="0.0118%" height="15" fill="rgb(217,179,31)" fg:x="790" fg:w="1"/><text x="9.5748%" y="783.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="9.3366%" y="789" width="0.0236%" height="15" fill="rgb(230,9,30)" fg:x="791" fg:w="2"/><text x="9.5866%" y="799.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="9.3366%" y="773" width="0.0236%" height="15" fill="rgb(230,136,20)" fg:x="791" fg:w="2"/><text x="9.5866%" y="783.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="9.3484%" y="757" width="0.0118%" height="15" fill="rgb(215,210,22)" fg:x="792" fg:w="1"/><text x="9.5984%" y="767.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (23 samples, 0.27%)</title><rect x="9.1006%" y="933" width="0.2715%" height="15" fill="rgb(218,43,5)" fg:x="771" fg:w="23"/><text x="9.3506%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (23 samples, 0.27%)</title><rect x="9.1006%" y="917" width="0.2715%" height="15" fill="rgb(216,11,5)" fg:x="771" fg:w="23"/><text x="9.3506%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (23 samples, 0.27%)</title><rect x="9.1006%" y="901" width="0.2715%" height="15" fill="rgb(209,82,29)" fg:x="771" fg:w="23"/><text x="9.3506%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (15 samples, 0.18%)</title><rect x="9.1950%" y="885" width="0.1771%" height="15" fill="rgb(244,115,12)" fg:x="779" fg:w="15"/><text x="9.4450%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="9.2422%" y="869" width="0.1298%" height="15" fill="rgb(222,82,18)" fg:x="783" fg:w="11"/><text x="9.4922%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="9.3366%" y="853" width="0.0354%" height="15" fill="rgb(249,227,8)" fg:x="791" fg:w="3"/><text x="9.5866%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="9.3366%" y="837" width="0.0354%" height="15" fill="rgb(253,141,45)" fg:x="791" fg:w="3"/><text x="9.5866%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="9.3366%" y="821" width="0.0354%" height="15" fill="rgb(234,184,4)" fg:x="791" fg:w="3"/><text x="9.5866%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="9.3366%" y="805" width="0.0354%" height="15" fill="rgb(218,194,23)" fg:x="791" fg:w="3"/><text x="9.5866%" y="815.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="9.3602%" y="789" width="0.0118%" height="15" fill="rgb(235,66,41)" fg:x="793" fg:w="1"/><text x="9.6102%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="9.3957%" y="805" width="0.0236%" height="15" fill="rgb(245,217,1)" fg:x="796" fg:w="2"/><text x="9.6457%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="9.3957%" y="789" width="0.0236%" height="15" fill="rgb(229,91,1)" fg:x="796" fg:w="2"/><text x="9.6457%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="9.3957%" y="773" width="0.0236%" height="15" fill="rgb(207,101,30)" fg:x="796" fg:w="2"/><text x="9.6457%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="9.4075%" y="757" width="0.0118%" height="15" fill="rgb(223,82,49)" fg:x="797" fg:w="1"/><text x="9.6575%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="9.4075%" y="741" width="0.0118%" height="15" fill="rgb(218,167,17)" fg:x="797" fg:w="1"/><text x="9.6575%" y="751.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="9.4193%" y="805" width="0.0118%" height="15" fill="rgb(208,103,14)" fg:x="798" fg:w="1"/><text x="9.6693%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="9.4311%" y="645" width="0.0236%" height="15" fill="rgb(238,20,8)" fg:x="799" fg:w="2"/><text x="9.6811%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="9.3957%" y="837" width="0.0708%" height="15" fill="rgb(218,80,54)" fg:x="796" fg:w="6"/><text x="9.6457%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="9.3957%" y="821" width="0.0708%" height="15" fill="rgb(240,144,17)" fg:x="796" fg:w="6"/><text x="9.6457%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="9.4311%" y="805" width="0.0354%" height="15" fill="rgb(245,27,50)" fg:x="799" fg:w="3"/><text x="9.6811%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="9.4311%" y="789" width="0.0354%" height="15" fill="rgb(251,51,7)" fg:x="799" fg:w="3"/><text x="9.6811%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="9.4311%" y="773" width="0.0354%" height="15" fill="rgb(245,217,29)" fg:x="799" fg:w="3"/><text x="9.6811%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="9.4311%" y="757" width="0.0354%" height="15" fill="rgb(221,176,29)" fg:x="799" fg:w="3"/><text x="9.6811%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="9.4311%" y="741" width="0.0354%" height="15" fill="rgb(212,180,24)" fg:x="799" fg:w="3"/><text x="9.6811%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="9.4311%" y="725" width="0.0354%" height="15" fill="rgb(254,24,2)" fg:x="799" fg:w="3"/><text x="9.6811%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.4311%" y="709" width="0.0354%" height="15" fill="rgb(230,100,2)" fg:x="799" fg:w="3"/><text x="9.6811%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.4311%" y="693" width="0.0354%" height="15" fill="rgb(219,142,25)" fg:x="799" fg:w="3"/><text x="9.6811%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.4311%" y="677" width="0.0354%" height="15" fill="rgb(240,73,43)" fg:x="799" fg:w="3"/><text x="9.6811%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="9.4311%" y="661" width="0.0354%" height="15" fill="rgb(214,114,15)" fg:x="799" fg:w="3"/><text x="9.6811%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="9.4547%" y="645" width="0.0118%" height="15" fill="rgb(207,130,4)" fg:x="801" fg:w="1"/><text x="9.7047%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="9.4783%" y="805" width="0.0118%" height="15" fill="rgb(221,25,40)" fg:x="803" fg:w="1"/><text x="9.7283%" y="815.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.01%)</title><rect x="9.4783%" y="789" width="0.0118%" height="15" fill="rgb(241,184,7)" fg:x="803" fg:w="1"/><text x="9.7283%" y="799.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (11 samples, 0.13%)</title><rect x="9.3720%" y="933" width="0.1298%" height="15" fill="rgb(235,159,4)" fg:x="794" fg:w="11"/><text x="9.6220%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.12%)</title><rect x="9.3839%" y="917" width="0.1180%" height="15" fill="rgb(214,87,48)" fg:x="795" fg:w="10"/><text x="9.6339%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (10 samples, 0.12%)</title><rect x="9.3839%" y="901" width="0.1180%" height="15" fill="rgb(246,198,24)" fg:x="795" fg:w="10"/><text x="9.6339%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (10 samples, 0.12%)</title><rect x="9.3839%" y="885" width="0.1180%" height="15" fill="rgb(209,66,40)" fg:x="795" fg:w="10"/><text x="9.6339%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="9.3957%" y="869" width="0.1062%" height="15" fill="rgb(233,147,39)" fg:x="796" fg:w="9"/><text x="9.6457%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.11%)</title><rect x="9.3957%" y="853" width="0.1062%" height="15" fill="rgb(231,145,52)" fg:x="796" fg:w="9"/><text x="9.6457%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.04%)</title><rect x="9.4665%" y="837" width="0.0354%" height="15" fill="rgb(206,20,26)" fg:x="802" fg:w="3"/><text x="9.7165%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.04%)</title><rect x="9.4665%" y="821" width="0.0354%" height="15" fill="rgb(238,220,4)" fg:x="802" fg:w="3"/><text x="9.7165%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="9.4901%" y="805" width="0.0118%" height="15" fill="rgb(252,195,42)" fg:x="804" fg:w="1"/><text x="9.7401%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="9.4901%" y="789" width="0.0118%" height="15" fill="rgb(209,10,6)" fg:x="804" fg:w="1"/><text x="9.7401%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="9.4901%" y="773" width="0.0118%" height="15" fill="rgb(229,3,52)" fg:x="804" fg:w="1"/><text x="9.7401%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="9.4901%" y="757" width="0.0118%" height="15" fill="rgb(253,49,37)" fg:x="804" fg:w="1"/><text x="9.7401%" y="767.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="9.4901%" y="741" width="0.0118%" height="15" fill="rgb(240,103,49)" fg:x="804" fg:w="1"/><text x="9.7401%" y="751.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="9.4901%" y="725" width="0.0118%" height="15" fill="rgb(250,182,30)" fg:x="804" fg:w="1"/><text x="9.7401%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="9.5373%" y="645" width="0.0118%" height="15" fill="rgb(248,8,30)" fg:x="808" fg:w="1"/><text x="9.7873%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="9.5255%" y="725" width="0.0354%" height="15" fill="rgb(237,120,30)" fg:x="807" fg:w="3"/><text x="9.7755%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="9.5255%" y="709" width="0.0354%" height="15" fill="rgb(221,146,34)" fg:x="807" fg:w="3"/><text x="9.7755%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.5255%" y="693" width="0.0354%" height="15" fill="rgb(242,55,13)" fg:x="807" fg:w="3"/><text x="9.7755%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.5255%" y="677" width="0.0354%" height="15" fill="rgb(242,112,31)" fg:x="807" fg:w="3"/><text x="9.7755%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.5255%" y="661" width="0.0354%" height="15" fill="rgb(249,192,27)" fg:x="807" fg:w="3"/><text x="9.7755%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="9.5491%" y="645" width="0.0118%" height="15" fill="rgb(208,204,44)" fg:x="809" fg:w="1"/><text x="9.7991%" y="655.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (6 samples, 0.07%)</title><rect x="9.5137%" y="885" width="0.0708%" height="15" fill="rgb(208,93,54)" fg:x="806" fg:w="6"/><text x="9.7637%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.06%)</title><rect x="9.5255%" y="869" width="0.0590%" height="15" fill="rgb(242,1,31)" fg:x="807" fg:w="5"/><text x="9.7755%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.06%)</title><rect x="9.5255%" y="853" width="0.0590%" height="15" fill="rgb(241,83,25)" fg:x="807" fg:w="5"/><text x="9.7755%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="9.5255%" y="837" width="0.0590%" height="15" fill="rgb(205,169,50)" fg:x="807" fg:w="5"/><text x="9.7755%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="9.5255%" y="821" width="0.0590%" height="15" fill="rgb(239,186,37)" fg:x="807" fg:w="5"/><text x="9.7755%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.06%)</title><rect x="9.5255%" y="805" width="0.0590%" height="15" fill="rgb(205,221,10)" fg:x="807" fg:w="5"/><text x="9.7755%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="9.5255%" y="789" width="0.0590%" height="15" fill="rgb(218,196,15)" fg:x="807" fg:w="5"/><text x="9.7755%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="9.5255%" y="773" width="0.0590%" height="15" fill="rgb(218,196,35)" fg:x="807" fg:w="5"/><text x="9.7755%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.06%)</title><rect x="9.5255%" y="757" width="0.0590%" height="15" fill="rgb(233,63,24)" fg:x="807" fg:w="5"/><text x="9.7755%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.06%)</title><rect x="9.5255%" y="741" width="0.0590%" height="15" fill="rgb(225,8,4)" fg:x="807" fg:w="5"/><text x="9.7755%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="9.5609%" y="725" width="0.0236%" height="15" fill="rgb(234,105,35)" fg:x="810" fg:w="2"/><text x="9.8109%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.5609%" y="709" width="0.0236%" height="15" fill="rgb(236,21,32)" fg:x="810" fg:w="2"/><text x="9.8109%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.5609%" y="693" width="0.0236%" height="15" fill="rgb(228,109,6)" fg:x="810" fg:w="2"/><text x="9.8109%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.5609%" y="677" width="0.0236%" height="15" fill="rgb(229,215,31)" fg:x="810" fg:w="2"/><text x="9.8109%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="9.5727%" y="661" width="0.0118%" height="15" fill="rgb(221,52,54)" fg:x="811" fg:w="1"/><text x="9.8227%" y="671.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (8 samples, 0.09%)</title><rect x="9.5019%" y="933" width="0.0944%" height="15" fill="rgb(252,129,43)" fg:x="805" fg:w="8"/><text x="9.7519%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (8 samples, 0.09%)</title><rect x="9.5019%" y="917" width="0.0944%" height="15" fill="rgb(248,183,27)" fg:x="805" fg:w="8"/><text x="9.7519%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (8 samples, 0.09%)</title><rect x="9.5019%" y="901" width="0.0944%" height="15" fill="rgb(250,0,22)" fg:x="805" fg:w="8"/><text x="9.7519%" y="911.50"></text></g><g><title>ruint::mul::&lt;impl core::ops::arith::Mul for ruint::Uint&lt;_,_&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="9.5845%" y="885" width="0.0118%" height="15" fill="rgb(213,166,10)" fg:x="812" fg:w="1"/><text x="9.8345%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_mul (1 samples, 0.01%)</title><rect x="9.5845%" y="869" width="0.0118%" height="15" fill="rgb(207,163,36)" fg:x="812" fg:w="1"/><text x="9.8345%" y="879.50"></text></g><g><title>ruint::algorithms::mul::addmul_n (1 samples, 0.01%)</title><rect x="9.5845%" y="853" width="0.0118%" height="15" fill="rgb(208,122,22)" fg:x="812" fg:w="1"/><text x="9.8345%" y="863.50"></text></g><g><title>ruint::algorithms::mul::addmul_4 (1 samples, 0.01%)</title><rect x="9.5845%" y="837" width="0.0118%" height="15" fill="rgb(207,104,49)" fg:x="812" fg:w="1"/><text x="9.8345%" y="847.50"></text></g><g><title>ruint::algorithms::mul::mac (1 samples, 0.01%)</title><rect x="9.5845%" y="821" width="0.0118%" height="15" fill="rgb(248,211,50)" fg:x="812" fg:w="1"/><text x="9.8345%" y="831.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::muladd2 (1 samples, 0.01%)</title><rect x="9.5845%" y="805" width="0.0118%" height="15" fill="rgb(217,13,45)" fg:x="812" fg:w="1"/><text x="9.8345%" y="815.50"></text></g><g><title>ruint::from::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from (1 samples, 0.01%)</title><rect x="9.5963%" y="821" width="0.0118%" height="15" fill="rgb(211,216,49)" fg:x="813" fg:w="1"/><text x="9.8463%" y="831.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as ruint::from::UintTryFrom&lt;T&gt;&gt;::uint_try_from (1 samples, 0.01%)</title><rect x="9.5963%" y="805" width="0.0118%" height="15" fill="rgb(221,58,53)" fg:x="813" fg:w="1"/><text x="9.8463%" y="815.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;u128&gt; for ruint::Uint&lt;_,_&gt;&gt;::try_from (1 samples, 0.01%)</title><rect x="9.5963%" y="789" width="0.0118%" height="15" fill="rgb(220,112,41)" fg:x="813" fg:w="1"/><text x="9.8463%" y="799.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (3 samples, 0.04%)</title><rect x="9.5963%" y="869" width="0.0354%" height="15" fill="rgb(236,38,28)" fg:x="813" fg:w="3"/><text x="9.8463%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.04%)</title><rect x="9.5963%" y="853" width="0.0354%" height="15" fill="rgb(227,195,22)" fg:x="813" fg:w="3"/><text x="9.8463%" y="863.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (3 samples, 0.04%)</title><rect x="9.5963%" y="837" width="0.0354%" height="15" fill="rgb(214,55,33)" fg:x="813" fg:w="3"/><text x="9.8463%" y="847.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (2 samples, 0.02%)</title><rect x="9.6081%" y="821" width="0.0236%" height="15" fill="rgb(248,80,13)" fg:x="814" fg:w="2"/><text x="9.8581%" y="831.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="9.6081%" y="805" width="0.0236%" height="15" fill="rgb(238,52,6)" fg:x="814" fg:w="2"/><text x="9.8581%" y="815.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="9.6081%" y="789" width="0.0236%" height="15" fill="rgb(224,198,47)" fg:x="814" fg:w="2"/><text x="9.8581%" y="799.50"></text></g><g><title>revm_primitives::env::Env::effective_gas_price (1 samples, 0.01%)</title><rect x="9.6317%" y="869" width="0.0118%" height="15" fill="rgb(233,171,20)" fg:x="816" fg:w="1"/><text x="9.8817%" y="879.50"></text></g><g><title>ruint::from::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from (1 samples, 0.01%)</title><rect x="9.6435%" y="869" width="0.0118%" height="15" fill="rgb(241,30,25)" fg:x="817" fg:w="1"/><text x="9.8935%" y="879.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (8 samples, 0.09%)</title><rect x="9.5963%" y="885" width="0.0944%" height="15" fill="rgb(207,171,38)" fg:x="813" fg:w="8"/><text x="9.8463%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (3 samples, 0.04%)</title><rect x="9.6553%" y="869" width="0.0354%" height="15" fill="rgb(234,70,1)" fg:x="818" fg:w="3"/><text x="9.9053%" y="879.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (3 samples, 0.04%)</title><rect x="9.6553%" y="853" width="0.0354%" height="15" fill="rgb(232,178,18)" fg:x="818" fg:w="3"/><text x="9.9053%" y="863.50"></text></g><g><title>ruint::algorithms::mul::addmul (3 samples, 0.04%)</title><rect x="9.6553%" y="837" width="0.0354%" height="15" fill="rgb(241,78,40)" fg:x="818" fg:w="3"/><text x="9.9053%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="9.6907%" y="805" width="0.0118%" height="15" fill="rgb(222,35,25)" fg:x="821" fg:w="1"/><text x="9.9407%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="9.6907%" y="837" width="0.0472%" height="15" fill="rgb(207,92,16)" fg:x="821" fg:w="4"/><text x="9.9407%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.05%)</title><rect x="9.6907%" y="821" width="0.0472%" height="15" fill="rgb(216,59,51)" fg:x="821" fg:w="4"/><text x="9.9407%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="9.7025%" y="805" width="0.0354%" height="15" fill="rgb(213,80,28)" fg:x="822" fg:w="3"/><text x="9.9525%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="9.7025%" y="789" width="0.0354%" height="15" fill="rgb(220,93,7)" fg:x="822" fg:w="3"/><text x="9.9525%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="9.7025%" y="773" width="0.0354%" height="15" fill="rgb(225,24,44)" fg:x="822" fg:w="3"/><text x="9.9525%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="9.7025%" y="757" width="0.0354%" height="15" fill="rgb(243,74,40)" fg:x="822" fg:w="3"/><text x="9.9525%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="9.7025%" y="741" width="0.0354%" height="15" fill="rgb(228,39,7)" fg:x="822" fg:w="3"/><text x="9.9525%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="9.7025%" y="725" width="0.0354%" height="15" fill="rgb(227,79,8)" fg:x="822" fg:w="3"/><text x="9.9525%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.7025%" y="709" width="0.0354%" height="15" fill="rgb(236,58,11)" fg:x="822" fg:w="3"/><text x="9.9525%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.7025%" y="693" width="0.0354%" height="15" fill="rgb(249,63,35)" fg:x="822" fg:w="3"/><text x="9.9525%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.7025%" y="677" width="0.0354%" height="15" fill="rgb(252,114,16)" fg:x="822" fg:w="3"/><text x="9.9525%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="9.7262%" y="661" width="0.0118%" height="15" fill="rgb(254,151,24)" fg:x="824" fg:w="1"/><text x="9.9762%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="9.7262%" y="645" width="0.0118%" height="15" fill="rgb(253,54,39)" fg:x="824" fg:w="1"/><text x="9.9762%" y="655.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (13 samples, 0.15%)</title><rect x="9.5963%" y="933" width="0.1534%" height="15" fill="rgb(243,25,45)" fg:x="813" fg:w="13"/><text x="9.8463%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (13 samples, 0.15%)</title><rect x="9.5963%" y="917" width="0.1534%" height="15" fill="rgb(234,134,9)" fg:x="813" fg:w="13"/><text x="9.8463%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (13 samples, 0.15%)</title><rect x="9.5963%" y="901" width="0.1534%" height="15" fill="rgb(227,166,31)" fg:x="813" fg:w="13"/><text x="9.8463%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.06%)</title><rect x="9.6907%" y="885" width="0.0590%" height="15" fill="rgb(245,143,41)" fg:x="821" fg:w="5"/><text x="9.9407%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.06%)</title><rect x="9.6907%" y="869" width="0.0590%" height="15" fill="rgb(238,181,32)" fg:x="821" fg:w="5"/><text x="9.9407%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.06%)</title><rect x="9.6907%" y="853" width="0.0590%" height="15" fill="rgb(224,113,18)" fg:x="821" fg:w="5"/><text x="9.9407%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="9.7380%" y="837" width="0.0118%" height="15" fill="rgb(240,229,28)" fg:x="825" fg:w="1"/><text x="9.9880%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="9.7380%" y="821" width="0.0118%" height="15" fill="rgb(250,185,3)" fg:x="825" fg:w="1"/><text x="9.9880%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="9.7380%" y="805" width="0.0118%" height="15" fill="rgb(212,59,25)" fg:x="825" fg:w="1"/><text x="9.9880%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="9.7380%" y="789" width="0.0118%" height="15" fill="rgb(221,87,20)" fg:x="825" fg:w="1"/><text x="9.9880%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.01%)</title><rect x="9.7380%" y="773" width="0.0118%" height="15" fill="rgb(213,74,28)" fg:x="825" fg:w="1"/><text x="9.9880%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="9.7380%" y="757" width="0.0118%" height="15" fill="rgb(224,132,34)" fg:x="825" fg:w="1"/><text x="9.9880%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="9.7380%" y="741" width="0.0118%" height="15" fill="rgb(222,101,24)" fg:x="825" fg:w="1"/><text x="9.9880%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="9.7498%" y="885" width="0.0118%" height="15" fill="rgb(254,142,4)" fg:x="826" fg:w="1"/><text x="9.9998%" y="895.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::basic (1 samples, 0.01%)</title><rect x="9.7734%" y="869" width="0.0118%" height="15" fill="rgb(230,229,49)" fg:x="828" fg:w="1"/><text x="10.0234%" y="879.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::basic_ref (1 samples, 0.01%)</title><rect x="9.7734%" y="853" width="0.0118%" height="15" fill="rgb(238,70,47)" fg:x="828" fg:w="1"/><text x="10.0234%" y="863.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (1 samples, 0.01%)</title><rect x="9.7734%" y="837" width="0.0118%" height="15" fill="rgb(231,160,17)" fg:x="828" fg:w="1"/><text x="10.0234%" y="847.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="9.8206%" y="725" width="0.0354%" height="15" fill="rgb(218,68,53)" fg:x="832" fg:w="3"/><text x="10.0706%" y="735.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="9.8324%" y="709" width="0.0236%" height="15" fill="rgb(236,111,10)" fg:x="833" fg:w="2"/><text x="10.0824%" y="719.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (7 samples, 0.08%)</title><rect x="9.7852%" y="869" width="0.0826%" height="15" fill="rgb(224,34,41)" fg:x="829" fg:w="7"/><text x="10.0352%" y="879.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (5 samples, 0.06%)</title><rect x="9.8088%" y="853" width="0.0590%" height="15" fill="rgb(241,118,19)" fg:x="831" fg:w="5"/><text x="10.0588%" y="863.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (4 samples, 0.05%)</title><rect x="9.8206%" y="837" width="0.0472%" height="15" fill="rgb(238,129,25)" fg:x="832" fg:w="4"/><text x="10.0706%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="9.8206%" y="821" width="0.0472%" height="15" fill="rgb(238,22,31)" fg:x="832" fg:w="4"/><text x="10.0706%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="9.8206%" y="805" width="0.0472%" height="15" fill="rgb(222,174,48)" fg:x="832" fg:w="4"/><text x="10.0706%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="9.8206%" y="789" width="0.0472%" height="15" fill="rgb(206,152,40)" fg:x="832" fg:w="4"/><text x="10.0706%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="9.8206%" y="773" width="0.0472%" height="15" fill="rgb(218,99,54)" fg:x="832" fg:w="4"/><text x="10.0706%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="9.8206%" y="757" width="0.0472%" height="15" fill="rgb(220,174,26)" fg:x="832" fg:w="4"/><text x="10.0706%" y="767.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="9.8206%" y="741" width="0.0472%" height="15" fill="rgb(245,116,9)" fg:x="832" fg:w="4"/><text x="10.0706%" y="751.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="9.8560%" y="725" width="0.0118%" height="15" fill="rgb(209,72,35)" fg:x="835" fg:w="1"/><text x="10.1060%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="9.8678%" y="741" width="0.0236%" height="15" fill="rgb(226,126,21)" fg:x="836" fg:w="2"/><text x="10.1178%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="9.8678%" y="805" width="0.0354%" height="15" fill="rgb(227,192,1)" fg:x="836" fg:w="3"/><text x="10.1178%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="9.8678%" y="789" width="0.0354%" height="15" fill="rgb(237,180,29)" fg:x="836" fg:w="3"/><text x="10.1178%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="9.8678%" y="773" width="0.0354%" height="15" fill="rgb(230,197,35)" fg:x="836" fg:w="3"/><text x="10.1178%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.04%)</title><rect x="9.8678%" y="757" width="0.0354%" height="15" fill="rgb(246,193,31)" fg:x="836" fg:w="3"/><text x="10.1178%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="9.8914%" y="741" width="0.0118%" height="15" fill="rgb(241,36,4)" fg:x="838" fg:w="1"/><text x="10.1414%" y="751.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="9.9032%" y="805" width="0.0118%" height="15" fill="rgb(241,130,17)" fg:x="839" fg:w="1"/><text x="10.1532%" y="815.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="9.9150%" y="725" width="0.0354%" height="15" fill="rgb(206,137,32)" fg:x="840" fg:w="3"/><text x="10.1650%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="9.9150%" y="709" width="0.0354%" height="15" fill="rgb(237,228,51)" fg:x="840" fg:w="3"/><text x="10.1650%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.9150%" y="693" width="0.0354%" height="15" fill="rgb(243,6,42)" fg:x="840" fg:w="3"/><text x="10.1650%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.9150%" y="677" width="0.0354%" height="15" fill="rgb(251,74,28)" fg:x="840" fg:w="3"/><text x="10.1650%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="9.9150%" y="661" width="0.0354%" height="15" fill="rgb(218,20,49)" fg:x="840" fg:w="3"/><text x="10.1650%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="9.8678%" y="869" width="0.1062%" height="15" fill="rgb(238,28,14)" fg:x="836" fg:w="9"/><text x="10.1178%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.11%)</title><rect x="9.8678%" y="853" width="0.1062%" height="15" fill="rgb(229,40,46)" fg:x="836" fg:w="9"/><text x="10.1178%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.11%)</title><rect x="9.8678%" y="837" width="0.1062%" height="15" fill="rgb(244,195,20)" fg:x="836" fg:w="9"/><text x="10.1178%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.11%)</title><rect x="9.8678%" y="821" width="0.1062%" height="15" fill="rgb(253,56,35)" fg:x="836" fg:w="9"/><text x="10.1178%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.06%)</title><rect x="9.9150%" y="805" width="0.0590%" height="15" fill="rgb(210,149,44)" fg:x="840" fg:w="5"/><text x="10.1650%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="9.9150%" y="789" width="0.0590%" height="15" fill="rgb(240,135,12)" fg:x="840" fg:w="5"/><text x="10.1650%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="9.9150%" y="773" width="0.0590%" height="15" fill="rgb(251,24,50)" fg:x="840" fg:w="5"/><text x="10.1650%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.06%)</title><rect x="9.9150%" y="757" width="0.0590%" height="15" fill="rgb(243,200,47)" fg:x="840" fg:w="5"/><text x="10.1650%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.06%)</title><rect x="9.9150%" y="741" width="0.0590%" height="15" fill="rgb(224,166,26)" fg:x="840" fg:w="5"/><text x="10.1650%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="9.9504%" y="725" width="0.0236%" height="15" fill="rgb(233,0,47)" fg:x="843" fg:w="2"/><text x="10.2004%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.9504%" y="709" width="0.0236%" height="15" fill="rgb(253,80,5)" fg:x="843" fg:w="2"/><text x="10.2004%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.9504%" y="693" width="0.0236%" height="15" fill="rgb(214,133,25)" fg:x="843" fg:w="2"/><text x="10.2004%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="9.9504%" y="677" width="0.0236%" height="15" fill="rgb(209,27,14)" fg:x="843" fg:w="2"/><text x="10.2004%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="9.9622%" y="661" width="0.0118%" height="15" fill="rgb(219,102,51)" fg:x="844" fg:w="1"/><text x="10.2122%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="9.9740%" y="821" width="0.0118%" height="15" fill="rgb(237,18,16)" fg:x="845" fg:w="1"/><text x="10.2240%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="9.9740%" y="805" width="0.0118%" height="15" fill="rgb(241,85,17)" fg:x="845" fg:w="1"/><text x="10.2240%" y="815.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="9.9740%" y="789" width="0.0118%" height="15" fill="rgb(236,90,42)" fg:x="845" fg:w="1"/><text x="10.2240%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="9.9740%" y="773" width="0.0118%" height="15" fill="rgb(249,57,21)" fg:x="845" fg:w="1"/><text x="10.2240%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (21 samples, 0.25%)</title><rect x="9.7498%" y="933" width="0.2479%" height="15" fill="rgb(243,12,36)" fg:x="826" fg:w="21"/><text x="9.9998%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (21 samples, 0.25%)</title><rect x="9.7498%" y="917" width="0.2479%" height="15" fill="rgb(253,128,47)" fg:x="826" fg:w="21"/><text x="9.9998%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (21 samples, 0.25%)</title><rect x="9.7498%" y="901" width="0.2479%" height="15" fill="rgb(207,33,20)" fg:x="826" fg:w="21"/><text x="9.9998%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (20 samples, 0.24%)</title><rect x="9.7616%" y="885" width="0.2361%" height="15" fill="rgb(233,215,35)" fg:x="827" fg:w="20"/><text x="10.0116%" y="895.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.02%)</title><rect x="9.9740%" y="869" width="0.0236%" height="15" fill="rgb(249,188,52)" fg:x="845" fg:w="2"/><text x="10.2240%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.02%)</title><rect x="9.9740%" y="853" width="0.0236%" height="15" fill="rgb(225,12,32)" fg:x="845" fg:w="2"/><text x="10.2240%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="9.9740%" y="837" width="0.0236%" height="15" fill="rgb(247,98,14)" fg:x="845" fg:w="2"/><text x="10.2240%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.01%)</title><rect x="9.9858%" y="821" width="0.0118%" height="15" fill="rgb(247,219,48)" fg:x="846" fg:w="1"/><text x="10.2358%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.01%)</title><rect x="9.9858%" y="805" width="0.0118%" height="15" fill="rgb(253,60,48)" fg:x="846" fg:w="1"/><text x="10.2358%" y="815.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="10.1747%" y="693" width="0.0118%" height="15" fill="rgb(245,15,52)" fg:x="862" fg:w="1"/><text x="10.4247%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="10.2219%" y="661" width="0.0236%" height="15" fill="rgb(220,133,28)" fg:x="866" fg:w="2"/><text x="10.4719%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="10.2337%" y="645" width="0.0118%" height="15" fill="rgb(217,180,4)" fg:x="867" fg:w="1"/><text x="10.4837%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="10.1629%" y="741" width="0.0944%" height="15" fill="rgb(251,24,1)" fg:x="861" fg:w="8"/><text x="10.4129%" y="751.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="10.1629%" y="725" width="0.0944%" height="15" fill="rgb(212,185,49)" fg:x="861" fg:w="8"/><text x="10.4129%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="10.1629%" y="709" width="0.0944%" height="15" fill="rgb(215,175,22)" fg:x="861" fg:w="8"/><text x="10.4129%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.07%)</title><rect x="10.1865%" y="693" width="0.0708%" height="15" fill="rgb(250,205,14)" fg:x="863" fg:w="6"/><text x="10.4365%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 0.05%)</title><rect x="10.2101%" y="677" width="0.0472%" height="15" fill="rgb(225,211,22)" fg:x="865" fg:w="4"/><text x="10.4601%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="10.2455%" y="661" width="0.0118%" height="15" fill="rgb(251,179,42)" fg:x="868" fg:w="1"/><text x="10.4955%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="10.2455%" y="645" width="0.0118%" height="15" fill="rgb(208,216,51)" fg:x="868" fg:w="1"/><text x="10.4955%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="10.2455%" y="629" width="0.0118%" height="15" fill="rgb(235,36,11)" fg:x="868" fg:w="1"/><text x="10.4955%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="10.3754%" y="597" width="0.0354%" height="15" fill="rgb(213,189,28)" fg:x="879" fg:w="3"/><text x="10.6254%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="10.3872%" y="581" width="0.0236%" height="15" fill="rgb(227,203,42)" fg:x="880" fg:w="2"/><text x="10.6372%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="10.4226%" y="581" width="0.0236%" height="15" fill="rgb(244,72,36)" fg:x="883" fg:w="2"/><text x="10.6726%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="10.3517%" y="645" width="0.1416%" height="15" fill="rgb(213,53,17)" fg:x="877" fg:w="12"/><text x="10.6017%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="10.3517%" y="629" width="0.1416%" height="15" fill="rgb(207,167,3)" fg:x="877" fg:w="12"/><text x="10.6017%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.14%)</title><rect x="10.3517%" y="613" width="0.1416%" height="15" fill="rgb(216,98,30)" fg:x="877" fg:w="12"/><text x="10.6017%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.08%)</title><rect x="10.4108%" y="597" width="0.0826%" height="15" fill="rgb(236,123,15)" fg:x="882" fg:w="7"/><text x="10.6608%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.05%)</title><rect x="10.4462%" y="581" width="0.0472%" height="15" fill="rgb(248,81,50)" fg:x="885" fg:w="4"/><text x="10.6962%" y="591.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="10.4934%" y="645" width="0.0118%" height="15" fill="rgb(214,120,4)" fg:x="889" fg:w="1"/><text x="10.7434%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="10.5642%" y="485" width="0.0118%" height="15" fill="rgb(208,179,34)" fg:x="895" fg:w="1"/><text x="10.8142%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="10.5642%" y="469" width="0.0118%" height="15" fill="rgb(227,140,7)" fg:x="895" fg:w="1"/><text x="10.8142%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.5170%" y="533" width="0.1298%" height="15" fill="rgb(214,22,6)" fg:x="891" fg:w="11"/><text x="10.7670%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.5170%" y="517" width="0.1298%" height="15" fill="rgb(207,137,27)" fg:x="891" fg:w="11"/><text x="10.7670%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.5170%" y="501" width="0.1298%" height="15" fill="rgb(210,8,46)" fg:x="891" fg:w="11"/><text x="10.7670%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.07%)</title><rect x="10.5760%" y="485" width="0.0708%" height="15" fill="rgb(240,16,54)" fg:x="896" fg:w="6"/><text x="10.8260%" y="495.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (14 samples, 0.17%)</title><rect x="10.5052%" y="565" width="0.1653%" height="15" fill="rgb(211,209,29)" fg:x="890" fg:w="14"/><text x="10.7552%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.17%)</title><rect x="10.5052%" y="549" width="0.1653%" height="15" fill="rgb(226,228,24)" fg:x="890" fg:w="14"/><text x="10.7552%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.02%)</title><rect x="10.6468%" y="533" width="0.0236%" height="15" fill="rgb(222,84,9)" fg:x="902" fg:w="2"/><text x="10.8968%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.45%)</title><rect x="10.3517%" y="677" width="0.4485%" height="15" fill="rgb(234,203,30)" fg:x="877" fg:w="38"/><text x="10.6017%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (38 samples, 0.45%)</title><rect x="10.3517%" y="661" width="0.4485%" height="15" fill="rgb(238,109,14)" fg:x="877" fg:w="38"/><text x="10.6017%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.30%)</title><rect x="10.5052%" y="645" width="0.2951%" height="15" fill="rgb(233,206,34)" fg:x="890" fg:w="25"/><text x="10.7552%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (25 samples, 0.30%)</title><rect x="10.5052%" y="629" width="0.2951%" height="15" fill="rgb(220,167,47)" fg:x="890" fg:w="25"/><text x="10.7552%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (25 samples, 0.30%)</title><rect x="10.5052%" y="613" width="0.2951%" height="15" fill="rgb(238,105,10)" fg:x="890" fg:w="25"/><text x="10.7552%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (25 samples, 0.30%)</title><rect x="10.5052%" y="597" width="0.2951%" height="15" fill="rgb(213,227,17)" fg:x="890" fg:w="25"/><text x="10.7552%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (25 samples, 0.30%)</title><rect x="10.5052%" y="581" width="0.2951%" height="15" fill="rgb(217,132,38)" fg:x="890" fg:w="25"/><text x="10.7552%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (11 samples, 0.13%)</title><rect x="10.6704%" y="565" width="0.1298%" height="15" fill="rgb(242,146,4)" fg:x="904" fg:w="11"/><text x="10.9204%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.6704%" y="549" width="0.1298%" height="15" fill="rgb(212,61,9)" fg:x="904" fg:w="11"/><text x="10.9204%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.6704%" y="533" width="0.1298%" height="15" fill="rgb(247,126,22)" fg:x="904" fg:w="11"/><text x="10.9204%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="10.6704%" y="517" width="0.1298%" height="15" fill="rgb(220,196,2)" fg:x="904" fg:w="11"/><text x="10.9204%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.05%)</title><rect x="10.7531%" y="501" width="0.0472%" height="15" fill="rgb(208,46,4)" fg:x="911" fg:w="4"/><text x="11.0031%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="10.8003%" y="661" width="0.0118%" height="15" fill="rgb(252,104,46)" fg:x="915" fg:w="1"/><text x="11.0503%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="10.8121%" y="645" width="0.0118%" height="15" fill="rgb(237,152,48)" fg:x="916" fg:w="1"/><text x="11.0621%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="10.8239%" y="629" width="0.0236%" height="15" fill="rgb(221,59,37)" fg:x="917" fg:w="2"/><text x="11.0739%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (6 samples, 0.07%)</title><rect x="10.8239%" y="645" width="0.0708%" height="15" fill="rgb(209,202,51)" fg:x="917" fg:w="6"/><text x="11.0739%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.05%)</title><rect x="10.8475%" y="629" width="0.0472%" height="15" fill="rgb(228,81,30)" fg:x="919" fg:w="4"/><text x="11.0975%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.05%)</title><rect x="10.8475%" y="613" width="0.0472%" height="15" fill="rgb(227,42,39)" fg:x="919" fg:w="4"/><text x="11.0975%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="10.8947%" y="645" width="0.0118%" height="15" fill="rgb(221,26,2)" fg:x="923" fg:w="1"/><text x="11.1447%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="10.8947%" y="629" width="0.0118%" height="15" fill="rgb(254,61,31)" fg:x="923" fg:w="1"/><text x="11.1447%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.12%)</title><rect x="10.8003%" y="677" width="0.1180%" height="15" fill="rgb(222,173,38)" fg:x="915" fg:w="10"/><text x="11.0503%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.11%)</title><rect x="10.8121%" y="661" width="0.1062%" height="15" fill="rgb(218,50,12)" fg:x="916" fg:w="9"/><text x="11.0621%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.01%)</title><rect x="10.9065%" y="645" width="0.0118%" height="15" fill="rgb(223,88,40)" fg:x="924" fg:w="1"/><text x="11.1565%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="10.9065%" y="629" width="0.0118%" height="15" fill="rgb(237,54,19)" fg:x="924" fg:w="1"/><text x="11.1565%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="10.9065%" y="613" width="0.0118%" height="15" fill="rgb(251,129,25)" fg:x="924" fg:w="1"/><text x="11.1565%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (12 samples, 0.14%)</title><rect x="10.9183%" y="661" width="0.1416%" height="15" fill="rgb(238,97,19)" fg:x="925" fg:w="12"/><text x="11.1683%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (12 samples, 0.14%)</title><rect x="10.9183%" y="645" width="0.1416%" height="15" fill="rgb(240,169,18)" fg:x="925" fg:w="12"/><text x="11.1683%" y="655.50"></text></g><g><title>core::ptr::write (12 samples, 0.14%)</title><rect x="10.9183%" y="629" width="0.1416%" height="15" fill="rgb(230,187,49)" fg:x="925" fg:w="12"/><text x="11.1683%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="11.0600%" y="661" width="0.0118%" height="15" fill="rgb(209,44,26)" fg:x="937" fg:w="1"/><text x="11.3100%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="11.0600%" y="645" width="0.0118%" height="15" fill="rgb(244,0,6)" fg:x="937" fg:w="1"/><text x="11.3100%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="11.0600%" y="629" width="0.0118%" height="15" fill="rgb(248,18,21)" fg:x="937" fg:w="1"/><text x="11.3100%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (80 samples, 0.94%)</title><rect x="10.1511%" y="789" width="0.9443%" height="15" fill="rgb(245,180,19)" fg:x="860" fg:w="80"/><text x="10.4011%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.94%)</title><rect x="10.1511%" y="773" width="0.9443%" height="15" fill="rgb(252,118,36)" fg:x="860" fg:w="80"/><text x="10.4011%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (80 samples, 0.94%)</title><rect x="10.1511%" y="757" width="0.9443%" height="15" fill="rgb(210,224,19)" fg:x="860" fg:w="80"/><text x="10.4011%" y="767.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (71 samples, 0.84%)</title><rect x="10.2573%" y="741" width="0.8381%" height="15" fill="rgb(218,30,24)" fg:x="869" fg:w="71"/><text x="10.5073%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (71 samples, 0.84%)</title><rect x="10.2573%" y="725" width="0.8381%" height="15" fill="rgb(219,75,50)" fg:x="869" fg:w="71"/><text x="10.5073%" y="735.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (71 samples, 0.84%)</title><rect x="10.2573%" y="709" width="0.8381%" height="15" fill="rgb(234,72,50)" fg:x="869" fg:w="71"/><text x="10.5073%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 0.80%)</title><rect x="10.2927%" y="693" width="0.8026%" height="15" fill="rgb(219,100,48)" fg:x="872" fg:w="68"/><text x="10.5427%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (15 samples, 0.18%)</title><rect x="10.9183%" y="677" width="0.1771%" height="15" fill="rgb(253,5,41)" fg:x="925" fg:w="15"/><text x="11.1683%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.02%)</title><rect x="11.0718%" y="661" width="0.0236%" height="15" fill="rgb(247,181,11)" fg:x="938" fg:w="2"/><text x="11.3218%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.02%)</title><rect x="11.0718%" y="645" width="0.0236%" height="15" fill="rgb(222,223,25)" fg:x="938" fg:w="2"/><text x="11.3218%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.02%)</title><rect x="11.0718%" y="629" width="0.0236%" height="15" fill="rgb(214,198,28)" fg:x="938" fg:w="2"/><text x="11.3218%" y="639.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="11.0954%" y="661" width="0.0118%" height="15" fill="rgb(230,46,43)" fg:x="940" fg:w="1"/><text x="11.3454%" y="671.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="11.1072%" y="661" width="0.0236%" height="15" fill="rgb(233,65,53)" fg:x="941" fg:w="2"/><text x="11.3572%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="11.1072%" y="645" width="0.0236%" height="15" fill="rgb(221,121,27)" fg:x="941" fg:w="2"/><text x="11.3572%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="11.1072%" y="629" width="0.0236%" height="15" fill="rgb(247,70,47)" fg:x="941" fg:w="2"/><text x="11.3572%" y="639.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="11.1072%" y="613" width="0.0236%" height="15" fill="rgb(228,85,35)" fg:x="941" fg:w="2"/><text x="11.3572%" y="623.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="11.1072%" y="597" width="0.0236%" height="15" fill="rgb(209,50,18)" fg:x="941" fg:w="2"/><text x="11.3572%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (4 samples, 0.05%)</title><rect x="11.0954%" y="677" width="0.0472%" height="15" fill="rgb(250,19,35)" fg:x="940" fg:w="4"/><text x="11.3454%" y="687.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="11.1308%" y="661" width="0.0118%" height="15" fill="rgb(253,107,29)" fg:x="943" fg:w="1"/><text x="11.3808%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (98 samples, 1.16%)</title><rect x="9.9976%" y="885" width="1.1568%" height="15" fill="rgb(252,179,29)" fg:x="847" fg:w="98"/><text x="10.2476%" y="895.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (98 samples, 1.16%)</title><rect x="9.9976%" y="869" width="1.1568%" height="15" fill="rgb(238,194,6)" fg:x="847" fg:w="98"/><text x="10.2476%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (97 samples, 1.14%)</title><rect x="10.0094%" y="853" width="1.1449%" height="15" fill="rgb(238,164,29)" fg:x="848" fg:w="97"/><text x="10.2594%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (97 samples, 1.14%)</title><rect x="10.0094%" y="837" width="1.1449%" height="15" fill="rgb(224,25,9)" fg:x="848" fg:w="97"/><text x="10.2594%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (85 samples, 1.00%)</title><rect x="10.1511%" y="821" width="1.0033%" height="15" fill="rgb(244,153,23)" fg:x="860" fg:w="85"/><text x="10.4011%" y="831.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (85 samples, 1.00%)</title><rect x="10.1511%" y="805" width="1.0033%" height="15" fill="rgb(212,203,14)" fg:x="860" fg:w="85"/><text x="10.4011%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.06%)</title><rect x="11.0954%" y="789" width="0.0590%" height="15" fill="rgb(220,164,20)" fg:x="940" fg:w="5"/><text x="11.3454%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.06%)</title><rect x="11.0954%" y="773" width="0.0590%" height="15" fill="rgb(222,203,48)" fg:x="940" fg:w="5"/><text x="11.3454%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.06%)</title><rect x="11.0954%" y="757" width="0.0590%" height="15" fill="rgb(215,159,22)" fg:x="940" fg:w="5"/><text x="11.3454%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5 samples, 0.06%)</title><rect x="11.0954%" y="741" width="0.0590%" height="15" fill="rgb(216,183,47)" fg:x="940" fg:w="5"/><text x="11.3454%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5 samples, 0.06%)</title><rect x="11.0954%" y="725" width="0.0590%" height="15" fill="rgb(229,195,25)" fg:x="940" fg:w="5"/><text x="11.3454%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.06%)</title><rect x="11.0954%" y="709" width="0.0590%" height="15" fill="rgb(224,132,51)" fg:x="940" fg:w="5"/><text x="11.3454%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.06%)</title><rect x="11.0954%" y="693" width="0.0590%" height="15" fill="rgb(240,63,7)" fg:x="940" fg:w="5"/><text x="11.3454%" y="703.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="11.1426%" y="677" width="0.0118%" height="15" fill="rgb(249,182,41)" fg:x="944" fg:w="1"/><text x="11.3926%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.01%)</title><rect x="11.1426%" y="661" width="0.0118%" height="15" fill="rgb(243,47,26)" fg:x="944" fg:w="1"/><text x="11.3926%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.01%)</title><rect x="11.1426%" y="645" width="0.0118%" height="15" fill="rgb(233,48,2)" fg:x="944" fg:w="1"/><text x="11.3926%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="11.1662%" y="773" width="0.0236%" height="15" fill="rgb(244,165,34)" fg:x="946" fg:w="2"/><text x="11.4162%" y="783.50"></text></g><g><title>core::clone::Clone::clone (4 samples, 0.05%)</title><rect x="11.1662%" y="789" width="0.0472%" height="15" fill="rgb(207,89,7)" fg:x="946" fg:w="4"/><text x="11.4162%" y="799.50"></text></g><g><title>&lt;revm_primitives::precompile::Precompile as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="11.1898%" y="773" width="0.0236%" height="15" fill="rgb(244,117,36)" fg:x="948" fg:w="2"/><text x="11.4398%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.07%)</title><rect x="11.1544%" y="821" width="0.0708%" height="15" fill="rgb(226,144,34)" fg:x="945" fg:w="6"/><text x="11.4044%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (6 samples, 0.07%)</title><rect x="11.1544%" y="805" width="0.0708%" height="15" fill="rgb(213,23,19)" fg:x="945" fg:w="6"/><text x="11.4044%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.01%)</title><rect x="11.2134%" y="789" width="0.0118%" height="15" fill="rgb(217,75,12)" fg:x="950" fg:w="1"/><text x="11.4634%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.01%)</title><rect x="11.2134%" y="773" width="0.0118%" height="15" fill="rgb(224,159,17)" fg:x="950" fg:w="1"/><text x="11.4634%" y="783.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="11.2134%" y="757" width="0.0118%" height="15" fill="rgb(217,118,1)" fg:x="950" fg:w="1"/><text x="11.4634%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.01%)</title><rect x="11.2134%" y="741" width="0.0118%" height="15" fill="rgb(232,180,48)" fg:x="950" fg:w="1"/><text x="11.4634%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.01%)</title><rect x="11.2134%" y="725" width="0.0118%" height="15" fill="rgb(230,27,33)" fg:x="950" fg:w="1"/><text x="11.4634%" y="735.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="11.1544%" y="885" width="0.0826%" height="15" fill="rgb(205,31,21)" fg:x="945" fg:w="7"/><text x="11.4044%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="11.1544%" y="869" width="0.0826%" height="15" fill="rgb(253,59,4)" fg:x="945" fg:w="7"/><text x="11.4044%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="11.1544%" y="853" width="0.0826%" height="15" fill="rgb(224,201,9)" fg:x="945" fg:w="7"/><text x="11.4044%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="11.1544%" y="837" width="0.0826%" height="15" fill="rgb(229,206,30)" fg:x="945" fg:w="7"/><text x="11.4044%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (1 samples, 0.01%)</title><rect x="11.2252%" y="821" width="0.0118%" height="15" fill="rgb(212,67,47)" fg:x="951" fg:w="1"/><text x="11.4752%" y="831.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (106 samples, 1.25%)</title><rect x="9.9976%" y="933" width="1.2512%" height="15" fill="rgb(211,96,50)" fg:x="847" fg:w="106"/><text x="10.2476%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (106 samples, 1.25%)</title><rect x="9.9976%" y="917" width="1.2512%" height="15" fill="rgb(252,114,18)" fg:x="847" fg:w="106"/><text x="10.2476%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (106 samples, 1.25%)</title><rect x="9.9976%" y="901" width="1.2512%" height="15" fill="rgb(223,58,37)" fg:x="847" fg:w="106"/><text x="10.2476%" y="911.50"></text></g><g><title>revm_precompile::Precompiles::new (1 samples, 0.01%)</title><rect x="11.2370%" y="885" width="0.0118%" height="15" fill="rgb(237,70,4)" fg:x="952" fg:w="1"/><text x="11.4870%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="11.2488%" y="917" width="0.0118%" height="15" fill="rgb(244,85,46)" fg:x="953" fg:w="1"/><text x="11.4988%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="11.2488%" y="901" width="0.0118%" height="15" fill="rgb(223,39,52)" fg:x="953" fg:w="1"/><text x="11.4988%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="11.2488%" y="885" width="0.0118%" height="15" fill="rgb(218,200,14)" fg:x="953" fg:w="1"/><text x="11.4988%" y="895.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (341 samples, 4.03%)</title><rect x="7.2710%" y="949" width="4.0250%" height="15" fill="rgb(208,171,16)" fg:x="616" fg:w="341"/><text x="7.5210%" y="959.50">revm..</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (4 samples, 0.05%)</title><rect x="11.2488%" y="933" width="0.0472%" height="15" fill="rgb(234,200,18)" fg:x="953" fg:w="4"/><text x="11.4988%" y="943.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (3 samples, 0.04%)</title><rect x="11.2606%" y="917" width="0.0354%" height="15" fill="rgb(228,45,11)" fg:x="954" fg:w="3"/><text x="11.5106%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="11.3078%" y="933" width="0.0118%" height="15" fill="rgb(237,182,11)" fg:x="958" fg:w="1"/><text x="11.5578%" y="943.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::end (3 samples, 0.04%)</title><rect x="11.2960%" y="949" width="0.0354%" height="15" fill="rgb(241,175,49)" fg:x="957" fg:w="3"/><text x="11.5460%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="11.3196%" y="933" width="0.0118%" height="15" fill="rgb(247,38,35)" fg:x="959" fg:w="1"/><text x="11.5696%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="11.3196%" y="917" width="0.0118%" height="15" fill="rgb(228,39,49)" fg:x="959" fg:w="1"/><text x="11.5696%" y="927.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (2 samples, 0.02%)</title><rect x="11.3314%" y="949" width="0.0236%" height="15" fill="rgb(226,101,26)" fg:x="960" fg:w="2"/><text x="11.5814%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="11.3432%" y="933" width="0.0118%" height="15" fill="rgb(206,141,19)" fg:x="961" fg:w="1"/><text x="11.5932%" y="943.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (1 samples, 0.01%)</title><rect x="11.3432%" y="917" width="0.0118%" height="15" fill="rgb(211,200,13)" fg:x="961" fg:w="1"/><text x="11.5932%" y="927.50"></text></g><g><title>revm_primitives::env::Env::validate_block_env (1 samples, 0.01%)</title><rect x="11.3432%" y="901" width="0.0118%" height="15" fill="rgb(241,121,6)" fg:x="961" fg:w="1"/><text x="11.5932%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="11.3432%" y="885" width="0.0118%" height="15" fill="rgb(234,221,29)" fg:x="961" fg:w="1"/><text x="11.5932%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="11.3432%" y="869" width="0.0118%" height="15" fill="rgb(229,136,5)" fg:x="961" fg:w="1"/><text x="11.5932%" y="879.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::initial_tx_gas (1 samples, 0.01%)</title><rect x="11.3551%" y="949" width="0.0118%" height="15" fill="rgb(238,36,11)" fg:x="962" fg:w="1"/><text x="11.6051%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="11.3551%" y="933" width="0.0118%" height="15" fill="rgb(251,55,41)" fg:x="962" fg:w="1"/><text x="11.6051%" y="943.50"></text></g><g><title>revm::handler::mainnet::validation::validate_initial_tx_gas (1 samples, 0.01%)</title><rect x="11.3551%" y="917" width="0.0118%" height="15" fill="rgb(242,34,40)" fg:x="962" fg:w="1"/><text x="11.6051%" y="927.50"></text></g><g><title>revm_interpreter::gas::calc::validate_initial_tx_gas (1 samples, 0.01%)</title><rect x="11.3551%" y="901" width="0.0118%" height="15" fill="rgb(215,42,17)" fg:x="962" fg:w="1"/><text x="11.6051%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="11.3551%" y="885" width="0.0118%" height="15" fill="rgb(207,44,46)" fg:x="962" fg:w="1"/><text x="11.6051%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="11.3787%" y="933" width="0.0118%" height="15" fill="rgb(211,206,28)" fg:x="964" fg:w="1"/><text x="11.6287%" y="943.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="11.3787%" y="917" width="0.0118%" height="15" fill="rgb(237,167,16)" fg:x="964" fg:w="1"/><text x="11.6287%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="11.3905%" y="885" width="0.0118%" height="15" fill="rgb(233,66,6)" fg:x="965" fg:w="1"/><text x="11.6405%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="11.3905%" y="869" width="0.0118%" height="15" fill="rgb(246,123,29)" fg:x="965" fg:w="1"/><text x="11.6405%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="11.3905%" y="853" width="0.0118%" height="15" fill="rgb(209,62,40)" fg:x="965" fg:w="1"/><text x="11.6405%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="11.3905%" y="837" width="0.0118%" height="15" fill="rgb(218,4,25)" fg:x="965" fg:w="1"/><text x="11.6405%" y="847.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="11.3905%" y="821" width="0.0118%" height="15" fill="rgb(253,91,49)" fg:x="965" fg:w="1"/><text x="11.6405%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="11.4023%" y="885" width="0.0236%" height="15" fill="rgb(228,155,29)" fg:x="966" fg:w="2"/><text x="11.6523%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="11.4495%" y="837" width="0.0472%" height="15" fill="rgb(243,57,37)" fg:x="970" fg:w="4"/><text x="11.6995%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="11.4495%" y="821" width="0.0472%" height="15" fill="rgb(244,167,17)" fg:x="970" fg:w="4"/><text x="11.6995%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="11.4495%" y="805" width="0.0472%" height="15" fill="rgb(207,181,38)" fg:x="970" fg:w="4"/><text x="11.6995%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="11.4495%" y="789" width="0.0472%" height="15" fill="rgb(211,8,23)" fg:x="970" fg:w="4"/><text x="11.6995%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="11.4495%" y="773" width="0.0472%" height="15" fill="rgb(235,11,44)" fg:x="970" fg:w="4"/><text x="11.6995%" y="783.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="11.4495%" y="757" width="0.0472%" height="15" fill="rgb(248,18,52)" fg:x="970" fg:w="4"/><text x="11.6995%" y="767.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="11.4495%" y="741" width="0.0472%" height="15" fill="rgb(208,4,7)" fg:x="970" fg:w="4"/><text x="11.6995%" y="751.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="11.4731%" y="725" width="0.0236%" height="15" fill="rgb(240,17,39)" fg:x="972" fg:w="2"/><text x="11.7231%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="11.4967%" y="821" width="0.0118%" height="15" fill="rgb(207,170,3)" fg:x="974" fg:w="1"/><text x="11.7467%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="11.4967%" y="805" width="0.0118%" height="15" fill="rgb(236,100,52)" fg:x="974" fg:w="1"/><text x="11.7467%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="11.4967%" y="789" width="0.0118%" height="15" fill="rgb(246,78,51)" fg:x="974" fg:w="1"/><text x="11.7467%" y="799.50"></text></g><g><title>&lt;bitvec::domain::Domain&lt;wyz::comu::Const,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="11.4967%" y="773" width="0.0118%" height="15" fill="rgb(211,17,15)" fg:x="974" fg:w="1"/><text x="11.7467%" y="783.50"></text></g><g><title>bitvec::domain::PartialElement&lt;M,T,O&gt;::load_value (1 samples, 0.01%)</title><rect x="11.4967%" y="757" width="0.0118%" height="15" fill="rgb(209,59,46)" fg:x="974" fg:w="1"/><text x="11.7467%" y="767.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.01%)</title><rect x="11.4967%" y="741" width="0.0118%" height="15" fill="rgb(210,92,25)" fg:x="974" fg:w="1"/><text x="11.7467%" y="751.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (8 samples, 0.09%)</title><rect x="11.4259%" y="885" width="0.0944%" height="15" fill="rgb(238,174,52)" fg:x="968" fg:w="8"/><text x="11.6759%" y="895.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (7 samples, 0.08%)</title><rect x="11.4377%" y="869" width="0.0826%" height="15" fill="rgb(230,73,7)" fg:x="969" fg:w="7"/><text x="11.6877%" y="879.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (6 samples, 0.07%)</title><rect x="11.4495%" y="853" width="0.0708%" height="15" fill="rgb(243,124,40)" fg:x="970" fg:w="6"/><text x="11.6995%" y="863.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (2 samples, 0.02%)</title><rect x="11.4967%" y="837" width="0.0236%" height="15" fill="rgb(244,170,11)" fg:x="974" fg:w="2"/><text x="11.7467%" y="847.50"></text></g><g><title>tap::pipe::Pipe::pipe (1 samples, 0.01%)</title><rect x="11.5085%" y="821" width="0.0118%" height="15" fill="rgb(207,114,54)" fg:x="975" fg:w="1"/><text x="11.7585%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="11.5085%" y="805" width="0.0118%" height="15" fill="rgb(205,42,20)" fg:x="975" fg:w="1"/><text x="11.7585%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="11.5085%" y="789" width="0.0118%" height="15" fill="rgb(230,30,28)" fg:x="975" fg:w="1"/><text x="11.7585%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="11.5085%" y="773" width="0.0118%" height="15" fill="rgb(205,73,54)" fg:x="975" fg:w="1"/><text x="11.7585%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="11.5085%" y="757" width="0.0118%" height="15" fill="rgb(254,227,23)" fg:x="975" fg:w="1"/><text x="11.7585%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="11.5085%" y="741" width="0.0118%" height="15" fill="rgb(228,202,34)" fg:x="975" fg:w="1"/><text x="11.7585%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="11.5085%" y="725" width="0.0118%" height="15" fill="rgb(222,225,37)" fg:x="975" fg:w="1"/><text x="11.7585%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="11.5085%" y="709" width="0.0118%" height="15" fill="rgb(221,14,54)" fg:x="975" fg:w="1"/><text x="11.7585%" y="719.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="11.5085%" y="693" width="0.0118%" height="15" fill="rgb(254,102,2)" fg:x="975" fg:w="1"/><text x="11.7585%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="11.5085%" y="677" width="0.0118%" height="15" fill="rgb(232,104,17)" fg:x="975" fg:w="1"/><text x="11.7585%" y="687.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="11.5085%" y="661" width="0.0118%" height="15" fill="rgb(250,220,14)" fg:x="975" fg:w="1"/><text x="11.7585%" y="671.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="11.5085%" y="645" width="0.0118%" height="15" fill="rgb(241,158,9)" fg:x="975" fg:w="1"/><text x="11.7585%" y="655.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.01%)</title><rect x="11.5911%" y="629" width="0.0118%" height="15" fill="rgb(246,9,43)" fg:x="982" fg:w="1"/><text x="11.8411%" y="639.50"></text></g><g><title>__rcu_read_lock (2 samples, 0.02%)</title><rect x="11.6737%" y="581" width="0.0236%" height="15" fill="rgb(206,73,33)" fg:x="989" fg:w="2"/><text x="11.9237%" y="591.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="11.6974%" y="581" width="0.0118%" height="15" fill="rgb(222,79,8)" fg:x="991" fg:w="1"/><text x="11.9474%" y="591.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="11.7328%" y="533" width="0.0118%" height="15" fill="rgb(234,8,54)" fg:x="994" fg:w="1"/><text x="11.9828%" y="543.50"></text></g><g><title>__folio_throttle_swaprate (6 samples, 0.07%)</title><rect x="11.7446%" y="517" width="0.0708%" height="15" fill="rgb(209,134,38)" fg:x="995" fg:w="6"/><text x="11.9946%" y="527.50"></text></g><g><title>blk_cgroup_congested (6 samples, 0.07%)</title><rect x="11.7446%" y="501" width="0.0708%" height="15" fill="rgb(230,127,29)" fg:x="995" fg:w="6"/><text x="11.9946%" y="511.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="11.8626%" y="485" width="0.0118%" height="15" fill="rgb(242,44,41)" fg:x="1005" fg:w="1"/><text x="12.1126%" y="495.50"></text></g><g><title>charge_memcg (6 samples, 0.07%)</title><rect x="11.8154%" y="501" width="0.0708%" height="15" fill="rgb(222,56,43)" fg:x="1001" fg:w="6"/><text x="12.0654%" y="511.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="11.8744%" y="485" width="0.0118%" height="15" fill="rgb(238,39,47)" fg:x="1006" fg:w="1"/><text x="12.1244%" y="495.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.01%)</title><rect x="11.8744%" y="469" width="0.0118%" height="15" fill="rgb(226,79,43)" fg:x="1006" fg:w="1"/><text x="12.1244%" y="479.50"></text></g><g><title>__mem_cgroup_charge (28 samples, 0.33%)</title><rect x="11.8154%" y="517" width="0.3305%" height="15" fill="rgb(242,105,53)" fg:x="1001" fg:w="28"/><text x="12.0654%" y="527.50"></text></g><g><title>get_mem_cgroup_from_mm (22 samples, 0.26%)</title><rect x="11.8862%" y="501" width="0.2597%" height="15" fill="rgb(251,132,46)" fg:x="1007" fg:w="22"/><text x="12.1362%" y="511.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="12.1459%" y="517" width="0.0118%" height="15" fill="rgb(231,77,14)" fg:x="1029" fg:w="1"/><text x="12.3959%" y="527.50"></text></g><g><title>__pte_offset_map_lock (3 samples, 0.04%)</title><rect x="12.1577%" y="517" width="0.0354%" height="15" fill="rgb(240,135,9)" fg:x="1030" fg:w="3"/><text x="12.4077%" y="527.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="12.1813%" y="501" width="0.0118%" height="15" fill="rgb(248,109,14)" fg:x="1032" fg:w="1"/><text x="12.4313%" y="511.50"></text></g><g><title>_raw_spin_lock (9 samples, 0.11%)</title><rect x="12.1931%" y="517" width="0.1062%" height="15" fill="rgb(227,146,52)" fg:x="1033" fg:w="9"/><text x="12.4431%" y="527.50"></text></g><g><title>lru_add_fn (4 samples, 0.05%)</title><rect x="12.3229%" y="469" width="0.0472%" height="15" fill="rgb(232,54,3)" fg:x="1044" fg:w="4"/><text x="12.5729%" y="479.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="12.3466%" y="453" width="0.0236%" height="15" fill="rgb(229,201,43)" fg:x="1046" fg:w="2"/><text x="12.5966%" y="463.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="12.3584%" y="437" width="0.0118%" height="15" fill="rgb(252,161,33)" fg:x="1047" fg:w="1"/><text x="12.6084%" y="447.50"></text></g><g><title>folio_add_lru_vma (7 samples, 0.08%)</title><rect x="12.2993%" y="517" width="0.0826%" height="15" fill="rgb(226,146,40)" fg:x="1042" fg:w="7"/><text x="12.5493%" y="527.50"></text></g><g><title>folio_add_lru (7 samples, 0.08%)</title><rect x="12.2993%" y="501" width="0.0826%" height="15" fill="rgb(219,47,25)" fg:x="1042" fg:w="7"/><text x="12.5493%" y="511.50"></text></g><g><title>folio_batch_move_lru (6 samples, 0.07%)</title><rect x="12.3111%" y="485" width="0.0708%" height="15" fill="rgb(250,135,13)" fg:x="1043" fg:w="6"/><text x="12.5611%" y="495.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="12.3702%" y="469" width="0.0118%" height="15" fill="rgb(219,229,18)" fg:x="1048" fg:w="1"/><text x="12.6202%" y="479.50"></text></g><g><title>folio_add_new_anon_rmap (2 samples, 0.02%)</title><rect x="12.3820%" y="517" width="0.0236%" height="15" fill="rgb(217,152,27)" fg:x="1049" fg:w="2"/><text x="12.6320%" y="527.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.02%)</title><rect x="12.3820%" y="501" width="0.0236%" height="15" fill="rgb(225,71,47)" fg:x="1049" fg:w="2"/><text x="12.6320%" y="511.50"></text></g><g><title>native_set_pte (1 samples, 0.01%)</title><rect x="12.4056%" y="517" width="0.0118%" height="15" fill="rgb(220,139,14)" fg:x="1051" fg:w="1"/><text x="12.6556%" y="527.50"></text></g><g><title>policy_node (1 samples, 0.01%)</title><rect x="12.4174%" y="517" width="0.0118%" height="15" fill="rgb(247,54,32)" fg:x="1052" fg:w="1"/><text x="12.6674%" y="527.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.01%)</title><rect x="12.4410%" y="469" width="0.0118%" height="15" fill="rgb(252,131,39)" fg:x="1054" fg:w="1"/><text x="12.6910%" y="479.50"></text></g><g><title>clear_page_erms (2 samples, 0.02%)</title><rect x="12.4528%" y="453" width="0.0236%" height="15" fill="rgb(210,108,39)" fg:x="1055" fg:w="2"/><text x="12.7028%" y="463.50"></text></g><g><title>do_anonymous_page (65 samples, 0.77%)</title><rect x="11.7446%" y="533" width="0.7672%" height="15" fill="rgb(205,23,29)" fg:x="995" fg:w="65"/><text x="11.9946%" y="543.50"></text></g><g><title>vma_alloc_folio (7 samples, 0.08%)</title><rect x="12.4292%" y="517" width="0.0826%" height="15" fill="rgb(246,139,46)" fg:x="1053" fg:w="7"/><text x="12.6792%" y="527.50"></text></g><g><title>__folio_alloc (7 samples, 0.08%)</title><rect x="12.4292%" y="501" width="0.0826%" height="15" fill="rgb(250,81,26)" fg:x="1053" fg:w="7"/><text x="12.6792%" y="511.50"></text></g><g><title>__alloc_pages (7 samples, 0.08%)</title><rect x="12.4292%" y="485" width="0.0826%" height="15" fill="rgb(214,104,7)" fg:x="1053" fg:w="7"/><text x="12.6792%" y="495.50"></text></g><g><title>get_page_from_freelist (5 samples, 0.06%)</title><rect x="12.4528%" y="469" width="0.0590%" height="15" fill="rgb(233,189,8)" fg:x="1055" fg:w="5"/><text x="12.7028%" y="479.50"></text></g><g><title>rmqueue (3 samples, 0.04%)</title><rect x="12.4764%" y="453" width="0.0354%" height="15" fill="rgb(228,141,17)" fg:x="1057" fg:w="3"/><text x="12.7264%" y="463.50"></text></g><g><title>__rmqueue_pcplist (3 samples, 0.04%)</title><rect x="12.4764%" y="437" width="0.0354%" height="15" fill="rgb(247,157,1)" fg:x="1057" fg:w="3"/><text x="12.7264%" y="447.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="12.4882%" y="421" width="0.0236%" height="15" fill="rgb(249,225,5)" fg:x="1058" fg:w="2"/><text x="12.7382%" y="431.50"></text></g><g><title>__handle_mm_fault (69 samples, 0.81%)</title><rect x="11.7210%" y="565" width="0.8144%" height="15" fill="rgb(242,55,13)" fg:x="993" fg:w="69"/><text x="11.9710%" y="575.50"></text></g><g><title>handle_pte_fault (68 samples, 0.80%)</title><rect x="11.7328%" y="549" width="0.8026%" height="15" fill="rgb(230,49,50)" fg:x="994" fg:w="68"/><text x="11.9828%" y="559.50"></text></g><g><title>pte_offset_map_nolock (2 samples, 0.02%)</title><rect x="12.5118%" y="533" width="0.0236%" height="15" fill="rgb(241,111,38)" fg:x="1060" fg:w="2"/><text x="12.7618%" y="543.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="12.5236%" y="517" width="0.0118%" height="15" fill="rgb(252,155,4)" fg:x="1061" fg:w="1"/><text x="12.7736%" y="527.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.01%)</title><rect x="12.5354%" y="565" width="0.0118%" height="15" fill="rgb(212,69,32)" fg:x="1062" fg:w="1"/><text x="12.7854%" y="575.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="12.5354%" y="549" width="0.0118%" height="15" fill="rgb(243,107,47)" fg:x="1062" fg:w="1"/><text x="12.7854%" y="559.50"></text></g><g><title>handle_mm_fault (72 samples, 0.85%)</title><rect x="11.7092%" y="581" width="0.8499%" height="15" fill="rgb(247,130,12)" fg:x="992" fg:w="72"/><text x="11.9592%" y="591.50"></text></g><g><title>pgd_none (1 samples, 0.01%)</title><rect x="12.5472%" y="565" width="0.0118%" height="15" fill="rgb(233,74,16)" fg:x="1063" fg:w="1"/><text x="12.7972%" y="575.50"></text></g><g><title>lock_vma_under_rcu (3 samples, 0.04%)</title><rect x="12.5590%" y="581" width="0.0354%" height="15" fill="rgb(208,58,18)" fg:x="1064" fg:w="3"/><text x="12.8090%" y="591.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="12.5826%" y="565" width="0.0118%" height="15" fill="rgb(242,225,1)" fg:x="1066" fg:w="1"/><text x="12.8326%" y="575.50"></text></g><g><title>do_user_addr_fault (82 samples, 0.97%)</title><rect x="11.6383%" y="597" width="0.9679%" height="15" fill="rgb(249,39,40)" fg:x="986" fg:w="82"/><text x="11.8883%" y="607.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="12.5944%" y="581" width="0.0118%" height="15" fill="rgb(207,72,44)" fg:x="1067" fg:w="1"/><text x="12.8444%" y="591.50"></text></g><g><title>asm_exc_page_fault (86 samples, 1.02%)</title><rect x="11.6029%" y="629" width="1.0151%" height="15" fill="rgb(215,193,12)" fg:x="983" fg:w="86"/><text x="11.8529%" y="639.50"></text></g><g><title>exc_page_fault (84 samples, 0.99%)</title><rect x="11.6265%" y="613" width="0.9915%" height="15" fill="rgb(248,41,39)" fg:x="985" fg:w="84"/><text x="11.8765%" y="623.50"></text></g><g><title>irqentry_exit (1 samples, 0.01%)</title><rect x="12.6062%" y="597" width="0.0118%" height="15" fill="rgb(253,85,4)" fg:x="1068" fg:w="1"/><text x="12.8562%" y="607.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.01%)</title><rect x="12.6062%" y="581" width="0.0118%" height="15" fill="rgb(243,70,31)" fg:x="1068" fg:w="1"/><text x="12.8562%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.01%)</title><rect x="12.6062%" y="565" width="0.0118%" height="15" fill="rgb(253,195,26)" fg:x="1068" fg:w="1"/><text x="12.8562%" y="575.50"></text></g><g><title>sync_regs (6 samples, 0.07%)</title><rect x="12.6180%" y="629" width="0.0708%" height="15" fill="rgb(243,42,11)" fg:x="1069" fg:w="6"/><text x="12.8680%" y="639.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="12.6889%" y="485" width="0.0118%" height="15" fill="rgb(239,66,17)" fg:x="1075" fg:w="1"/><text x="12.9389%" y="495.50"></text></g><g><title>mas_destroy (1 samples, 0.01%)</title><rect x="12.6889%" y="469" width="0.0118%" height="15" fill="rgb(217,132,21)" fg:x="1075" fg:w="1"/><text x="12.9389%" y="479.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.01%)</title><rect x="12.6889%" y="453" width="0.0118%" height="15" fill="rgb(252,202,21)" fg:x="1075" fg:w="1"/><text x="12.9389%" y="463.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.01%)</title><rect x="12.6889%" y="437" width="0.0118%" height="15" fill="rgb(233,98,36)" fg:x="1075" fg:w="1"/><text x="12.9389%" y="447.50"></text></g><g><title>__glibc_morecore (2 samples, 0.02%)</title><rect x="12.6889%" y="613" width="0.0236%" height="15" fill="rgb(216,153,54)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="623.50"></text></g><g><title>__GI___sbrk (2 samples, 0.02%)</title><rect x="12.6889%" y="597" width="0.0236%" height="15" fill="rgb(250,99,7)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="607.50"></text></g><g><title>__brk (2 samples, 0.02%)</title><rect x="12.6889%" y="581" width="0.0236%" height="15" fill="rgb(207,56,50)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="12.6889%" y="565" width="0.0236%" height="15" fill="rgb(244,61,34)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="575.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="12.6889%" y="549" width="0.0236%" height="15" fill="rgb(241,50,38)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="559.50"></text></g><g><title>__x64_sys_brk (2 samples, 0.02%)</title><rect x="12.6889%" y="533" width="0.0236%" height="15" fill="rgb(212,166,30)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="543.50"></text></g><g><title>__do_sys_brk (2 samples, 0.02%)</title><rect x="12.6889%" y="517" width="0.0236%" height="15" fill="rgb(249,127,32)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="527.50"></text></g><g><title>do_brk_flags (2 samples, 0.02%)</title><rect x="12.6889%" y="501" width="0.0236%" height="15" fill="rgb(209,103,0)" fg:x="1075" fg:w="2"/><text x="12.9389%" y="511.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="12.7007%" y="485" width="0.0118%" height="15" fill="rgb(238,209,51)" fg:x="1076" fg:w="1"/><text x="12.9507%" y="495.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="12.7007%" y="469" width="0.0118%" height="15" fill="rgb(237,56,23)" fg:x="1076" fg:w="1"/><text x="12.9507%" y="479.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="12.7007%" y="453" width="0.0118%" height="15" fill="rgb(215,153,46)" fg:x="1076" fg:w="1"/><text x="12.9507%" y="463.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="12.7007%" y="437" width="0.0118%" height="15" fill="rgb(224,49,31)" fg:x="1076" fg:w="1"/><text x="12.9507%" y="447.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.01%)</title><rect x="12.7007%" y="421" width="0.0118%" height="15" fill="rgb(250,18,42)" fg:x="1076" fg:w="1"/><text x="12.9507%" y="431.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="613" width="0.0236%" height="15" fill="rgb(215,176,39)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="623.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="597" width="0.0236%" height="15" fill="rgb(223,77,29)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="607.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="581" width="0.0236%" height="15" fill="rgb(234,94,52)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="591.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="565" width="0.0236%" height="15" fill="rgb(220,154,50)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="575.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="549" width="0.0236%" height="15" fill="rgb(212,11,10)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="559.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="12.7125%" y="533" width="0.0236%" height="15" fill="rgb(205,166,19)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="543.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="12.7125%" y="517" width="0.0236%" height="15" fill="rgb(244,198,16)" fg:x="1077" fg:w="2"/><text x="12.9625%" y="527.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="12.7243%" y="501" width="0.0118%" height="15" fill="rgb(219,69,12)" fg:x="1078" fg:w="1"/><text x="12.9743%" y="511.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="12.7243%" y="485" width="0.0118%" height="15" fill="rgb(245,30,7)" fg:x="1078" fg:w="1"/><text x="12.9743%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (104 samples, 1.23%)</title><rect x="11.5203%" y="741" width="1.2276%" height="15" fill="rgb(218,221,48)" fg:x="976" fg:w="104"/><text x="11.7703%" y="751.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (104 samples, 1.23%)</title><rect x="11.5203%" y="725" width="1.2276%" height="15" fill="rgb(216,66,15)" fg:x="976" fg:w="104"/><text x="11.7703%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 1.23%)</title><rect x="11.5203%" y="709" width="1.2276%" height="15" fill="rgb(226,122,50)" fg:x="976" fg:w="104"/><text x="11.7703%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 1.23%)</title><rect x="11.5203%" y="693" width="1.2276%" height="15" fill="rgb(239,156,16)" fg:x="976" fg:w="104"/><text x="11.7703%" y="703.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 1.23%)</title><rect x="11.5203%" y="677" width="1.2276%" height="15" fill="rgb(224,27,38)" fg:x="976" fg:w="104"/><text x="11.7703%" y="687.50"></text></g><g><title>__GI___libc_malloc (104 samples, 1.23%)</title><rect x="11.5203%" y="661" width="1.2276%" height="15" fill="rgb(224,39,27)" fg:x="976" fg:w="104"/><text x="11.7703%" y="671.50"></text></g><g><title>_int_malloc (104 samples, 1.23%)</title><rect x="11.5203%" y="645" width="1.2276%" height="15" fill="rgb(215,92,29)" fg:x="976" fg:w="104"/><text x="11.7703%" y="655.50"></text></g><g><title>sysmalloc (5 samples, 0.06%)</title><rect x="12.6889%" y="629" width="0.0590%" height="15" fill="rgb(207,159,16)" fg:x="1075" fg:w="5"/><text x="12.9389%" y="639.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="12.7361%" y="613" width="0.0118%" height="15" fill="rgb(238,163,47)" fg:x="1079" fg:w="1"/><text x="12.9861%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (105 samples, 1.24%)</title><rect x="11.5203%" y="853" width="1.2394%" height="15" fill="rgb(219,91,49)" fg:x="976" fg:w="105"/><text x="11.7703%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (105 samples, 1.24%)</title><rect x="11.5203%" y="837" width="1.2394%" height="15" fill="rgb(227,167,31)" fg:x="976" fg:w="105"/><text x="11.7703%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (105 samples, 1.24%)</title><rect x="11.5203%" y="821" width="1.2394%" height="15" fill="rgb(234,80,54)" fg:x="976" fg:w="105"/><text x="11.7703%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (105 samples, 1.24%)</title><rect x="11.5203%" y="805" width="1.2394%" height="15" fill="rgb(212,114,2)" fg:x="976" fg:w="105"/><text x="11.7703%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (105 samples, 1.24%)</title><rect x="11.5203%" y="789" width="1.2394%" height="15" fill="rgb(234,50,24)" fg:x="976" fg:w="105"/><text x="11.7703%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (105 samples, 1.24%)</title><rect x="11.5203%" y="773" width="1.2394%" height="15" fill="rgb(221,68,8)" fg:x="976" fg:w="105"/><text x="11.7703%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (105 samples, 1.24%)</title><rect x="11.5203%" y="757" width="1.2394%" height="15" fill="rgb(254,180,31)" fg:x="976" fg:w="105"/><text x="11.7703%" y="767.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="12.7479%" y="741" width="0.0118%" height="15" fill="rgb(247,130,50)" fg:x="1080" fg:w="1"/><text x="12.9979%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (107 samples, 1.26%)</title><rect x="11.5203%" y="885" width="1.2630%" height="15" fill="rgb(211,109,4)" fg:x="976" fg:w="107"/><text x="11.7703%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (107 samples, 1.26%)</title><rect x="11.5203%" y="869" width="1.2630%" height="15" fill="rgb(238,50,21)" fg:x="976" fg:w="107"/><text x="11.7703%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="12.7597%" y="853" width="0.0236%" height="15" fill="rgb(225,57,45)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="12.7597%" y="837" width="0.0236%" height="15" fill="rgb(209,196,50)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="12.7597%" y="821" width="0.0236%" height="15" fill="rgb(242,140,13)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="12.7597%" y="805" width="0.0236%" height="15" fill="rgb(217,111,7)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="12.7597%" y="789" width="0.0236%" height="15" fill="rgb(253,193,51)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="12.7597%" y="773" width="0.0236%" height="15" fill="rgb(252,70,29)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="12.7597%" y="757" width="0.0236%" height="15" fill="rgb(232,127,12)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="12.7597%" y="741" width="0.0236%" height="15" fill="rgb(211,180,21)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="12.7597%" y="725" width="0.0236%" height="15" fill="rgb(229,72,13)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="12.7597%" y="709" width="0.0236%" height="15" fill="rgb(240,211,49)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="12.7597%" y="693" width="0.0236%" height="15" fill="rgb(219,149,40)" fg:x="1081" fg:w="2"/><text x="13.0097%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="12.7833%" y="853" width="0.0118%" height="15" fill="rgb(210,127,46)" fg:x="1083" fg:w="1"/><text x="13.0333%" y="863.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (121 samples, 1.43%)</title><rect x="11.3905%" y="901" width="1.4282%" height="15" fill="rgb(220,106,7)" fg:x="965" fg:w="121"/><text x="11.6405%" y="911.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.04%)</title><rect x="12.7833%" y="885" width="0.0354%" height="15" fill="rgb(249,31,22)" fg:x="1083" fg:w="3"/><text x="13.0333%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.04%)</title><rect x="12.7833%" y="869" width="0.0354%" height="15" fill="rgb(253,1,49)" fg:x="1083" fg:w="3"/><text x="13.0333%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="12.7951%" y="853" width="0.0236%" height="15" fill="rgb(227,144,33)" fg:x="1084" fg:w="2"/><text x="13.0451%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="12.7951%" y="837" width="0.0236%" height="15" fill="rgb(249,163,44)" fg:x="1084" fg:w="2"/><text x="13.0451%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="12.7951%" y="821" width="0.0236%" height="15" fill="rgb(234,15,39)" fg:x="1084" fg:w="2"/><text x="13.0451%" y="831.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="12.7951%" y="805" width="0.0236%" height="15" fill="rgb(207,66,16)" fg:x="1084" fg:w="2"/><text x="13.0451%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="12.7951%" y="789" width="0.0236%" height="15" fill="rgb(233,112,24)" fg:x="1084" fg:w="2"/><text x="13.0451%" y="799.50"></text></g><g><title>core::cmp::PartialEq::ne (4 samples, 0.05%)</title><rect x="12.8187%" y="885" width="0.0472%" height="15" fill="rgb(230,90,22)" fg:x="1086" fg:w="4"/><text x="13.0687%" y="895.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="12.8187%" y="869" width="0.0472%" height="15" fill="rgb(229,61,13)" fg:x="1086" fg:w="4"/><text x="13.0687%" y="879.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (4 samples, 0.05%)</title><rect x="12.8187%" y="853" width="0.0472%" height="15" fill="rgb(225,57,24)" fg:x="1086" fg:w="4"/><text x="13.0687%" y="863.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.05%)</title><rect x="12.8187%" y="837" width="0.0472%" height="15" fill="rgb(208,169,48)" fg:x="1086" fg:w="4"/><text x="13.0687%" y="847.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.01%)</title><rect x="12.8659%" y="885" width="0.0118%" height="15" fill="rgb(244,218,51)" fg:x="1090" fg:w="1"/><text x="13.1159%" y="895.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="12.8659%" y="869" width="0.0118%" height="15" fill="rgb(214,148,10)" fg:x="1090" fg:w="1"/><text x="13.1159%" y="879.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.01%)</title><rect x="12.8659%" y="853" width="0.0118%" height="15" fill="rgb(225,174,27)" fg:x="1090" fg:w="1"/><text x="13.1159%" y="863.50"></text></g><g><title>ruint::algorithms::cmp (1 samples, 0.01%)</title><rect x="12.8659%" y="837" width="0.0118%" height="15" fill="rgb(230,96,26)" fg:x="1090" fg:w="1"/><text x="13.1159%" y="847.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (910 samples, 10.74%)</title><rect x="2.1601%" y="981" width="10.7413%" height="15" fill="rgb(232,10,30)" fg:x="183" fg:w="910"/><text x="2.4101%" y="991.50">block_stm_revm::..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (481 samples, 5.68%)</title><rect x="7.2238%" y="965" width="5.6775%" height="15" fill="rgb(222,8,50)" fg:x="612" fg:w="481"/><text x="7.4738%" y="975.50">revm::e..</text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (130 samples, 1.53%)</title><rect x="11.3669%" y="949" width="1.5345%" height="15" fill="rgb(213,81,27)" fg:x="963" fg:w="130"/><text x="11.6169%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (128 samples, 1.51%)</title><rect x="11.3905%" y="933" width="1.5109%" height="15" fill="rgb(245,50,10)" fg:x="965" fg:w="128"/><text x="11.6405%" y="943.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (128 samples, 1.51%)</title><rect x="11.3905%" y="917" width="1.5109%" height="15" fill="rgb(216,100,18)" fg:x="965" fg:w="128"/><text x="11.6405%" y="927.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (7 samples, 0.08%)</title><rect x="12.8187%" y="901" width="0.0826%" height="15" fill="rgb(236,147,54)" fg:x="1086" fg:w="7"/><text x="13.0687%" y="911.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (2 samples, 0.02%)</title><rect x="12.8777%" y="885" width="0.0236%" height="15" fill="rgb(205,143,26)" fg:x="1091" fg:w="2"/><text x="13.1277%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="12.8777%" y="869" width="0.0236%" height="15" fill="rgb(236,26,9)" fg:x="1091" fg:w="2"/><text x="13.1277%" y="879.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="12.8777%" y="853" width="0.0236%" height="15" fill="rgb(221,165,53)" fg:x="1091" fg:w="2"/><text x="13.1277%" y="863.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="12.9013%" y="805" width="0.0118%" height="15" fill="rgb(214,110,17)" fg:x="1093" fg:w="1"/><text x="13.1513%" y="815.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="12.9013%" y="789" width="0.0118%" height="15" fill="rgb(237,197,12)" fg:x="1093" fg:w="1"/><text x="13.1513%" y="799.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="12.9013%" y="853" width="0.0236%" height="15" fill="rgb(205,84,17)" fg:x="1093" fg:w="2"/><text x="13.1513%" y="863.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="12.9013%" y="837" width="0.0236%" height="15" fill="rgb(237,18,45)" fg:x="1093" fg:w="2"/><text x="13.1513%" y="847.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="12.9013%" y="821" width="0.0236%" height="15" fill="rgb(221,87,14)" fg:x="1093" fg:w="2"/><text x="13.1513%" y="831.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="12.9131%" y="805" width="0.0118%" height="15" fill="rgb(238,186,15)" fg:x="1094" fg:w="1"/><text x="13.1631%" y="815.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="12.9131%" y="789" width="0.0118%" height="15" fill="rgb(208,115,11)" fg:x="1094" fg:w="1"/><text x="13.1631%" y="799.50"></text></g><g><title>handle_mm_fault (3 samples, 0.04%)</title><rect x="12.9013%" y="869" width="0.0354%" height="15" fill="rgb(254,175,0)" fg:x="1093" fg:w="3"/><text x="13.1513%" y="879.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.01%)</title><rect x="12.9249%" y="853" width="0.0118%" height="15" fill="rgb(227,24,42)" fg:x="1095" fg:w="1"/><text x="13.1749%" y="863.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="12.9013%" y="917" width="0.0590%" height="15" fill="rgb(223,211,37)" fg:x="1093" fg:w="5"/><text x="13.1513%" y="927.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="12.9013%" y="901" width="0.0590%" height="15" fill="rgb(235,49,27)" fg:x="1093" fg:w="5"/><text x="13.1513%" y="911.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="12.9013%" y="885" width="0.0590%" height="15" fill="rgb(254,97,51)" fg:x="1093" fg:w="5"/><text x="13.1513%" y="895.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="12.9367%" y="869" width="0.0236%" height="15" fill="rgb(249,51,40)" fg:x="1096" fg:w="2"/><text x="13.1867%" y="879.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="12.9367%" y="853" width="0.0236%" height="15" fill="rgb(210,128,45)" fg:x="1096" fg:w="2"/><text x="13.1867%" y="863.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="12.9367%" y="837" width="0.0236%" height="15" fill="rgb(224,137,50)" fg:x="1096" fg:w="2"/><text x="13.1867%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (916 samples, 10.81%)</title><rect x="2.1601%" y="1029" width="10.8121%" height="15" fill="rgb(242,15,9)" fg:x="183" fg:w="916"/><text x="2.4101%" y="1039.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (916 samples, 10.81%)</title><rect x="2.1601%" y="1013" width="10.8121%" height="15" fill="rgb(233,187,41)" fg:x="183" fg:w="916"/><text x="2.4101%" y="1023.50">&lt;core::slice::it..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (916 samples, 10.81%)</title><rect x="2.1601%" y="997" width="10.8121%" height="15" fill="rgb(227,2,29)" fg:x="183" fg:w="916"/><text x="2.4101%" y="1007.50">core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.07%)</title><rect x="12.9013%" y="981" width="0.0708%" height="15" fill="rgb(222,70,3)" fg:x="1093" fg:w="6"/><text x="13.1513%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (6 samples, 0.07%)</title><rect x="12.9013%" y="965" width="0.0708%" height="15" fill="rgb(213,11,42)" fg:x="1093" fg:w="6"/><text x="13.1513%" y="975.50"></text></g><g><title>core::ptr::write (6 samples, 0.07%)</title><rect x="12.9013%" y="949" width="0.0708%" height="15" fill="rgb(225,150,9)" fg:x="1093" fg:w="6"/><text x="13.1513%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.07%)</title><rect x="12.9013%" y="933" width="0.0708%" height="15" fill="rgb(230,162,45)" fg:x="1093" fg:w="6"/><text x="13.1513%" y="943.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="12.9603%" y="917" width="0.0118%" height="15" fill="rgb(222,14,52)" fg:x="1098" fg:w="1"/><text x="13.2103%" y="927.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (9 samples, 0.11%)</title><rect x="12.9721%" y="1029" width="0.1062%" height="15" fill="rgb(254,198,14)" fg:x="1099" fg:w="9"/><text x="13.2221%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.01%)</title><rect x="13.0666%" y="1013" width="0.0118%" height="15" fill="rgb(220,217,30)" fg:x="1107" fg:w="1"/><text x="13.3166%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.01%)</title><rect x="13.0666%" y="997" width="0.0118%" height="15" fill="rgb(215,146,41)" fg:x="1107" fg:w="1"/><text x="13.3166%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="13.0784%" y="1029" width="0.0354%" height="15" fill="rgb(217,27,36)" fg:x="1108" fg:w="3"/><text x="13.3284%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 0.01%)</title><rect x="13.1020%" y="1013" width="0.0118%" height="15" fill="rgb(219,218,39)" fg:x="1110" fg:w="1"/><text x="13.3520%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.01%)</title><rect x="13.1020%" y="997" width="0.0118%" height="15" fill="rgb(219,4,42)" fg:x="1110" fg:w="1"/><text x="13.3520%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1 samples, 0.01%)</title><rect x="13.1020%" y="981" width="0.0118%" height="15" fill="rgb(249,119,36)" fg:x="1110" fg:w="1"/><text x="13.3520%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="13.1020%" y="965" width="0.0118%" height="15" fill="rgb(209,23,33)" fg:x="1110" fg:w="1"/><text x="13.3520%" y="975.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="13.1138%" y="1029" width="0.0236%" height="15" fill="rgb(211,10,0)" fg:x="1111" fg:w="2"/><text x="13.3638%" y="1039.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="13.1256%" y="1013" width="0.0118%" height="15" fill="rgb(208,99,37)" fg:x="1112" fg:w="1"/><text x="13.3756%" y="1023.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (1 samples, 0.01%)</title><rect x="13.1256%" y="997" width="0.0118%" height="15" fill="rgb(213,132,31)" fg:x="1112" fg:w="1"/><text x="13.3756%" y="1007.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (1 samples, 0.01%)</title><rect x="13.1256%" y="981" width="0.0118%" height="15" fill="rgb(243,129,40)" fg:x="1112" fg:w="1"/><text x="13.3756%" y="991.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (1 samples, 0.01%)</title><rect x="13.1374%" y="1029" width="0.0118%" height="15" fill="rgb(210,66,33)" fg:x="1113" fg:w="1"/><text x="13.3874%" y="1039.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="13.1492%" y="1029" width="0.0118%" height="15" fill="rgb(209,189,4)" fg:x="1114" fg:w="1"/><text x="13.3992%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.13%)</title><rect x="13.1610%" y="1029" width="0.1298%" height="15" fill="rgb(214,107,37)" fg:x="1115" fg:w="11"/><text x="13.4110%" y="1039.50"></text></g><g><title>[block-stm-revm] (1 samples, 0.01%)</title><rect x="13.2908%" y="1029" width="0.0118%" height="15" fill="rgb(245,88,54)" fg:x="1126" fg:w="1"/><text x="13.5408%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="13.2908%" y="1013" width="0.0118%" height="15" fill="rgb(205,146,20)" fg:x="1126" fg:w="1"/><text x="13.5408%" y="1023.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="13.3026%" y="1029" width="0.0118%" height="15" fill="rgb(220,161,25)" fg:x="1127" fg:w="1"/><text x="13.5526%" y="1039.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="13.3026%" y="1013" width="0.0118%" height="15" fill="rgb(215,152,15)" fg:x="1127" fg:w="1"/><text x="13.5526%" y="1023.50"></text></g><g><title>__GI___libc_free (16 samples, 0.19%)</title><rect x="13.3144%" y="1029" width="0.1889%" height="15" fill="rgb(233,192,44)" fg:x="1128" fg:w="16"/><text x="13.5644%" y="1039.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.13%)</title><rect x="13.5033%" y="1029" width="0.1298%" height="15" fill="rgb(240,170,46)" fg:x="1144" fg:w="11"/><text x="13.7533%" y="1039.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="13.6331%" y="1029" width="0.0118%" height="15" fill="rgb(207,104,33)" fg:x="1155" fg:w="1"/><text x="13.8831%" y="1039.50"></text></g><g><title>__GI_mprotect (1 samples, 0.01%)</title><rect x="13.6449%" y="1029" width="0.0118%" height="15" fill="rgb(219,21,39)" fg:x="1156" fg:w="1"/><text x="13.8949%" y="1039.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="13.6568%" y="1029" width="0.0354%" height="15" fill="rgb(214,133,29)" fg:x="1157" fg:w="3"/><text x="13.9068%" y="1039.50"></text></g><g><title>_int_free (8 samples, 0.09%)</title><rect x="13.6922%" y="1029" width="0.0944%" height="15" fill="rgb(226,93,6)" fg:x="1160" fg:w="8"/><text x="13.9422%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate (6 samples, 0.07%)</title><rect x="13.7866%" y="1029" width="0.0708%" height="15" fill="rgb(252,222,34)" fg:x="1168" fg:w="6"/><text x="14.0366%" y="1039.50"></text></g><g><title>_int_malloc (3 samples, 0.04%)</title><rect x="13.8574%" y="1029" width="0.0354%" height="15" fill="rgb(252,92,48)" fg:x="1174" fg:w="3"/><text x="14.1074%" y="1039.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="13.8928%" y="1029" width="0.0118%" height="15" fill="rgb(245,223,24)" fg:x="1177" fg:w="1"/><text x="14.1428%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="13.9046%" y="1029" width="0.0118%" height="15" fill="rgb(205,176,3)" fg:x="1178" fg:w="1"/><text x="14.1546%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="13.9164%" y="997" width="0.0236%" height="15" fill="rgb(235,151,15)" fg:x="1179" fg:w="2"/><text x="14.1664%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="13.9164%" y="981" width="0.0236%" height="15" fill="rgb(237,209,11)" fg:x="1179" fg:w="2"/><text x="14.1664%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="13.9164%" y="965" width="0.0236%" height="15" fill="rgb(243,227,24)" fg:x="1179" fg:w="2"/><text x="14.1664%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="13.9164%" y="949" width="0.0236%" height="15" fill="rgb(239,193,16)" fg:x="1179" fg:w="2"/><text x="14.1664%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="13.9164%" y="933" width="0.0236%" height="15" fill="rgb(231,27,9)" fg:x="1179" fg:w="2"/><text x="14.1664%" y="943.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="13.9164%" y="1013" width="0.0354%" height="15" fill="rgb(219,169,10)" fg:x="1179" fg:w="3"/><text x="14.1664%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9400%" y="997" width="0.0118%" height="15" fill="rgb(244,229,43)" fg:x="1181" fg:w="1"/><text x="14.1900%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="13.9400%" y="981" width="0.0118%" height="15" fill="rgb(254,38,20)" fg:x="1181" fg:w="1"/><text x="14.1900%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="13.9400%" y="965" width="0.0118%" height="15" fill="rgb(250,47,30)" fg:x="1181" fg:w="1"/><text x="14.1900%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="13.9400%" y="949" width="0.0118%" height="15" fill="rgb(224,124,36)" fg:x="1181" fg:w="1"/><text x="14.1900%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="13.9400%" y="933" width="0.0118%" height="15" fill="rgb(246,68,51)" fg:x="1181" fg:w="1"/><text x="14.1900%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="13.9164%" y="1029" width="0.0472%" height="15" fill="rgb(253,43,49)" fg:x="1179" fg:w="4"/><text x="14.1664%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MvMemory&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="1013" width="0.0118%" height="15" fill="rgb(219,54,36)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="997" width="0.0118%" height="15" fill="rgb(227,133,34)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="981" width="0.0118%" height="15" fill="rgb(247,227,15)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="965" width="0.0118%" height="15" fill="rgb(229,96,14)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="949" width="0.0118%" height="15" fill="rgb(220,79,17)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="933" width="0.0118%" height="15" fill="rgb(205,131,53)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="917" width="0.0118%" height="15" fill="rgb(209,50,29)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="901" width="0.0118%" height="15" fill="rgb(245,86,46)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="13.9518%" y="885" width="0.0118%" height="15" fill="rgb(235,66,46)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="13.9518%" y="869" width="0.0118%" height="15" fill="rgb(232,148,31)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.01%)</title><rect x="13.9518%" y="853" width="0.0118%" height="15" fill="rgb(217,149,8)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="13.9518%" y="837" width="0.0118%" height="15" fill="rgb(209,183,11)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.01%)</title><rect x="13.9518%" y="821" width="0.0118%" height="15" fill="rgb(208,55,20)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="805" width="0.0118%" height="15" fill="rgb(218,39,14)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="789" width="0.0118%" height="15" fill="rgb(216,169,33)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="773" width="0.0118%" height="15" fill="rgb(233,80,24)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="757" width="0.0118%" height="15" fill="rgb(213,179,31)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (1 samples, 0.01%)</title><rect x="13.9518%" y="741" width="0.0118%" height="15" fill="rgb(209,19,5)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="13.9518%" y="725" width="0.0118%" height="15" fill="rgb(219,18,35)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="13.9518%" y="709" width="0.0118%" height="15" fill="rgb(209,169,16)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="13.9518%" y="693" width="0.0118%" height="15" fill="rgb(245,90,51)" fg:x="1182" fg:w="1"/><text x="14.2018%" y="703.50"></text></g><g><title>alloc_perturb (1 samples, 0.01%)</title><rect x="13.9636%" y="1029" width="0.0118%" height="15" fill="rgb(220,99,45)" fg:x="1183" fg:w="1"/><text x="14.2136%" y="1039.50"></text></g><g><title>anon.d8017c6b9381c39ca152b1bdae9a0f36.1.llvm.14938807915284456228 (2 samples, 0.02%)</title><rect x="13.9754%" y="1029" width="0.0236%" height="15" fill="rgb(249,89,25)" fg:x="1184" fg:w="2"/><text x="14.2254%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="13.9754%" y="1013" width="0.0236%" height="15" fill="rgb(239,193,0)" fg:x="1184" fg:w="2"/><text x="14.2254%" y="1023.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="13.9991%" y="981" width="0.0118%" height="15" fill="rgb(231,126,1)" fg:x="1186" fg:w="1"/><text x="14.2491%" y="991.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="13.9991%" y="965" width="0.0118%" height="15" fill="rgb(243,166,3)" fg:x="1186" fg:w="1"/><text x="14.2491%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (16 samples, 0.19%)</title><rect x="14.0109%" y="981" width="0.1889%" height="15" fill="rgb(223,22,34)" fg:x="1187" fg:w="16"/><text x="14.2609%" y="991.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.1407%" y="965" width="0.0590%" height="15" fill="rgb(251,52,51)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="975.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.1407%" y="949" width="0.0590%" height="15" fill="rgb(221,165,28)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="959.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="14.1407%" y="933" width="0.0590%" height="15" fill="rgb(218,121,47)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="943.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="14.1407%" y="917" width="0.0590%" height="15" fill="rgb(209,120,9)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="927.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="14.1407%" y="901" width="0.0590%" height="15" fill="rgb(236,68,12)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="911.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="14.1407%" y="885" width="0.0590%" height="15" fill="rgb(225,194,26)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="895.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="14.1407%" y="869" width="0.0590%" height="15" fill="rgb(231,84,39)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="879.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="14.1407%" y="853" width="0.0590%" height="15" fill="rgb(210,11,45)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="863.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="14.1407%" y="837" width="0.0590%" height="15" fill="rgb(224,54,52)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="847.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="14.1407%" y="821" width="0.0590%" height="15" fill="rgb(238,102,14)" fg:x="1198" fg:w="5"/><text x="14.3907%" y="831.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="14.1997%" y="981" width="0.0118%" height="15" fill="rgb(243,160,52)" fg:x="1203" fg:w="1"/><text x="14.4497%" y="991.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="14.1997%" y="965" width="0.0118%" height="15" fill="rgb(216,114,19)" fg:x="1203" fg:w="1"/><text x="14.4497%" y="975.50"></text></g><g><title>__GI___libc_free (6 samples, 0.07%)</title><rect x="14.2115%" y="965" width="0.0708%" height="15" fill="rgb(244,166,37)" fg:x="1204" fg:w="6"/><text x="14.4615%" y="975.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="14.2115%" y="949" width="0.0708%" height="15" fill="rgb(246,29,44)" fg:x="1204" fg:w="6"/><text x="14.4615%" y="959.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="14.2705%" y="933" width="0.0118%" height="15" fill="rgb(215,56,53)" fg:x="1209" fg:w="1"/><text x="14.5205%" y="943.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="14.2823%" y="901" width="0.0118%" height="15" fill="rgb(217,60,2)" fg:x="1210" fg:w="1"/><text x="14.5323%" y="911.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="14.2823%" y="885" width="0.0118%" height="15" fill="rgb(207,26,24)" fg:x="1210" fg:w="1"/><text x="14.5323%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="14.2823%" y="965" width="0.0472%" height="15" fill="rgb(252,210,15)" fg:x="1210" fg:w="4"/><text x="14.5323%" y="975.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="14.2823%" y="949" width="0.0472%" height="15" fill="rgb(253,209,26)" fg:x="1210" fg:w="4"/><text x="14.5323%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="14.2823%" y="933" width="0.0472%" height="15" fill="rgb(238,170,14)" fg:x="1210" fg:w="4"/><text x="14.5323%" y="943.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="14.2823%" y="917" width="0.0472%" height="15" fill="rgb(216,178,15)" fg:x="1210" fg:w="4"/><text x="14.5323%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="14.2941%" y="901" width="0.0354%" height="15" fill="rgb(250,197,2)" fg:x="1211" fg:w="3"/><text x="14.5441%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="14.2941%" y="885" width="0.0354%" height="15" fill="rgb(212,70,42)" fg:x="1211" fg:w="3"/><text x="14.5441%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::handler::register::HandleRegisters&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="14.3296%" y="965" width="0.0118%" height="15" fill="rgb(227,213,9)" fg:x="1214" fg:w="1"/><text x="14.5796%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::handler::register::HandleRegisters&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="14.3296%" y="949" width="0.0118%" height="15" fill="rgb(245,99,25)" fg:x="1214" fg:w="1"/><text x="14.5796%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.3296%" y="933" width="0.0118%" height="15" fill="rgb(250,82,29)" fg:x="1214" fg:w="1"/><text x="14.5796%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="14.3296%" y="917" width="0.0118%" height="15" fill="rgb(241,226,54)" fg:x="1214" fg:w="1"/><text x="14.5796%" y="927.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="14.3414%" y="917" width="0.0472%" height="15" fill="rgb(221,99,41)" fg:x="1215" fg:w="4"/><text x="14.5914%" y="927.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="14.3532%" y="901" width="0.0354%" height="15" fill="rgb(213,90,21)" fg:x="1216" fg:w="3"/><text x="14.6032%" y="911.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="14.4122%" y="853" width="0.0118%" height="15" fill="rgb(205,208,24)" fg:x="1221" fg:w="1"/><text x="14.6622%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="14.4122%" y="837" width="0.0118%" height="15" fill="rgb(246,31,12)" fg:x="1221" fg:w="1"/><text x="14.6622%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="14.4122%" y="821" width="0.0118%" height="15" fill="rgb(213,154,6)" fg:x="1221" fg:w="1"/><text x="14.6622%" y="831.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="14.4240%" y="693" width="0.0118%" height="15" fill="rgb(222,163,29)" fg:x="1222" fg:w="1"/><text x="14.6740%" y="703.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.4240%" y="853" width="0.0590%" height="15" fill="rgb(227,201,8)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="863.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.4240%" y="837" width="0.0590%" height="15" fill="rgb(233,9,32)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="847.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="14.4240%" y="821" width="0.0590%" height="15" fill="rgb(217,54,24)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="831.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="14.4240%" y="805" width="0.0590%" height="15" fill="rgb(235,192,0)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="815.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="14.4240%" y="789" width="0.0590%" height="15" fill="rgb(235,45,9)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="799.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="14.4240%" y="773" width="0.0590%" height="15" fill="rgb(246,42,40)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="783.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="14.4240%" y="757" width="0.0590%" height="15" fill="rgb(248,111,24)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="767.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="14.4240%" y="741" width="0.0590%" height="15" fill="rgb(249,65,22)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="751.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="14.4240%" y="725" width="0.0590%" height="15" fill="rgb(238,111,51)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="735.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="14.4240%" y="709" width="0.0590%" height="15" fill="rgb(250,118,22)" fg:x="1222" fg:w="5"/><text x="14.6740%" y="719.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="14.4358%" y="693" width="0.0472%" height="15" fill="rgb(234,84,26)" fg:x="1223" fg:w="4"/><text x="14.6858%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (12 samples, 0.14%)</title><rect x="14.3886%" y="917" width="0.1416%" height="15" fill="rgb(243,172,12)" fg:x="1219" fg:w="12"/><text x="14.6386%" y="927.50"></text></g><g><title>core::mem::drop (11 samples, 0.13%)</title><rect x="14.4004%" y="901" width="0.1298%" height="15" fill="rgb(236,150,49)" fg:x="1220" fg:w="11"/><text x="14.6504%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (11 samples, 0.13%)</title><rect x="14.4004%" y="885" width="0.1298%" height="15" fill="rgb(225,197,26)" fg:x="1220" fg:w="11"/><text x="14.6504%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="14.4004%" y="869" width="0.1298%" height="15" fill="rgb(214,17,42)" fg:x="1220" fg:w="11"/><text x="14.6504%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="14.4830%" y="853" width="0.0472%" height="15" fill="rgb(224,165,40)" fg:x="1227" fg:w="4"/><text x="14.7330%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="14.4830%" y="837" width="0.0472%" height="15" fill="rgb(246,100,4)" fg:x="1227" fg:w="4"/><text x="14.7330%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (18 samples, 0.21%)</title><rect x="14.3414%" y="949" width="0.2125%" height="15" fill="rgb(222,103,0)" fg:x="1215" fg:w="18"/><text x="14.5914%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.21%)</title><rect x="14.3414%" y="933" width="0.2125%" height="15" fill="rgb(227,189,26)" fg:x="1215" fg:w="18"/><text x="14.5914%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="14.5302%" y="917" width="0.0236%" height="15" fill="rgb(214,202,17)" fg:x="1231" fg:w="2"/><text x="14.7802%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="14.5302%" y="901" width="0.0236%" height="15" fill="rgb(229,111,3)" fg:x="1231" fg:w="2"/><text x="14.7802%" y="911.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="14.5538%" y="917" width="0.0118%" height="15" fill="rgb(229,172,15)" fg:x="1233" fg:w="1"/><text x="14.8038%" y="927.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="14.5538%" y="901" width="0.0118%" height="15" fill="rgb(230,224,35)" fg:x="1233" fg:w="1"/><text x="14.8038%" y="911.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="14.5656%" y="917" width="0.0118%" height="15" fill="rgb(251,141,6)" fg:x="1234" fg:w="1"/><text x="14.8156%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (21 samples, 0.25%)</title><rect x="14.3414%" y="965" width="0.2479%" height="15" fill="rgb(225,208,6)" fg:x="1215" fg:w="21"/><text x="14.5914%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="14.5538%" y="949" width="0.0354%" height="15" fill="rgb(246,181,16)" fg:x="1233" fg:w="3"/><text x="14.8038%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="14.5538%" y="933" width="0.0354%" height="15" fill="rgb(227,129,36)" fg:x="1233" fg:w="3"/><text x="14.8038%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.5774%" y="917" width="0.0118%" height="15" fill="rgb(248,117,24)" fg:x="1235" fg:w="1"/><text x="14.8274%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.5774%" y="901" width="0.0118%" height="15" fill="rgb(214,185,35)" fg:x="1235" fg:w="1"/><text x="14.8274%" y="911.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="14.6128%" y="917" width="0.0118%" height="15" fill="rgb(236,150,34)" fg:x="1238" fg:w="1"/><text x="14.8628%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="14.6246%" y="917" width="0.0236%" height="15" fill="rgb(243,228,27)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="927.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="14.6246%" y="901" width="0.0236%" height="15" fill="rgb(245,77,44)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="14.6246%" y="885" width="0.0236%" height="15" fill="rgb(235,214,42)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="14.6246%" y="869" width="0.0236%" height="15" fill="rgb(221,74,3)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="14.6246%" y="853" width="0.0236%" height="15" fill="rgb(206,121,29)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="14.6246%" y="837" width="0.0236%" height="15" fill="rgb(249,131,53)" fg:x="1239" fg:w="2"/><text x="14.8746%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="14.5892%" y="949" width="0.0708%" height="15" fill="rgb(236,170,29)" fg:x="1236" fg:w="6"/><text x="14.8392%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="14.5892%" y="933" width="0.0708%" height="15" fill="rgb(247,96,15)" fg:x="1236" fg:w="6"/><text x="14.8392%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.6483%" y="917" width="0.0118%" height="15" fill="rgb(211,210,7)" fg:x="1241" fg:w="1"/><text x="14.8983%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.6483%" y="901" width="0.0118%" height="15" fill="rgb(240,88,50)" fg:x="1241" fg:w="1"/><text x="14.8983%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="14.5892%" y="965" width="0.0826%" height="15" fill="rgb(209,229,26)" fg:x="1236" fg:w="7"/><text x="14.8392%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6601%" y="949" width="0.0118%" height="15" fill="rgb(210,68,23)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.6601%" y="933" width="0.0118%" height="15" fill="rgb(229,180,13)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="14.6601%" y="917" width="0.0118%" height="15" fill="rgb(236,53,44)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="927.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="14.6601%" y="901" width="0.0118%" height="15" fill="rgb(244,214,29)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6601%" y="885" width="0.0118%" height="15" fill="rgb(220,75,29)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.6601%" y="869" width="0.0118%" height="15" fill="rgb(214,183,37)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.6601%" y="853" width="0.0118%" height="15" fill="rgb(239,117,29)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.6601%" y="837" width="0.0118%" height="15" fill="rgb(237,171,35)" fg:x="1242" fg:w="1"/><text x="14.9101%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="14.6837%" y="917" width="0.0236%" height="15" fill="rgb(229,178,53)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="927.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="14.6837%" y="901" width="0.0236%" height="15" fill="rgb(210,102,19)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="14.6837%" y="885" width="0.0236%" height="15" fill="rgb(235,127,22)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="14.6837%" y="869" width="0.0236%" height="15" fill="rgb(244,31,31)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="14.6837%" y="853" width="0.0236%" height="15" fill="rgb(231,43,21)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="14.6837%" y="837" width="0.0236%" height="15" fill="rgb(217,131,35)" fg:x="1244" fg:w="2"/><text x="14.9337%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="14.6719%" y="949" width="0.0708%" height="15" fill="rgb(221,149,4)" fg:x="1243" fg:w="6"/><text x="14.9219%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="14.6719%" y="933" width="0.0708%" height="15" fill="rgb(232,170,28)" fg:x="1243" fg:w="6"/><text x="14.9219%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="14.7073%" y="917" width="0.0354%" height="15" fill="rgb(238,56,10)" fg:x="1246" fg:w="3"/><text x="14.9573%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="14.7073%" y="901" width="0.0354%" height="15" fill="rgb(235,196,14)" fg:x="1246" fg:w="3"/><text x="14.9573%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="14.7427%" y="917" width="0.0118%" height="15" fill="rgb(216,45,48)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="927.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="14.7427%" y="901" width="0.0118%" height="15" fill="rgb(238,213,17)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="14.7427%" y="885" width="0.0118%" height="15" fill="rgb(212,13,2)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.7427%" y="869" width="0.0118%" height="15" fill="rgb(240,114,20)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.7427%" y="853" width="0.0118%" height="15" fill="rgb(228,41,40)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.7427%" y="837" width="0.0118%" height="15" fill="rgb(244,132,35)" fg:x="1249" fg:w="1"/><text x="14.9927%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (52 samples, 0.61%)</title><rect x="14.2115%" y="981" width="0.6138%" height="15" fill="rgb(253,189,4)" fg:x="1204" fg:w="52"/><text x="14.4615%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (13 samples, 0.15%)</title><rect x="14.6719%" y="965" width="0.1534%" height="15" fill="rgb(224,37,19)" fg:x="1243" fg:w="13"/><text x="14.9219%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="14.7427%" y="949" width="0.0826%" height="15" fill="rgb(235,223,18)" fg:x="1249" fg:w="7"/><text x="14.9927%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="14.7427%" y="933" width="0.0826%" height="15" fill="rgb(235,163,25)" fg:x="1249" fg:w="7"/><text x="14.9927%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="14.7545%" y="917" width="0.0708%" height="15" fill="rgb(217,145,28)" fg:x="1250" fg:w="6"/><text x="15.0045%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="14.7545%" y="901" width="0.0708%" height="15" fill="rgb(223,223,32)" fg:x="1250" fg:w="6"/><text x="15.0045%" y="911.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="14.8253%" y="933" width="0.0354%" height="15" fill="rgb(227,189,39)" fg:x="1256" fg:w="3"/><text x="15.0753%" y="943.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="14.8253%" y="917" width="0.0354%" height="15" fill="rgb(248,10,22)" fg:x="1256" fg:w="3"/><text x="15.0753%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="14.8253%" y="965" width="0.0472%" height="15" fill="rgb(248,46,39)" fg:x="1256" fg:w="4"/><text x="15.0753%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="14.8253%" y="949" width="0.0472%" height="15" fill="rgb(248,113,48)" fg:x="1256" fg:w="4"/><text x="15.0753%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="14.8607%" y="933" width="0.0118%" height="15" fill="rgb(245,16,25)" fg:x="1259" fg:w="1"/><text x="15.1107%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="14.8725%" y="965" width="0.0118%" height="15" fill="rgb(249,152,16)" fg:x="1260" fg:w="1"/><text x="15.1225%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.8725%" y="949" width="0.0118%" height="15" fill="rgb(250,16,1)" fg:x="1260" fg:w="1"/><text x="15.1225%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.8725%" y="933" width="0.0118%" height="15" fill="rgb(249,138,3)" fg:x="1260" fg:w="1"/><text x="15.1225%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.8725%" y="917" width="0.0118%" height="15" fill="rgb(227,71,41)" fg:x="1260" fg:w="1"/><text x="15.1225%" y="927.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="14.8843%" y="933" width="0.0236%" height="15" fill="rgb(209,184,23)" fg:x="1261" fg:w="2"/><text x="15.1343%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="14.8961%" y="917" width="0.0118%" height="15" fill="rgb(223,215,31)" fg:x="1262" fg:w="1"/><text x="15.1461%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="14.9079%" y="933" width="0.0236%" height="15" fill="rgb(210,146,28)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="943.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="14.9079%" y="917" width="0.0236%" height="15" fill="rgb(209,183,41)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="14.9079%" y="901" width="0.0236%" height="15" fill="rgb(209,224,45)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="14.9079%" y="885" width="0.0236%" height="15" fill="rgb(224,209,51)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="14.9079%" y="869" width="0.0236%" height="15" fill="rgb(223,17,39)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="14.9079%" y="853" width="0.0236%" height="15" fill="rgb(234,204,37)" fg:x="1263" fg:w="2"/><text x="15.1579%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="14.8843%" y="965" width="0.0590%" height="15" fill="rgb(236,120,5)" fg:x="1261" fg:w="5"/><text x="15.1343%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="14.8843%" y="949" width="0.0590%" height="15" fill="rgb(248,97,27)" fg:x="1261" fg:w="5"/><text x="15.1343%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.9315%" y="933" width="0.0118%" height="15" fill="rgb(240,66,17)" fg:x="1265" fg:w="1"/><text x="15.1815%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.9315%" y="917" width="0.0118%" height="15" fill="rgb(210,79,3)" fg:x="1265" fg:w="1"/><text x="15.1815%" y="927.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="14.9433%" y="933" width="0.0118%" height="15" fill="rgb(214,176,27)" fg:x="1266" fg:w="1"/><text x="15.1933%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="14.9433%" y="917" width="0.0118%" height="15" fill="rgb(235,185,3)" fg:x="1266" fg:w="1"/><text x="15.1933%" y="927.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="14.9551%" y="933" width="0.0118%" height="15" fill="rgb(227,24,12)" fg:x="1267" fg:w="1"/><text x="15.2051%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="14.9551%" y="917" width="0.0118%" height="15" fill="rgb(252,169,48)" fg:x="1267" fg:w="1"/><text x="15.2051%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="14.9669%" y="933" width="0.0118%" height="15" fill="rgb(212,65,1)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="943.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="14.9669%" y="917" width="0.0118%" height="15" fill="rgb(242,39,24)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="14.9669%" y="901" width="0.0118%" height="15" fill="rgb(249,32,23)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.9669%" y="885" width="0.0118%" height="15" fill="rgb(251,195,23)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.9669%" y="869" width="0.0118%" height="15" fill="rgb(236,174,8)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.9669%" y="853" width="0.0118%" height="15" fill="rgb(220,197,8)" fg:x="1268" fg:w="1"/><text x="15.2169%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="14.9433%" y="965" width="0.0472%" height="15" fill="rgb(240,108,37)" fg:x="1266" fg:w="4"/><text x="15.1933%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="14.9433%" y="949" width="0.0472%" height="15" fill="rgb(232,176,24)" fg:x="1266" fg:w="4"/><text x="15.1933%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="14.9788%" y="933" width="0.0118%" height="15" fill="rgb(243,35,29)" fg:x="1269" fg:w="1"/><text x="15.2288%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="14.9788%" y="917" width="0.0118%" height="15" fill="rgb(210,37,18)" fg:x="1269" fg:w="1"/><text x="15.2288%" y="927.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="14.9906%" y="933" width="0.0236%" height="15" fill="rgb(224,184,40)" fg:x="1270" fg:w="2"/><text x="15.2406%" y="943.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="14.9906%" y="917" width="0.0236%" height="15" fill="rgb(236,39,29)" fg:x="1270" fg:w="2"/><text x="15.2406%" y="927.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="15.0024%" y="901" width="0.0118%" height="15" fill="rgb(232,48,39)" fg:x="1271" fg:w="1"/><text x="15.2524%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="15.0142%" y="933" width="0.0118%" height="15" fill="rgb(236,34,42)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="943.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="15.0142%" y="917" width="0.0118%" height="15" fill="rgb(243,106,37)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="15.0142%" y="901" width="0.0118%" height="15" fill="rgb(218,96,6)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="15.0142%" y="885" width="0.0118%" height="15" fill="rgb(235,130,12)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="15.0142%" y="869" width="0.0118%" height="15" fill="rgb(231,95,0)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="15.0142%" y="853" width="0.0118%" height="15" fill="rgb(228,12,23)" fg:x="1272" fg:w="1"/><text x="15.2642%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="14.9906%" y="965" width="0.0708%" height="15" fill="rgb(216,12,1)" fg:x="1270" fg:w="6"/><text x="15.2406%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="14.9906%" y="949" width="0.0708%" height="15" fill="rgb(219,59,3)" fg:x="1270" fg:w="6"/><text x="15.2406%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="15.0260%" y="933" width="0.0354%" height="15" fill="rgb(215,208,46)" fg:x="1273" fg:w="3"/><text x="15.2760%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="15.0260%" y="917" width="0.0354%" height="15" fill="rgb(254,224,29)" fg:x="1273" fg:w="3"/><text x="15.2760%" y="927.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="15.0614%" y="933" width="0.0236%" height="15" fill="rgb(232,14,29)" fg:x="1276" fg:w="2"/><text x="15.3114%" y="943.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="15.0614%" y="917" width="0.0236%" height="15" fill="rgb(208,45,52)" fg:x="1276" fg:w="2"/><text x="15.3114%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="15.0614%" y="965" width="0.0354%" height="15" fill="rgb(234,191,28)" fg:x="1276" fg:w="3"/><text x="15.3114%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="15.0614%" y="949" width="0.0354%" height="15" fill="rgb(244,67,43)" fg:x="1276" fg:w="3"/><text x="15.3114%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="15.0850%" y="933" width="0.0118%" height="15" fill="rgb(236,189,24)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="943.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="15.0850%" y="917" width="0.0118%" height="15" fill="rgb(239,214,33)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="15.0850%" y="901" width="0.0118%" height="15" fill="rgb(226,176,41)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="15.0850%" y="885" width="0.0118%" height="15" fill="rgb(248,47,8)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="15.0850%" y="869" width="0.0118%" height="15" fill="rgb(218,81,44)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="15.0850%" y="853" width="0.0118%" height="15" fill="rgb(213,98,6)" fg:x="1278" fg:w="1"/><text x="15.3350%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (25 samples, 0.30%)</title><rect x="14.8253%" y="981" width="0.2951%" height="15" fill="rgb(222,85,22)" fg:x="1256" fg:w="25"/><text x="15.0753%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="15.0968%" y="965" width="0.0236%" height="15" fill="rgb(239,46,39)" fg:x="1279" fg:w="2"/><text x="15.3468%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="15.0968%" y="949" width="0.0236%" height="15" fill="rgb(237,12,29)" fg:x="1279" fg:w="2"/><text x="15.3468%" y="959.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="15.0968%" y="933" width="0.0236%" height="15" fill="rgb(214,77,8)" fg:x="1279" fg:w="2"/><text x="15.3468%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="15.1086%" y="917" width="0.0118%" height="15" fill="rgb(217,168,37)" fg:x="1280" fg:w="1"/><text x="15.3586%" y="927.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="15.1204%" y="981" width="0.0118%" height="15" fill="rgb(221,217,23)" fg:x="1281" fg:w="1"/><text x="15.3704%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="15.1204%" y="965" width="0.0118%" height="15" fill="rgb(243,229,36)" fg:x="1281" fg:w="1"/><text x="15.3704%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="15.1322%" y="965" width="0.0118%" height="15" fill="rgb(251,163,40)" fg:x="1282" fg:w="1"/><text x="15.3822%" y="975.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (98 samples, 1.16%)</title><rect x="13.9991%" y="997" width="1.1568%" height="15" fill="rgb(237,222,12)" fg:x="1186" fg:w="98"/><text x="14.2491%" y="1007.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (2 samples, 0.02%)</title><rect x="15.1322%" y="981" width="0.0236%" height="15" fill="rgb(248,132,6)" fg:x="1282" fg:w="2"/><text x="15.3822%" y="991.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (1 samples, 0.01%)</title><rect x="15.1440%" y="965" width="0.0118%" height="15" fill="rgb(227,167,50)" fg:x="1283" fg:w="1"/><text x="15.3940%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="15.1440%" y="949" width="0.0118%" height="15" fill="rgb(242,84,37)" fg:x="1283" fg:w="1"/><text x="15.3940%" y="959.50"></text></g><g><title>&lt;revm_primitives::env::Env as core::default::Default&gt;::default (5 samples, 0.06%)</title><rect x="15.1558%" y="885" width="0.0590%" height="15" fill="rgb(212,4,50)" fg:x="1284" fg:w="5"/><text x="15.4058%" y="895.50"></text></g><g><title>&lt;revm_primitives::env::BlockEnv as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="15.2030%" y="869" width="0.0118%" height="15" fill="rgb(230,228,32)" fg:x="1288" fg:w="1"/><text x="15.4530%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (7 samples, 0.08%)</title><rect x="15.1558%" y="901" width="0.0826%" height="15" fill="rgb(248,217,23)" fg:x="1284" fg:w="7"/><text x="15.4058%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="15.2148%" y="885" width="0.0236%" height="15" fill="rgb(238,197,32)" fg:x="1289" fg:w="2"/><text x="15.4648%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="15.2148%" y="869" width="0.0236%" height="15" fill="rgb(236,106,1)" fg:x="1289" fg:w="2"/><text x="15.4648%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="15.2384%" y="901" width="0.0118%" height="15" fill="rgb(219,228,13)" fg:x="1291" fg:w="1"/><text x="15.4884%" y="911.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (111 samples, 1.31%)</title><rect x="13.9991%" y="1029" width="1.3102%" height="15" fill="rgb(238,30,35)" fg:x="1186" fg:w="111"/><text x="14.2491%" y="1039.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (111 samples, 1.31%)</title><rect x="13.9991%" y="1013" width="1.3102%" height="15" fill="rgb(236,70,23)" fg:x="1186" fg:w="111"/><text x="14.2491%" y="1023.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (13 samples, 0.15%)</title><rect x="15.1558%" y="997" width="0.1534%" height="15" fill="rgb(249,104,48)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="1007.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (13 samples, 0.15%)</title><rect x="15.1558%" y="981" width="0.1534%" height="15" fill="rgb(254,117,50)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="991.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (13 samples, 0.15%)</title><rect x="15.1558%" y="965" width="0.1534%" height="15" fill="rgb(223,152,4)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="975.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (13 samples, 0.15%)</title><rect x="15.1558%" y="949" width="0.1534%" height="15" fill="rgb(245,6,2)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="959.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (13 samples, 0.15%)</title><rect x="15.1558%" y="933" width="0.1534%" height="15" fill="rgb(249,150,24)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="943.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (13 samples, 0.15%)</title><rect x="15.1558%" y="917" width="0.1534%" height="15" fill="rgb(228,185,42)" fg:x="1284" fg:w="13"/><text x="15.4058%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::new (5 samples, 0.06%)</title><rect x="15.2502%" y="901" width="0.0590%" height="15" fill="rgb(226,39,33)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="911.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="15.2502%" y="885" width="0.0590%" height="15" fill="rgb(221,166,19)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="895.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="15.2502%" y="869" width="0.0590%" height="15" fill="rgb(209,109,2)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="879.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="15.2502%" y="853" width="0.0590%" height="15" fill="rgb(252,216,26)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="863.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="15.2502%" y="837" width="0.0590%" height="15" fill="rgb(227,173,36)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="847.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="15.2502%" y="821" width="0.0590%" height="15" fill="rgb(209,90,7)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="831.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="15.2502%" y="805" width="0.0590%" height="15" fill="rgb(250,194,11)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="815.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="15.2502%" y="789" width="0.0590%" height="15" fill="rgb(220,72,50)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="799.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="15.2502%" y="773" width="0.0590%" height="15" fill="rgb(222,106,48)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="15.2502%" y="757" width="0.0590%" height="15" fill="rgb(216,220,45)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="767.50"></text></g><g><title>__rcu_read_unlock (5 samples, 0.06%)</title><rect x="15.2502%" y="741" width="0.0590%" height="15" fill="rgb(234,112,18)" fg:x="1292" fg:w="5"/><text x="15.5002%" y="751.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (2 samples, 0.02%)</title><rect x="15.3093%" y="1029" width="0.0236%" height="15" fill="rgb(206,179,9)" fg:x="1297" fg:w="2"/><text x="15.5593%" y="1039.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record (1 samples, 0.01%)</title><rect x="15.3329%" y="1029" width="0.0118%" height="15" fill="rgb(215,115,40)" fg:x="1299" fg:w="1"/><text x="15.5829%" y="1039.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_execution (1 samples, 0.01%)</title><rect x="15.3447%" y="1029" width="0.0118%" height="15" fill="rgb(222,69,34)" fg:x="1300" fg:w="1"/><text x="15.5947%" y="1039.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.08%)</title><rect x="15.3565%" y="949" width="0.0826%" height="15" fill="rgb(209,161,10)" fg:x="1301" fg:w="7"/><text x="15.6065%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="15.4627%" y="933" width="0.0354%" height="15" fill="rgb(217,6,38)" fg:x="1310" fg:w="3"/><text x="15.7127%" y="943.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="789" width="0.0118%" height="15" fill="rgb(229,229,48)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="799.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="773" width="0.0118%" height="15" fill="rgb(225,21,28)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="783.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="757" width="0.0118%" height="15" fill="rgb(206,33,13)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="767.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="741" width="0.0118%" height="15" fill="rgb(242,178,17)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="751.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="725" width="0.0118%" height="15" fill="rgb(220,162,5)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="735.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="15.8876%" y="709" width="0.0118%" height="15" fill="rgb(210,33,43)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="719.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="15.8876%" y="693" width="0.0118%" height="15" fill="rgb(216,116,54)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="703.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="15.8876%" y="677" width="0.0118%" height="15" fill="rgb(249,92,24)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="687.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="15.8876%" y="661" width="0.0118%" height="15" fill="rgb(231,189,14)" fg:x="1346" fg:w="1"/><text x="16.1376%" y="671.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="15.8994%" y="789" width="0.0118%" height="15" fill="rgb(230,8,41)" fg:x="1347" fg:w="1"/><text x="16.1494%" y="799.50"></text></g><g><title>osq_lock (23 samples, 0.27%)</title><rect x="15.9112%" y="629" width="0.2715%" height="15" fill="rgb(249,7,27)" fg:x="1348" fg:w="23"/><text x="16.1612%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="16.1709%" y="613" width="0.0118%" height="15" fill="rgb(232,86,5)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="16.1709%" y="597" width="0.0118%" height="15" fill="rgb(224,175,18)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="607.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="16.1709%" y="581" width="0.0118%" height="15" fill="rgb(220,129,12)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="591.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="16.1709%" y="565" width="0.0118%" height="15" fill="rgb(210,19,36)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="575.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="16.1709%" y="549" width="0.0118%" height="15" fill="rgb(219,96,14)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="559.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="16.1709%" y="533" width="0.0118%" height="15" fill="rgb(249,106,1)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="543.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="16.1709%" y="517" width="0.0118%" height="15" fill="rgb(249,155,20)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="527.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="16.1709%" y="501" width="0.0118%" height="15" fill="rgb(244,168,9)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="511.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="16.1709%" y="485" width="0.0118%" height="15" fill="rgb(216,23,50)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="495.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.01%)</title><rect x="16.1709%" y="469" width="0.0118%" height="15" fill="rgb(224,219,20)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="479.50"></text></g><g><title>perf_adjust_freq_unthr_context (1 samples, 0.01%)</title><rect x="16.1709%" y="453" width="0.0118%" height="15" fill="rgb(222,156,15)" fg:x="1370" fg:w="1"/><text x="16.4209%" y="463.50"></text></g><g><title>down_write_killable (25 samples, 0.30%)</title><rect x="15.9112%" y="677" width="0.2951%" height="15" fill="rgb(231,97,17)" fg:x="1348" fg:w="25"/><text x="16.1612%" y="687.50"></text></g><g><title>rwsem_down_write_slowpath (25 samples, 0.30%)</title><rect x="15.9112%" y="661" width="0.2951%" height="15" fill="rgb(218,70,48)" fg:x="1348" fg:w="25"/><text x="16.1612%" y="671.50"></text></g><g><title>rwsem_optimistic_spin (25 samples, 0.30%)</title><rect x="15.9112%" y="645" width="0.2951%" height="15" fill="rgb(212,196,52)" fg:x="1348" fg:w="25"/><text x="16.1612%" y="655.50"></text></g><g><title>rwsem_spin_on_owner (2 samples, 0.02%)</title><rect x="16.1827%" y="629" width="0.0236%" height="15" fill="rgb(243,203,18)" fg:x="1371" fg:w="2"/><text x="16.4327%" y="639.50"></text></g><g><title>mas_find (1 samples, 0.01%)</title><rect x="16.2063%" y="677" width="0.0118%" height="15" fill="rgb(252,125,41)" fg:x="1373" fg:w="1"/><text x="16.4563%" y="687.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="16.2063%" y="661" width="0.0118%" height="15" fill="rgb(223,180,33)" fg:x="1373" fg:w="1"/><text x="16.4563%" y="671.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="16.2063%" y="645" width="0.0118%" height="15" fill="rgb(254,159,46)" fg:x="1373" fg:w="1"/><text x="16.4563%" y="655.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="16.2181%" y="677" width="0.0118%" height="15" fill="rgb(254,38,10)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="687.50"></text></g><g><title>vma_merge (1 samples, 0.01%)</title><rect x="16.2181%" y="661" width="0.0118%" height="15" fill="rgb(208,217,32)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="671.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="16.2181%" y="645" width="0.0118%" height="15" fill="rgb(221,120,13)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="655.50"></text></g><g><title>mas_destroy (1 samples, 0.01%)</title><rect x="16.2181%" y="629" width="0.0118%" height="15" fill="rgb(246,54,52)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="639.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.01%)</title><rect x="16.2181%" y="613" width="0.0118%" height="15" fill="rgb(242,34,25)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="623.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.01%)</title><rect x="16.2181%" y="597" width="0.0118%" height="15" fill="rgb(247,209,9)" fg:x="1374" fg:w="1"/><text x="16.4681%" y="607.50"></text></g><g><title>__GI___libc_malloc (60 samples, 0.71%)</title><rect x="15.5335%" y="821" width="0.7082%" height="15" fill="rgb(228,71,26)" fg:x="1316" fg:w="60"/><text x="15.7835%" y="831.50"></text></g><g><title>_int_malloc (42 samples, 0.50%)</title><rect x="15.7460%" y="805" width="0.4958%" height="15" fill="rgb(222,145,49)" fg:x="1334" fg:w="42"/><text x="15.9960%" y="815.50"></text></g><g><title>sysmalloc (28 samples, 0.33%)</title><rect x="15.9112%" y="789" width="0.3305%" height="15" fill="rgb(218,121,17)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="799.50"></text></g><g><title>grow_heap (28 samples, 0.33%)</title><rect x="15.9112%" y="773" width="0.3305%" height="15" fill="rgb(244,50,7)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="783.50"></text></g><g><title>__GI_mprotect (28 samples, 0.33%)</title><rect x="15.9112%" y="757" width="0.3305%" height="15" fill="rgb(246,229,37)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 0.33%)</title><rect x="15.9112%" y="741" width="0.3305%" height="15" fill="rgb(225,18,5)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="751.50"></text></g><g><title>do_syscall_64 (28 samples, 0.33%)</title><rect x="15.9112%" y="725" width="0.3305%" height="15" fill="rgb(213,204,8)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="735.50"></text></g><g><title>__x64_sys_mprotect (28 samples, 0.33%)</title><rect x="15.9112%" y="709" width="0.3305%" height="15" fill="rgb(238,103,6)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="719.50"></text></g><g><title>do_mprotect_pkey (28 samples, 0.33%)</title><rect x="15.9112%" y="693" width="0.3305%" height="15" fill="rgb(222,25,35)" fg:x="1348" fg:w="28"/><text x="16.1612%" y="703.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="16.2299%" y="677" width="0.0118%" height="15" fill="rgb(213,203,35)" fg:x="1375" fg:w="1"/><text x="16.4799%" y="687.50"></text></g><g><title>rwsem_wake.isra.0 (1 samples, 0.01%)</title><rect x="16.2299%" y="661" width="0.0118%" height="15" fill="rgb(221,79,53)" fg:x="1375" fg:w="1"/><text x="16.4799%" y="671.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="16.2299%" y="645" width="0.0118%" height="15" fill="rgb(243,200,35)" fg:x="1375" fg:w="1"/><text x="16.4799%" y="655.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="16.2299%" y="629" width="0.0118%" height="15" fill="rgb(248,60,25)" fg:x="1375" fg:w="1"/><text x="16.4799%" y="639.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (64 samples, 0.76%)</title><rect x="15.4981%" y="933" width="0.7554%" height="15" fill="rgb(227,53,46)" fg:x="1313" fg:w="64"/><text x="15.7481%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (63 samples, 0.74%)</title><rect x="15.5099%" y="917" width="0.7436%" height="15" fill="rgb(216,120,32)" fg:x="1314" fg:w="63"/><text x="15.7599%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (63 samples, 0.74%)</title><rect x="15.5099%" y="901" width="0.7436%" height="15" fill="rgb(220,134,1)" fg:x="1314" fg:w="63"/><text x="15.7599%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (61 samples, 0.72%)</title><rect x="15.5335%" y="885" width="0.7200%" height="15" fill="rgb(237,168,5)" fg:x="1316" fg:w="61"/><text x="15.7835%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.72%)</title><rect x="15.5335%" y="869" width="0.7200%" height="15" fill="rgb(231,100,33)" fg:x="1316" fg:w="61"/><text x="15.7835%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.72%)</title><rect x="15.5335%" y="853" width="0.7200%" height="15" fill="rgb(236,177,47)" fg:x="1316" fg:w="61"/><text x="15.7835%" y="863.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.72%)</title><rect x="15.5335%" y="837" width="0.7200%" height="15" fill="rgb(235,7,49)" fg:x="1316" fg:w="61"/><text x="15.7835%" y="847.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="16.2417%" y="821" width="0.0118%" height="15" fill="rgb(232,119,22)" fg:x="1376" fg:w="1"/><text x="16.4917%" y="831.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.14%)</title><rect x="16.2535%" y="821" width="0.1416%" height="15" fill="rgb(254,73,53)" fg:x="1377" fg:w="12"/><text x="16.5035%" y="831.50"></text></g><g><title>_int_malloc (6 samples, 0.07%)</title><rect x="16.3244%" y="805" width="0.0708%" height="15" fill="rgb(251,35,20)" fg:x="1383" fg:w="6"/><text x="16.5744%" y="815.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="16.3716%" y="789" width="0.0236%" height="15" fill="rgb(241,119,20)" fg:x="1387" fg:w="2"/><text x="16.6216%" y="799.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (14 samples, 0.17%)</title><rect x="16.2535%" y="933" width="0.1653%" height="15" fill="rgb(207,102,14)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (14 samples, 0.17%)</title><rect x="16.2535%" y="917" width="0.1653%" height="15" fill="rgb(248,201,50)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.17%)</title><rect x="16.2535%" y="901" width="0.1653%" height="15" fill="rgb(222,185,44)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.17%)</title><rect x="16.2535%" y="885" width="0.1653%" height="15" fill="rgb(218,107,18)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.17%)</title><rect x="16.2535%" y="869" width="0.1653%" height="15" fill="rgb(237,177,39)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.17%)</title><rect x="16.2535%" y="853" width="0.1653%" height="15" fill="rgb(246,69,6)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="863.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.17%)</title><rect x="16.2535%" y="837" width="0.1653%" height="15" fill="rgb(234,208,37)" fg:x="1377" fg:w="14"/><text x="16.5035%" y="847.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="16.3952%" y="821" width="0.0236%" height="15" fill="rgb(225,4,6)" fg:x="1389" fg:w="2"/><text x="16.6452%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="16.3952%" y="805" width="0.0236%" height="15" fill="rgb(233,45,0)" fg:x="1389" fg:w="2"/><text x="16.6452%" y="815.50"></text></g><g><title>alloc_perturb (1 samples, 0.01%)</title><rect x="16.5840%" y="789" width="0.0118%" height="15" fill="rgb(226,136,5)" fg:x="1405" fg:w="1"/><text x="16.8340%" y="799.50"></text></g><g><title>tcache_put (3 samples, 0.04%)</title><rect x="16.5958%" y="789" width="0.0354%" height="15" fill="rgb(211,91,47)" fg:x="1406" fg:w="3"/><text x="16.8458%" y="799.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (23 samples, 0.27%)</title><rect x="16.4188%" y="933" width="0.2715%" height="15" fill="rgb(242,88,51)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (23 samples, 0.27%)</title><rect x="16.4188%" y="917" width="0.2715%" height="15" fill="rgb(230,91,28)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (23 samples, 0.27%)</title><rect x="16.4188%" y="901" width="0.2715%" height="15" fill="rgb(254,186,29)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.27%)</title><rect x="16.4188%" y="885" width="0.2715%" height="15" fill="rgb(238,6,4)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.27%)</title><rect x="16.4188%" y="869" width="0.2715%" height="15" fill="rgb(221,151,16)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.27%)</title><rect x="16.4188%" y="853" width="0.2715%" height="15" fill="rgb(251,143,52)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="863.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.27%)</title><rect x="16.4188%" y="837" width="0.2715%" height="15" fill="rgb(206,90,15)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="847.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.27%)</title><rect x="16.4188%" y="821" width="0.2715%" height="15" fill="rgb(218,35,8)" fg:x="1391" fg:w="23"/><text x="16.6688%" y="831.50"></text></g><g><title>_int_malloc (20 samples, 0.24%)</title><rect x="16.4542%" y="805" width="0.2361%" height="15" fill="rgb(239,215,6)" fg:x="1394" fg:w="20"/><text x="16.7042%" y="815.50"></text></g><g><title>unlink_chunk (5 samples, 0.06%)</title><rect x="16.6313%" y="789" width="0.0590%" height="15" fill="rgb(245,116,39)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="799.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="16.6313%" y="773" width="0.0590%" height="15" fill="rgb(242,65,28)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="16.6313%" y="757" width="0.0590%" height="15" fill="rgb(252,132,53)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="16.6313%" y="741" width="0.0590%" height="15" fill="rgb(224,159,50)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="16.6313%" y="725" width="0.0590%" height="15" fill="rgb(224,93,4)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="16.6313%" y="709" width="0.0590%" height="15" fill="rgb(208,81,34)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="16.6313%" y="693" width="0.0590%" height="15" fill="rgb(233,92,54)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="703.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="16.6313%" y="677" width="0.0590%" height="15" fill="rgb(237,21,14)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="687.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="16.6313%" y="661" width="0.0590%" height="15" fill="rgb(249,128,51)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="16.6313%" y="645" width="0.0590%" height="15" fill="rgb(223,129,24)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="655.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="16.6313%" y="629" width="0.0590%" height="15" fill="rgb(231,168,25)" fg:x="1409" fg:w="5"/><text x="16.8813%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.06%)</title><rect x="16.6903%" y="821" width="0.0590%" height="15" fill="rgb(224,39,20)" fg:x="1414" fg:w="5"/><text x="16.9403%" y="831.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="16.7375%" y="805" width="0.0118%" height="15" fill="rgb(225,152,53)" fg:x="1418" fg:w="1"/><text x="16.9875%" y="815.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (119 samples, 1.40%)</title><rect x="15.3565%" y="1013" width="1.4046%" height="15" fill="rgb(252,17,24)" fg:x="1301" fg:w="119"/><text x="15.6065%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (119 samples, 1.40%)</title><rect x="15.3565%" y="997" width="1.4046%" height="15" fill="rgb(250,114,30)" fg:x="1301" fg:w="119"/><text x="15.6065%" y="1007.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (119 samples, 1.40%)</title><rect x="15.3565%" y="981" width="1.4046%" height="15" fill="rgb(229,5,4)" fg:x="1301" fg:w="119"/><text x="15.6065%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (119 samples, 1.40%)</title><rect x="15.3565%" y="965" width="1.4046%" height="15" fill="rgb(225,176,49)" fg:x="1301" fg:w="119"/><text x="15.6065%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (112 samples, 1.32%)</title><rect x="15.4391%" y="949" width="1.3220%" height="15" fill="rgb(224,221,49)" fg:x="1308" fg:w="112"/><text x="15.6891%" y="959.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (6 samples, 0.07%)</title><rect x="16.6903%" y="933" width="0.0708%" height="15" fill="rgb(253,169,27)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="16.6903%" y="917" width="0.0708%" height="15" fill="rgb(211,206,16)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="16.6903%" y="901" width="0.0708%" height="15" fill="rgb(244,87,35)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.07%)</title><rect x="16.6903%" y="885" width="0.0708%" height="15" fill="rgb(246,28,10)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.07%)</title><rect x="16.6903%" y="869" width="0.0708%" height="15" fill="rgb(229,12,44)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.07%)</title><rect x="16.6903%" y="853" width="0.0708%" height="15" fill="rgb(210,145,37)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="863.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.07%)</title><rect x="16.6903%" y="837" width="0.0708%" height="15" fill="rgb(227,112,52)" fg:x="1414" fg:w="6"/><text x="16.9403%" y="847.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="16.7493%" y="821" width="0.0118%" height="15" fill="rgb(238,155,34)" fg:x="1419" fg:w="1"/><text x="16.9993%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="16.7493%" y="805" width="0.0118%" height="15" fill="rgb(239,226,36)" fg:x="1419" fg:w="1"/><text x="16.9993%" y="815.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="16.7611%" y="917" width="0.0236%" height="15" fill="rgb(230,16,23)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="16.7611%" y="901" width="0.0236%" height="15" fill="rgb(236,171,36)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="16.7611%" y="885" width="0.0236%" height="15" fill="rgb(221,22,14)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="16.7611%" y="869" width="0.0236%" height="15" fill="rgb(242,43,11)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="16.7611%" y="853" width="0.0236%" height="15" fill="rgb(232,69,23)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="863.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="16.7611%" y="837" width="0.0236%" height="15" fill="rgb(216,180,54)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="847.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="16.7611%" y="821" width="0.0236%" height="15" fill="rgb(216,5,24)" fg:x="1420" fg:w="2"/><text x="17.0111%" y="831.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="16.7729%" y="805" width="0.0118%" height="15" fill="rgb(225,89,9)" fg:x="1421" fg:w="1"/><text x="17.0229%" y="815.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="16.7729%" y="789" width="0.0118%" height="15" fill="rgb(243,75,33)" fg:x="1421" fg:w="1"/><text x="17.0229%" y="799.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (3 samples, 0.04%)</title><rect x="16.7611%" y="981" width="0.0354%" height="15" fill="rgb(247,141,45)" fg:x="1420" fg:w="3"/><text x="17.0111%" y="991.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (3 samples, 0.04%)</title><rect x="16.7611%" y="965" width="0.0354%" height="15" fill="rgb(232,177,36)" fg:x="1420" fg:w="3"/><text x="17.0111%" y="975.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (3 samples, 0.04%)</title><rect x="16.7611%" y="949" width="0.0354%" height="15" fill="rgb(219,125,36)" fg:x="1420" fg:w="3"/><text x="17.0111%" y="959.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (3 samples, 0.04%)</title><rect x="16.7611%" y="933" width="0.0354%" height="15" fill="rgb(227,94,9)" fg:x="1420" fg:w="3"/><text x="17.0111%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::new (1 samples, 0.01%)</title><rect x="16.7847%" y="917" width="0.0118%" height="15" fill="rgb(240,34,52)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="16.7847%" y="901" width="0.0118%" height="15" fill="rgb(216,45,12)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="16.7847%" y="885" width="0.0118%" height="15" fill="rgb(246,21,19)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="16.7847%" y="869" width="0.0118%" height="15" fill="rgb(213,98,42)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="879.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="16.7847%" y="853" width="0.0118%" height="15" fill="rgb(250,136,47)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="863.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="16.7847%" y="837" width="0.0118%" height="15" fill="rgb(251,124,27)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="16.7847%" y="821" width="0.0118%" height="15" fill="rgb(229,180,14)" fg:x="1422" fg:w="1"/><text x="17.0347%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="16.8437%" y="933" width="0.0590%" height="15" fill="rgb(245,216,25)" fg:x="1427" fg:w="5"/><text x="17.0937%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="16.9027%" y="917" width="0.0472%" height="15" fill="rgb(251,43,5)" fg:x="1432" fg:w="4"/><text x="17.1527%" y="927.50"></text></g><g><title>_int_malloc (17 samples, 0.20%)</title><rect x="17.0090%" y="789" width="0.2007%" height="15" fill="rgb(250,128,24)" fg:x="1441" fg:w="17"/><text x="17.2590%" y="799.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="17.1860%" y="773" width="0.0236%" height="15" fill="rgb(217,117,27)" fg:x="1456" fg:w="2"/><text x="17.4360%" y="783.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (23 samples, 0.27%)</title><rect x="16.9500%" y="917" width="0.2715%" height="15" fill="rgb(245,147,4)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (23 samples, 0.27%)</title><rect x="16.9500%" y="901" width="0.2715%" height="15" fill="rgb(242,201,35)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (23 samples, 0.27%)</title><rect x="16.9500%" y="885" width="0.2715%" height="15" fill="rgb(218,181,1)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.27%)</title><rect x="16.9500%" y="869" width="0.2715%" height="15" fill="rgb(222,6,29)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.27%)</title><rect x="16.9500%" y="853" width="0.2715%" height="15" fill="rgb(208,186,3)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.27%)</title><rect x="16.9500%" y="837" width="0.2715%" height="15" fill="rgb(216,36,26)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="847.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.27%)</title><rect x="16.9500%" y="821" width="0.2715%" height="15" fill="rgb(248,201,23)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="831.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.27%)</title><rect x="16.9500%" y="805" width="0.2715%" height="15" fill="rgb(251,170,31)" fg:x="1436" fg:w="23"/><text x="17.2000%" y="815.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="17.2096%" y="789" width="0.0118%" height="15" fill="rgb(207,110,25)" fg:x="1458" fg:w="1"/><text x="17.4596%" y="799.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="17.2096%" y="773" width="0.0118%" height="15" fill="rgb(250,54,15)" fg:x="1458" fg:w="1"/><text x="17.4596%" y="783.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="17.2096%" y="757" width="0.0118%" height="15" fill="rgb(227,68,33)" fg:x="1458" fg:w="1"/><text x="17.4596%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.4457%" y="773" width="0.0590%" height="15" fill="rgb(238,34,41)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.4457%" y="757" width="0.0590%" height="15" fill="rgb(220,11,15)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="17.4457%" y="741" width="0.0590%" height="15" fill="rgb(246,111,35)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="17.4457%" y="725" width="0.0590%" height="15" fill="rgb(209,88,53)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="17.4457%" y="709" width="0.0590%" height="15" fill="rgb(231,185,47)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="17.4457%" y="693" width="0.0590%" height="15" fill="rgb(233,154,1)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="703.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="17.4457%" y="677" width="0.0590%" height="15" fill="rgb(225,15,46)" fg:x="1478" fg:w="5"/><text x="17.6957%" y="687.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="17.4575%" y="661" width="0.0472%" height="15" fill="rgb(211,135,41)" fg:x="1479" fg:w="4"/><text x="17.7075%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="17.4575%" y="645" width="0.0472%" height="15" fill="rgb(208,54,0)" fg:x="1479" fg:w="4"/><text x="17.7075%" y="655.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="17.4575%" y="629" width="0.0472%" height="15" fill="rgb(244,136,14)" fg:x="1479" fg:w="4"/><text x="17.7075%" y="639.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="17.4575%" y="613" width="0.0472%" height="15" fill="rgb(241,56,14)" fg:x="1479" fg:w="4"/><text x="17.7075%" y="623.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="17.5047%" y="773" width="0.0236%" height="15" fill="rgb(205,80,24)" fg:x="1483" fg:w="2"/><text x="17.7547%" y="783.50"></text></g><g><title>_int_malloc (17 samples, 0.20%)</title><rect x="17.3513%" y="789" width="0.2007%" height="15" fill="rgb(220,57,4)" fg:x="1470" fg:w="17"/><text x="17.6013%" y="799.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="17.5283%" y="773" width="0.0236%" height="15" fill="rgb(226,193,50)" fg:x="1485" fg:w="2"/><text x="17.7783%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (31 samples, 0.37%)</title><rect x="17.2214%" y="917" width="0.3659%" height="15" fill="rgb(231,168,22)" fg:x="1459" fg:w="31"/><text x="17.4714%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (30 samples, 0.35%)</title><rect x="17.2332%" y="901" width="0.3541%" height="15" fill="rgb(254,215,14)" fg:x="1460" fg:w="30"/><text x="17.4832%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (30 samples, 0.35%)</title><rect x="17.2332%" y="885" width="0.3541%" height="15" fill="rgb(211,115,16)" fg:x="1460" fg:w="30"/><text x="17.4832%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.33%)</title><rect x="17.2568%" y="869" width="0.3305%" height="15" fill="rgb(236,210,16)" fg:x="1462" fg:w="28"/><text x="17.5068%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.33%)</title><rect x="17.2568%" y="853" width="0.3305%" height="15" fill="rgb(221,94,12)" fg:x="1462" fg:w="28"/><text x="17.5068%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.33%)</title><rect x="17.2568%" y="837" width="0.3305%" height="15" fill="rgb(235,218,49)" fg:x="1462" fg:w="28"/><text x="17.5068%" y="847.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.33%)</title><rect x="17.2568%" y="821" width="0.3305%" height="15" fill="rgb(217,114,14)" fg:x="1462" fg:w="28"/><text x="17.5068%" y="831.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.33%)</title><rect x="17.2568%" y="805" width="0.3305%" height="15" fill="rgb(216,145,22)" fg:x="1462" fg:w="28"/><text x="17.5068%" y="815.50"></text></g><g><title>tcache_get (3 samples, 0.04%)</title><rect x="17.5519%" y="789" width="0.0354%" height="15" fill="rgb(217,112,39)" fg:x="1487" fg:w="3"/><text x="17.8019%" y="799.50"></text></g><g><title>tcache_get_n (3 samples, 0.04%)</title><rect x="17.5519%" y="773" width="0.0354%" height="15" fill="rgb(225,85,32)" fg:x="1487" fg:w="3"/><text x="17.8019%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="17.5873%" y="917" width="0.0236%" height="15" fill="rgb(245,209,47)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="17.5873%" y="901" width="0.0236%" height="15" fill="rgb(218,220,15)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="17.5873%" y="885" width="0.0236%" height="15" fill="rgb(222,202,31)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="17.5873%" y="869" width="0.0236%" height="15" fill="rgb(243,203,4)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="17.5873%" y="853" width="0.0236%" height="15" fill="rgb(237,92,17)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="17.5873%" y="837" width="0.0236%" height="15" fill="rgb(231,119,7)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="847.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="17.5873%" y="821" width="0.0236%" height="15" fill="rgb(237,82,41)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="831.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="17.5873%" y="805" width="0.0236%" height="15" fill="rgb(226,81,48)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="815.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="17.5873%" y="789" width="0.0236%" height="15" fill="rgb(234,70,51)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="799.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="17.5873%" y="773" width="0.0236%" height="15" fill="rgb(251,86,4)" fg:x="1490" fg:w="2"/><text x="17.8373%" y="783.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (74 samples, 0.87%)</title><rect x="16.7611%" y="1013" width="0.8735%" height="15" fill="rgb(244,144,28)" fg:x="1420" fg:w="74"/><text x="17.0111%" y="1023.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (74 samples, 0.87%)</title><rect x="16.7611%" y="997" width="0.8735%" height="15" fill="rgb(232,161,39)" fg:x="1420" fg:w="74"/><text x="17.0111%" y="1007.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (71 samples, 0.84%)</title><rect x="16.7965%" y="981" width="0.8381%" height="15" fill="rgb(247,34,51)" fg:x="1423" fg:w="71"/><text x="17.0465%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (71 samples, 0.84%)</title><rect x="16.7965%" y="965" width="0.8381%" height="15" fill="rgb(225,132,2)" fg:x="1423" fg:w="71"/><text x="17.0465%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (71 samples, 0.84%)</title><rect x="16.7965%" y="949" width="0.8381%" height="15" fill="rgb(209,159,44)" fg:x="1423" fg:w="71"/><text x="17.0465%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (62 samples, 0.73%)</title><rect x="16.9027%" y="933" width="0.7318%" height="15" fill="rgb(251,214,1)" fg:x="1432" fg:w="62"/><text x="17.1527%" y="943.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="17.6110%" y="917" width="0.0236%" height="15" fill="rgb(247,84,47)" fg:x="1492" fg:w="2"/><text x="17.8610%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="17.6228%" y="901" width="0.0118%" height="15" fill="rgb(240,111,43)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="17.6228%" y="885" width="0.0118%" height="15" fill="rgb(215,214,35)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="17.6228%" y="869" width="0.0118%" height="15" fill="rgb(248,207,23)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="17.6228%" y="853" width="0.0118%" height="15" fill="rgb(214,186,4)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="17.6228%" y="837" width="0.0118%" height="15" fill="rgb(220,133,22)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="847.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="17.6228%" y="821" width="0.0118%" height="15" fill="rgb(239,134,19)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="831.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="17.6228%" y="805" width="0.0118%" height="15" fill="rgb(250,140,9)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="17.6228%" y="789" width="0.0118%" height="15" fill="rgb(225,59,14)" fg:x="1493" fg:w="1"/><text x="17.8728%" y="799.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="17.6464%" y="981" width="0.0118%" height="15" fill="rgb(214,152,51)" fg:x="1495" fg:w="1"/><text x="17.8964%" y="991.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="17.6464%" y="965" width="0.0118%" height="15" fill="rgb(251,227,43)" fg:x="1495" fg:w="1"/><text x="17.8964%" y="975.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.6700%" y="821" width="0.0236%" height="15" fill="rgb(241,96,17)" fg:x="1497" fg:w="2"/><text x="17.9200%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.6700%" y="805" width="0.0236%" height="15" fill="rgb(234,198,43)" fg:x="1497" fg:w="2"/><text x="17.9200%" y="815.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.6700%" y="789" width="0.0236%" height="15" fill="rgb(220,108,29)" fg:x="1497" fg:w="2"/><text x="17.9200%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.6700%" y="773" width="0.0236%" height="15" fill="rgb(226,163,33)" fg:x="1497" fg:w="2"/><text x="17.9200%" y="783.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="17.6818%" y="757" width="0.0118%" height="15" fill="rgb(205,194,45)" fg:x="1498" fg:w="1"/><text x="17.9318%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="17.6818%" y="741" width="0.0118%" height="15" fill="rgb(206,143,44)" fg:x="1498" fg:w="1"/><text x="17.9318%" y="751.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.7408%" y="741" width="0.0590%" height="15" fill="rgb(236,136,36)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.7408%" y="725" width="0.0590%" height="15" fill="rgb(249,172,42)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="17.7408%" y="709" width="0.0590%" height="15" fill="rgb(216,139,23)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="17.7408%" y="693" width="0.0590%" height="15" fill="rgb(207,166,20)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="17.7408%" y="677" width="0.0590%" height="15" fill="rgb(210,209,22)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="17.7408%" y="661" width="0.0590%" height="15" fill="rgb(232,118,20)" fg:x="1503" fg:w="5"/><text x="17.9908%" y="671.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="17.7526%" y="645" width="0.0472%" height="15" fill="rgb(238,113,42)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="655.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="17.7526%" y="629" width="0.0472%" height="15" fill="rgb(231,42,5)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="17.7526%" y="613" width="0.0472%" height="15" fill="rgb(243,166,24)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="17.7526%" y="597" width="0.0472%" height="15" fill="rgb(237,226,12)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="607.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="17.7526%" y="581" width="0.0472%" height="15" fill="rgb(229,133,24)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="591.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="17.7526%" y="565" width="0.0472%" height="15" fill="rgb(238,33,43)" fg:x="1504" fg:w="4"/><text x="18.0026%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.04%)</title><rect x="17.8588%" y="645" width="0.0354%" height="15" fill="rgb(227,59,38)" fg:x="1513" fg:w="3"/><text x="18.1088%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.06%)</title><rect x="17.8470%" y="661" width="0.0590%" height="15" fill="rgb(230,97,0)" fg:x="1512" fg:w="5"/><text x="18.0970%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="17.8942%" y="645" width="0.0118%" height="15" fill="rgb(250,173,50)" fg:x="1516" fg:w="1"/><text x="18.1442%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="17.9297%" y="645" width="0.0236%" height="15" fill="rgb(240,15,50)" fg:x="1519" fg:w="2"/><text x="18.1797%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.15%)</title><rect x="17.8116%" y="709" width="0.1534%" height="15" fill="rgb(221,93,22)" fg:x="1509" fg:w="13"/><text x="18.0616%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.15%)</title><rect x="17.8116%" y="693" width="0.1534%" height="15" fill="rgb(245,180,53)" fg:x="1509" fg:w="13"/><text x="18.0616%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.15%)</title><rect x="17.8116%" y="677" width="0.1534%" height="15" fill="rgb(231,88,51)" fg:x="1509" fg:w="13"/><text x="18.0616%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.06%)</title><rect x="17.9060%" y="661" width="0.0590%" height="15" fill="rgb(240,58,21)" fg:x="1517" fg:w="5"/><text x="18.1560%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="17.9533%" y="645" width="0.0118%" height="15" fill="rgb(237,21,10)" fg:x="1521" fg:w="1"/><text x="18.2033%" y="655.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.06%)</title><rect x="17.9651%" y="709" width="0.0590%" height="15" fill="rgb(218,43,11)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.9651%" y="693" width="0.0590%" height="15" fill="rgb(218,221,29)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="17.9651%" y="677" width="0.0590%" height="15" fill="rgb(214,118,42)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="17.9651%" y="661" width="0.0590%" height="15" fill="rgb(251,200,26)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="17.9651%" y="645" width="0.0590%" height="15" fill="rgb(237,101,39)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="17.9651%" y="629" width="0.0590%" height="15" fill="rgb(251,117,11)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="17.9651%" y="613" width="0.0590%" height="15" fill="rgb(216,223,23)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="623.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="17.9651%" y="597" width="0.0590%" height="15" fill="rgb(251,54,12)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="17.9651%" y="581" width="0.0590%" height="15" fill="rgb(254,176,54)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="17.9651%" y="565" width="0.0590%" height="15" fill="rgb(210,32,8)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="17.9651%" y="549" width="0.0590%" height="15" fill="rgb(235,52,38)" fg:x="1522" fg:w="5"/><text x="18.2151%" y="559.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="17.9769%" y="533" width="0.0472%" height="15" fill="rgb(231,4,44)" fg:x="1523" fg:w="4"/><text x="18.2269%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="18.0713%" y="549" width="0.0118%" height="15" fill="rgb(249,2,32)" fg:x="1531" fg:w="1"/><text x="18.3213%" y="559.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (7 samples, 0.08%)</title><rect x="18.0241%" y="629" width="0.0826%" height="15" fill="rgb(224,65,26)" fg:x="1527" fg:w="7"/><text x="18.2741%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.08%)</title><rect x="18.0241%" y="613" width="0.0826%" height="15" fill="rgb(250,73,40)" fg:x="1527" fg:w="7"/><text x="18.2741%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="18.0241%" y="597" width="0.0826%" height="15" fill="rgb(253,177,16)" fg:x="1527" fg:w="7"/><text x="18.2741%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="18.0241%" y="581" width="0.0826%" height="15" fill="rgb(217,32,34)" fg:x="1527" fg:w="7"/><text x="18.2741%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="18.0241%" y="565" width="0.0826%" height="15" fill="rgb(212,7,10)" fg:x="1527" fg:w="7"/><text x="18.2741%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="18.0831%" y="549" width="0.0236%" height="15" fill="rgb(245,89,8)" fg:x="1532" fg:w="2"/><text x="18.3331%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="18.2011%" y="565" width="0.0354%" height="15" fill="rgb(237,16,53)" fg:x="1542" fg:w="3"/><text x="18.4511%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (42 samples, 0.50%)</title><rect x="17.7998%" y="741" width="0.4958%" height="15" fill="rgb(250,204,30)" fg:x="1508" fg:w="42"/><text x="18.0498%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (42 samples, 0.50%)</title><rect x="17.7998%" y="725" width="0.4958%" height="15" fill="rgb(208,77,27)" fg:x="1508" fg:w="42"/><text x="18.0498%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (23 samples, 0.27%)</title><rect x="18.0241%" y="709" width="0.2715%" height="15" fill="rgb(250,204,28)" fg:x="1527" fg:w="23"/><text x="18.2741%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (23 samples, 0.27%)</title><rect x="18.0241%" y="693" width="0.2715%" height="15" fill="rgb(244,63,21)" fg:x="1527" fg:w="23"/><text x="18.2741%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (23 samples, 0.27%)</title><rect x="18.0241%" y="677" width="0.2715%" height="15" fill="rgb(236,85,44)" fg:x="1527" fg:w="23"/><text x="18.2741%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (23 samples, 0.27%)</title><rect x="18.0241%" y="661" width="0.2715%" height="15" fill="rgb(215,98,4)" fg:x="1527" fg:w="23"/><text x="18.2741%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (23 samples, 0.27%)</title><rect x="18.0241%" y="645" width="0.2715%" height="15" fill="rgb(235,38,11)" fg:x="1527" fg:w="23"/><text x="18.2741%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (16 samples, 0.19%)</title><rect x="18.1067%" y="629" width="0.1889%" height="15" fill="rgb(254,186,25)" fg:x="1534" fg:w="16"/><text x="18.3567%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="18.1067%" y="613" width="0.1889%" height="15" fill="rgb(225,55,31)" fg:x="1534" fg:w="16"/><text x="18.3567%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="18.1067%" y="597" width="0.1889%" height="15" fill="rgb(211,15,21)" fg:x="1534" fg:w="16"/><text x="18.3567%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="18.1067%" y="581" width="0.1889%" height="15" fill="rgb(215,187,41)" fg:x="1534" fg:w="16"/><text x="18.3567%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.06%)</title><rect x="18.2365%" y="565" width="0.0590%" height="15" fill="rgb(248,69,32)" fg:x="1545" fg:w="5"/><text x="18.4865%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="18.3192%" y="709" width="0.0236%" height="15" fill="rgb(252,102,52)" fg:x="1552" fg:w="2"/><text x="18.5692%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.06%)</title><rect x="18.2956%" y="741" width="0.0590%" height="15" fill="rgb(253,140,32)" fg:x="1550" fg:w="5"/><text x="18.5456%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.05%)</title><rect x="18.3074%" y="725" width="0.0472%" height="15" fill="rgb(216,56,42)" fg:x="1551" fg:w="4"/><text x="18.5574%" y="735.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="18.3428%" y="709" width="0.0118%" height="15" fill="rgb(216,184,14)" fg:x="1554" fg:w="1"/><text x="18.5928%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 0.70%)</title><rect x="17.6700%" y="885" width="0.6964%" height="15" fill="rgb(237,187,27)" fg:x="1497" fg:w="59"/><text x="17.9200%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.70%)</title><rect x="17.6700%" y="869" width="0.6964%" height="15" fill="rgb(219,65,3)" fg:x="1497" fg:w="59"/><text x="17.9200%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.70%)</title><rect x="17.6700%" y="853" width="0.6964%" height="15" fill="rgb(245,83,25)" fg:x="1497" fg:w="59"/><text x="17.9200%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (59 samples, 0.70%)</title><rect x="17.6700%" y="837" width="0.6964%" height="15" fill="rgb(214,205,45)" fg:x="1497" fg:w="59"/><text x="17.9200%" y="847.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (57 samples, 0.67%)</title><rect x="17.6936%" y="821" width="0.6728%" height="15" fill="rgb(241,20,18)" fg:x="1499" fg:w="57"/><text x="17.9436%" y="831.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (57 samples, 0.67%)</title><rect x="17.6936%" y="805" width="0.6728%" height="15" fill="rgb(232,163,23)" fg:x="1499" fg:w="57"/><text x="17.9436%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (55 samples, 0.65%)</title><rect x="17.7172%" y="789" width="0.6492%" height="15" fill="rgb(214,5,46)" fg:x="1501" fg:w="55"/><text x="17.9672%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (55 samples, 0.65%)</title><rect x="17.7172%" y="773" width="0.6492%" height="15" fill="rgb(229,78,17)" fg:x="1501" fg:w="55"/><text x="17.9672%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (55 samples, 0.65%)</title><rect x="17.7172%" y="757" width="0.6492%" height="15" fill="rgb(248,89,10)" fg:x="1501" fg:w="55"/><text x="17.9672%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.01%)</title><rect x="18.3546%" y="741" width="0.0118%" height="15" fill="rgb(248,54,15)" fg:x="1555" fg:w="1"/><text x="18.6046%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.01%)</title><rect x="18.3546%" y="725" width="0.0118%" height="15" fill="rgb(223,116,6)" fg:x="1555" fg:w="1"/><text x="18.6046%" y="735.50"></text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.01%)</title><rect x="18.3546%" y="709" width="0.0118%" height="15" fill="rgb(205,125,38)" fg:x="1555" fg:w="1"/><text x="18.6046%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="18.3782%" y="805" width="0.0118%" height="15" fill="rgb(251,78,38)" fg:x="1557" fg:w="1"/><text x="18.6282%" y="815.50"></text></g><g><title>core::mem::swap (1 samples, 0.01%)</title><rect x="18.3900%" y="805" width="0.0118%" height="15" fill="rgb(253,78,28)" fg:x="1558" fg:w="1"/><text x="18.6400%" y="815.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.01%)</title><rect x="18.3900%" y="789" width="0.0118%" height="15" fill="rgb(209,120,3)" fg:x="1558" fg:w="1"/><text x="18.6400%" y="799.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="18.3900%" y="773" width="0.0118%" height="15" fill="rgb(238,229,9)" fg:x="1558" fg:w="1"/><text x="18.6400%" y="783.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="18.4018%" y="757" width="0.0118%" height="15" fill="rgb(253,159,18)" fg:x="1559" fg:w="1"/><text x="18.6518%" y="767.50"></text></g><g><title>malloc_consolidate (3 samples, 0.04%)</title><rect x="18.4490%" y="661" width="0.0354%" height="15" fill="rgb(244,42,34)" fg:x="1563" fg:w="3"/><text x="18.6990%" y="671.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.01%)</title><rect x="18.4962%" y="645" width="0.0118%" height="15" fill="rgb(224,8,7)" fg:x="1567" fg:w="1"/><text x="18.7462%" y="655.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="18.5080%" y="597" width="0.0118%" height="15" fill="rgb(210,201,45)" fg:x="1568" fg:w="1"/><text x="18.7580%" y="607.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="18.5552%" y="533" width="0.0118%" height="15" fill="rgb(252,185,21)" fg:x="1572" fg:w="1"/><text x="18.8052%" y="543.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="18.5552%" y="517" width="0.0118%" height="15" fill="rgb(223,131,1)" fg:x="1572" fg:w="1"/><text x="18.8052%" y="527.50"></text></g><g><title>charge_memcg (5 samples, 0.06%)</title><rect x="18.5670%" y="517" width="0.0590%" height="15" fill="rgb(245,141,16)" fg:x="1573" fg:w="5"/><text x="18.8170%" y="527.50"></text></g><g><title>__count_memcg_events (3 samples, 0.04%)</title><rect x="18.5907%" y="501" width="0.0354%" height="15" fill="rgb(229,55,45)" fg:x="1575" fg:w="3"/><text x="18.8407%" y="511.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.04%)</title><rect x="18.5907%" y="485" width="0.0354%" height="15" fill="rgb(208,92,15)" fg:x="1575" fg:w="3"/><text x="18.8407%" y="495.50"></text></g><g><title>__mem_cgroup_charge (10 samples, 0.12%)</title><rect x="18.5670%" y="533" width="0.1180%" height="15" fill="rgb(234,185,47)" fg:x="1573" fg:w="10"/><text x="18.8170%" y="543.50"></text></g><g><title>get_mem_cgroup_from_mm (5 samples, 0.06%)</title><rect x="18.6261%" y="517" width="0.0590%" height="15" fill="rgb(253,104,50)" fg:x="1578" fg:w="5"/><text x="18.8761%" y="527.50"></text></g><g><title>__pte_alloc (1 samples, 0.01%)</title><rect x="18.6851%" y="533" width="0.0118%" height="15" fill="rgb(205,70,7)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="543.50"></text></g><g><title>pte_alloc_one (1 samples, 0.01%)</title><rect x="18.6851%" y="517" width="0.0118%" height="15" fill="rgb(240,178,43)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="527.50"></text></g><g><title>alloc_pages (1 samples, 0.01%)</title><rect x="18.6851%" y="501" width="0.0118%" height="15" fill="rgb(214,112,2)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="511.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="18.6851%" y="485" width="0.0118%" height="15" fill="rgb(206,46,17)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="495.50"></text></g><g><title>__memcg_kmem_charge_page (1 samples, 0.01%)</title><rect x="18.6851%" y="469" width="0.0118%" height="15" fill="rgb(225,220,16)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="479.50"></text></g><g><title>__get_obj_cgroup_from_memcg (1 samples, 0.01%)</title><rect x="18.6851%" y="453" width="0.0118%" height="15" fill="rgb(238,65,40)" fg:x="1583" fg:w="1"/><text x="18.9351%" y="463.50"></text></g><g><title>lru_add_fn (3 samples, 0.04%)</title><rect x="18.7205%" y="485" width="0.0354%" height="15" fill="rgb(230,151,21)" fg:x="1586" fg:w="3"/><text x="18.9705%" y="495.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="18.7323%" y="469" width="0.0236%" height="15" fill="rgb(218,58,49)" fg:x="1587" fg:w="2"/><text x="18.9823%" y="479.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="18.7441%" y="453" width="0.0118%" height="15" fill="rgb(219,179,14)" fg:x="1588" fg:w="1"/><text x="18.9941%" y="463.50"></text></g><g><title>folio_add_lru_vma (6 samples, 0.07%)</title><rect x="18.6969%" y="533" width="0.0708%" height="15" fill="rgb(223,72,1)" fg:x="1584" fg:w="6"/><text x="18.9469%" y="543.50"></text></g><g><title>folio_add_lru (6 samples, 0.07%)</title><rect x="18.6969%" y="517" width="0.0708%" height="15" fill="rgb(238,126,10)" fg:x="1584" fg:w="6"/><text x="18.9469%" y="527.50"></text></g><g><title>folio_batch_move_lru (5 samples, 0.06%)</title><rect x="18.7087%" y="501" width="0.0590%" height="15" fill="rgb(224,206,38)" fg:x="1585" fg:w="5"/><text x="18.9587%" y="511.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="18.7559%" y="485" width="0.0118%" height="15" fill="rgb(212,201,54)" fg:x="1589" fg:w="1"/><text x="19.0059%" y="495.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="18.7677%" y="533" width="0.0118%" height="15" fill="rgb(218,154,48)" fg:x="1590" fg:w="1"/><text x="19.0177%" y="543.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="18.7795%" y="533" width="0.0118%" height="15" fill="rgb(232,93,24)" fg:x="1591" fg:w="1"/><text x="19.0295%" y="543.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.01%)</title><rect x="18.7913%" y="485" width="0.0118%" height="15" fill="rgb(245,30,21)" fg:x="1592" fg:w="1"/><text x="19.0413%" y="495.50"></text></g><g><title>exc_page_fault (26 samples, 0.31%)</title><rect x="18.5080%" y="629" width="0.3069%" height="15" fill="rgb(242,148,29)" fg:x="1568" fg:w="26"/><text x="18.7580%" y="639.50"></text></g><g><title>do_user_addr_fault (26 samples, 0.31%)</title><rect x="18.5080%" y="613" width="0.3069%" height="15" fill="rgb(244,153,54)" fg:x="1568" fg:w="26"/><text x="18.7580%" y="623.50"></text></g><g><title>handle_mm_fault (25 samples, 0.30%)</title><rect x="18.5198%" y="597" width="0.2951%" height="15" fill="rgb(252,87,22)" fg:x="1569" fg:w="25"/><text x="18.7698%" y="607.50"></text></g><g><title>__handle_mm_fault (25 samples, 0.30%)</title><rect x="18.5198%" y="581" width="0.2951%" height="15" fill="rgb(210,51,29)" fg:x="1569" fg:w="25"/><text x="18.7698%" y="591.50"></text></g><g><title>handle_pte_fault (25 samples, 0.30%)</title><rect x="18.5198%" y="565" width="0.2951%" height="15" fill="rgb(242,136,47)" fg:x="1569" fg:w="25"/><text x="18.7698%" y="575.50"></text></g><g><title>do_anonymous_page (25 samples, 0.30%)</title><rect x="18.5198%" y="549" width="0.2951%" height="15" fill="rgb(238,68,4)" fg:x="1569" fg:w="25"/><text x="18.7698%" y="559.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="18.7913%" y="533" width="0.0236%" height="15" fill="rgb(242,161,30)" fg:x="1592" fg:w="2"/><text x="19.0413%" y="543.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="18.7913%" y="517" width="0.0236%" height="15" fill="rgb(218,58,44)" fg:x="1592" fg:w="2"/><text x="19.0413%" y="527.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="18.7913%" y="501" width="0.0236%" height="15" fill="rgb(252,125,32)" fg:x="1592" fg:w="2"/><text x="19.0413%" y="511.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="18.8031%" y="485" width="0.0118%" height="15" fill="rgb(219,178,0)" fg:x="1593" fg:w="1"/><text x="19.0531%" y="495.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="18.8031%" y="469" width="0.0118%" height="15" fill="rgb(213,152,7)" fg:x="1593" fg:w="1"/><text x="19.0531%" y="479.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="18.8031%" y="453" width="0.0118%" height="15" fill="rgb(249,109,34)" fg:x="1593" fg:w="1"/><text x="19.0531%" y="463.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="18.8031%" y="437" width="0.0118%" height="15" fill="rgb(232,96,21)" fg:x="1593" fg:w="1"/><text x="19.0531%" y="447.50"></text></g><g><title>asm_exc_page_fault (27 samples, 0.32%)</title><rect x="18.5080%" y="645" width="0.3187%" height="15" fill="rgb(228,27,39)" fg:x="1568" fg:w="27"/><text x="18.7580%" y="655.50"></text></g><g><title>irqentry_enter (1 samples, 0.01%)</title><rect x="18.8149%" y="629" width="0.0118%" height="15" fill="rgb(211,182,52)" fg:x="1594" fg:w="1"/><text x="19.0649%" y="639.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="18.8267%" y="613" width="0.0118%" height="15" fill="rgb(234,178,38)" fg:x="1595" fg:w="1"/><text x="19.0767%" y="623.50"></text></g><g><title>__arch_override_mprotect_pkey (1 samples, 0.01%)</title><rect x="18.8503%" y="549" width="0.0118%" height="15" fill="rgb(221,111,3)" fg:x="1597" fg:w="1"/><text x="19.1003%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="21.6360%" y="485" width="0.0118%" height="15" fill="rgb(228,175,21)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="21.6360%" y="469" width="0.0118%" height="15" fill="rgb(228,174,43)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="21.6360%" y="453" width="0.0118%" height="15" fill="rgb(211,191,0)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="21.6360%" y="437" width="0.0118%" height="15" fill="rgb(253,117,3)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="21.6360%" y="421" width="0.0118%" height="15" fill="rgb(241,127,19)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="431.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="21.6360%" y="405" width="0.0118%" height="15" fill="rgb(218,103,12)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="415.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="21.6360%" y="389" width="0.0118%" height="15" fill="rgb(236,214,43)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="399.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="21.6360%" y="373" width="0.0118%" height="15" fill="rgb(244,144,19)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="383.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="21.6360%" y="357" width="0.0118%" height="15" fill="rgb(246,188,10)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="367.50"></text></g><g><title>task_tick_fair (1 samples, 0.01%)</title><rect x="21.6360%" y="341" width="0.0118%" height="15" fill="rgb(212,193,33)" fg:x="1833" fg:w="1"/><text x="21.8860%" y="351.50"></text></g><g><title>osq_lock (232 samples, 2.74%)</title><rect x="18.9212%" y="501" width="2.7384%" height="15" fill="rgb(241,51,29)" fg:x="1603" fg:w="232"/><text x="19.1712%" y="511.50">os..</text></g><g><title>asm_sysvec_call_function (1 samples, 0.01%)</title><rect x="21.6478%" y="485" width="0.0118%" height="15" fill="rgb(211,58,19)" fg:x="1834" fg:w="1"/><text x="21.8978%" y="495.50"></text></g><g><title>sysvec_call_function (1 samples, 0.01%)</title><rect x="21.6478%" y="469" width="0.0118%" height="15" fill="rgb(229,111,26)" fg:x="1834" fg:w="1"/><text x="21.8978%" y="479.50"></text></g><g><title>__sysvec_call_function (1 samples, 0.01%)</title><rect x="21.6478%" y="453" width="0.0118%" height="15" fill="rgb(213,115,40)" fg:x="1834" fg:w="1"/><text x="21.8978%" y="463.50"></text></g><g><title>generic_smp_call_function_single_interrupt (1 samples, 0.01%)</title><rect x="21.6478%" y="437" width="0.0118%" height="15" fill="rgb(209,56,44)" fg:x="1834" fg:w="1"/><text x="21.8978%" y="447.50"></text></g><g><title>llist_reverse_order (1 samples, 0.01%)</title><rect x="21.6478%" y="421" width="0.0118%" height="15" fill="rgb(230,108,32)" fg:x="1834" fg:w="1"/><text x="21.8978%" y="431.50"></text></g><g><title>osq_unlock (1 samples, 0.01%)</title><rect x="21.6596%" y="501" width="0.0118%" height="15" fill="rgb(216,165,31)" fg:x="1835" fg:w="1"/><text x="21.9096%" y="511.50"></text></g><g><title>rwsem_optimistic_spin (277 samples, 3.27%)</title><rect x="18.9093%" y="517" width="3.2696%" height="15" fill="rgb(218,122,21)" fg:x="1602" fg:w="277"/><text x="19.1593%" y="527.50">rws..</text></g><g><title>rwsem_spin_on_owner (43 samples, 0.51%)</title><rect x="21.6714%" y="501" width="0.5076%" height="15" fill="rgb(223,224,47)" fg:x="1836" fg:w="43"/><text x="21.9214%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="22.1671%" y="485" width="0.0118%" height="15" fill="rgb(238,102,44)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="22.1671%" y="469" width="0.0118%" height="15" fill="rgb(236,46,40)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="22.1671%" y="453" width="0.0118%" height="15" fill="rgb(247,202,50)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="22.1671%" y="437" width="0.0118%" height="15" fill="rgb(209,99,20)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="22.1671%" y="421" width="0.0118%" height="15" fill="rgb(252,27,34)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="431.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="22.1671%" y="405" width="0.0118%" height="15" fill="rgb(215,206,23)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="415.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="22.1671%" y="389" width="0.0118%" height="15" fill="rgb(212,135,36)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="399.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="22.1671%" y="373" width="0.0118%" height="15" fill="rgb(240,189,1)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="383.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="22.1671%" y="357" width="0.0118%" height="15" fill="rgb(242,56,20)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="367.50"></text></g><g><title>task_tick_fair (1 samples, 0.01%)</title><rect x="22.1671%" y="341" width="0.0118%" height="15" fill="rgb(247,132,33)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="351.50"></text></g><g><title>update_curr (1 samples, 0.01%)</title><rect x="22.1671%" y="325" width="0.0118%" height="15" fill="rgb(208,149,11)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="335.50"></text></g><g><title>__calc_delta (1 samples, 0.01%)</title><rect x="22.1671%" y="309" width="0.0118%" height="15" fill="rgb(211,33,11)" fg:x="1878" fg:w="1"/><text x="22.4171%" y="319.50"></text></g><g><title>rwsem_spin_on_owner (2 samples, 0.02%)</title><rect x="22.1789%" y="517" width="0.0236%" height="15" fill="rgb(221,29,38)" fg:x="1879" fg:w="2"/><text x="22.4289%" y="527.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="22.2144%" y="469" width="0.0236%" height="15" fill="rgb(206,182,49)" fg:x="1882" fg:w="2"/><text x="22.4644%" y="479.50"></text></g><g><title>perf_ctx_enable (24 samples, 0.28%)</title><rect x="22.2616%" y="437" width="0.2833%" height="15" fill="rgb(216,140,1)" fg:x="1886" fg:w="24"/><text x="22.5116%" y="447.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="22.4858%" y="421" width="0.0590%" height="15" fill="rgb(232,57,40)" fg:x="1905" fg:w="5"/><text x="22.7358%" y="431.50"></text></g><g><title>perf_pmu_nop_void (13 samples, 0.15%)</title><rect x="22.5449%" y="437" width="0.1534%" height="15" fill="rgb(224,186,18)" fg:x="1910" fg:w="13"/><text x="22.7949%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (42 samples, 0.50%)</title><rect x="22.2498%" y="453" width="0.4958%" height="15" fill="rgb(215,121,11)" fg:x="1885" fg:w="42"/><text x="22.4998%" y="463.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="22.6983%" y="437" width="0.0472%" height="15" fill="rgb(245,147,10)" fg:x="1923" fg:w="4"/><text x="22.9483%" y="447.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="22.7455%" y="453" width="0.0472%" height="15" fill="rgb(238,153,13)" fg:x="1927" fg:w="4"/><text x="22.9955%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (48 samples, 0.57%)</title><rect x="22.2380%" y="469" width="0.5666%" height="15" fill="rgb(233,108,0)" fg:x="1884" fg:w="48"/><text x="22.4880%" y="479.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="22.7927%" y="453" width="0.0118%" height="15" fill="rgb(212,157,17)" fg:x="1931" fg:w="1"/><text x="23.0427%" y="463.50"></text></g><g><title>irqentry_enter (1 samples, 0.01%)</title><rect x="22.7927%" y="437" width="0.0118%" height="15" fill="rgb(225,213,38)" fg:x="1931" fg:w="1"/><text x="23.0427%" y="447.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="22.8045%" y="469" width="0.0118%" height="15" fill="rgb(248,16,11)" fg:x="1932" fg:w="1"/><text x="23.0545%" y="479.50"></text></g><g><title>put_prev_task_fair (1 samples, 0.01%)</title><rect x="22.8045%" y="453" width="0.0118%" height="15" fill="rgb(241,33,4)" fg:x="1932" fg:w="1"/><text x="23.0545%" y="463.50"></text></g><g><title>put_prev_entity (1 samples, 0.01%)</title><rect x="22.8045%" y="437" width="0.0118%" height="15" fill="rgb(222,26,43)" fg:x="1932" fg:w="1"/><text x="23.0545%" y="447.50"></text></g><g><title>down_write_killable (336 samples, 3.97%)</title><rect x="18.8621%" y="549" width="3.9660%" height="15" fill="rgb(243,29,36)" fg:x="1598" fg:w="336"/><text x="19.1121%" y="559.50">down..</text></g><g><title>rwsem_down_write_slowpath (334 samples, 3.94%)</title><rect x="18.8857%" y="533" width="3.9424%" height="15" fill="rgb(241,9,27)" fg:x="1600" fg:w="334"/><text x="19.1357%" y="543.50">rwse..</text></g><g><title>schedule_preempt_disabled (53 samples, 0.63%)</title><rect x="22.2025%" y="517" width="0.6256%" height="15" fill="rgb(205,117,26)" fg:x="1881" fg:w="53"/><text x="22.4525%" y="527.50"></text></g><g><title>schedule (53 samples, 0.63%)</title><rect x="22.2025%" y="501" width="0.6256%" height="15" fill="rgb(209,80,39)" fg:x="1881" fg:w="53"/><text x="22.4525%" y="511.50"></text></g><g><title>__schedule (53 samples, 0.63%)</title><rect x="22.2025%" y="485" width="0.6256%" height="15" fill="rgb(239,155,6)" fg:x="1881" fg:w="53"/><text x="22.4525%" y="495.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="22.8163%" y="469" width="0.0118%" height="15" fill="rgb(212,104,12)" fg:x="1933" fg:w="1"/><text x="23.0663%" y="479.50"></text></g><g><title>psi_group_change (1 samples, 0.01%)</title><rect x="22.8163%" y="453" width="0.0118%" height="15" fill="rgb(234,204,3)" fg:x="1933" fg:w="1"/><text x="23.0663%" y="463.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="22.8281%" y="533" width="0.0236%" height="15" fill="rgb(251,218,7)" fg:x="1934" fg:w="2"/><text x="23.0781%" y="543.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="22.8399%" y="517" width="0.0118%" height="15" fill="rgb(221,81,32)" fg:x="1935" fg:w="1"/><text x="23.0899%" y="527.50"></text></g><g><title>mas_find (3 samples, 0.04%)</title><rect x="22.8281%" y="549" width="0.0354%" height="15" fill="rgb(214,152,26)" fg:x="1934" fg:w="3"/><text x="23.0781%" y="559.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="22.8517%" y="533" width="0.0118%" height="15" fill="rgb(223,22,3)" fg:x="1936" fg:w="1"/><text x="23.1017%" y="543.50"></text></g><g><title>__cond_resched (5 samples, 0.06%)</title><rect x="22.8636%" y="469" width="0.0590%" height="15" fill="rgb(207,174,7)" fg:x="1937" fg:w="5"/><text x="23.1136%" y="479.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="22.8636%" y="453" width="0.0590%" height="15" fill="rgb(224,19,52)" fg:x="1937" fg:w="5"/><text x="23.1136%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="22.8636%" y="437" width="0.0590%" height="15" fill="rgb(228,24,14)" fg:x="1937" fg:w="5"/><text x="23.1136%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="22.8636%" y="421" width="0.0590%" height="15" fill="rgb(230,153,43)" fg:x="1937" fg:w="5"/><text x="23.1136%" y="431.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="22.8636%" y="405" width="0.0590%" height="15" fill="rgb(231,106,12)" fg:x="1937" fg:w="5"/><text x="23.1136%" y="415.50"></text></g><g><title>change_protection (6 samples, 0.07%)</title><rect x="22.8636%" y="533" width="0.0708%" height="15" fill="rgb(215,92,2)" fg:x="1937" fg:w="6"/><text x="23.1136%" y="543.50"></text></g><g><title>change_protection_range (6 samples, 0.07%)</title><rect x="22.8636%" y="517" width="0.0708%" height="15" fill="rgb(249,143,25)" fg:x="1937" fg:w="6"/><text x="23.1136%" y="527.50"></text></g><g><title>change_p4d_range (6 samples, 0.07%)</title><rect x="22.8636%" y="501" width="0.0708%" height="15" fill="rgb(252,7,35)" fg:x="1937" fg:w="6"/><text x="23.1136%" y="511.50"></text></g><g><title>change_pmd_range.isra.0 (6 samples, 0.07%)</title><rect x="22.8636%" y="485" width="0.0708%" height="15" fill="rgb(216,69,40)" fg:x="1937" fg:w="6"/><text x="23.1136%" y="495.50"></text></g><g><title>change_pte_range (1 samples, 0.01%)</title><rect x="22.9226%" y="469" width="0.0118%" height="15" fill="rgb(240,36,33)" fg:x="1942" fg:w="1"/><text x="23.1726%" y="479.50"></text></g><g><title>may_expand_vm (1 samples, 0.01%)</title><rect x="22.9344%" y="533" width="0.0118%" height="15" fill="rgb(231,128,14)" fg:x="1943" fg:w="1"/><text x="23.1844%" y="543.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="22.9462%" y="501" width="0.0118%" height="15" fill="rgb(245,143,14)" fg:x="1944" fg:w="1"/><text x="23.1962%" y="511.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.01%)</title><rect x="23.0996%" y="469" width="0.0118%" height="15" fill="rgb(222,130,28)" fg:x="1957" fg:w="1"/><text x="23.3496%" y="479.50"></text></g><g><title>__output_copy (1 samples, 0.01%)</title><rect x="23.1350%" y="437" width="0.0118%" height="15" fill="rgb(212,10,48)" fg:x="1960" fg:w="1"/><text x="23.3850%" y="447.50"></text></g><g><title>__perf_event__output_id_sample (2 samples, 0.02%)</title><rect x="23.1350%" y="453" width="0.0236%" height="15" fill="rgb(254,118,45)" fg:x="1960" fg:w="2"/><text x="23.3850%" y="463.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="23.1468%" y="437" width="0.0118%" height="15" fill="rgb(228,6,45)" fg:x="1961" fg:w="1"/><text x="23.3968%" y="447.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="23.1468%" y="421" width="0.0118%" height="15" fill="rgb(241,18,35)" fg:x="1961" fg:w="1"/><text x="23.3968%" y="431.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="23.1586%" y="453" width="0.0118%" height="15" fill="rgb(227,214,53)" fg:x="1962" fg:w="1"/><text x="23.4086%" y="463.50"></text></g><g><title>perf_event_mmap (20 samples, 0.24%)</title><rect x="22.9462%" y="533" width="0.2361%" height="15" fill="rgb(224,107,51)" fg:x="1944" fg:w="20"/><text x="23.1962%" y="543.50"></text></g><g><title>perf_event_mmap_event (20 samples, 0.24%)</title><rect x="22.9462%" y="517" width="0.2361%" height="15" fill="rgb(248,60,28)" fg:x="1944" fg:w="20"/><text x="23.1962%" y="527.50"></text></g><g><title>perf_iterate_sb.constprop.0 (19 samples, 0.22%)</title><rect x="22.9580%" y="501" width="0.2243%" height="15" fill="rgb(249,101,23)" fg:x="1945" fg:w="19"/><text x="23.2080%" y="511.50"></text></g><g><title>perf_iterate_ctx (18 samples, 0.21%)</title><rect x="22.9698%" y="485" width="0.2125%" height="15" fill="rgb(228,51,19)" fg:x="1946" fg:w="18"/><text x="23.2198%" y="495.50"></text></g><g><title>perf_event_mmap_output (6 samples, 0.07%)</title><rect x="23.1114%" y="469" width="0.0708%" height="15" fill="rgb(213,20,6)" fg:x="1958" fg:w="6"/><text x="23.3614%" y="479.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="23.1704%" y="453" width="0.0118%" height="15" fill="rgb(212,124,10)" fg:x="1963" fg:w="1"/><text x="23.4204%" y="463.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="23.1704%" y="437" width="0.0118%" height="15" fill="rgb(248,3,40)" fg:x="1963" fg:w="1"/><text x="23.4204%" y="447.50"></text></g><g><title>vm_stat_account (1 samples, 0.01%)</title><rect x="23.1822%" y="533" width="0.0118%" height="15" fill="rgb(223,178,23)" fg:x="1964" fg:w="1"/><text x="23.4322%" y="543.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="23.2177%" y="485" width="0.0118%" height="15" fill="rgb(240,132,45)" fg:x="1967" fg:w="1"/><text x="23.4677%" y="495.50"></text></g><g><title>mas_preallocate (4 samples, 0.05%)</title><rect x="23.2059%" y="517" width="0.0472%" height="15" fill="rgb(245,164,36)" fg:x="1966" fg:w="4"/><text x="23.4559%" y="527.50"></text></g><g><title>mas_alloc_nodes (4 samples, 0.05%)</title><rect x="23.2059%" y="501" width="0.0472%" height="15" fill="rgb(231,188,53)" fg:x="1966" fg:w="4"/><text x="23.4559%" y="511.50"></text></g><g><title>kmem_cache_alloc_bulk (2 samples, 0.02%)</title><rect x="23.2295%" y="485" width="0.0236%" height="15" fill="rgb(237,198,39)" fg:x="1968" fg:w="2"/><text x="23.4795%" y="495.50"></text></g><g><title>__kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="23.2413%" y="469" width="0.0118%" height="15" fill="rgb(223,120,35)" fg:x="1969" fg:w="1"/><text x="23.4913%" y="479.50"></text></g><g><title>kmem_cache_free (1 samples, 0.01%)</title><rect x="23.2531%" y="485" width="0.0118%" height="15" fill="rgb(253,107,49)" fg:x="1970" fg:w="1"/><text x="23.5031%" y="495.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="23.2531%" y="469" width="0.0118%" height="15" fill="rgb(216,44,31)" fg:x="1970" fg:w="1"/><text x="23.5031%" y="479.50"></text></g><g><title>mas_destroy (2 samples, 0.02%)</title><rect x="23.2531%" y="501" width="0.0236%" height="15" fill="rgb(253,87,21)" fg:x="1970" fg:w="2"/><text x="23.5031%" y="511.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.01%)</title><rect x="23.2649%" y="485" width="0.0118%" height="15" fill="rgb(226,18,2)" fg:x="1971" fg:w="1"/><text x="23.5149%" y="495.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.01%)</title><rect x="23.2649%" y="469" width="0.0118%" height="15" fill="rgb(216,8,46)" fg:x="1971" fg:w="1"/><text x="23.5149%" y="479.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="23.2649%" y="453" width="0.0118%" height="15" fill="rgb(226,140,39)" fg:x="1971" fg:w="1"/><text x="23.5149%" y="463.50"></text></g><g><title>mas_store_prealloc (3 samples, 0.04%)</title><rect x="23.2531%" y="517" width="0.0354%" height="15" fill="rgb(221,194,54)" fg:x="1970" fg:w="3"/><text x="23.5031%" y="527.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="23.2767%" y="501" width="0.0118%" height="15" fill="rgb(213,92,11)" fg:x="1972" fg:w="1"/><text x="23.5267%" y="511.50"></text></g><g><title>mas_wr_spanning_store.isra.0 (1 samples, 0.01%)</title><rect x="23.2767%" y="485" width="0.0118%" height="15" fill="rgb(229,162,46)" fg:x="1972" fg:w="1"/><text x="23.5267%" y="495.50"></text></g><g><title>mas_wr_walk_index.isra.0 (1 samples, 0.01%)</title><rect x="23.2767%" y="469" width="0.0118%" height="15" fill="rgb(214,111,36)" fg:x="1972" fg:w="1"/><text x="23.5267%" y="479.50"></text></g><g><title>vma_adjust_trans_huge (2 samples, 0.02%)</title><rect x="23.2885%" y="517" width="0.0236%" height="15" fill="rgb(207,6,21)" fg:x="1973" fg:w="2"/><text x="23.5385%" y="527.50"></text></g><g><title>find_vma (2 samples, 0.02%)</title><rect x="23.2885%" y="501" width="0.0236%" height="15" fill="rgb(213,127,38)" fg:x="1973" fg:w="2"/><text x="23.5385%" y="511.50"></text></g><g><title>mt_find (2 samples, 0.02%)</title><rect x="23.2885%" y="485" width="0.0236%" height="15" fill="rgb(238,118,32)" fg:x="1973" fg:w="2"/><text x="23.5385%" y="495.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="23.2885%" y="469" width="0.0236%" height="15" fill="rgb(240,139,39)" fg:x="1973" fg:w="2"/><text x="23.5385%" y="479.50"></text></g><g><title>vma_complete (1 samples, 0.01%)</title><rect x="23.3121%" y="517" width="0.0118%" height="15" fill="rgb(235,10,37)" fg:x="1975" fg:w="1"/><text x="23.5621%" y="527.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="23.3121%" y="501" width="0.0118%" height="15" fill="rgb(249,171,38)" fg:x="1975" fg:w="1"/><text x="23.5621%" y="511.50"></text></g><g><title>anon_vma_interval_tree_remove (1 samples, 0.01%)</title><rect x="23.3357%" y="501" width="0.0118%" height="15" fill="rgb(242,144,32)" fg:x="1977" fg:w="1"/><text x="23.5857%" y="511.50"></text></g><g><title>rb_next (1 samples, 0.01%)</title><rect x="23.3357%" y="485" width="0.0118%" height="15" fill="rgb(217,117,21)" fg:x="1977" fg:w="1"/><text x="23.5857%" y="495.50"></text></g><g><title>down_write (1 samples, 0.01%)</title><rect x="23.3475%" y="501" width="0.0118%" height="15" fill="rgb(249,87,1)" fg:x="1978" fg:w="1"/><text x="23.5975%" y="511.50"></text></g><g><title>mprotect_fixup (43 samples, 0.51%)</title><rect x="22.8636%" y="549" width="0.5076%" height="15" fill="rgb(248,196,48)" fg:x="1937" fg:w="43"/><text x="23.1136%" y="559.50"></text></g><g><title>vma_merge (15 samples, 0.18%)</title><rect x="23.1941%" y="533" width="0.1771%" height="15" fill="rgb(251,206,33)" fg:x="1965" fg:w="15"/><text x="23.4441%" y="543.50"></text></g><g><title>vma_prepare (4 samples, 0.05%)</title><rect x="23.3239%" y="517" width="0.0472%" height="15" fill="rgb(232,141,28)" fg:x="1976" fg:w="4"/><text x="23.5739%" y="527.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="23.3593%" y="501" width="0.0118%" height="15" fill="rgb(209,167,14)" fg:x="1979" fg:w="1"/><text x="23.6093%" y="511.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.02%)</title><rect x="23.3711%" y="549" width="0.0236%" height="15" fill="rgb(225,11,50)" fg:x="1980" fg:w="2"/><text x="23.6211%" y="559.50"></text></g><g><title>__x64_sys_mprotect (388 samples, 4.58%)</title><rect x="18.8385%" y="581" width="4.5798%" height="15" fill="rgb(209,50,20)" fg:x="1596" fg:w="388"/><text x="19.0885%" y="591.50">__x64..</text></g><g><title>do_mprotect_pkey (388 samples, 4.58%)</title><rect x="18.8385%" y="565" width="4.5798%" height="15" fill="rgb(212,17,46)" fg:x="1596" fg:w="388"/><text x="19.0885%" y="575.50">do_mp..</text></g><g><title>up_write (2 samples, 0.02%)</title><rect x="23.3947%" y="549" width="0.0236%" height="15" fill="rgb(216,101,39)" fg:x="1982" fg:w="2"/><text x="23.6447%" y="559.50"></text></g><g><title>rwsem_wake.isra.0 (2 samples, 0.02%)</title><rect x="23.3947%" y="533" width="0.0236%" height="15" fill="rgb(212,228,48)" fg:x="1982" fg:w="2"/><text x="23.6447%" y="543.50"></text></g><g><title>wake_up_q (2 samples, 0.02%)</title><rect x="23.3947%" y="517" width="0.0236%" height="15" fill="rgb(250,6,50)" fg:x="1982" fg:w="2"/><text x="23.6447%" y="527.50"></text></g><g><title>try_to_wake_up (2 samples, 0.02%)</title><rect x="23.3947%" y="501" width="0.0236%" height="15" fill="rgb(250,160,48)" fg:x="1982" fg:w="2"/><text x="23.6447%" y="511.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="23.4065%" y="485" width="0.0118%" height="15" fill="rgb(244,216,33)" fg:x="1983" fg:w="1"/><text x="23.6565%" y="495.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="23.4065%" y="469" width="0.0118%" height="15" fill="rgb(207,157,5)" fg:x="1983" fg:w="1"/><text x="23.6565%" y="479.50"></text></g><g><title>grow_heap (394 samples, 4.65%)</title><rect x="18.8267%" y="645" width="4.6506%" height="15" fill="rgb(228,199,8)" fg:x="1595" fg:w="394"/><text x="19.0767%" y="655.50">grow_..</text></g><g><title>__GI_mprotect (394 samples, 4.65%)</title><rect x="18.8267%" y="629" width="4.6506%" height="15" fill="rgb(227,80,20)" fg:x="1595" fg:w="394"/><text x="19.0767%" y="639.50">__GI_..</text></g><g><title>entry_SYSCALL_64_after_hwframe (393 samples, 4.64%)</title><rect x="18.8385%" y="613" width="4.6388%" height="15" fill="rgb(222,9,33)" fg:x="1596" fg:w="393"/><text x="19.0885%" y="623.50">entry..</text></g><g><title>do_syscall_64 (393 samples, 4.64%)</title><rect x="18.8385%" y="597" width="4.6388%" height="15" fill="rgb(239,44,28)" fg:x="1596" fg:w="393"/><text x="19.0885%" y="607.50">do_sy..</text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="23.4183%" y="581" width="0.0590%" height="15" fill="rgb(249,187,43)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="23.4183%" y="565" width="0.0590%" height="15" fill="rgb(216,141,28)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="575.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="23.4183%" y="549" width="0.0590%" height="15" fill="rgb(230,154,53)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="559.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="23.4183%" y="533" width="0.0590%" height="15" fill="rgb(227,82,4)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="543.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="23.4183%" y="517" width="0.0590%" height="15" fill="rgb(220,107,16)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="23.4183%" y="501" width="0.0590%" height="15" fill="rgb(207,187,2)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="511.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="23.4183%" y="485" width="0.0590%" height="15" fill="rgb(210,162,52)" fg:x="1984" fg:w="5"/><text x="23.6683%" y="495.50"></text></g><g><title>_int_malloc (431 samples, 5.09%)</title><rect x="18.4254%" y="677" width="5.0873%" height="15" fill="rgb(217,216,49)" fg:x="1561" fg:w="431"/><text x="18.6754%" y="687.50">_int_m..</text></g><g><title>sysmalloc (426 samples, 5.03%)</title><rect x="18.4844%" y="661" width="5.0283%" height="15" fill="rgb(218,146,49)" fg:x="1566" fg:w="426"/><text x="18.7344%" y="671.50">sysmal..</text></g><g><title>sync_regs (3 samples, 0.04%)</title><rect x="23.4773%" y="645" width="0.0354%" height="15" fill="rgb(216,55,40)" fg:x="1989" fg:w="3"/><text x="23.7273%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (434 samples, 5.12%)</title><rect x="18.4018%" y="773" width="5.1228%" height="15" fill="rgb(208,196,21)" fg:x="1559" fg:w="434"/><text x="18.6518%" y="783.50">hashbr..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (433 samples, 5.11%)</title><rect x="18.4136%" y="757" width="5.1110%" height="15" fill="rgb(242,117,42)" fg:x="1560" fg:w="433"/><text x="18.6636%" y="767.50">hashbr..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (433 samples, 5.11%)</title><rect x="18.4136%" y="741" width="5.1110%" height="15" fill="rgb(210,11,23)" fg:x="1560" fg:w="433"/><text x="18.6636%" y="751.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (433 samples, 5.11%)</title><rect x="18.4136%" y="725" width="5.1110%" height="15" fill="rgb(217,110,2)" fg:x="1560" fg:w="433"/><text x="18.6636%" y="735.50">alloc:..</text></g><g><title>alloc::alloc::alloc (433 samples, 5.11%)</title><rect x="18.4136%" y="709" width="5.1110%" height="15" fill="rgb(229,77,54)" fg:x="1560" fg:w="433"/><text x="18.6636%" y="719.50">alloc:..</text></g><g><title>__GI___libc_malloc (433 samples, 5.11%)</title><rect x="18.4136%" y="693" width="5.1110%" height="15" fill="rgb(218,53,16)" fg:x="1560" fg:w="433"/><text x="18.6636%" y="703.50">__GI__..</text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="23.5127%" y="677" width="0.0118%" height="15" fill="rgb(215,38,13)" fg:x="1992" fg:w="1"/><text x="23.7627%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="23.5127%" y="661" width="0.0118%" height="15" fill="rgb(235,42,18)" fg:x="1992" fg:w="1"/><text x="23.7627%" y="671.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="23.5127%" y="645" width="0.0118%" height="15" fill="rgb(219,66,54)" fg:x="1992" fg:w="1"/><text x="23.7627%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (437 samples, 5.16%)</title><rect x="18.3782%" y="821" width="5.1582%" height="15" fill="rgb(222,205,4)" fg:x="1557" fg:w="437"/><text x="18.6282%" y="831.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (435 samples, 5.13%)</title><rect x="18.4018%" y="805" width="5.1346%" height="15" fill="rgb(227,213,46)" fg:x="1559" fg:w="435"/><text x="18.6518%" y="815.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (435 samples, 5.13%)</title><rect x="18.4018%" y="789" width="5.1346%" height="15" fill="rgb(250,145,42)" fg:x="1559" fg:w="435"/><text x="18.6518%" y="799.50">hashbr..</text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="23.5246%" y="773" width="0.0118%" height="15" fill="rgb(219,15,2)" fg:x="1993" fg:w="1"/><text x="23.7746%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.01%)</title><rect x="23.5246%" y="757" width="0.0118%" height="15" fill="rgb(231,181,52)" fg:x="1993" fg:w="1"/><text x="23.7746%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.01%)</title><rect x="23.5246%" y="741" width="0.0118%" height="15" fill="rgb(235,1,42)" fg:x="1993" fg:w="1"/><text x="23.7746%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (498 samples, 5.88%)</title><rect x="17.6700%" y="933" width="5.8782%" height="15" fill="rgb(249,88,27)" fg:x="1497" fg:w="498"/><text x="17.9200%" y="943.50">&lt;std::c..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (498 samples, 5.88%)</title><rect x="17.6700%" y="917" width="5.8782%" height="15" fill="rgb(235,145,16)" fg:x="1497" fg:w="498"/><text x="17.9200%" y="927.50">&lt;hashbr..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (498 samples, 5.88%)</title><rect x="17.6700%" y="901" width="5.8782%" height="15" fill="rgb(237,114,19)" fg:x="1497" fg:w="498"/><text x="17.9200%" y="911.50">&lt;hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (439 samples, 5.18%)</title><rect x="18.3664%" y="885" width="5.1818%" height="15" fill="rgb(238,51,50)" fg:x="1556" fg:w="439"/><text x="18.6164%" y="895.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (439 samples, 5.18%)</title><rect x="18.3664%" y="869" width="5.1818%" height="15" fill="rgb(205,194,25)" fg:x="1556" fg:w="439"/><text x="18.6164%" y="879.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (439 samples, 5.18%)</title><rect x="18.3664%" y="853" width="5.1818%" height="15" fill="rgb(215,203,17)" fg:x="1556" fg:w="439"/><text x="18.6164%" y="863.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (439 samples, 5.18%)</title><rect x="18.3664%" y="837" width="5.1818%" height="15" fill="rgb(233,112,49)" fg:x="1556" fg:w="439"/><text x="18.6164%" y="847.50">hashbr..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="23.5364%" y="821" width="0.0118%" height="15" fill="rgb(241,130,26)" fg:x="1994" fg:w="1"/><text x="23.7864%" y="831.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (500 samples, 5.90%)</title><rect x="17.6582%" y="981" width="5.9018%" height="15" fill="rgb(252,223,19)" fg:x="1496" fg:w="500"/><text x="17.9082%" y="991.50">revm::co..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (499 samples, 5.89%)</title><rect x="17.6700%" y="965" width="5.8900%" height="15" fill="rgb(211,95,25)" fg:x="1497" fg:w="499"/><text x="17.9200%" y="975.50">core::i..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (499 samples, 5.89%)</title><rect x="17.6700%" y="949" width="5.8900%" height="15" fill="rgb(251,182,27)" fg:x="1497" fg:w="499"/><text x="17.9200%" y="959.50">&lt;std::c..</text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="23.5482%" y="933" width="0.0118%" height="15" fill="rgb(238,24,4)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="943.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="23.5482%" y="917" width="0.0118%" height="15" fill="rgb(224,220,25)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="23.5482%" y="901" width="0.0118%" height="15" fill="rgb(239,133,26)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="23.5482%" y="885" width="0.0118%" height="15" fill="rgb(211,94,48)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="895.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="23.5482%" y="869" width="0.0118%" height="15" fill="rgb(239,87,6)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="879.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="23.5482%" y="853" width="0.0118%" height="15" fill="rgb(227,62,0)" fg:x="1995" fg:w="1"/><text x="23.7982%" y="863.50"></text></g><g><title>revm::frame::FrameResult::gas (1 samples, 0.01%)</title><rect x="23.5600%" y="981" width="0.0118%" height="15" fill="rgb(211,226,4)" fg:x="1996" fg:w="1"/><text x="23.8100%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="23.5718%" y="965" width="0.0118%" height="15" fill="rgb(253,38,52)" fg:x="1997" fg:w="1"/><text x="23.8218%" y="975.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (1 samples, 0.01%)</title><rect x="23.5718%" y="949" width="0.0118%" height="15" fill="rgb(229,126,40)" fg:x="1997" fg:w="1"/><text x="23.8218%" y="959.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="23.5718%" y="933" width="0.0118%" height="15" fill="rgb(229,165,44)" fg:x="1997" fg:w="1"/><text x="23.8218%" y="943.50"></text></g><g><title>&lt;revm_interpreter::inner_models::Transfer as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="23.5718%" y="917" width="0.0118%" height="15" fill="rgb(247,95,47)" fg:x="1997" fg:w="1"/><text x="23.8218%" y="927.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="23.5718%" y="901" width="0.0118%" height="15" fill="rgb(216,140,30)" fg:x="1997" fg:w="1"/><text x="23.8218%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (2 samples, 0.02%)</title><rect x="23.5836%" y="933" width="0.0236%" height="15" fill="rgb(246,214,8)" fg:x="1998" fg:w="2"/><text x="23.8336%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="23.5836%" y="917" width="0.0236%" height="15" fill="rgb(227,224,15)" fg:x="1998" fg:w="2"/><text x="23.8336%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="23.5836%" y="901" width="0.0236%" height="15" fill="rgb(233,175,4)" fg:x="1998" fg:w="2"/><text x="23.8336%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="23.5836%" y="885" width="0.0236%" height="15" fill="rgb(221,66,45)" fg:x="1998" fg:w="2"/><text x="23.8336%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="23.5836%" y="869" width="0.0236%" height="15" fill="rgb(221,178,18)" fg:x="1998" fg:w="2"/><text x="23.8336%" y="879.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="23.5954%" y="853" width="0.0118%" height="15" fill="rgb(213,81,29)" fg:x="1999" fg:w="1"/><text x="23.8454%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="23.6072%" y="917" width="0.0354%" height="15" fill="rgb(220,89,49)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="927.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="23.6072%" y="901" width="0.0354%" height="15" fill="rgb(227,60,33)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="911.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="23.6072%" y="885" width="0.0354%" height="15" fill="rgb(205,113,12)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="895.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="23.6072%" y="869" width="0.0354%" height="15" fill="rgb(211,32,1)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="23.6072%" y="853" width="0.0354%" height="15" fill="rgb(246,2,12)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.04%)</title><rect x="23.6072%" y="837" width="0.0354%" height="15" fill="rgb(243,37,27)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.04%)</title><rect x="23.6072%" y="821" width="0.0354%" height="15" fill="rgb(248,211,31)" fg:x="2000" fg:w="3"/><text x="23.8572%" y="831.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (3 samples, 0.04%)</title><rect x="23.6426%" y="917" width="0.0354%" height="15" fill="rgb(242,146,47)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="927.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (3 samples, 0.04%)</title><rect x="23.6426%" y="901" width="0.0354%" height="15" fill="rgb(206,70,20)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.04%)</title><rect x="23.6426%" y="885" width="0.0354%" height="15" fill="rgb(215,10,51)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.04%)</title><rect x="23.6426%" y="869" width="0.0354%" height="15" fill="rgb(243,178,53)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.04%)</title><rect x="23.6426%" y="853" width="0.0354%" height="15" fill="rgb(233,221,20)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="23.6426%" y="837" width="0.0354%" height="15" fill="rgb(218,95,35)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="23.6426%" y="821" width="0.0354%" height="15" fill="rgb(229,13,5)" fg:x="2003" fg:w="3"/><text x="23.8926%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="23.6544%" y="805" width="0.0236%" height="15" fill="rgb(252,164,30)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="23.6544%" y="789" width="0.0236%" height="15" fill="rgb(232,68,36)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="23.6544%" y="773" width="0.0236%" height="15" fill="rgb(219,59,54)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="23.6544%" y="757" width="0.0236%" height="15" fill="rgb(250,92,33)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="23.6544%" y="741" width="0.0236%" height="15" fill="rgb(229,162,54)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="23.6544%" y="725" width="0.0236%" height="15" fill="rgb(244,114,52)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.6544%" y="709" width="0.0236%" height="15" fill="rgb(212,211,43)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.6544%" y="693" width="0.0236%" height="15" fill="rgb(226,147,8)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.6544%" y="677" width="0.0236%" height="15" fill="rgb(226,23,13)" fg:x="2004" fg:w="2"/><text x="23.9044%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="23.6662%" y="661" width="0.0118%" height="15" fill="rgb(240,63,4)" fg:x="2005" fg:w="1"/><text x="23.9162%" y="671.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame::_{{closure}} (1 samples, 0.01%)</title><rect x="23.6780%" y="917" width="0.0118%" height="15" fill="rgb(221,1,32)" fg:x="2006" fg:w="1"/><text x="23.9280%" y="927.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="23.6898%" y="741" width="0.0118%" height="15" fill="rgb(242,117,10)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="23.6898%" y="725" width="0.0118%" height="15" fill="rgb(249,172,44)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.6898%" y="709" width="0.0118%" height="15" fill="rgb(244,46,45)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.6898%" y="693" width="0.0118%" height="15" fill="rgb(206,43,17)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.6898%" y="677" width="0.0118%" height="15" fill="rgb(239,218,39)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="23.6898%" y="661" width="0.0118%" height="15" fill="rgb(208,169,54)" fg:x="2007" fg:w="1"/><text x="23.9398%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="23.6898%" y="853" width="0.0354%" height="15" fill="rgb(247,25,42)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="23.6898%" y="837" width="0.0354%" height="15" fill="rgb(226,23,31)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="23.6898%" y="821" width="0.0354%" height="15" fill="rgb(247,16,28)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="23.6898%" y="805" width="0.0354%" height="15" fill="rgb(231,147,38)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="23.6898%" y="789" width="0.0354%" height="15" fill="rgb(253,81,48)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="23.6898%" y="773" width="0.0354%" height="15" fill="rgb(249,222,43)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="23.6898%" y="757" width="0.0354%" height="15" fill="rgb(221,3,27)" fg:x="2007" fg:w="3"/><text x="23.9398%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="23.7016%" y="741" width="0.0236%" height="15" fill="rgb(228,180,5)" fg:x="2008" fg:w="2"/><text x="23.9516%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.7016%" y="725" width="0.0236%" height="15" fill="rgb(227,131,42)" fg:x="2008" fg:w="2"/><text x="23.9516%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.7016%" y="709" width="0.0236%" height="15" fill="rgb(212,3,39)" fg:x="2008" fg:w="2"/><text x="23.9516%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="23.7016%" y="693" width="0.0236%" height="15" fill="rgb(226,45,5)" fg:x="2008" fg:w="2"/><text x="23.9516%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="23.7134%" y="677" width="0.0118%" height="15" fill="rgb(215,167,45)" fg:x="2009" fg:w="1"/><text x="23.9634%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="23.7134%" y="661" width="0.0118%" height="15" fill="rgb(250,218,53)" fg:x="2009" fg:w="1"/><text x="23.9634%" y="671.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (4 samples, 0.05%)</title><rect x="23.6898%" y="917" width="0.0472%" height="15" fill="rgb(207,140,0)" fg:x="2007" fg:w="4"/><text x="23.9398%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (4 samples, 0.05%)</title><rect x="23.6898%" y="901" width="0.0472%" height="15" fill="rgb(238,133,51)" fg:x="2007" fg:w="4"/><text x="23.9398%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.05%)</title><rect x="23.6898%" y="885" width="0.0472%" height="15" fill="rgb(218,203,53)" fg:x="2007" fg:w="4"/><text x="23.9398%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.05%)</title><rect x="23.6898%" y="869" width="0.0472%" height="15" fill="rgb(226,184,25)" fg:x="2007" fg:w="4"/><text x="23.9398%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="23.7252%" y="853" width="0.0118%" height="15" fill="rgb(231,121,21)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="23.7252%" y="837" width="0.0118%" height="15" fill="rgb(251,14,34)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="23.7252%" y="821" width="0.0118%" height="15" fill="rgb(249,193,11)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="23.7252%" y="805" width="0.0118%" height="15" fill="rgb(220,172,37)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.01%)</title><rect x="23.7252%" y="789" width="0.0118%" height="15" fill="rgb(231,229,43)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="23.7252%" y="773" width="0.0118%" height="15" fill="rgb(250,161,5)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="23.7252%" y="757" width="0.0118%" height="15" fill="rgb(218,225,18)" fg:x="2010" fg:w="1"/><text x="23.9752%" y="767.50"></text></g><g><title>__GI_memcpy (1 samples, 0.01%)</title><rect x="23.8078%" y="757" width="0.0118%" height="15" fill="rgb(245,45,42)" fg:x="2017" fg:w="1"/><text x="24.0578%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="23.8078%" y="741" width="0.0118%" height="15" fill="rgb(211,115,1)" fg:x="2017" fg:w="1"/><text x="24.0578%" y="751.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="23.8196%" y="757" width="0.0118%" height="15" fill="rgb(248,133,52)" fg:x="2018" fg:w="1"/><text x="24.0696%" y="767.50"></text></g><g><title>_int_realloc (7 samples, 0.08%)</title><rect x="23.7960%" y="773" width="0.0826%" height="15" fill="rgb(238,100,21)" fg:x="2016" fg:w="7"/><text x="24.0460%" y="783.50"></text></g><g><title>_int_malloc (4 samples, 0.05%)</title><rect x="23.8314%" y="757" width="0.0472%" height="15" fill="rgb(247,144,11)" fg:x="2019" fg:w="4"/><text x="24.0814%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.14%)</title><rect x="23.7488%" y="885" width="0.1416%" height="15" fill="rgb(206,164,16)" fg:x="2012" fg:w="12"/><text x="23.9988%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.14%)</title><rect x="23.7488%" y="869" width="0.1416%" height="15" fill="rgb(222,34,3)" fg:x="2012" fg:w="12"/><text x="23.9988%" y="879.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.13%)</title><rect x="23.7606%" y="853" width="0.1298%" height="15" fill="rgb(248,82,4)" fg:x="2013" fg:w="11"/><text x="24.0106%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 0.13%)</title><rect x="23.7606%" y="837" width="0.1298%" height="15" fill="rgb(228,81,46)" fg:x="2013" fg:w="11"/><text x="24.0106%" y="847.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 0.13%)</title><rect x="23.7606%" y="821" width="0.1298%" height="15" fill="rgb(227,67,47)" fg:x="2013" fg:w="11"/><text x="24.0106%" y="831.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 0.13%)</title><rect x="23.7606%" y="805" width="0.1298%" height="15" fill="rgb(215,93,53)" fg:x="2013" fg:w="11"/><text x="24.0106%" y="815.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.13%)</title><rect x="23.7606%" y="789" width="0.1298%" height="15" fill="rgb(248,194,39)" fg:x="2013" fg:w="11"/><text x="24.0106%" y="799.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="23.8787%" y="773" width="0.0118%" height="15" fill="rgb(215,5,19)" fg:x="2023" fg:w="1"/><text x="24.1287%" y="783.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="23.8787%" y="757" width="0.0118%" height="15" fill="rgb(226,215,51)" fg:x="2023" fg:w="1"/><text x="24.1287%" y="767.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (15 samples, 0.18%)</title><rect x="23.7370%" y="917" width="0.1771%" height="15" fill="rgb(225,56,26)" fg:x="2011" fg:w="15"/><text x="23.9870%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.18%)</title><rect x="23.7370%" y="901" width="0.1771%" height="15" fill="rgb(222,75,29)" fg:x="2011" fg:w="15"/><text x="23.9870%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="23.8905%" y="885" width="0.0236%" height="15" fill="rgb(236,139,6)" fg:x="2024" fg:w="2"/><text x="24.1405%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="23.8905%" y="869" width="0.0236%" height="15" fill="rgb(223,137,36)" fg:x="2024" fg:w="2"/><text x="24.1405%" y="879.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (4 samples, 0.05%)</title><rect x="23.9141%" y="917" width="0.0472%" height="15" fill="rgb(226,99,2)" fg:x="2026" fg:w="4"/><text x="24.1641%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.04%)</title><rect x="23.9259%" y="901" width="0.0354%" height="15" fill="rgb(206,133,23)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.04%)</title><rect x="23.9259%" y="885" width="0.0354%" height="15" fill="rgb(243,173,15)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.04%)</title><rect x="23.9259%" y="869" width="0.0354%" height="15" fill="rgb(228,69,28)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="23.9259%" y="853" width="0.0354%" height="15" fill="rgb(212,51,22)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="23.9259%" y="837" width="0.0354%" height="15" fill="rgb(227,113,0)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="23.9259%" y="821" width="0.0354%" height="15" fill="rgb(252,84,27)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="23.9259%" y="805" width="0.0354%" height="15" fill="rgb(223,145,39)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="23.9259%" y="789" width="0.0354%" height="15" fill="rgb(239,219,30)" fg:x="2027" fg:w="3"/><text x="24.1759%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="23.9377%" y="773" width="0.0236%" height="15" fill="rgb(224,196,39)" fg:x="2028" fg:w="2"/><text x="24.1877%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="23.9377%" y="757" width="0.0236%" height="15" fill="rgb(205,35,43)" fg:x="2028" fg:w="2"/><text x="24.1877%" y="767.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (1 samples, 0.01%)</title><rect x="23.9613%" y="901" width="0.0118%" height="15" fill="rgb(228,201,21)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="23.9613%" y="885" width="0.0118%" height="15" fill="rgb(237,118,16)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="23.9613%" y="869" width="0.0118%" height="15" fill="rgb(241,17,19)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="23.9613%" y="853" width="0.0118%" height="15" fill="rgb(214,10,25)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="23.9613%" y="837" width="0.0118%" height="15" fill="rgb(238,37,29)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="847.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="23.9613%" y="821" width="0.0118%" height="15" fill="rgb(253,83,25)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="831.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="23.9613%" y="805" width="0.0118%" height="15" fill="rgb(234,192,12)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="815.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="23.9613%" y="789" width="0.0118%" height="15" fill="rgb(241,216,45)" fg:x="2030" fg:w="1"/><text x="24.2113%" y="799.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (2 samples, 0.02%)</title><rect x="23.9613%" y="917" width="0.0236%" height="15" fill="rgb(242,22,33)" fg:x="2030" fg:w="2"/><text x="24.2113%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.01%)</title><rect x="23.9731%" y="901" width="0.0118%" height="15" fill="rgb(231,105,49)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="23.9731%" y="885" width="0.0118%" height="15" fill="rgb(218,204,15)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.01%)</title><rect x="23.9731%" y="869" width="0.0118%" height="15" fill="rgb(235,138,41)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="23.9731%" y="853" width="0.0118%" height="15" fill="rgb(246,0,9)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="23.9731%" y="837" width="0.0118%" height="15" fill="rgb(210,74,4)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.9731%" y="821" width="0.0118%" height="15" fill="rgb(250,60,41)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.9731%" y="805" width="0.0118%" height="15" fill="rgb(220,115,12)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.9731%" y="789" width="0.0118%" height="15" fill="rgb(237,100,13)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="23.9731%" y="773" width="0.0118%" height="15" fill="rgb(213,55,26)" fg:x="2031" fg:w="1"/><text x="24.2231%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="23.9849%" y="901" width="0.0118%" height="15" fill="rgb(216,17,4)" fg:x="2032" fg:w="1"/><text x="24.2349%" y="911.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="23.9849%" y="885" width="0.0118%" height="15" fill="rgb(220,153,47)" fg:x="2032" fg:w="1"/><text x="24.2349%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.0085%" y="821" width="0.0118%" height="15" fill="rgb(215,131,9)" fg:x="2034" fg:w="1"/><text x="24.2585%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.0085%" y="805" width="0.0118%" height="15" fill="rgb(233,46,42)" fg:x="2034" fg:w="1"/><text x="24.2585%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.0085%" y="789" width="0.0118%" height="15" fill="rgb(226,86,7)" fg:x="2034" fg:w="1"/><text x="24.2585%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="24.0085%" y="773" width="0.0118%" height="15" fill="rgb(239,226,21)" fg:x="2034" fg:w="1"/><text x="24.2585%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="24.0085%" y="757" width="0.0118%" height="15" fill="rgb(244,137,22)" fg:x="2034" fg:w="1"/><text x="24.2585%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="24.0203%" y="741" width="0.0236%" height="15" fill="rgb(211,139,35)" fg:x="2035" fg:w="2"/><text x="24.2703%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="24.0203%" y="725" width="0.0236%" height="15" fill="rgb(214,62,50)" fg:x="2035" fg:w="2"/><text x="24.2703%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0203%" y="709" width="0.0236%" height="15" fill="rgb(212,113,44)" fg:x="2035" fg:w="2"/><text x="24.2703%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0203%" y="693" width="0.0236%" height="15" fill="rgb(226,150,43)" fg:x="2035" fg:w="2"/><text x="24.2703%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0203%" y="677" width="0.0236%" height="15" fill="rgb(250,71,37)" fg:x="2035" fg:w="2"/><text x="24.2703%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.0321%" y="661" width="0.0118%" height="15" fill="rgb(219,76,19)" fg:x="2036" fg:w="1"/><text x="24.2821%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="24.0439%" y="677" width="0.0118%" height="15" fill="rgb(250,39,11)" fg:x="2037" fg:w="1"/><text x="24.2939%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="23.9967%" y="853" width="0.0708%" height="15" fill="rgb(230,64,31)" fg:x="2033" fg:w="6"/><text x="24.2467%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="23.9967%" y="837" width="0.0708%" height="15" fill="rgb(208,222,23)" fg:x="2033" fg:w="6"/><text x="24.2467%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="24.0203%" y="821" width="0.0472%" height="15" fill="rgb(227,125,18)" fg:x="2035" fg:w="4"/><text x="24.2703%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="24.0203%" y="805" width="0.0472%" height="15" fill="rgb(234,210,9)" fg:x="2035" fg:w="4"/><text x="24.2703%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="24.0203%" y="789" width="0.0472%" height="15" fill="rgb(217,127,24)" fg:x="2035" fg:w="4"/><text x="24.2703%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="24.0203%" y="773" width="0.0472%" height="15" fill="rgb(239,141,48)" fg:x="2035" fg:w="4"/><text x="24.2703%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="24.0203%" y="757" width="0.0472%" height="15" fill="rgb(227,109,8)" fg:x="2035" fg:w="4"/><text x="24.2703%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="24.0439%" y="741" width="0.0236%" height="15" fill="rgb(235,184,23)" fg:x="2037" fg:w="2"/><text x="24.2939%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0439%" y="725" width="0.0236%" height="15" fill="rgb(227,226,48)" fg:x="2037" fg:w="2"/><text x="24.2939%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0439%" y="709" width="0.0236%" height="15" fill="rgb(206,150,11)" fg:x="2037" fg:w="2"/><text x="24.2939%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.0439%" y="693" width="0.0236%" height="15" fill="rgb(254,2,33)" fg:x="2037" fg:w="2"/><text x="24.2939%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.0557%" y="677" width="0.0118%" height="15" fill="rgb(243,160,20)" fg:x="2038" fg:w="1"/><text x="24.3057%" y="687.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (7 samples, 0.08%)</title><rect x="23.9967%" y="901" width="0.0826%" height="15" fill="rgb(218,208,30)" fg:x="2033" fg:w="7"/><text x="24.2467%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.08%)</title><rect x="23.9967%" y="885" width="0.0826%" height="15" fill="rgb(224,120,49)" fg:x="2033" fg:w="7"/><text x="24.2467%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.08%)</title><rect x="23.9967%" y="869" width="0.0826%" height="15" fill="rgb(246,12,2)" fg:x="2033" fg:w="7"/><text x="24.2467%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="24.0675%" y="853" width="0.0118%" height="15" fill="rgb(236,117,3)" fg:x="2039" fg:w="1"/><text x="24.3175%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="24.0675%" y="837" width="0.0118%" height="15" fill="rgb(216,128,52)" fg:x="2039" fg:w="1"/><text x="24.3175%" y="847.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="24.0675%" y="821" width="0.0118%" height="15" fill="rgb(246,145,19)" fg:x="2039" fg:w="1"/><text x="24.3175%" y="831.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (1 samples, 0.01%)</title><rect x="24.0793%" y="901" width="0.0118%" height="15" fill="rgb(222,11,46)" fg:x="2040" fg:w="1"/><text x="24.3293%" y="911.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="24.0793%" y="885" width="0.0118%" height="15" fill="rgb(245,82,36)" fg:x="2040" fg:w="1"/><text x="24.3293%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="24.1029%" y="821" width="0.0354%" height="15" fill="rgb(250,73,51)" fg:x="2042" fg:w="3"/><text x="24.3529%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="24.1029%" y="805" width="0.0354%" height="15" fill="rgb(221,189,23)" fg:x="2042" fg:w="3"/><text x="24.3529%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="24.1029%" y="789" width="0.0354%" height="15" fill="rgb(210,33,7)" fg:x="2042" fg:w="3"/><text x="24.3529%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.04%)</title><rect x="24.1029%" y="773" width="0.0354%" height="15" fill="rgb(210,107,22)" fg:x="2042" fg:w="3"/><text x="24.3529%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="24.1029%" y="757" width="0.0354%" height="15" fill="rgb(222,116,37)" fg:x="2042" fg:w="3"/><text x="24.3529%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="24.1383%" y="741" width="0.0118%" height="15" fill="rgb(254,17,48)" fg:x="2045" fg:w="1"/><text x="24.3883%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="24.1383%" y="725" width="0.0118%" height="15" fill="rgb(224,36,32)" fg:x="2045" fg:w="1"/><text x="24.3883%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1383%" y="709" width="0.0118%" height="15" fill="rgb(232,90,46)" fg:x="2045" fg:w="1"/><text x="24.3883%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1383%" y="693" width="0.0118%" height="15" fill="rgb(241,66,40)" fg:x="2045" fg:w="1"/><text x="24.3883%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1383%" y="677" width="0.0118%" height="15" fill="rgb(249,184,29)" fg:x="2045" fg:w="1"/><text x="24.3883%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="24.0911%" y="853" width="0.0708%" height="15" fill="rgb(231,181,1)" fg:x="2041" fg:w="6"/><text x="24.3411%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="24.0911%" y="837" width="0.0708%" height="15" fill="rgb(224,94,2)" fg:x="2041" fg:w="6"/><text x="24.3411%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="24.1383%" y="821" width="0.0236%" height="15" fill="rgb(229,170,15)" fg:x="2045" fg:w="2"/><text x="24.3883%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="24.1383%" y="805" width="0.0236%" height="15" fill="rgb(240,127,35)" fg:x="2045" fg:w="2"/><text x="24.3883%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="24.1383%" y="789" width="0.0236%" height="15" fill="rgb(248,196,34)" fg:x="2045" fg:w="2"/><text x="24.3883%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="24.1383%" y="773" width="0.0236%" height="15" fill="rgb(236,137,7)" fg:x="2045" fg:w="2"/><text x="24.3883%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="24.1383%" y="757" width="0.0236%" height="15" fill="rgb(235,127,16)" fg:x="2045" fg:w="2"/><text x="24.3883%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="24.1501%" y="741" width="0.0118%" height="15" fill="rgb(250,192,54)" fg:x="2046" fg:w="1"/><text x="24.4001%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1501%" y="725" width="0.0118%" height="15" fill="rgb(218,98,20)" fg:x="2046" fg:w="1"/><text x="24.4001%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1501%" y="709" width="0.0118%" height="15" fill="rgb(230,176,47)" fg:x="2046" fg:w="1"/><text x="24.4001%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.1501%" y="693" width="0.0118%" height="15" fill="rgb(244,2,33)" fg:x="2046" fg:w="1"/><text x="24.4001%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="24.1737%" y="805" width="0.0118%" height="15" fill="rgb(231,100,17)" fg:x="2048" fg:w="1"/><text x="24.4237%" y="815.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="24.1737%" y="789" width="0.0118%" height="15" fill="rgb(245,23,12)" fg:x="2048" fg:w="1"/><text x="24.4237%" y="799.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (53 samples, 0.63%)</title><rect x="23.5718%" y="981" width="0.6256%" height="15" fill="rgb(249,55,22)" fg:x="1997" fg:w="53"/><text x="23.8218%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (52 samples, 0.61%)</title><rect x="23.5836%" y="965" width="0.6138%" height="15" fill="rgb(207,134,9)" fg:x="1998" fg:w="52"/><text x="23.8336%" y="975.50"></text></g><g><title>revm::handler::mainnet::execution::call (52 samples, 0.61%)</title><rect x="23.5836%" y="949" width="0.6138%" height="15" fill="rgb(218,134,0)" fg:x="1998" fg:w="52"/><text x="23.8336%" y="959.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (50 samples, 0.59%)</title><rect x="23.6072%" y="933" width="0.5902%" height="15" fill="rgb(213,212,33)" fg:x="2000" fg:w="50"/><text x="23.8572%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (18 samples, 0.21%)</title><rect x="23.9849%" y="917" width="0.2125%" height="15" fill="rgb(252,106,18)" fg:x="2032" fg:w="18"/><text x="24.2349%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (9 samples, 0.11%)</title><rect x="24.0911%" y="901" width="0.1062%" height="15" fill="rgb(208,126,42)" fg:x="2041" fg:w="9"/><text x="24.3411%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (9 samples, 0.11%)</title><rect x="24.0911%" y="885" width="0.1062%" height="15" fill="rgb(246,175,29)" fg:x="2041" fg:w="9"/><text x="24.3411%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (9 samples, 0.11%)</title><rect x="24.0911%" y="869" width="0.1062%" height="15" fill="rgb(215,13,50)" fg:x="2041" fg:w="9"/><text x="24.3411%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.04%)</title><rect x="24.1619%" y="853" width="0.0354%" height="15" fill="rgb(216,172,15)" fg:x="2047" fg:w="3"/><text x="24.4119%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.04%)</title><rect x="24.1619%" y="837" width="0.0354%" height="15" fill="rgb(212,103,13)" fg:x="2047" fg:w="3"/><text x="24.4119%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.04%)</title><rect x="24.1619%" y="821" width="0.0354%" height="15" fill="rgb(231,171,36)" fg:x="2047" fg:w="3"/><text x="24.4119%" y="831.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="24.1856%" y="805" width="0.0118%" height="15" fill="rgb(250,123,20)" fg:x="2049" fg:w="1"/><text x="24.4356%" y="815.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::last_frame_return (2 samples, 0.02%)</title><rect x="24.1974%" y="981" width="0.0236%" height="15" fill="rgb(212,53,50)" fg:x="2050" fg:w="2"/><text x="24.4474%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="24.2092%" y="965" width="0.0118%" height="15" fill="rgb(243,54,12)" fg:x="2051" fg:w="1"/><text x="24.4592%" y="975.50"></text></g><g><title>revm::handler::mainnet::execution::last_frame_return (1 samples, 0.01%)</title><rect x="24.2092%" y="949" width="0.0118%" height="15" fill="rgb(234,101,34)" fg:x="2051" fg:w="1"/><text x="24.4592%" y="959.50"></text></g><g><title>revm::handler::mainnet::execution::frame_return_with_refund_flag (1 samples, 0.01%)</title><rect x="24.2092%" y="933" width="0.0118%" height="15" fill="rgb(254,67,22)" fg:x="2051" fg:w="1"/><text x="24.4592%" y="943.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="24.2564%" y="933" width="0.0118%" height="15" fill="rgb(250,35,47)" fg:x="2055" fg:w="1"/><text x="24.5064%" y="943.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="24.2564%" y="917" width="0.0118%" height="15" fill="rgb(226,126,38)" fg:x="2055" fg:w="1"/><text x="24.5064%" y="927.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="24.2682%" y="789" width="0.0472%" height="15" fill="rgb(216,138,53)" fg:x="2056" fg:w="4"/><text x="24.5182%" y="799.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="24.2800%" y="773" width="0.0354%" height="15" fill="rgb(246,199,43)" fg:x="2057" fg:w="3"/><text x="24.5300%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="24.2682%" y="901" width="0.0590%" height="15" fill="rgb(232,125,11)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (5 samples, 0.06%)</title><rect x="24.2682%" y="885" width="0.0590%" height="15" fill="rgb(218,219,45)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (5 samples, 0.06%)</title><rect x="24.2682%" y="869" width="0.0590%" height="15" fill="rgb(216,102,54)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (5 samples, 0.06%)</title><rect x="24.2682%" y="853" width="0.0590%" height="15" fill="rgb(250,228,7)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="24.2682%" y="837" width="0.0590%" height="15" fill="rgb(226,125,25)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.06%)</title><rect x="24.2682%" y="821" width="0.0590%" height="15" fill="rgb(224,165,27)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.06%)</title><rect x="24.2682%" y="805" width="0.0590%" height="15" fill="rgb(233,86,3)" fg:x="2056" fg:w="5"/><text x="24.5182%" y="815.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="24.3154%" y="789" width="0.0118%" height="15" fill="rgb(228,116,20)" fg:x="2060" fg:w="1"/><text x="24.5654%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="24.3154%" y="773" width="0.0118%" height="15" fill="rgb(209,192,17)" fg:x="2060" fg:w="1"/><text x="24.5654%" y="783.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="24.3272%" y="821" width="0.0708%" height="15" fill="rgb(224,88,34)" fg:x="2061" fg:w="6"/><text x="24.5772%" y="831.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (16 samples, 0.19%)</title><rect x="24.2210%" y="981" width="0.1889%" height="15" fill="rgb(233,38,6)" fg:x="2052" fg:w="16"/><text x="24.4710%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (16 samples, 0.19%)</title><rect x="24.2210%" y="965" width="0.1889%" height="15" fill="rgb(212,59,30)" fg:x="2052" fg:w="16"/><text x="24.4710%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (16 samples, 0.19%)</title><rect x="24.2210%" y="949" width="0.1889%" height="15" fill="rgb(213,80,3)" fg:x="2052" fg:w="16"/><text x="24.4710%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (12 samples, 0.14%)</title><rect x="24.2682%" y="933" width="0.1416%" height="15" fill="rgb(251,178,7)" fg:x="2056" fg:w="12"/><text x="24.5182%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (12 samples, 0.14%)</title><rect x="24.2682%" y="917" width="0.1416%" height="15" fill="rgb(213,154,26)" fg:x="2056" fg:w="12"/><text x="24.5182%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="24.3272%" y="901" width="0.0826%" height="15" fill="rgb(238,165,49)" fg:x="2061" fg:w="7"/><text x="24.5772%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="24.3272%" y="885" width="0.0826%" height="15" fill="rgb(248,91,46)" fg:x="2061" fg:w="7"/><text x="24.5772%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.08%)</title><rect x="24.3272%" y="869" width="0.0826%" height="15" fill="rgb(244,21,52)" fg:x="2061" fg:w="7"/><text x="24.5772%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.08%)</title><rect x="24.3272%" y="853" width="0.0826%" height="15" fill="rgb(247,122,20)" fg:x="2061" fg:w="7"/><text x="24.5772%" y="863.50"></text></g><g><title>__GI___libc_free (7 samples, 0.08%)</title><rect x="24.3272%" y="837" width="0.0826%" height="15" fill="rgb(218,27,9)" fg:x="2061" fg:w="7"/><text x="24.5772%" y="847.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="24.3980%" y="821" width="0.0118%" height="15" fill="rgb(246,7,6)" fg:x="2067" fg:w="1"/><text x="24.6480%" y="831.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="24.3980%" y="805" width="0.0118%" height="15" fill="rgb(227,135,54)" fg:x="2067" fg:w="1"/><text x="24.6480%" y="815.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="24.3980%" y="789" width="0.0118%" height="15" fill="rgb(247,14,11)" fg:x="2067" fg:w="1"/><text x="24.6480%" y="799.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="24.4688%" y="773" width="0.0118%" height="15" fill="rgb(206,149,34)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="24.4688%" y="757" width="0.0118%" height="15" fill="rgb(227,228,4)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.4688%" y="741" width="0.0118%" height="15" fill="rgb(238,218,28)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.4688%" y="725" width="0.0118%" height="15" fill="rgb(252,86,40)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.4688%" y="709" width="0.0118%" height="15" fill="rgb(251,225,11)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.4688%" y="693" width="0.0118%" height="15" fill="rgb(206,46,49)" fg:x="2073" fg:w="1"/><text x="24.7188%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="24.4570%" y="885" width="0.0590%" height="15" fill="rgb(245,128,24)" fg:x="2072" fg:w="5"/><text x="24.7070%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="24.4570%" y="869" width="0.0590%" height="15" fill="rgb(219,177,34)" fg:x="2072" fg:w="5"/><text x="24.7070%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="24.4688%" y="853" width="0.0472%" height="15" fill="rgb(218,60,48)" fg:x="2073" fg:w="4"/><text x="24.7188%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="24.4688%" y="837" width="0.0472%" height="15" fill="rgb(221,11,5)" fg:x="2073" fg:w="4"/><text x="24.7188%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="24.4688%" y="821" width="0.0472%" height="15" fill="rgb(220,148,13)" fg:x="2073" fg:w="4"/><text x="24.7188%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="24.4688%" y="805" width="0.0472%" height="15" fill="rgb(210,16,3)" fg:x="2073" fg:w="4"/><text x="24.7188%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="24.4688%" y="789" width="0.0472%" height="15" fill="rgb(236,80,2)" fg:x="2073" fg:w="4"/><text x="24.7188%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="24.4806%" y="773" width="0.0354%" height="15" fill="rgb(239,129,19)" fg:x="2074" fg:w="3"/><text x="24.7306%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.4806%" y="757" width="0.0354%" height="15" fill="rgb(220,106,35)" fg:x="2074" fg:w="3"/><text x="24.7306%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.4806%" y="741" width="0.0354%" height="15" fill="rgb(252,139,45)" fg:x="2074" fg:w="3"/><text x="24.7306%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.4806%" y="725" width="0.0354%" height="15" fill="rgb(229,8,36)" fg:x="2074" fg:w="3"/><text x="24.7306%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.5042%" y="709" width="0.0118%" height="15" fill="rgb(230,126,33)" fg:x="2076" fg:w="1"/><text x="24.7542%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="24.5397%" y="853" width="0.0118%" height="15" fill="rgb(239,140,21)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="24.5397%" y="837" width="0.0118%" height="15" fill="rgb(254,104,9)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.5397%" y="821" width="0.0118%" height="15" fill="rgb(239,52,14)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.5397%" y="805" width="0.0118%" height="15" fill="rgb(208,227,44)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="815.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="24.5397%" y="789" width="0.0118%" height="15" fill="rgb(246,18,19)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="799.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="24.5397%" y="773" width="0.0118%" height="15" fill="rgb(235,228,25)" fg:x="2079" fg:w="1"/><text x="24.7897%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (13 samples, 0.15%)</title><rect x="24.4098%" y="981" width="0.1534%" height="15" fill="rgb(240,156,20)" fg:x="2068" fg:w="13"/><text x="24.6598%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.13%)</title><rect x="24.4334%" y="965" width="0.1298%" height="15" fill="rgb(224,8,20)" fg:x="2070" fg:w="11"/><text x="24.6834%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (11 samples, 0.13%)</title><rect x="24.4334%" y="949" width="0.1298%" height="15" fill="rgb(214,12,52)" fg:x="2070" fg:w="11"/><text x="24.6834%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (11 samples, 0.13%)</title><rect x="24.4334%" y="933" width="0.1298%" height="15" fill="rgb(211,220,47)" fg:x="2070" fg:w="11"/><text x="24.6834%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="24.4570%" y="917" width="0.1062%" height="15" fill="rgb(250,173,5)" fg:x="2072" fg:w="9"/><text x="24.7070%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.11%)</title><rect x="24.4570%" y="901" width="0.1062%" height="15" fill="rgb(250,125,52)" fg:x="2072" fg:w="9"/><text x="24.7070%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.05%)</title><rect x="24.5161%" y="885" width="0.0472%" height="15" fill="rgb(209,133,18)" fg:x="2077" fg:w="4"/><text x="24.7661%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.05%)</title><rect x="24.5161%" y="869" width="0.0472%" height="15" fill="rgb(216,173,22)" fg:x="2077" fg:w="4"/><text x="24.7661%" y="879.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="24.5515%" y="853" width="0.0118%" height="15" fill="rgb(205,3,22)" fg:x="2080" fg:w="1"/><text x="24.8015%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="24.5515%" y="837" width="0.0118%" height="15" fill="rgb(248,22,20)" fg:x="2080" fg:w="1"/><text x="24.8015%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="24.5515%" y="821" width="0.0118%" height="15" fill="rgb(233,6,29)" fg:x="2080" fg:w="1"/><text x="24.8015%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.5987%" y="853" width="0.0118%" height="15" fill="rgb(240,22,54)" fg:x="2084" fg:w="1"/><text x="24.8487%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.5987%" y="837" width="0.0118%" height="15" fill="rgb(231,133,32)" fg:x="2084" fg:w="1"/><text x="24.8487%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.5987%" y="821" width="0.0118%" height="15" fill="rgb(248,193,4)" fg:x="2084" fg:w="1"/><text x="24.8487%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="24.5987%" y="805" width="0.0118%" height="15" fill="rgb(211,178,46)" fg:x="2084" fg:w="1"/><text x="24.8487%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="24.5987%" y="789" width="0.0118%" height="15" fill="rgb(224,5,42)" fg:x="2084" fg:w="1"/><text x="24.8487%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="24.6223%" y="693" width="0.0118%" height="15" fill="rgb(239,176,25)" fg:x="2086" fg:w="1"/><text x="24.8723%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="24.6223%" y="677" width="0.0118%" height="15" fill="rgb(245,187,50)" fg:x="2086" fg:w="1"/><text x="24.8723%" y="687.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="24.6105%" y="773" width="0.0354%" height="15" fill="rgb(248,24,15)" fg:x="2085" fg:w="3"/><text x="24.8605%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="24.6105%" y="757" width="0.0354%" height="15" fill="rgb(205,166,13)" fg:x="2085" fg:w="3"/><text x="24.8605%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.6105%" y="741" width="0.0354%" height="15" fill="rgb(208,114,23)" fg:x="2085" fg:w="3"/><text x="24.8605%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.6105%" y="725" width="0.0354%" height="15" fill="rgb(239,127,18)" fg:x="2085" fg:w="3"/><text x="24.8605%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="24.6105%" y="709" width="0.0354%" height="15" fill="rgb(219,154,28)" fg:x="2085" fg:w="3"/><text x="24.8605%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.6341%" y="693" width="0.0118%" height="15" fill="rgb(225,157,23)" fg:x="2087" fg:w="1"/><text x="24.8841%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="24.5987%" y="885" width="0.0708%" height="15" fill="rgb(219,8,6)" fg:x="2084" fg:w="6"/><text x="24.8487%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="24.5987%" y="869" width="0.0708%" height="15" fill="rgb(212,47,6)" fg:x="2084" fg:w="6"/><text x="24.8487%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.06%)</title><rect x="24.6105%" y="853" width="0.0590%" height="15" fill="rgb(224,190,4)" fg:x="2085" fg:w="5"/><text x="24.8605%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="24.6105%" y="837" width="0.0590%" height="15" fill="rgb(239,183,29)" fg:x="2085" fg:w="5"/><text x="24.8605%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="24.6105%" y="821" width="0.0590%" height="15" fill="rgb(213,57,7)" fg:x="2085" fg:w="5"/><text x="24.8605%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.06%)</title><rect x="24.6105%" y="805" width="0.0590%" height="15" fill="rgb(216,148,1)" fg:x="2085" fg:w="5"/><text x="24.8605%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.06%)</title><rect x="24.6105%" y="789" width="0.0590%" height="15" fill="rgb(236,182,29)" fg:x="2085" fg:w="5"/><text x="24.8605%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="24.6459%" y="773" width="0.0236%" height="15" fill="rgb(244,120,48)" fg:x="2088" fg:w="2"/><text x="24.8959%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.6459%" y="757" width="0.0236%" height="15" fill="rgb(206,71,34)" fg:x="2088" fg:w="2"/><text x="24.8959%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.6459%" y="741" width="0.0236%" height="15" fill="rgb(242,32,6)" fg:x="2088" fg:w="2"/><text x="24.8959%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="24.6459%" y="725" width="0.0236%" height="15" fill="rgb(241,35,3)" fg:x="2088" fg:w="2"/><text x="24.8959%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="24.6459%" y="709" width="0.0236%" height="15" fill="rgb(222,62,19)" fg:x="2088" fg:w="2"/><text x="24.8959%" y="719.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (10 samples, 0.12%)</title><rect x="24.5633%" y="981" width="0.1180%" height="15" fill="rgb(223,110,41)" fg:x="2081" fg:w="10"/><text x="24.8133%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.12%)</title><rect x="24.5633%" y="965" width="0.1180%" height="15" fill="rgb(208,224,4)" fg:x="2081" fg:w="10"/><text x="24.8133%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (10 samples, 0.12%)</title><rect x="24.5633%" y="949" width="0.1180%" height="15" fill="rgb(241,137,19)" fg:x="2081" fg:w="10"/><text x="24.8133%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (9 samples, 0.11%)</title><rect x="24.5751%" y="933" width="0.1062%" height="15" fill="rgb(244,24,17)" fg:x="2082" fg:w="9"/><text x="24.8251%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.08%)</title><rect x="24.5987%" y="917" width="0.0826%" height="15" fill="rgb(245,178,49)" fg:x="2084" fg:w="7"/><text x="24.8487%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.08%)</title><rect x="24.5987%" y="901" width="0.0826%" height="15" fill="rgb(219,160,38)" fg:x="2084" fg:w="7"/><text x="24.8487%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="24.6695%" y="885" width="0.0118%" height="15" fill="rgb(228,137,14)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="24.6695%" y="869" width="0.0118%" height="15" fill="rgb(237,134,11)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="24.6695%" y="853" width="0.0118%" height="15" fill="rgb(211,126,44)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="24.6695%" y="837" width="0.0118%" height="15" fill="rgb(226,171,33)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.6695%" y="821" width="0.0118%" height="15" fill="rgb(253,99,13)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.6695%" y="805" width="0.0118%" height="15" fill="rgb(244,48,7)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="815.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="24.6695%" y="789" width="0.0118%" height="15" fill="rgb(244,217,54)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="799.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="24.6695%" y="773" width="0.0118%" height="15" fill="rgb(224,15,18)" fg:x="2090" fg:w="1"/><text x="24.9195%" y="783.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (1 samples, 0.01%)</title><rect x="24.6813%" y="917" width="0.0118%" height="15" fill="rgb(244,99,12)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="24.6813%" y="901" width="0.0118%" height="15" fill="rgb(233,226,8)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="911.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (1 samples, 0.01%)</title><rect x="24.6813%" y="885" width="0.0118%" height="15" fill="rgb(229,211,3)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (1 samples, 0.01%)</title><rect x="24.6813%" y="869" width="0.0118%" height="15" fill="rgb(216,140,21)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="879.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="24.6813%" y="853" width="0.0118%" height="15" fill="rgb(234,122,30)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="863.50"></text></g><g><title>ruint::algorithms::mul::addmul (1 samples, 0.01%)</title><rect x="24.6813%" y="837" width="0.0118%" height="15" fill="rgb(236,25,46)" fg:x="2091" fg:w="1"/><text x="24.9313%" y="847.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (5 samples, 0.06%)</title><rect x="24.6813%" y="933" width="0.0590%" height="15" fill="rgb(217,52,54)" fg:x="2091" fg:w="5"/><text x="24.9313%" y="943.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (4 samples, 0.05%)</title><rect x="24.6931%" y="917" width="0.0472%" height="15" fill="rgb(222,29,26)" fg:x="2092" fg:w="4"/><text x="24.9431%" y="927.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (4 samples, 0.05%)</title><rect x="24.6931%" y="901" width="0.0472%" height="15" fill="rgb(216,177,29)" fg:x="2092" fg:w="4"/><text x="24.9431%" y="911.50"></text></g><g><title>ruint::algorithms::mul::addmul (4 samples, 0.05%)</title><rect x="24.6931%" y="885" width="0.0472%" height="15" fill="rgb(247,136,51)" fg:x="2092" fg:w="4"/><text x="24.9431%" y="895.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="24.7403%" y="773" width="0.0118%" height="15" fill="rgb(231,47,47)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="24.7403%" y="757" width="0.0118%" height="15" fill="rgb(211,192,36)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7403%" y="741" width="0.0118%" height="15" fill="rgb(229,156,32)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7403%" y="725" width="0.0118%" height="15" fill="rgb(248,213,20)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7403%" y="709" width="0.0118%" height="15" fill="rgb(217,64,7)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.7403%" y="693" width="0.0118%" height="15" fill="rgb(232,142,8)" fg:x="2096" fg:w="1"/><text x="24.9903%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="24.7403%" y="885" width="0.0236%" height="15" fill="rgb(224,92,44)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="24.7403%" y="869" width="0.0236%" height="15" fill="rgb(214,169,17)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="24.7403%" y="853" width="0.0236%" height="15" fill="rgb(210,59,37)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="24.7403%" y="837" width="0.0236%" height="15" fill="rgb(214,116,48)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="24.7403%" y="821" width="0.0236%" height="15" fill="rgb(244,191,6)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="24.7403%" y="805" width="0.0236%" height="15" fill="rgb(241,50,52)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="24.7403%" y="789" width="0.0236%" height="15" fill="rgb(236,75,39)" fg:x="2096" fg:w="2"/><text x="24.9903%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="24.7521%" y="773" width="0.0118%" height="15" fill="rgb(236,99,0)" fg:x="2097" fg:w="1"/><text x="25.0021%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7521%" y="757" width="0.0118%" height="15" fill="rgb(207,202,15)" fg:x="2097" fg:w="1"/><text x="25.0021%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7521%" y="741" width="0.0118%" height="15" fill="rgb(233,207,14)" fg:x="2097" fg:w="1"/><text x="25.0021%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.7521%" y="725" width="0.0118%" height="15" fill="rgb(226,27,51)" fg:x="2097" fg:w="1"/><text x="25.0021%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="24.7521%" y="709" width="0.0118%" height="15" fill="rgb(206,104,42)" fg:x="2097" fg:w="1"/><text x="25.0021%" y="719.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (8 samples, 0.09%)</title><rect x="24.6813%" y="981" width="0.0944%" height="15" fill="rgb(212,225,4)" fg:x="2091" fg:w="8"/><text x="24.9313%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (8 samples, 0.09%)</title><rect x="24.6813%" y="965" width="0.0944%" height="15" fill="rgb(233,96,42)" fg:x="2091" fg:w="8"/><text x="24.9313%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (8 samples, 0.09%)</title><rect x="24.6813%" y="949" width="0.0944%" height="15" fill="rgb(229,21,32)" fg:x="2091" fg:w="8"/><text x="24.9313%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.04%)</title><rect x="24.7403%" y="933" width="0.0354%" height="15" fill="rgb(226,216,24)" fg:x="2096" fg:w="3"/><text x="24.9903%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.04%)</title><rect x="24.7403%" y="917" width="0.0354%" height="15" fill="rgb(221,163,17)" fg:x="2096" fg:w="3"/><text x="24.9903%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.04%)</title><rect x="24.7403%" y="901" width="0.0354%" height="15" fill="rgb(216,216,42)" fg:x="2096" fg:w="3"/><text x="24.9903%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="24.7639%" y="885" width="0.0118%" height="15" fill="rgb(240,118,7)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="24.7639%" y="869" width="0.0118%" height="15" fill="rgb(221,67,37)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="24.7639%" y="853" width="0.0118%" height="15" fill="rgb(241,32,44)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="24.7639%" y="837" width="0.0118%" height="15" fill="rgb(235,204,43)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.7639%" y="821" width="0.0118%" height="15" fill="rgb(213,116,10)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="24.7639%" y="805" width="0.0118%" height="15" fill="rgb(239,15,48)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="815.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="24.7639%" y="789" width="0.0118%" height="15" fill="rgb(207,123,36)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="799.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="24.7639%" y="773" width="0.0118%" height="15" fill="rgb(209,103,30)" fg:x="2098" fg:w="1"/><text x="25.0139%" y="783.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_access_list (1 samples, 0.01%)</title><rect x="24.7757%" y="933" width="0.0118%" height="15" fill="rgb(238,100,19)" fg:x="2099" fg:w="1"/><text x="25.0257%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="24.7875%" y="917" width="0.0118%" height="15" fill="rgb(244,30,14)" fg:x="2100" fg:w="1"/><text x="25.0375%" y="927.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="24.8111%" y="869" width="0.0118%" height="15" fill="rgb(249,174,6)" fg:x="2102" fg:w="1"/><text x="25.0611%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="24.8111%" y="853" width="0.0118%" height="15" fill="rgb(235,213,41)" fg:x="2102" fg:w="1"/><text x="25.0611%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="24.8229%" y="869" width="0.0118%" height="15" fill="rgb(213,118,6)" fg:x="2103" fg:w="1"/><text x="25.0729%" y="879.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="24.8229%" y="853" width="0.0118%" height="15" fill="rgb(235,44,51)" fg:x="2103" fg:w="1"/><text x="25.0729%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.02%)</title><rect x="24.8347%" y="757" width="0.0236%" height="15" fill="rgb(217,9,53)" fg:x="2104" fg:w="2"/><text x="25.0847%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="24.8347%" y="741" width="0.0236%" height="15" fill="rgb(237,172,34)" fg:x="2104" fg:w="2"/><text x="25.0847%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.04%)</title><rect x="24.8584%" y="757" width="0.0354%" height="15" fill="rgb(206,206,11)" fg:x="2106" fg:w="3"/><text x="25.1084%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.04%)</title><rect x="24.8584%" y="741" width="0.0354%" height="15" fill="rgb(214,149,29)" fg:x="2106" fg:w="3"/><text x="25.1084%" y="751.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (6 samples, 0.07%)</title><rect x="24.8347%" y="773" width="0.0708%" height="15" fill="rgb(208,123,3)" fg:x="2104" fg:w="6"/><text x="25.0847%" y="783.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin_no_yield (1 samples, 0.01%)</title><rect x="24.8938%" y="757" width="0.0118%" height="15" fill="rgb(229,126,4)" fg:x="2109" fg:w="1"/><text x="25.1438%" y="767.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.01%)</title><rect x="24.8938%" y="741" width="0.0118%" height="15" fill="rgb(222,92,36)" fg:x="2109" fg:w="1"/><text x="25.1438%" y="751.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.01%)</title><rect x="24.8938%" y="725" width="0.0118%" height="15" fill="rgb(216,39,41)" fg:x="2109" fg:w="1"/><text x="25.1438%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.01%)</title><rect x="24.8938%" y="709" width="0.0118%" height="15" fill="rgb(253,127,28)" fg:x="2109" fg:w="1"/><text x="25.1438%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (4 samples, 0.05%)</title><rect x="24.9056%" y="757" width="0.0472%" height="15" fill="rgb(249,152,51)" fg:x="2110" fg:w="4"/><text x="25.1556%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.05%)</title><rect x="24.9056%" y="741" width="0.0472%" height="15" fill="rgb(209,123,42)" fg:x="2110" fg:w="4"/><text x="25.1556%" y="751.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (16 samples, 0.19%)</title><rect x="24.8347%" y="821" width="0.1889%" height="15" fill="rgb(241,118,22)" fg:x="2104" fg:w="16"/><text x="25.0847%" y="831.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (16 samples, 0.19%)</title><rect x="24.8347%" y="805" width="0.1889%" height="15" fill="rgb(208,25,7)" fg:x="2104" fg:w="16"/><text x="25.0847%" y="815.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (16 samples, 0.19%)</title><rect x="24.8347%" y="789" width="0.1889%" height="15" fill="rgb(243,144,39)" fg:x="2104" fg:w="16"/><text x="25.0847%" y="799.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (10 samples, 0.12%)</title><rect x="24.9056%" y="773" width="0.1180%" height="15" fill="rgb(250,50,5)" fg:x="2110" fg:w="10"/><text x="25.1556%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.07%)</title><rect x="24.9528%" y="757" width="0.0708%" height="15" fill="rgb(207,67,11)" fg:x="2114" fg:w="6"/><text x="25.2028%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.07%)</title><rect x="24.9528%" y="741" width="0.0708%" height="15" fill="rgb(245,204,40)" fg:x="2114" fg:w="6"/><text x="25.2028%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="25.0236%" y="821" width="0.0118%" height="15" fill="rgb(238,228,24)" fg:x="2120" fg:w="1"/><text x="25.2736%" y="831.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="25.0236%" y="805" width="0.0118%" height="15" fill="rgb(217,116,22)" fg:x="2120" fg:w="1"/><text x="25.2736%" y="815.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (1 samples, 0.01%)</title><rect x="25.0236%" y="789" width="0.0118%" height="15" fill="rgb(234,98,12)" fg:x="2120" fg:w="1"/><text x="25.2736%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="25.0236%" y="773" width="0.0118%" height="15" fill="rgb(242,170,50)" fg:x="2120" fg:w="1"/><text x="25.2736%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="25.0236%" y="757" width="0.0118%" height="15" fill="rgb(235,7,5)" fg:x="2120" fg:w="1"/><text x="25.2736%" y="767.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (1 samples, 0.01%)</title><rect x="25.0354%" y="821" width="0.0118%" height="15" fill="rgb(241,114,28)" fg:x="2121" fg:w="1"/><text x="25.2854%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.0472%" y="805" width="0.0118%" height="15" fill="rgb(246,112,42)" fg:x="2122" fg:w="1"/><text x="25.2972%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.0472%" y="789" width="0.0118%" height="15" fill="rgb(248,228,14)" fg:x="2122" fg:w="1"/><text x="25.2972%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.0472%" y="773" width="0.0118%" height="15" fill="rgb(208,133,18)" fg:x="2122" fg:w="1"/><text x="25.2972%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="25.0472%" y="757" width="0.0118%" height="15" fill="rgb(207,35,49)" fg:x="2122" fg:w="1"/><text x="25.2972%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="25.0472%" y="741" width="0.0118%" height="15" fill="rgb(205,68,36)" fg:x="2122" fg:w="1"/><text x="25.2972%" y="751.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="25.0590%" y="805" width="0.0236%" height="15" fill="rgb(245,62,40)" fg:x="2123" fg:w="2"/><text x="25.3090%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.0826%" y="773" width="0.0236%" height="15" fill="rgb(228,27,24)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.0826%" y="757" width="0.0236%" height="15" fill="rgb(253,19,12)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="25.0826%" y="741" width="0.0236%" height="15" fill="rgb(232,28,20)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="25.0826%" y="725" width="0.0236%" height="15" fill="rgb(218,35,51)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="735.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="25.0826%" y="709" width="0.0236%" height="15" fill="rgb(212,90,40)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="25.0826%" y="693" width="0.0236%" height="15" fill="rgb(220,172,12)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.0826%" y="677" width="0.0236%" height="15" fill="rgb(226,159,20)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.0826%" y="661" width="0.0236%" height="15" fill="rgb(234,205,16)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.0826%" y="645" width="0.0236%" height="15" fill="rgb(207,9,39)" fg:x="2125" fg:w="2"/><text x="25.3326%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="25.0944%" y="629" width="0.0118%" height="15" fill="rgb(249,143,15)" fg:x="2126" fg:w="1"/><text x="25.3444%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1062%" y="773" width="0.0118%" height="15" fill="rgb(253,133,29)" fg:x="2127" fg:w="1"/><text x="25.3562%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1062%" y="757" width="0.0118%" height="15" fill="rgb(221,187,0)" fg:x="2127" fg:w="1"/><text x="25.3562%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1062%" y="741" width="0.0118%" height="15" fill="rgb(205,204,26)" fg:x="2127" fg:w="1"/><text x="25.3562%" y="751.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (7 samples, 0.08%)</title><rect x="25.0472%" y="821" width="0.0826%" height="15" fill="rgb(224,68,54)" fg:x="2122" fg:w="7"/><text x="25.2972%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="25.0826%" y="805" width="0.0472%" height="15" fill="rgb(209,67,4)" fg:x="2125" fg:w="4"/><text x="25.3326%" y="815.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="25.0826%" y="789" width="0.0472%" height="15" fill="rgb(228,229,18)" fg:x="2125" fg:w="4"/><text x="25.3326%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="25.1180%" y="773" width="0.0118%" height="15" fill="rgb(231,89,13)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="783.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="25.1180%" y="757" width="0.0118%" height="15" fill="rgb(210,182,18)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="25.1180%" y="741" width="0.0118%" height="15" fill="rgb(240,105,2)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1180%" y="725" width="0.0118%" height="15" fill="rgb(207,170,50)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1180%" y="709" width="0.0118%" height="15" fill="rgb(232,133,24)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.1180%" y="693" width="0.0118%" height="15" fill="rgb(235,166,27)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="25.1180%" y="677" width="0.0118%" height="15" fill="rgb(209,19,13)" fg:x="2128" fg:w="1"/><text x="25.3680%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2479%" y="661" width="0.0118%" height="15" fill="rgb(226,79,39)" fg:x="2139" fg:w="1"/><text x="25.4979%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2479%" y="645" width="0.0118%" height="15" fill="rgb(222,163,10)" fg:x="2139" fg:w="1"/><text x="25.4979%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2479%" y="629" width="0.0118%" height="15" fill="rgb(214,44,19)" fg:x="2139" fg:w="1"/><text x="25.4979%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="25.2479%" y="613" width="0.0118%" height="15" fill="rgb(210,217,13)" fg:x="2139" fg:w="1"/><text x="25.4979%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.2479%" y="757" width="0.0236%" height="15" fill="rgb(237,61,54)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.2479%" y="741" width="0.0236%" height="15" fill="rgb(226,184,24)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="25.2479%" y="725" width="0.0236%" height="15" fill="rgb(223,226,4)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="25.2479%" y="709" width="0.0236%" height="15" fill="rgb(210,26,41)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="25.2479%" y="693" width="0.0236%" height="15" fill="rgb(220,221,6)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="25.2479%" y="677" width="0.0236%" height="15" fill="rgb(225,89,49)" fg:x="2139" fg:w="2"/><text x="25.4979%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="25.2597%" y="661" width="0.0118%" height="15" fill="rgb(218,70,45)" fg:x="2140" fg:w="1"/><text x="25.5097%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2715%" y="757" width="0.0118%" height="15" fill="rgb(238,166,21)" fg:x="2141" fg:w="1"/><text x="25.5215%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2715%" y="741" width="0.0118%" height="15" fill="rgb(224,141,44)" fg:x="2141" fg:w="1"/><text x="25.5215%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2715%" y="725" width="0.0118%" height="15" fill="rgb(230,12,49)" fg:x="2141" fg:w="1"/><text x="25.5215%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="25.2715%" y="709" width="0.0118%" height="15" fill="rgb(212,174,12)" fg:x="2141" fg:w="1"/><text x="25.5215%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="25.2715%" y="693" width="0.0118%" height="15" fill="rgb(246,67,9)" fg:x="2141" fg:w="1"/><text x="25.5215%" y="703.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="25.2361%" y="773" width="0.0590%" height="15" fill="rgb(239,35,23)" fg:x="2138" fg:w="5"/><text x="25.4861%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="25.2833%" y="757" width="0.0118%" height="15" fill="rgb(211,167,0)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="767.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="25.2833%" y="741" width="0.0118%" height="15" fill="rgb(225,119,45)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="25.2833%" y="725" width="0.0118%" height="15" fill="rgb(210,162,6)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2833%" y="709" width="0.0118%" height="15" fill="rgb(208,118,35)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2833%" y="693" width="0.0118%" height="15" fill="rgb(239,4,53)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.2833%" y="677" width="0.0118%" height="15" fill="rgb(213,130,21)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="25.2833%" y="661" width="0.0118%" height="15" fill="rgb(235,148,0)" fg:x="2142" fg:w="1"/><text x="25.5333%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="25.2361%" y="789" width="0.0708%" height="15" fill="rgb(244,224,18)" fg:x="2138" fg:w="6"/><text x="25.4861%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.2951%" y="773" width="0.0118%" height="15" fill="rgb(211,214,4)" fg:x="2143" fg:w="1"/><text x="25.5451%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.2951%" y="757" width="0.0118%" height="15" fill="rgb(206,119,25)" fg:x="2143" fg:w="1"/><text x="25.5451%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.2951%" y="741" width="0.0118%" height="15" fill="rgb(243,93,47)" fg:x="2143" fg:w="1"/><text x="25.5451%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="25.2951%" y="725" width="0.0118%" height="15" fill="rgb(224,194,6)" fg:x="2143" fg:w="1"/><text x="25.5451%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="25.2951%" y="709" width="0.0118%" height="15" fill="rgb(243,229,6)" fg:x="2143" fg:w="1"/><text x="25.5451%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="25.3069%" y="741" width="0.0118%" height="15" fill="rgb(207,23,50)" fg:x="2144" fg:w="1"/><text x="25.5569%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="25.3069%" y="725" width="0.0118%" height="15" fill="rgb(253,192,32)" fg:x="2144" fg:w="1"/><text x="25.5569%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="25.3069%" y="709" width="0.0118%" height="15" fill="rgb(213,21,6)" fg:x="2144" fg:w="1"/><text x="25.5569%" y="719.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (42 samples, 0.50%)</title><rect x="24.8347%" y="869" width="0.4958%" height="15" fill="rgb(243,151,13)" fg:x="2104" fg:w="42"/><text x="25.0847%" y="879.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (42 samples, 0.50%)</title><rect x="24.8347%" y="853" width="0.4958%" height="15" fill="rgb(233,165,41)" fg:x="2104" fg:w="42"/><text x="25.0847%" y="863.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (42 samples, 0.50%)</title><rect x="24.8347%" y="837" width="0.4958%" height="15" fill="rgb(246,176,45)" fg:x="2104" fg:w="42"/><text x="25.0847%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (17 samples, 0.20%)</title><rect x="25.1298%" y="821" width="0.2007%" height="15" fill="rgb(217,170,52)" fg:x="2129" fg:w="17"/><text x="25.3798%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.20%)</title><rect x="25.1298%" y="805" width="0.2007%" height="15" fill="rgb(214,203,54)" fg:x="2129" fg:w="17"/><text x="25.3798%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="25.3069%" y="789" width="0.0236%" height="15" fill="rgb(248,215,49)" fg:x="2144" fg:w="2"/><text x="25.5569%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="25.3069%" y="773" width="0.0236%" height="15" fill="rgb(208,46,10)" fg:x="2144" fg:w="2"/><text x="25.5569%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="25.3069%" y="757" width="0.0236%" height="15" fill="rgb(254,5,31)" fg:x="2144" fg:w="2"/><text x="25.5569%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="25.3187%" y="741" width="0.0118%" height="15" fill="rgb(222,104,33)" fg:x="2145" fg:w="1"/><text x="25.5687%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="25.3187%" y="725" width="0.0118%" height="15" fill="rgb(248,49,16)" fg:x="2145" fg:w="1"/><text x="25.5687%" y="735.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (48 samples, 0.57%)</title><rect x="24.7993%" y="917" width="0.5666%" height="15" fill="rgb(232,198,41)" fg:x="2101" fg:w="48"/><text x="25.0493%" y="927.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (48 samples, 0.57%)</title><rect x="24.7993%" y="901" width="0.5666%" height="15" fill="rgb(214,125,3)" fg:x="2101" fg:w="48"/><text x="25.0493%" y="911.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (48 samples, 0.57%)</title><rect x="24.7993%" y="885" width="0.5666%" height="15" fill="rgb(229,220,28)" fg:x="2101" fg:w="48"/><text x="25.0493%" y="895.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (3 samples, 0.04%)</title><rect x="25.3305%" y="869" width="0.0354%" height="15" fill="rgb(222,64,37)" fg:x="2146" fg:w="3"/><text x="25.5805%" y="879.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (3 samples, 0.04%)</title><rect x="25.3305%" y="853" width="0.0354%" height="15" fill="rgb(249,184,13)" fg:x="2146" fg:w="3"/><text x="25.5805%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.04%)</title><rect x="25.3305%" y="837" width="0.0354%" height="15" fill="rgb(252,176,6)" fg:x="2146" fg:w="3"/><text x="25.5805%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.04%)</title><rect x="25.3305%" y="821" width="0.0354%" height="15" fill="rgb(228,153,7)" fg:x="2146" fg:w="3"/><text x="25.5805%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.04%)</title><rect x="25.3305%" y="805" width="0.0354%" height="15" fill="rgb(242,193,5)" fg:x="2146" fg:w="3"/><text x="25.5805%" y="815.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="25.4721%" y="741" width="0.0236%" height="15" fill="rgb(232,140,9)" fg:x="2158" fg:w="2"/><text x="25.7221%" y="751.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="25.4721%" y="725" width="0.0236%" height="15" fill="rgb(213,222,16)" fg:x="2158" fg:w="2"/><text x="25.7221%" y="735.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="25.4721%" y="709" width="0.0236%" height="15" fill="rgb(222,75,50)" fg:x="2158" fg:w="2"/><text x="25.7221%" y="719.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="25.4721%" y="693" width="0.0236%" height="15" fill="rgb(205,180,2)" fg:x="2158" fg:w="2"/><text x="25.7221%" y="703.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="25.4721%" y="677" width="0.0236%" height="15" fill="rgb(216,34,7)" fg:x="2158" fg:w="2"/><text x="25.7221%" y="687.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="25.4839%" y="661" width="0.0118%" height="15" fill="rgb(253,16,32)" fg:x="2159" fg:w="1"/><text x="25.7339%" y="671.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="25.4839%" y="645" width="0.0118%" height="15" fill="rgb(208,97,28)" fg:x="2159" fg:w="1"/><text x="25.7339%" y="655.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="25.4839%" y="629" width="0.0118%" height="15" fill="rgb(225,92,11)" fg:x="2159" fg:w="1"/><text x="25.7339%" y="639.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="25.4839%" y="613" width="0.0118%" height="15" fill="rgb(243,38,12)" fg:x="2159" fg:w="1"/><text x="25.7339%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.14%)</title><rect x="25.3659%" y="869" width="0.1416%" height="15" fill="rgb(208,139,16)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.14%)</title><rect x="25.3659%" y="853" width="0.1416%" height="15" fill="rgb(227,24,9)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.14%)</title><rect x="25.3659%" y="837" width="0.1416%" height="15" fill="rgb(206,62,11)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.14%)</title><rect x="25.3659%" y="821" width="0.1416%" height="15" fill="rgb(228,134,27)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.14%)</title><rect x="25.3659%" y="805" width="0.1416%" height="15" fill="rgb(205,55,33)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="815.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.14%)</title><rect x="25.3659%" y="789" width="0.1416%" height="15" fill="rgb(243,75,43)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="799.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.14%)</title><rect x="25.3659%" y="773" width="0.1416%" height="15" fill="rgb(223,27,42)" fg:x="2149" fg:w="12"/><text x="25.6159%" y="783.50"></text></g><g><title>_int_malloc (5 samples, 0.06%)</title><rect x="25.4485%" y="757" width="0.0590%" height="15" fill="rgb(232,189,33)" fg:x="2156" fg:w="5"/><text x="25.6985%" y="767.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="25.4958%" y="741" width="0.0118%" height="15" fill="rgb(210,9,39)" fg:x="2160" fg:w="1"/><text x="25.7458%" y="751.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (13 samples, 0.15%)</title><rect x="25.3659%" y="917" width="0.1534%" height="15" fill="rgb(242,85,26)" fg:x="2149" fg:w="13"/><text x="25.6159%" y="927.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (13 samples, 0.15%)</title><rect x="25.3659%" y="901" width="0.1534%" height="15" fill="rgb(248,44,4)" fg:x="2149" fg:w="13"/><text x="25.6159%" y="911.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (13 samples, 0.15%)</title><rect x="25.3659%" y="885" width="0.1534%" height="15" fill="rgb(250,96,46)" fg:x="2149" fg:w="13"/><text x="25.6159%" y="895.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="25.5076%" y="869" width="0.0118%" height="15" fill="rgb(229,116,26)" fg:x="2161" fg:w="1"/><text x="25.7576%" y="879.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (1 samples, 0.01%)</title><rect x="25.5076%" y="853" width="0.0118%" height="15" fill="rgb(246,94,34)" fg:x="2161" fg:w="1"/><text x="25.7576%" y="863.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="25.5076%" y="837" width="0.0118%" height="15" fill="rgb(251,73,21)" fg:x="2161" fg:w="1"/><text x="25.7576%" y="847.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::partial_tail (1 samples, 0.01%)</title><rect x="25.5076%" y="821" width="0.0118%" height="15" fill="rgb(254,121,25)" fg:x="2161" fg:w="1"/><text x="25.7576%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.5194%" y="853" width="0.0118%" height="15" fill="rgb(215,161,49)" fg:x="2162" fg:w="1"/><text x="25.7694%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.5194%" y="837" width="0.0118%" height="15" fill="rgb(221,43,13)" fg:x="2162" fg:w="1"/><text x="25.7694%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="25.5194%" y="821" width="0.0118%" height="15" fill="rgb(249,5,37)" fg:x="2162" fg:w="1"/><text x="25.7694%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="25.5312%" y="853" width="0.0118%" height="15" fill="rgb(226,25,44)" fg:x="2163" fg:w="1"/><text x="25.7812%" y="863.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="25.5430%" y="773" width="0.0236%" height="15" fill="rgb(238,189,16)" fg:x="2164" fg:w="2"/><text x="25.7930%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="25.5430%" y="757" width="0.0236%" height="15" fill="rgb(251,186,8)" fg:x="2164" fg:w="2"/><text x="25.7930%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.5430%" y="741" width="0.0236%" height="15" fill="rgb(254,34,31)" fg:x="2164" fg:w="2"/><text x="25.7930%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.5430%" y="725" width="0.0236%" height="15" fill="rgb(225,215,27)" fg:x="2164" fg:w="2"/><text x="25.7930%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.5430%" y="709" width="0.0236%" height="15" fill="rgb(221,192,48)" fg:x="2164" fg:w="2"/><text x="25.7930%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.06%)</title><rect x="25.5194%" y="901" width="0.0590%" height="15" fill="rgb(219,137,20)" fg:x="2162" fg:w="5"/><text x="25.7694%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="25.5194%" y="885" width="0.0590%" height="15" fill="rgb(219,84,11)" fg:x="2162" fg:w="5"/><text x="25.7694%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="25.5194%" y="869" width="0.0590%" height="15" fill="rgb(224,10,23)" fg:x="2162" fg:w="5"/><text x="25.7694%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="25.5430%" y="853" width="0.0354%" height="15" fill="rgb(248,22,39)" fg:x="2164" fg:w="3"/><text x="25.7930%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="25.5430%" y="837" width="0.0354%" height="15" fill="rgb(212,154,20)" fg:x="2164" fg:w="3"/><text x="25.7930%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="25.5430%" y="821" width="0.0354%" height="15" fill="rgb(236,199,50)" fg:x="2164" fg:w="3"/><text x="25.7930%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="25.5430%" y="805" width="0.0354%" height="15" fill="rgb(211,9,17)" fg:x="2164" fg:w="3"/><text x="25.7930%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="25.5430%" y="789" width="0.0354%" height="15" fill="rgb(243,216,36)" fg:x="2164" fg:w="3"/><text x="25.7930%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="25.5666%" y="773" width="0.0118%" height="15" fill="rgb(250,2,10)" fg:x="2166" fg:w="1"/><text x="25.8166%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.5666%" y="757" width="0.0118%" height="15" fill="rgb(226,50,48)" fg:x="2166" fg:w="1"/><text x="25.8166%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.5666%" y="741" width="0.0118%" height="15" fill="rgb(243,81,16)" fg:x="2166" fg:w="1"/><text x="25.8166%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="25.5666%" y="725" width="0.0118%" height="15" fill="rgb(250,14,2)" fg:x="2166" fg:w="1"/><text x="25.8166%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.13%)</title><rect x="25.5194%" y="917" width="0.1298%" height="15" fill="rgb(233,135,29)" fg:x="2162" fg:w="11"/><text x="25.7694%" y="927.50"></text></g><g><title>std::collections::hash::map::map_entry (6 samples, 0.07%)</title><rect x="25.5784%" y="901" width="0.0708%" height="15" fill="rgb(224,64,43)" fg:x="2167" fg:w="6"/><text x="25.8284%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="25.6492%" y="885" width="0.0118%" height="15" fill="rgb(238,84,13)" fg:x="2173" fg:w="1"/><text x="25.8992%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="25.6610%" y="869" width="0.0236%" height="15" fill="rgb(253,48,26)" fg:x="2174" fg:w="2"/><text x="25.9110%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="25.6610%" y="853" width="0.0236%" height="15" fill="rgb(205,223,31)" fg:x="2174" fg:w="2"/><text x="25.9110%" y="863.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="25.6610%" y="837" width="0.0236%" height="15" fill="rgb(221,41,32)" fg:x="2174" fg:w="2"/><text x="25.9110%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="25.6610%" y="821" width="0.0236%" height="15" fill="rgb(213,158,31)" fg:x="2174" fg:w="2"/><text x="25.9110%" y="831.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (78 samples, 0.92%)</title><rect x="24.7757%" y="981" width="0.9207%" height="15" fill="rgb(245,126,43)" fg:x="2099" fg:w="78"/><text x="25.0257%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (78 samples, 0.92%)</title><rect x="24.7757%" y="965" width="0.9207%" height="15" fill="rgb(227,7,22)" fg:x="2099" fg:w="78"/><text x="25.0257%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (78 samples, 0.92%)</title><rect x="24.7757%" y="949" width="0.9207%" height="15" fill="rgb(252,90,44)" fg:x="2099" fg:w="78"/><text x="25.0257%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (77 samples, 0.91%)</title><rect x="24.7875%" y="933" width="0.9089%" height="15" fill="rgb(253,91,0)" fg:x="2100" fg:w="77"/><text x="25.0375%" y="943.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (4 samples, 0.05%)</title><rect x="25.6492%" y="917" width="0.0472%" height="15" fill="rgb(252,175,49)" fg:x="2173" fg:w="4"/><text x="25.8992%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.05%)</title><rect x="25.6492%" y="901" width="0.0472%" height="15" fill="rgb(246,150,1)" fg:x="2173" fg:w="4"/><text x="25.8992%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.04%)</title><rect x="25.6610%" y="885" width="0.0354%" height="15" fill="rgb(241,192,25)" fg:x="2174" fg:w="3"/><text x="25.9110%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.01%)</title><rect x="25.6846%" y="869" width="0.0118%" height="15" fill="rgb(239,187,11)" fg:x="2176" fg:w="1"/><text x="25.9346%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.01%)</title><rect x="25.6846%" y="853" width="0.0118%" height="15" fill="rgb(218,202,51)" fg:x="2176" fg:w="1"/><text x="25.9346%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.01%)</title><rect x="25.6846%" y="837" width="0.0118%" height="15" fill="rgb(225,176,8)" fg:x="2176" fg:w="1"/><text x="25.9346%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.01%)</title><rect x="25.6846%" y="821" width="0.0118%" height="15" fill="rgb(219,122,41)" fg:x="2176" fg:w="1"/><text x="25.9346%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="25.7436%" y="789" width="0.0236%" height="15" fill="rgb(248,140,20)" fg:x="2181" fg:w="2"/><text x="25.9936%" y="799.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="25.7436%" y="773" width="0.0236%" height="15" fill="rgb(245,41,37)" fg:x="2181" fg:w="2"/><text x="25.9936%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="25.7436%" y="757" width="0.0236%" height="15" fill="rgb(235,82,39)" fg:x="2181" fg:w="2"/><text x="25.9936%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="25.7554%" y="741" width="0.0118%" height="15" fill="rgb(230,108,42)" fg:x="2182" fg:w="1"/><text x="26.0054%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="25.7672%" y="741" width="0.0118%" height="15" fill="rgb(215,150,50)" fg:x="2183" fg:w="1"/><text x="26.0172%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="25.8263%" y="629" width="0.0236%" height="15" fill="rgb(233,212,5)" fg:x="2188" fg:w="2"/><text x="26.0763%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.09%)</title><rect x="25.8026%" y="693" width="0.0944%" height="15" fill="rgb(245,80,22)" fg:x="2186" fg:w="8"/><text x="26.0526%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.09%)</title><rect x="25.8026%" y="677" width="0.0944%" height="15" fill="rgb(238,129,16)" fg:x="2186" fg:w="8"/><text x="26.0526%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.09%)</title><rect x="25.8026%" y="661" width="0.0944%" height="15" fill="rgb(240,19,0)" fg:x="2186" fg:w="8"/><text x="26.0526%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.08%)</title><rect x="25.8144%" y="645" width="0.0826%" height="15" fill="rgb(232,42,35)" fg:x="2187" fg:w="7"/><text x="26.0644%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.05%)</title><rect x="25.8499%" y="629" width="0.0472%" height="15" fill="rgb(223,130,24)" fg:x="2190" fg:w="4"/><text x="26.0999%" y="639.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="25.8971%" y="693" width="0.0236%" height="15" fill="rgb(237,16,22)" fg:x="2194" fg:w="2"/><text x="26.1471%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="25.9443%" y="533" width="0.0236%" height="15" fill="rgb(248,192,20)" fg:x="2198" fg:w="2"/><text x="26.1943%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="25.9561%" y="517" width="0.0118%" height="15" fill="rgb(233,167,2)" fg:x="2199" fg:w="1"/><text x="26.2061%" y="527.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (9 samples, 0.11%)</title><rect x="25.9207%" y="613" width="0.1062%" height="15" fill="rgb(252,71,44)" fg:x="2196" fg:w="9"/><text x="26.1707%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (9 samples, 0.11%)</title><rect x="25.9207%" y="597" width="0.1062%" height="15" fill="rgb(238,37,47)" fg:x="2196" fg:w="9"/><text x="26.1707%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="25.9207%" y="581" width="0.1062%" height="15" fill="rgb(214,202,54)" fg:x="2196" fg:w="9"/><text x="26.1707%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="25.9207%" y="565" width="0.1062%" height="15" fill="rgb(254,165,40)" fg:x="2196" fg:w="9"/><text x="26.1707%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="25.9207%" y="549" width="0.1062%" height="15" fill="rgb(246,173,38)" fg:x="2196" fg:w="9"/><text x="26.1707%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.06%)</title><rect x="25.9679%" y="533" width="0.0590%" height="15" fill="rgb(215,3,27)" fg:x="2200" fg:w="5"/><text x="26.2179%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="26.0741%" y="533" width="0.0118%" height="15" fill="rgb(239,169,51)" fg:x="2209" fg:w="1"/><text x="26.3241%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (32 samples, 0.38%)</title><rect x="25.8026%" y="725" width="0.3777%" height="15" fill="rgb(212,5,25)" fg:x="2186" fg:w="32"/><text x="26.0526%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (32 samples, 0.38%)</title><rect x="25.8026%" y="709" width="0.3777%" height="15" fill="rgb(243,45,17)" fg:x="2186" fg:w="32"/><text x="26.0526%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22 samples, 0.26%)</title><rect x="25.9207%" y="693" width="0.2597%" height="15" fill="rgb(242,97,9)" fg:x="2196" fg:w="22"/><text x="26.1707%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (22 samples, 0.26%)</title><rect x="25.9207%" y="677" width="0.2597%" height="15" fill="rgb(228,71,31)" fg:x="2196" fg:w="22"/><text x="26.1707%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (22 samples, 0.26%)</title><rect x="25.9207%" y="661" width="0.2597%" height="15" fill="rgb(252,184,16)" fg:x="2196" fg:w="22"/><text x="26.1707%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (22 samples, 0.26%)</title><rect x="25.9207%" y="645" width="0.2597%" height="15" fill="rgb(236,169,46)" fg:x="2196" fg:w="22"/><text x="26.1707%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (22 samples, 0.26%)</title><rect x="25.9207%" y="629" width="0.2597%" height="15" fill="rgb(207,17,47)" fg:x="2196" fg:w="22"/><text x="26.1707%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (13 samples, 0.15%)</title><rect x="26.0269%" y="613" width="0.1534%" height="15" fill="rgb(206,201,28)" fg:x="2205" fg:w="13"/><text x="26.2769%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="26.0269%" y="597" width="0.1534%" height="15" fill="rgb(224,184,23)" fg:x="2205" fg:w="13"/><text x="26.2769%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="26.0269%" y="581" width="0.1534%" height="15" fill="rgb(208,139,48)" fg:x="2205" fg:w="13"/><text x="26.2769%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.15%)</title><rect x="26.0269%" y="565" width="0.1534%" height="15" fill="rgb(208,130,10)" fg:x="2205" fg:w="13"/><text x="26.2769%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.13%)</title><rect x="26.0505%" y="549" width="0.1298%" height="15" fill="rgb(211,213,45)" fg:x="2207" fg:w="11"/><text x="26.3005%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.09%)</title><rect x="26.0859%" y="533" width="0.0944%" height="15" fill="rgb(235,100,30)" fg:x="2210" fg:w="8"/><text x="26.3359%" y="543.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.1213%" y="517" width="0.0590%" height="15" fill="rgb(206,144,31)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="527.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.1213%" y="501" width="0.0590%" height="15" fill="rgb(224,200,26)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="511.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="26.1213%" y="485" width="0.0590%" height="15" fill="rgb(247,104,53)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="495.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="26.1213%" y="469" width="0.0590%" height="15" fill="rgb(220,14,17)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="479.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="26.1213%" y="453" width="0.0590%" height="15" fill="rgb(230,140,40)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="463.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="26.1213%" y="437" width="0.0590%" height="15" fill="rgb(229,2,41)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="447.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="26.1213%" y="421" width="0.0590%" height="15" fill="rgb(232,89,16)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="431.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="26.1213%" y="405" width="0.0590%" height="15" fill="rgb(247,59,52)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="415.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="26.1213%" y="389" width="0.0590%" height="15" fill="rgb(226,110,21)" fg:x="2213" fg:w="5"/><text x="26.3713%" y="399.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="26.1686%" y="373" width="0.0118%" height="15" fill="rgb(224,176,43)" fg:x="2217" fg:w="1"/><text x="26.4186%" y="383.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="26.1686%" y="357" width="0.0118%" height="15" fill="rgb(221,73,6)" fg:x="2217" fg:w="1"/><text x="26.4186%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="26.1922%" y="693" width="0.0118%" height="15" fill="rgb(232,78,19)" fg:x="2219" fg:w="1"/><text x="26.4422%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="26.2040%" y="693" width="0.0118%" height="15" fill="rgb(233,112,48)" fg:x="2220" fg:w="1"/><text x="26.4540%" y="703.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="26.2040%" y="677" width="0.0118%" height="15" fill="rgb(243,131,47)" fg:x="2220" fg:w="1"/><text x="26.4540%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9 samples, 0.11%)</title><rect x="26.1804%" y="725" width="0.1062%" height="15" fill="rgb(226,51,1)" fg:x="2218" fg:w="9"/><text x="26.4304%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.11%)</title><rect x="26.1804%" y="709" width="0.1062%" height="15" fill="rgb(247,58,7)" fg:x="2218" fg:w="9"/><text x="26.4304%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (6 samples, 0.07%)</title><rect x="26.2158%" y="693" width="0.0708%" height="15" fill="rgb(209,7,32)" fg:x="2221" fg:w="6"/><text x="26.4658%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (6 samples, 0.07%)</title><rect x="26.2158%" y="677" width="0.0708%" height="15" fill="rgb(209,39,41)" fg:x="2221" fg:w="6"/><text x="26.4658%" y="687.50"></text></g><g><title>hashbrown::raw::is_full (5 samples, 0.06%)</title><rect x="26.2276%" y="661" width="0.0590%" height="15" fill="rgb(226,182,46)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="671.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.2276%" y="645" width="0.0590%" height="15" fill="rgb(230,219,10)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="655.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.2276%" y="629" width="0.0590%" height="15" fill="rgb(227,175,30)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="639.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="26.2276%" y="613" width="0.0590%" height="15" fill="rgb(217,2,50)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="26.2276%" y="597" width="0.0590%" height="15" fill="rgb(229,160,0)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="607.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="26.2276%" y="581" width="0.0590%" height="15" fill="rgb(207,78,37)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="591.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="26.2276%" y="565" width="0.0590%" height="15" fill="rgb(225,57,0)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="575.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="26.2276%" y="549" width="0.0590%" height="15" fill="rgb(232,154,2)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="559.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="26.2276%" y="533" width="0.0590%" height="15" fill="rgb(241,212,25)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="26.2276%" y="517" width="0.0590%" height="15" fill="rgb(226,69,20)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="26.2276%" y="501" width="0.0590%" height="15" fill="rgb(247,184,54)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="511.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="26.2276%" y="485" width="0.0590%" height="15" fill="rgb(210,145,0)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="495.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="26.2276%" y="469" width="0.0590%" height="15" fill="rgb(253,82,12)" fg:x="2222" fg:w="5"/><text x="26.4776%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (11 samples, 0.13%)</title><rect x="26.2866%" y="709" width="0.1298%" height="15" fill="rgb(245,42,11)" fg:x="2227" fg:w="11"/><text x="26.5366%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (11 samples, 0.13%)</title><rect x="26.2866%" y="693" width="0.1298%" height="15" fill="rgb(219,147,32)" fg:x="2227" fg:w="11"/><text x="26.5366%" y="703.50"></text></g><g><title>core::ptr::write (11 samples, 0.13%)</title><rect x="26.2866%" y="677" width="0.1298%" height="15" fill="rgb(246,12,7)" fg:x="2227" fg:w="11"/><text x="26.5366%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.01%)</title><rect x="26.4164%" y="693" width="0.0118%" height="15" fill="rgb(243,50,9)" fg:x="2238" fg:w="1"/><text x="26.6664%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.01%)</title><rect x="26.4164%" y="677" width="0.0118%" height="15" fill="rgb(219,149,6)" fg:x="2238" fg:w="1"/><text x="26.6664%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 0.70%)</title><rect x="25.7436%" y="837" width="0.6964%" height="15" fill="rgb(241,51,42)" fg:x="2181" fg:w="59"/><text x="25.9936%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.70%)</title><rect x="25.7436%" y="821" width="0.6964%" height="15" fill="rgb(226,128,27)" fg:x="2181" fg:w="59"/><text x="25.9936%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (59 samples, 0.70%)</title><rect x="25.7436%" y="805" width="0.6964%" height="15" fill="rgb(244,144,4)" fg:x="2181" fg:w="59"/><text x="25.9936%" y="815.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (57 samples, 0.67%)</title><rect x="25.7672%" y="789" width="0.6728%" height="15" fill="rgb(221,4,13)" fg:x="2183" fg:w="57"/><text x="26.0172%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (57 samples, 0.67%)</title><rect x="25.7672%" y="773" width="0.6728%" height="15" fill="rgb(208,170,28)" fg:x="2183" fg:w="57"/><text x="26.0172%" y="783.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (57 samples, 0.67%)</title><rect x="25.7672%" y="757" width="0.6728%" height="15" fill="rgb(226,131,13)" fg:x="2183" fg:w="57"/><text x="26.0172%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.66%)</title><rect x="25.7790%" y="741" width="0.6610%" height="15" fill="rgb(215,72,41)" fg:x="2184" fg:w="56"/><text x="26.0290%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (13 samples, 0.15%)</title><rect x="26.2866%" y="725" width="0.1534%" height="15" fill="rgb(243,108,20)" fg:x="2227" fg:w="13"/><text x="26.5366%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.02%)</title><rect x="26.4164%" y="709" width="0.0236%" height="15" fill="rgb(230,189,17)" fg:x="2238" fg:w="2"/><text x="26.6664%" y="719.50"></text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.01%)</title><rect x="26.4282%" y="693" width="0.0118%" height="15" fill="rgb(220,50,17)" fg:x="2239" fg:w="1"/><text x="26.6782%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="26.4400%" y="645" width="0.0118%" height="15" fill="rgb(248,152,48)" fg:x="2240" fg:w="1"/><text x="26.6900%" y="655.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="26.4400%" y="629" width="0.0118%" height="15" fill="rgb(244,91,11)" fg:x="2240" fg:w="1"/><text x="26.6900%" y="639.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="26.4400%" y="613" width="0.0118%" height="15" fill="rgb(220,157,5)" fg:x="2240" fg:w="1"/><text x="26.6900%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.02%)</title><rect x="26.4400%" y="725" width="0.0236%" height="15" fill="rgb(253,137,8)" fg:x="2240" fg:w="2"/><text x="26.6900%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="26.4400%" y="709" width="0.0236%" height="15" fill="rgb(217,137,51)" fg:x="2240" fg:w="2"/><text x="26.6900%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="26.4400%" y="693" width="0.0236%" height="15" fill="rgb(218,209,53)" fg:x="2240" fg:w="2"/><text x="26.6900%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="26.4400%" y="677" width="0.0236%" height="15" fill="rgb(249,137,25)" fg:x="2240" fg:w="2"/><text x="26.6900%" y="687.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="26.4400%" y="661" width="0.0236%" height="15" fill="rgb(239,155,26)" fg:x="2240" fg:w="2"/><text x="26.6900%" y="671.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="26.4518%" y="645" width="0.0118%" height="15" fill="rgb(227,85,46)" fg:x="2241" fg:w="1"/><text x="26.7018%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (66 samples, 0.78%)</title><rect x="25.6964%" y="933" width="0.7790%" height="15" fill="rgb(251,107,43)" fg:x="2177" fg:w="66"/><text x="25.9464%" y="943.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (66 samples, 0.78%)</title><rect x="25.6964%" y="917" width="0.7790%" height="15" fill="rgb(234,170,33)" fg:x="2177" fg:w="66"/><text x="25.9464%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (66 samples, 0.78%)</title><rect x="25.6964%" y="901" width="0.7790%" height="15" fill="rgb(206,29,35)" fg:x="2177" fg:w="66"/><text x="25.9464%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (66 samples, 0.78%)</title><rect x="25.6964%" y="885" width="0.7790%" height="15" fill="rgb(227,138,25)" fg:x="2177" fg:w="66"/><text x="25.9464%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (62 samples, 0.73%)</title><rect x="25.7436%" y="869" width="0.7318%" height="15" fill="rgb(249,131,35)" fg:x="2181" fg:w="62"/><text x="25.9936%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (62 samples, 0.73%)</title><rect x="25.7436%" y="853" width="0.7318%" height="15" fill="rgb(239,6,40)" fg:x="2181" fg:w="62"/><text x="25.9936%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.04%)</title><rect x="26.4400%" y="837" width="0.0354%" height="15" fill="rgb(246,136,47)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.04%)</title><rect x="26.4400%" y="821" width="0.0354%" height="15" fill="rgb(253,58,26)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.04%)</title><rect x="26.4400%" y="805" width="0.0354%" height="15" fill="rgb(237,141,10)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.04%)</title><rect x="26.4400%" y="789" width="0.0354%" height="15" fill="rgb(234,156,12)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.04%)</title><rect x="26.4400%" y="773" width="0.0354%" height="15" fill="rgb(243,224,36)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.04%)</title><rect x="26.4400%" y="757" width="0.0354%" height="15" fill="rgb(205,229,51)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.04%)</title><rect x="26.4400%" y="741" width="0.0354%" height="15" fill="rgb(223,189,4)" fg:x="2240" fg:w="3"/><text x="26.6900%" y="751.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="26.4636%" y="725" width="0.0118%" height="15" fill="rgb(249,167,54)" fg:x="2242" fg:w="1"/><text x="26.7136%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.01%)</title><rect x="26.4636%" y="709" width="0.0118%" height="15" fill="rgb(218,34,28)" fg:x="2242" fg:w="1"/><text x="26.7136%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.01%)</title><rect x="26.4636%" y="693" width="0.0118%" height="15" fill="rgb(232,109,42)" fg:x="2242" fg:w="1"/><text x="26.7136%" y="703.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.01%)</title><rect x="26.5463%" y="837" width="0.0118%" height="15" fill="rgb(248,214,46)" fg:x="2249" fg:w="1"/><text x="26.7963%" y="847.50"></text></g><g><title>&lt;revm_primitives::precompile::Precompile as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="26.5463%" y="821" width="0.0118%" height="15" fill="rgb(244,216,40)" fg:x="2249" fg:w="1"/><text x="26.7963%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.07%)</title><rect x="26.5109%" y="869" width="0.0708%" height="15" fill="rgb(231,226,31)" fg:x="2246" fg:w="6"/><text x="26.7609%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (6 samples, 0.07%)</title><rect x="26.5109%" y="853" width="0.0708%" height="15" fill="rgb(238,38,43)" fg:x="2246" fg:w="6"/><text x="26.7609%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="26.5581%" y="837" width="0.0236%" height="15" fill="rgb(208,88,43)" fg:x="2250" fg:w="2"/><text x="26.8081%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="26.5581%" y="821" width="0.0236%" height="15" fill="rgb(205,136,37)" fg:x="2250" fg:w="2"/><text x="26.8081%" y="831.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="26.5581%" y="805" width="0.0236%" height="15" fill="rgb(237,34,14)" fg:x="2250" fg:w="2"/><text x="26.8081%" y="815.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (76 samples, 0.90%)</title><rect x="25.6964%" y="981" width="0.8971%" height="15" fill="rgb(236,193,44)" fg:x="2177" fg:w="76"/><text x="25.9464%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (76 samples, 0.90%)</title><rect x="25.6964%" y="965" width="0.8971%" height="15" fill="rgb(231,48,10)" fg:x="2177" fg:w="76"/><text x="25.9464%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (76 samples, 0.90%)</title><rect x="25.6964%" y="949" width="0.8971%" height="15" fill="rgb(213,141,34)" fg:x="2177" fg:w="76"/><text x="25.9464%" y="959.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="26.4754%" y="933" width="0.1180%" height="15" fill="rgb(249,130,34)" fg:x="2243" fg:w="10"/><text x="26.7254%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="26.4754%" y="917" width="0.1180%" height="15" fill="rgb(219,42,41)" fg:x="2243" fg:w="10"/><text x="26.7254%" y="927.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="26.4754%" y="901" width="0.1180%" height="15" fill="rgb(224,100,54)" fg:x="2243" fg:w="10"/><text x="26.7254%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.09%)</title><rect x="26.4991%" y="885" width="0.0944%" height="15" fill="rgb(229,200,27)" fg:x="2245" fg:w="8"/><text x="26.7491%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1 samples, 0.01%)</title><rect x="26.5817%" y="869" width="0.0118%" height="15" fill="rgb(217,118,10)" fg:x="2252" fg:w="1"/><text x="26.8317%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="26.5817%" y="853" width="0.0118%" height="15" fill="rgb(206,22,3)" fg:x="2252" fg:w="1"/><text x="26.8317%" y="863.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="26.5817%" y="837" width="0.0118%" height="15" fill="rgb(232,163,46)" fg:x="2252" fg:w="1"/><text x="26.8317%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="26.5817%" y="821" width="0.0118%" height="15" fill="rgb(206,95,13)" fg:x="2252" fg:w="1"/><text x="26.8317%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="26.5817%" y="805" width="0.0118%" height="15" fill="rgb(253,154,18)" fg:x="2252" fg:w="1"/><text x="26.8317%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="26.5935%" y="965" width="0.0236%" height="15" fill="rgb(219,32,23)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="26.5935%" y="949" width="0.0236%" height="15" fill="rgb(230,191,45)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="959.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="26.5935%" y="933" width="0.0236%" height="15" fill="rgb(229,64,36)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="943.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="26.5935%" y="917" width="0.0236%" height="15" fill="rgb(205,129,25)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="26.5935%" y="901" width="0.0236%" height="15" fill="rgb(254,112,7)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="26.5935%" y="885" width="0.0236%" height="15" fill="rgb(226,53,48)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="895.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="26.5935%" y="869" width="0.0236%" height="15" fill="rgb(214,153,38)" fg:x="2253" fg:w="2"/><text x="26.8435%" y="879.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="26.6053%" y="853" width="0.0118%" height="15" fill="rgb(243,101,7)" fg:x="2254" fg:w="1"/><text x="26.8553%" y="863.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="26.6053%" y="837" width="0.0118%" height="15" fill="rgb(240,140,22)" fg:x="2254" fg:w="1"/><text x="26.8553%" y="847.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (957 samples, 11.30%)</title><rect x="15.3565%" y="1029" width="11.2960%" height="15" fill="rgb(235,114,2)" fg:x="1301" fg:w="957"/><text x="15.6065%" y="1039.50">block_stm_revm::v..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (764 samples, 9.02%)</title><rect x="17.6346%" y="1013" width="9.0179%" height="15" fill="rgb(242,59,12)" fg:x="1494" fg:w="764"/><text x="17.8846%" y="1023.50">revm::evm::Ev..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (764 samples, 9.02%)</title><rect x="17.6346%" y="997" width="9.0179%" height="15" fill="rgb(252,134,9)" fg:x="1494" fg:w="764"/><text x="17.8846%" y="1007.50">revm::evm::Ev..</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (5 samples, 0.06%)</title><rect x="26.5935%" y="981" width="0.0590%" height="15" fill="rgb(236,4,44)" fg:x="2253" fg:w="5"/><text x="26.8435%" y="991.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (3 samples, 0.04%)</title><rect x="26.6171%" y="965" width="0.0354%" height="15" fill="rgb(254,172,41)" fg:x="2255" fg:w="3"/><text x="26.8671%" y="975.50"></text></g><g><title>bytes::bytes::static_drop (4 samples, 0.05%)</title><rect x="26.6525%" y="1029" width="0.0472%" height="15" fill="rgb(244,63,20)" fg:x="2258" fg:w="4"/><text x="26.9025%" y="1039.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.05%)</title><rect x="26.6997%" y="1029" width="0.0472%" height="15" fill="rgb(250,73,31)" fg:x="2262" fg:w="4"/><text x="26.9497%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="26.7469%" y="1029" width="0.0118%" height="15" fill="rgb(241,38,36)" fg:x="2266" fg:w="1"/><text x="26.9969%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.04%)</title><rect x="26.7587%" y="1029" width="0.0354%" height="15" fill="rgb(245,211,2)" fg:x="2267" fg:w="3"/><text x="27.0087%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (1 samples, 0.01%)</title><rect x="26.7823%" y="1013" width="0.0118%" height="15" fill="rgb(206,120,28)" fg:x="2269" fg:w="1"/><text x="27.0323%" y="1023.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (3 samples, 0.04%)</title><rect x="26.7941%" y="821" width="0.0354%" height="15" fill="rgb(211,59,34)" fg:x="2270" fg:w="3"/><text x="27.0441%" y="831.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (3 samples, 0.04%)</title><rect x="26.7941%" y="805" width="0.0354%" height="15" fill="rgb(233,168,5)" fg:x="2270" fg:w="3"/><text x="27.0441%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="26.7941%" y="789" width="0.0354%" height="15" fill="rgb(234,33,13)" fg:x="2270" fg:w="3"/><text x="27.0441%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (18 samples, 0.21%)</title><rect x="26.7941%" y="1029" width="0.2125%" height="15" fill="rgb(231,150,26)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (18 samples, 0.21%)</title><rect x="26.7941%" y="1013" width="0.2125%" height="15" fill="rgb(217,191,4)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 0.21%)</title><rect x="26.7941%" y="997" width="0.2125%" height="15" fill="rgb(246,198,38)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="1007.50"></text></g><g><title>std::panicking::try (18 samples, 0.21%)</title><rect x="26.7941%" y="981" width="0.2125%" height="15" fill="rgb(245,64,37)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="991.50"></text></g><g><title>std::panicking::try::do_call (18 samples, 0.21%)</title><rect x="26.7941%" y="965" width="0.2125%" height="15" fill="rgb(250,30,36)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="975.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18 samples, 0.21%)</title><rect x="26.7941%" y="949" width="0.2125%" height="15" fill="rgb(217,86,53)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (18 samples, 0.21%)</title><rect x="26.7941%" y="933" width="0.2125%" height="15" fill="rgb(228,157,16)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.21%)</title><rect x="26.7941%" y="917" width="0.2125%" height="15" fill="rgb(217,59,31)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="927.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (18 samples, 0.21%)</title><rect x="26.7941%" y="901" width="0.2125%" height="15" fill="rgb(237,138,41)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="911.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (18 samples, 0.21%)</title><rect x="26.7941%" y="885" width="0.2125%" height="15" fill="rgb(227,91,49)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="895.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (18 samples, 0.21%)</title><rect x="26.7941%" y="869" width="0.2125%" height="15" fill="rgb(247,21,44)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="879.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (18 samples, 0.21%)</title><rect x="26.7941%" y="853" width="0.2125%" height="15" fill="rgb(219,210,51)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="863.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (18 samples, 0.21%)</title><rect x="26.7941%" y="837" width="0.2125%" height="15" fill="rgb(209,140,6)" fg:x="2270" fg:w="18"/><text x="27.0441%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.18%)</title><rect x="26.8296%" y="821" width="0.1771%" height="15" fill="rgb(221,188,24)" fg:x="2273" fg:w="15"/><text x="27.0796%" y="831.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.9476%" y="805" width="0.0590%" height="15" fill="rgb(232,154,20)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="815.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="26.9476%" y="789" width="0.0590%" height="15" fill="rgb(244,137,50)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="799.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="26.9476%" y="773" width="0.0590%" height="15" fill="rgb(225,185,43)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="783.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="26.9476%" y="757" width="0.0590%" height="15" fill="rgb(213,205,38)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="767.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="26.9476%" y="741" width="0.0590%" height="15" fill="rgb(236,73,12)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="751.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="26.9476%" y="725" width="0.0590%" height="15" fill="rgb(235,219,13)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="735.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="26.9476%" y="709" width="0.0590%" height="15" fill="rgb(218,59,36)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="719.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="26.9476%" y="693" width="0.0590%" height="15" fill="rgb(205,110,39)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="26.9476%" y="677" width="0.0590%" height="15" fill="rgb(218,206,42)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="687.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="26.9476%" y="661" width="0.0590%" height="15" fill="rgb(248,125,24)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="671.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="26.9476%" y="645" width="0.0590%" height="15" fill="rgb(242,28,27)" fg:x="2283" fg:w="5"/><text x="27.1976%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)]&gt; (1 samples, 0.01%)</title><rect x="27.0066%" y="1029" width="0.0118%" height="15" fill="rgb(216,228,15)" fg:x="2288" fg:w="1"/><text x="27.2566%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="27.0184%" y="1029" width="0.0118%" height="15" fill="rgb(235,116,46)" fg:x="2289" fg:w="1"/><text x="27.2684%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.07%)</title><rect x="27.0302%" y="1029" width="0.0708%" height="15" fill="rgb(224,18,32)" fg:x="2290" fg:w="6"/><text x="27.2802%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="27.1010%" y="1029" width="0.0118%" height="15" fill="rgb(252,5,12)" fg:x="2296" fg:w="1"/><text x="27.3510%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.01%)</title><rect x="27.1128%" y="1029" width="0.0118%" height="15" fill="rgb(251,36,5)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="1039.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.01%)</title><rect x="27.1128%" y="1013" width="0.0118%" height="15" fill="rgb(217,53,14)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="1023.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="27.1128%" y="997" width="0.0118%" height="15" fill="rgb(215,86,45)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="1007.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="27.1128%" y="981" width="0.0118%" height="15" fill="rgb(242,169,11)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="27.1128%" y="965" width="0.0118%" height="15" fill="rgb(211,213,45)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="975.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="27.1128%" y="949" width="0.0118%" height="15" fill="rgb(205,88,11)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="959.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="27.1128%" y="933" width="0.0118%" height="15" fill="rgb(252,69,26)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="943.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="27.1128%" y="917" width="0.0118%" height="15" fill="rgb(246,123,37)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="927.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="27.1128%" y="901" width="0.0118%" height="15" fill="rgb(212,205,5)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="911.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="27.1128%" y="885" width="0.0118%" height="15" fill="rgb(253,148,0)" fg:x="2297" fg:w="1"/><text x="27.3628%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="27.1246%" y="1029" width="0.0118%" height="15" fill="rgb(239,22,4)" fg:x="2298" fg:w="1"/><text x="27.3746%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="27.1246%" y="1013" width="0.0118%" height="15" fill="rgb(226,26,53)" fg:x="2298" fg:w="1"/><text x="27.3746%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (1 samples, 0.01%)</title><rect x="27.1364%" y="1029" width="0.0118%" height="15" fill="rgb(225,229,45)" fg:x="2299" fg:w="1"/><text x="27.3864%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (1 samples, 0.01%)</title><rect x="27.1483%" y="1029" width="0.0118%" height="15" fill="rgb(220,60,37)" fg:x="2300" fg:w="1"/><text x="27.3983%" y="1039.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (1 samples, 0.01%)</title><rect x="27.1601%" y="1029" width="0.0118%" height="15" fill="rgb(217,180,35)" fg:x="2301" fg:w="1"/><text x="27.4101%" y="1039.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (1 samples, 0.01%)</title><rect x="27.1719%" y="1029" width="0.0118%" height="15" fill="rgb(229,7,53)" fg:x="2302" fg:w="1"/><text x="27.4219%" y="1039.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="27.1837%" y="1029" width="0.0118%" height="15" fill="rgb(254,137,3)" fg:x="2303" fg:w="1"/><text x="27.4337%" y="1039.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="27.1955%" y="1029" width="0.0118%" height="15" fill="rgb(215,140,41)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="27.1955%" y="1013" width="0.0118%" height="15" fill="rgb(250,80,15)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="27.1955%" y="997" width="0.0118%" height="15" fill="rgb(252,191,6)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="27.1955%" y="981" width="0.0118%" height="15" fill="rgb(246,217,18)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="27.1955%" y="965" width="0.0118%" height="15" fill="rgb(223,93,7)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="27.1955%" y="949" width="0.0118%" height="15" fill="rgb(225,55,52)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="27.1955%" y="933" width="0.0118%" height="15" fill="rgb(240,31,24)" fg:x="2304" fg:w="1"/><text x="27.4455%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (1 samples, 0.01%)</title><rect x="27.2073%" y="1029" width="0.0118%" height="15" fill="rgb(205,56,52)" fg:x="2305" fg:w="1"/><text x="27.4573%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::new (1 samples, 0.01%)</title><rect x="27.2191%" y="1029" width="0.0118%" height="15" fill="rgb(246,146,12)" fg:x="2306" fg:w="1"/><text x="27.4691%" y="1039.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (1 samples, 0.01%)</title><rect x="27.2309%" y="1029" width="0.0118%" height="15" fill="rgb(239,84,36)" fg:x="2307" fg:w="1"/><text x="27.4809%" y="1039.50"></text></g><g><title>[unknown] (2,130 samples, 25.14%)</title><rect x="2.1128%" y="1045" width="25.1416%" height="15" fill="rgb(207,41,40)" fg:x="179" fg:w="2130"/><text x="2.3628%" y="1055.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="27.2427%" y="1029" width="0.0118%" height="15" fill="rgb(241,179,25)" fg:x="2308" fg:w="1"/><text x="27.4927%" y="1039.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="27.2427%" y="1013" width="0.0118%" height="15" fill="rgb(210,0,34)" fg:x="2308" fg:w="1"/><text x="27.4927%" y="1023.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="27.2545%" y="1045" width="0.0354%" height="15" fill="rgb(225,217,29)" fg:x="2309" fg:w="3"/><text x="27.5045%" y="1055.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="27.2899%" y="1045" width="0.0236%" height="15" fill="rgb(216,191,38)" fg:x="2312" fg:w="2"/><text x="27.5399%" y="1055.50"></text></g><g><title>__bss_start (4 samples, 0.05%)</title><rect x="27.3135%" y="1045" width="0.0472%" height="15" fill="rgb(232,140,52)" fg:x="2314" fg:w="4"/><text x="27.5635%" y="1055.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="27.3135%" y="1029" width="0.0472%" height="15" fill="rgb(223,158,51)" fg:x="2314" fg:w="4"/><text x="27.5635%" y="1039.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (1 samples, 0.01%)</title><rect x="27.3607%" y="1045" width="0.0118%" height="15" fill="rgb(235,29,51)" fg:x="2318" fg:w="1"/><text x="27.6107%" y="1055.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="27.3607%" y="1029" width="0.0118%" height="15" fill="rgb(215,181,18)" fg:x="2318" fg:w="1"/><text x="27.6107%" y="1039.50"></text></g><g><title>revm::handler::mainnet::execution::call (1 samples, 0.01%)</title><rect x="27.3607%" y="1013" width="0.0118%" height="15" fill="rgb(227,125,34)" fg:x="2318" fg:w="1"/><text x="27.6107%" y="1023.50"></text></g><g><title>_fini (1 samples, 0.01%)</title><rect x="27.3725%" y="1045" width="0.0118%" height="15" fill="rgb(230,197,49)" fg:x="2319" fg:w="1"/><text x="27.6225%" y="1055.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.01%)</title><rect x="27.3725%" y="1029" width="0.0118%" height="15" fill="rgb(239,141,16)" fg:x="2319" fg:w="1"/><text x="27.6225%" y="1039.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="27.3843%" y="1045" width="0.0236%" height="15" fill="rgb(225,105,43)" fg:x="2320" fg:w="2"/><text x="27.6343%" y="1055.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="27.4079%" y="1045" width="0.0236%" height="15" fill="rgb(214,131,14)" fg:x="2322" fg:w="2"/><text x="27.6579%" y="1055.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="27.4433%" y="613" width="0.0118%" height="15" fill="rgb(229,177,11)" fg:x="2325" fg:w="1"/><text x="27.6933%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="27.4433%" y="597" width="0.0118%" height="15" fill="rgb(231,180,14)" fg:x="2325" fg:w="1"/><text x="27.6933%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.01%)</title><rect x="27.4433%" y="581" width="0.0118%" height="15" fill="rgb(232,88,2)" fg:x="2325" fg:w="1"/><text x="27.6933%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="27.4433%" y="565" width="0.0118%" height="15" fill="rgb(205,220,8)" fg:x="2325" fg:w="1"/><text x="27.6933%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="27.4433%" y="549" width="0.0118%" height="15" fill="rgb(225,23,53)" fg:x="2325" fg:w="1"/><text x="27.6933%" y="559.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::cmp::PartialEq&gt;::eq (3 samples, 0.04%)</title><rect x="27.4315%" y="629" width="0.0354%" height="15" fill="rgb(213,62,29)" fg:x="2324" fg:w="3"/><text x="27.6815%" y="639.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="27.4551%" y="613" width="0.0118%" height="15" fill="rgb(227,75,7)" fg:x="2326" fg:w="1"/><text x="27.7051%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="27.4669%" y="581" width="0.0236%" height="15" fill="rgb(207,105,14)" fg:x="2327" fg:w="2"/><text x="27.7169%" y="591.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="27.4669%" y="565" width="0.0236%" height="15" fill="rgb(245,62,29)" fg:x="2327" fg:w="2"/><text x="27.7169%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="27.4669%" y="549" width="0.0236%" height="15" fill="rgb(236,202,4)" fg:x="2327" fg:w="2"/><text x="27.7169%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="27.4788%" y="533" width="0.0118%" height="15" fill="rgb(250,67,1)" fg:x="2328" fg:w="1"/><text x="27.7288%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="27.4788%" y="517" width="0.0118%" height="15" fill="rgb(253,115,44)" fg:x="2328" fg:w="1"/><text x="27.7288%" y="527.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.01%)</title><rect x="27.4788%" y="501" width="0.0118%" height="15" fill="rgb(251,139,18)" fg:x="2328" fg:w="1"/><text x="27.7288%" y="511.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="27.5024%" y="485" width="0.0236%" height="15" fill="rgb(218,22,32)" fg:x="2330" fg:w="2"/><text x="27.7524%" y="495.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="27.5024%" y="469" width="0.0236%" height="15" fill="rgb(243,53,5)" fg:x="2330" fg:w="2"/><text x="27.7524%" y="479.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="27.5024%" y="453" width="0.0236%" height="15" fill="rgb(227,56,16)" fg:x="2330" fg:w="2"/><text x="27.7524%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (10 samples, 0.12%)</title><rect x="27.4906%" y="549" width="0.1180%" height="15" fill="rgb(245,53,0)" fg:x="2329" fg:w="10"/><text x="27.7406%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}}::_{{closure}} (10 samples, 0.12%)</title><rect x="27.4906%" y="533" width="0.1180%" height="15" fill="rgb(216,170,35)" fg:x="2329" fg:w="10"/><text x="27.7406%" y="543.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::cmp::PartialEq&gt;::eq (10 samples, 0.12%)</title><rect x="27.4906%" y="517" width="0.1180%" height="15" fill="rgb(211,200,8)" fg:x="2329" fg:w="10"/><text x="27.7406%" y="527.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::cmp::PartialEq&gt;::eq (10 samples, 0.12%)</title><rect x="27.4906%" y="501" width="0.1180%" height="15" fill="rgb(228,204,44)" fg:x="2329" fg:w="10"/><text x="27.7406%" y="511.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.08%)</title><rect x="27.5260%" y="485" width="0.0826%" height="15" fill="rgb(214,121,17)" fg:x="2332" fg:w="7"/><text x="27.7760%" y="495.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (7 samples, 0.08%)</title><rect x="27.5260%" y="469" width="0.0826%" height="15" fill="rgb(233,64,38)" fg:x="2332" fg:w="7"/><text x="27.7760%" y="479.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (7 samples, 0.08%)</title><rect x="27.5260%" y="453" width="0.0826%" height="15" fill="rgb(253,54,19)" fg:x="2332" fg:w="7"/><text x="27.7760%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="27.6204%" y="421" width="0.0236%" height="15" fill="rgb(253,94,18)" fg:x="2340" fg:w="2"/><text x="27.8704%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="27.6322%" y="405" width="0.0118%" height="15" fill="rgb(227,57,52)" fg:x="2341" fg:w="1"/><text x="27.8822%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="27.6204%" y="469" width="0.0590%" height="15" fill="rgb(230,228,50)" fg:x="2340" fg:w="5"/><text x="27.8704%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="27.6204%" y="453" width="0.0590%" height="15" fill="rgb(217,205,27)" fg:x="2340" fg:w="5"/><text x="27.8704%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="27.6204%" y="437" width="0.0590%" height="15" fill="rgb(252,71,50)" fg:x="2340" fg:w="5"/><text x="27.8704%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.04%)</title><rect x="27.6440%" y="421" width="0.0354%" height="15" fill="rgb(209,86,4)" fg:x="2342" fg:w="3"/><text x="27.8940%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="27.6558%" y="405" width="0.0236%" height="15" fill="rgb(229,94,0)" fg:x="2343" fg:w="2"/><text x="27.9058%" y="415.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.05%)</title><rect x="27.6794%" y="389" width="0.0472%" height="15" fill="rgb(252,223,21)" fg:x="2345" fg:w="4"/><text x="27.9294%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.05%)</title><rect x="27.6794%" y="373" width="0.0472%" height="15" fill="rgb(230,210,4)" fg:x="2345" fg:w="4"/><text x="27.9294%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="27.6912%" y="357" width="0.0354%" height="15" fill="rgb(240,149,38)" fg:x="2346" fg:w="3"/><text x="27.9412%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="27.6912%" y="341" width="0.0354%" height="15" fill="rgb(254,105,20)" fg:x="2346" fg:w="3"/><text x="27.9412%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="27.6912%" y="325" width="0.0354%" height="15" fill="rgb(253,87,46)" fg:x="2346" fg:w="3"/><text x="27.9412%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="27.7148%" y="309" width="0.0118%" height="15" fill="rgb(253,116,33)" fg:x="2348" fg:w="1"/><text x="27.9648%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="27.7384%" y="325" width="0.0236%" height="15" fill="rgb(229,198,5)" fg:x="2350" fg:w="2"/><text x="27.9884%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="27.7384%" y="309" width="0.0236%" height="15" fill="rgb(242,38,37)" fg:x="2350" fg:w="2"/><text x="27.9884%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 0.27%)</title><rect x="27.6204%" y="501" width="0.2715%" height="15" fill="rgb(242,69,53)" fg:x="2340" fg:w="23"/><text x="27.8704%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.27%)</title><rect x="27.6204%" y="485" width="0.2715%" height="15" fill="rgb(249,80,16)" fg:x="2340" fg:w="23"/><text x="27.8704%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.21%)</title><rect x="27.6794%" y="469" width="0.2125%" height="15" fill="rgb(206,128,11)" fg:x="2345" fg:w="18"/><text x="27.9294%" y="479.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (18 samples, 0.21%)</title><rect x="27.6794%" y="453" width="0.2125%" height="15" fill="rgb(212,35,20)" fg:x="2345" fg:w="18"/><text x="27.9294%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (18 samples, 0.21%)</title><rect x="27.6794%" y="437" width="0.2125%" height="15" fill="rgb(236,79,13)" fg:x="2345" fg:w="18"/><text x="27.9294%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (18 samples, 0.21%)</title><rect x="27.6794%" y="421" width="0.2125%" height="15" fill="rgb(233,123,3)" fg:x="2345" fg:w="18"/><text x="27.9294%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (18 samples, 0.21%)</title><rect x="27.6794%" y="405" width="0.2125%" height="15" fill="rgb(214,93,52)" fg:x="2345" fg:w="18"/><text x="27.9294%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (14 samples, 0.17%)</title><rect x="27.7266%" y="389" width="0.1653%" height="15" fill="rgb(251,37,40)" fg:x="2349" fg:w="14"/><text x="27.9766%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="27.7266%" y="373" width="0.1653%" height="15" fill="rgb(227,80,54)" fg:x="2349" fg:w="14"/><text x="27.9766%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="27.7266%" y="357" width="0.1653%" height="15" fill="rgb(254,48,11)" fg:x="2349" fg:w="14"/><text x="27.9766%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="27.7266%" y="341" width="0.1653%" height="15" fill="rgb(235,193,26)" fg:x="2349" fg:w="14"/><text x="27.9766%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.13%)</title><rect x="27.7620%" y="325" width="0.1298%" height="15" fill="rgb(229,99,21)" fg:x="2352" fg:w="11"/><text x="28.0120%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (11 samples, 0.13%)</title><rect x="27.8919%" y="453" width="0.1298%" height="15" fill="rgb(211,140,41)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (11 samples, 0.13%)</title><rect x="27.8919%" y="437" width="0.1298%" height="15" fill="rgb(240,227,30)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (11 samples, 0.13%)</title><rect x="27.8919%" y="421" width="0.1298%" height="15" fill="rgb(215,224,45)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.13%)</title><rect x="27.8919%" y="405" width="0.1298%" height="15" fill="rgb(206,123,31)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="415.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (11 samples, 0.13%)</title><rect x="27.8919%" y="389" width="0.1298%" height="15" fill="rgb(210,138,16)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="399.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.13%)</title><rect x="27.8919%" y="373" width="0.1298%" height="15" fill="rgb(228,57,28)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="383.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (11 samples, 0.13%)</title><rect x="27.8919%" y="357" width="0.1298%" height="15" fill="rgb(242,170,10)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="367.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (11 samples, 0.13%)</title><rect x="27.8919%" y="341" width="0.1298%" height="15" fill="rgb(228,214,39)" fg:x="2363" fg:w="11"/><text x="28.1419%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="28.0217%" y="453" width="0.0118%" height="15" fill="rgb(218,179,33)" fg:x="2374" fg:w="1"/><text x="28.2717%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (14 samples, 0.17%)</title><rect x="28.0335%" y="453" width="0.1653%" height="15" fill="rgb(235,193,39)" fg:x="2375" fg:w="14"/><text x="28.2835%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.17%)</title><rect x="28.0335%" y="437" width="0.1653%" height="15" fill="rgb(219,221,36)" fg:x="2375" fg:w="14"/><text x="28.2835%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.17%)</title><rect x="28.0335%" y="421" width="0.1653%" height="15" fill="rgb(248,218,19)" fg:x="2375" fg:w="14"/><text x="28.2835%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (63 samples, 0.74%)</title><rect x="27.4669%" y="613" width="0.7436%" height="15" fill="rgb(205,50,9)" fg:x="2327" fg:w="63"/><text x="27.7169%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (63 samples, 0.74%)</title><rect x="27.4669%" y="597" width="0.7436%" height="15" fill="rgb(238,81,28)" fg:x="2327" fg:w="63"/><text x="27.7169%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (61 samples, 0.72%)</title><rect x="27.4906%" y="581" width="0.7200%" height="15" fill="rgb(235,110,19)" fg:x="2329" fg:w="61"/><text x="27.7406%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (61 samples, 0.72%)</title><rect x="27.4906%" y="565" width="0.7200%" height="15" fill="rgb(214,7,14)" fg:x="2329" fg:w="61"/><text x="27.7406%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (51 samples, 0.60%)</title><rect x="27.6086%" y="549" width="0.6020%" height="15" fill="rgb(211,77,3)" fg:x="2339" fg:w="51"/><text x="27.8586%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (51 samples, 0.60%)</title><rect x="27.6086%" y="533" width="0.6020%" height="15" fill="rgb(229,5,9)" fg:x="2339" fg:w="51"/><text x="27.8586%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (50 samples, 0.59%)</title><rect x="27.6204%" y="517" width="0.5902%" height="15" fill="rgb(225,90,11)" fg:x="2340" fg:w="50"/><text x="27.8704%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (27 samples, 0.32%)</title><rect x="27.8919%" y="501" width="0.3187%" height="15" fill="rgb(242,56,8)" fg:x="2363" fg:w="27"/><text x="28.1419%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 0.32%)</title><rect x="27.8919%" y="485" width="0.3187%" height="15" fill="rgb(249,212,39)" fg:x="2363" fg:w="27"/><text x="28.1419%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (27 samples, 0.32%)</title><rect x="27.8919%" y="469" width="0.3187%" height="15" fill="rgb(236,90,9)" fg:x="2363" fg:w="27"/><text x="28.1419%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="28.1988%" y="453" width="0.0118%" height="15" fill="rgb(206,88,35)" fg:x="2389" fg:w="1"/><text x="28.4488%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="28.1988%" y="437" width="0.0118%" height="15" fill="rgb(205,126,30)" fg:x="2389" fg:w="1"/><text x="28.4488%" y="447.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (75 samples, 0.89%)</title><rect x="27.4315%" y="773" width="0.8853%" height="15" fill="rgb(230,176,12)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (75 samples, 0.89%)</title><rect x="27.4315%" y="757" width="0.8853%" height="15" fill="rgb(243,19,9)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (75 samples, 0.89%)</title><rect x="27.4315%" y="741" width="0.8853%" height="15" fill="rgb(245,171,17)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (75 samples, 0.89%)</title><rect x="27.4315%" y="725" width="0.8853%" height="15" fill="rgb(227,52,21)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (75 samples, 0.89%)</title><rect x="27.4315%" y="709" width="0.8853%" height="15" fill="rgb(238,69,14)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (75 samples, 0.89%)</title><rect x="27.4315%" y="693" width="0.8853%" height="15" fill="rgb(241,156,39)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="703.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (75 samples, 0.89%)</title><rect x="27.4315%" y="677" width="0.8853%" height="15" fill="rgb(212,227,28)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (75 samples, 0.89%)</title><rect x="27.4315%" y="661" width="0.8853%" height="15" fill="rgb(209,118,27)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="671.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::cmp::PartialEq&gt;::eq (75 samples, 0.89%)</title><rect x="27.4315%" y="645" width="0.8853%" height="15" fill="rgb(226,102,5)" fg:x="2324" fg:w="75"/><text x="27.6815%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (72 samples, 0.85%)</title><rect x="27.4669%" y="629" width="0.8499%" height="15" fill="rgb(223,34,3)" fg:x="2327" fg:w="72"/><text x="27.7169%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (9 samples, 0.11%)</title><rect x="28.2106%" y="613" width="0.1062%" height="15" fill="rgb(221,81,38)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (9 samples, 0.11%)</title><rect x="28.2106%" y="597" width="0.1062%" height="15" fill="rgb(236,219,28)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (9 samples, 0.11%)</title><rect x="28.2106%" y="581" width="0.1062%" height="15" fill="rgb(213,200,14)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (9 samples, 0.11%)</title><rect x="28.2106%" y="565" width="0.1062%" height="15" fill="rgb(240,33,19)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="28.2106%" y="549" width="0.1062%" height="15" fill="rgb(233,113,27)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (9 samples, 0.11%)</title><rect x="28.2106%" y="533" width="0.1062%" height="15" fill="rgb(220,221,18)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (9 samples, 0.11%)</title><rect x="28.2106%" y="517" width="0.1062%" height="15" fill="rgb(238,92,8)" fg:x="2390" fg:w="9"/><text x="28.4606%" y="527.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="28.3640%" y="565" width="0.0118%" height="15" fill="rgb(222,164,16)" fg:x="2403" fg:w="1"/><text x="28.6140%" y="575.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="28.3758%" y="565" width="0.0118%" height="15" fill="rgb(241,119,3)" fg:x="2404" fg:w="1"/><text x="28.6258%" y="575.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="28.3758%" y="549" width="0.0118%" height="15" fill="rgb(241,44,8)" fg:x="2404" fg:w="1"/><text x="28.6258%" y="559.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="28.3758%" y="533" width="0.0118%" height="15" fill="rgb(230,36,40)" fg:x="2404" fg:w="1"/><text x="28.6258%" y="543.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="28.3758%" y="517" width="0.0118%" height="15" fill="rgb(243,16,36)" fg:x="2404" fg:w="1"/><text x="28.6258%" y="527.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="28.3758%" y="501" width="0.0118%" height="15" fill="rgb(231,4,26)" fg:x="2404" fg:w="1"/><text x="28.6258%" y="511.50"></text></g><g><title>post_alloc_hook (1 samples, 0.01%)</title><rect x="28.3994%" y="501" width="0.0118%" height="15" fill="rgb(240,9,31)" fg:x="2406" fg:w="1"/><text x="28.6494%" y="511.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.07%)</title><rect x="28.3522%" y="677" width="0.0708%" height="15" fill="rgb(207,173,15)" fg:x="2402" fg:w="6"/><text x="28.6022%" y="687.50"></text></g><g><title>exc_page_fault (6 samples, 0.07%)</title><rect x="28.3522%" y="661" width="0.0708%" height="15" fill="rgb(224,192,53)" fg:x="2402" fg:w="6"/><text x="28.6022%" y="671.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.07%)</title><rect x="28.3522%" y="645" width="0.0708%" height="15" fill="rgb(223,67,28)" fg:x="2402" fg:w="6"/><text x="28.6022%" y="655.50"></text></g><g><title>handle_mm_fault (6 samples, 0.07%)</title><rect x="28.3522%" y="629" width="0.0708%" height="15" fill="rgb(211,20,47)" fg:x="2402" fg:w="6"/><text x="28.6022%" y="639.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.07%)</title><rect x="28.3522%" y="613" width="0.0708%" height="15" fill="rgb(240,228,2)" fg:x="2402" fg:w="6"/><text x="28.6022%" y="623.50"></text></g><g><title>handle_pte_fault (5 samples, 0.06%)</title><rect x="28.3640%" y="597" width="0.0590%" height="15" fill="rgb(248,151,12)" fg:x="2403" fg:w="5"/><text x="28.6140%" y="607.50"></text></g><g><title>do_anonymous_page (5 samples, 0.06%)</title><rect x="28.3640%" y="581" width="0.0590%" height="15" fill="rgb(244,8,39)" fg:x="2403" fg:w="5"/><text x="28.6140%" y="591.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.04%)</title><rect x="28.3876%" y="565" width="0.0354%" height="15" fill="rgb(222,26,8)" fg:x="2405" fg:w="3"/><text x="28.6376%" y="575.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="28.3994%" y="549" width="0.0236%" height="15" fill="rgb(213,106,44)" fg:x="2406" fg:w="2"/><text x="28.6494%" y="559.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="28.3994%" y="533" width="0.0236%" height="15" fill="rgb(214,129,20)" fg:x="2406" fg:w="2"/><text x="28.6494%" y="543.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="28.3994%" y="517" width="0.0236%" height="15" fill="rgb(212,32,13)" fg:x="2406" fg:w="2"/><text x="28.6494%" y="527.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="28.4112%" y="501" width="0.0118%" height="15" fill="rgb(208,168,33)" fg:x="2407" fg:w="1"/><text x="28.6612%" y="511.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="28.4112%" y="485" width="0.0118%" height="15" fill="rgb(231,207,8)" fg:x="2407" fg:w="1"/><text x="28.6612%" y="495.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="28.4112%" y="469" width="0.0118%" height="15" fill="rgb(235,219,23)" fg:x="2407" fg:w="1"/><text x="28.6612%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.13%)</title><rect x="28.3168%" y="693" width="0.1298%" height="15" fill="rgb(226,216,26)" fg:x="2399" fg:w="11"/><text x="28.5668%" y="703.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="28.4230%" y="677" width="0.0236%" height="15" fill="rgb(239,137,16)" fg:x="2408" fg:w="2"/><text x="28.6730%" y="687.50"></text></g><g><title>alloc::vec::from_elem (12 samples, 0.14%)</title><rect x="28.3168%" y="757" width="0.1416%" height="15" fill="rgb(207,12,36)" fg:x="2399" fg:w="12"/><text x="28.5668%" y="767.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 0.14%)</title><rect x="28.3168%" y="741" width="0.1416%" height="15" fill="rgb(210,214,24)" fg:x="2399" fg:w="12"/><text x="28.5668%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.14%)</title><rect x="28.3168%" y="725" width="0.1416%" height="15" fill="rgb(206,56,30)" fg:x="2399" fg:w="12"/><text x="28.5668%" y="735.50"></text></g><g><title>core::ptr::write (12 samples, 0.14%)</title><rect x="28.3168%" y="709" width="0.1416%" height="15" fill="rgb(228,143,26)" fg:x="2399" fg:w="12"/><text x="28.5668%" y="719.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="693" width="0.0118%" height="15" fill="rgb(216,218,46)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="703.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="677" width="0.0118%" height="15" fill="rgb(206,6,19)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="687.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="661" width="0.0118%" height="15" fill="rgb(239,177,51)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="671.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="645" width="0.0118%" height="15" fill="rgb(216,55,25)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="655.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="629" width="0.0118%" height="15" fill="rgb(231,163,29)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="639.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="28.4466%" y="613" width="0.0118%" height="15" fill="rgb(232,149,50)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="623.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="28.4466%" y="597" width="0.0118%" height="15" fill="rgb(223,142,48)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="607.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="28.4466%" y="581" width="0.0118%" height="15" fill="rgb(245,83,23)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="591.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="28.4466%" y="565" width="0.0118%" height="15" fill="rgb(224,63,2)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="575.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="28.4466%" y="549" width="0.0118%" height="15" fill="rgb(218,65,53)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="559.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="28.4466%" y="533" width="0.0118%" height="15" fill="rgb(221,84,29)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="543.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="28.4466%" y="517" width="0.0118%" height="15" fill="rgb(234,0,32)" fg:x="2410" fg:w="1"/><text x="28.6966%" y="527.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="533" width="0.0236%" height="15" fill="rgb(206,20,16)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="543.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="517" width="0.0236%" height="15" fill="rgb(244,172,18)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="527.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="501" width="0.0236%" height="15" fill="rgb(254,133,1)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="511.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="485" width="0.0236%" height="15" fill="rgb(222,206,41)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="495.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="469" width="0.0236%" height="15" fill="rgb(212,3,42)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="479.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="28.4703%" y="453" width="0.0236%" height="15" fill="rgb(241,11,4)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="463.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="28.4703%" y="437" width="0.0236%" height="15" fill="rgb(205,19,26)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="447.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="28.4703%" y="421" width="0.0236%" height="15" fill="rgb(210,179,32)" fg:x="2412" fg:w="2"/><text x="28.7203%" y="431.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="28.4821%" y="405" width="0.0118%" height="15" fill="rgb(227,116,49)" fg:x="2413" fg:w="1"/><text x="28.7321%" y="415.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="28.4821%" y="389" width="0.0118%" height="15" fill="rgb(211,146,6)" fg:x="2413" fg:w="1"/><text x="28.7321%" y="399.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::new (4 samples, 0.05%)</title><rect x="28.4585%" y="757" width="0.0472%" height="15" fill="rgb(219,44,39)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.05%)</title><rect x="28.4585%" y="741" width="0.0472%" height="15" fill="rgb(234,128,11)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="28.4585%" y="725" width="0.0472%" height="15" fill="rgb(220,183,53)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="28.4585%" y="709" width="0.0472%" height="15" fill="rgb(213,219,32)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="28.4585%" y="693" width="0.0472%" height="15" fill="rgb(232,156,16)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.05%)</title><rect x="28.4585%" y="677" width="0.0472%" height="15" fill="rgb(246,135,34)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.05%)</title><rect x="28.4585%" y="661" width="0.0472%" height="15" fill="rgb(241,99,0)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.05%)</title><rect x="28.4585%" y="645" width="0.0472%" height="15" fill="rgb(222,103,45)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="28.4585%" y="629" width="0.0472%" height="15" fill="rgb(212,57,4)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.05%)</title><rect x="28.4585%" y="613" width="0.0472%" height="15" fill="rgb(215,68,47)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 0.05%)</title><rect x="28.4585%" y="597" width="0.0472%" height="15" fill="rgb(230,84,2)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.05%)</title><rect x="28.4585%" y="581" width="0.0472%" height="15" fill="rgb(220,102,14)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (4 samples, 0.05%)</title><rect x="28.4585%" y="565" width="0.0472%" height="15" fill="rgb(240,10,32)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="575.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="28.4585%" y="549" width="0.0472%" height="15" fill="rgb(215,47,27)" fg:x="2411" fg:w="4"/><text x="28.7085%" y="559.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="28.4939%" y="533" width="0.0118%" height="15" fill="rgb(233,188,43)" fg:x="2414" fg:w="1"/><text x="28.7439%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="28.7535%" y="661" width="0.3659%" height="15" fill="rgb(253,190,1)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="671.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="28.7535%" y="645" width="0.3659%" height="15" fill="rgb(206,114,52)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="655.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="28.7535%" y="629" width="0.3659%" height="15" fill="rgb(233,120,37)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="639.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="28.7535%" y="613" width="0.3659%" height="15" fill="rgb(214,52,39)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="28.7535%" y="597" width="0.3659%" height="15" fill="rgb(223,80,29)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.37%)</title><rect x="28.7535%" y="581" width="0.3659%" height="15" fill="rgb(230,101,40)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.37%)</title><rect x="28.7535%" y="565" width="0.3659%" height="15" fill="rgb(219,211,8)" fg:x="2436" fg:w="31"/><text x="29.0035%" y="575.50"></text></g><g><title>&lt;block_stm_revm::MemoryValue as core::clone::Clone&gt;::clone (36 samples, 0.42%)</title><rect x="28.7299%" y="709" width="0.4249%" height="15" fill="rgb(252,126,28)" fg:x="2434" fg:w="36"/><text x="28.9799%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.42%)</title><rect x="28.7299%" y="693" width="0.4249%" height="15" fill="rgb(215,56,38)" fg:x="2434" fg:w="36"/><text x="28.9799%" y="703.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (36 samples, 0.42%)</title><rect x="28.7299%" y="677" width="0.4249%" height="15" fill="rgb(249,55,44)" fg:x="2434" fg:w="36"/><text x="28.9799%" y="687.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="29.1195%" y="661" width="0.0354%" height="15" fill="rgb(220,221,32)" fg:x="2467" fg:w="3"/><text x="29.3695%" y="671.50"></text></g><g><title>&lt;block_stm_revm::mv_memory::MemoryEntry as core::clone::Clone&gt;::clone (40 samples, 0.47%)</title><rect x="28.7299%" y="725" width="0.4721%" height="15" fill="rgb(212,216,41)" fg:x="2434" fg:w="40"/><text x="28.9799%" y="735.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (4 samples, 0.05%)</title><rect x="29.1549%" y="709" width="0.0472%" height="15" fill="rgb(228,213,43)" fg:x="2470" fg:w="4"/><text x="29.4049%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="29.2139%" y="709" width="0.0118%" height="15" fill="rgb(211,31,26)" fg:x="2475" fg:w="1"/><text x="29.4639%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="29.2139%" y="693" width="0.0118%" height="15" fill="rgb(229,202,19)" fg:x="2475" fg:w="1"/><text x="29.4639%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="29.2139%" y="677" width="0.0118%" height="15" fill="rgb(229,105,46)" fg:x="2475" fg:w="1"/><text x="29.4639%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (6 samples, 0.07%)</title><rect x="29.2257%" y="645" width="0.0708%" height="15" fill="rgb(235,108,1)" fg:x="2476" fg:w="6"/><text x="29.4757%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.07%)</title><rect x="29.2257%" y="629" width="0.0708%" height="15" fill="rgb(245,111,35)" fg:x="2476" fg:w="6"/><text x="29.4757%" y="639.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (63 samples, 0.74%)</title><rect x="29.2257%" y="709" width="0.7436%" height="15" fill="rgb(219,185,31)" fg:x="2476" fg:w="63"/><text x="29.4757%" y="719.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (63 samples, 0.74%)</title><rect x="29.2257%" y="693" width="0.7436%" height="15" fill="rgb(214,4,43)" fg:x="2476" fg:w="63"/><text x="29.4757%" y="703.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (63 samples, 0.74%)</title><rect x="29.2257%" y="677" width="0.7436%" height="15" fill="rgb(235,227,40)" fg:x="2476" fg:w="63"/><text x="29.4757%" y="687.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (63 samples, 0.74%)</title><rect x="29.2257%" y="661" width="0.7436%" height="15" fill="rgb(230,88,30)" fg:x="2476" fg:w="63"/><text x="29.4757%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (57 samples, 0.67%)</title><rect x="29.2965%" y="645" width="0.6728%" height="15" fill="rgb(216,217,1)" fg:x="2482" fg:w="57"/><text x="29.5465%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.67%)</title><rect x="29.2965%" y="629" width="0.6728%" height="15" fill="rgb(248,139,50)" fg:x="2482" fg:w="57"/><text x="29.5465%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="29.9693%" y="709" width="0.0118%" height="15" fill="rgb(233,1,21)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="29.9693%" y="693" width="0.0118%" height="15" fill="rgb(215,183,12)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="29.9693%" y="677" width="0.0118%" height="15" fill="rgb(229,104,42)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="29.9693%" y="661" width="0.0118%" height="15" fill="rgb(243,34,48)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="29.9693%" y="645" width="0.0118%" height="15" fill="rgb(239,11,44)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="655.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="29.9693%" y="629" width="0.0118%" height="15" fill="rgb(231,98,35)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="29.9693%" y="613" width="0.0118%" height="15" fill="rgb(233,28,25)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="29.9693%" y="597" width="0.0118%" height="15" fill="rgb(234,123,11)" fg:x="2539" fg:w="1"/><text x="30.2193%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (4 samples, 0.05%)</title><rect x="29.9811%" y="709" width="0.0472%" height="15" fill="rgb(220,69,3)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (4 samples, 0.05%)</title><rect x="29.9811%" y="693" width="0.0472%" height="15" fill="rgb(214,64,36)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="29.9811%" y="677" width="0.0472%" height="15" fill="rgb(211,138,32)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="29.9811%" y="661" width="0.0472%" height="15" fill="rgb(213,118,47)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="29.9811%" y="645" width="0.0472%" height="15" fill="rgb(243,124,49)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="29.9811%" y="629" width="0.0472%" height="15" fill="rgb(221,30,28)" fg:x="2540" fg:w="4"/><text x="30.2311%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (31 samples, 0.37%)</title><rect x="30.0283%" y="661" width="0.3659%" height="15" fill="rgb(246,37,13)" fg:x="2544" fg:w="31"/><text x="30.2783%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (31 samples, 0.37%)</title><rect x="30.0283%" y="645" width="0.3659%" height="15" fill="rgb(249,66,14)" fg:x="2544" fg:w="31"/><text x="30.2783%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (31 samples, 0.37%)</title><rect x="30.0283%" y="629" width="0.3659%" height="15" fill="rgb(213,166,5)" fg:x="2544" fg:w="31"/><text x="30.2783%" y="639.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 1.20%)</title><rect x="29.2021%" y="725" width="1.2040%" height="15" fill="rgb(221,66,24)" fg:x="2474" fg:w="102"/><text x="29.4521%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (32 samples, 0.38%)</title><rect x="30.0283%" y="709" width="0.3777%" height="15" fill="rgb(210,132,17)" fg:x="2544" fg:w="32"/><text x="30.2783%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (32 samples, 0.38%)</title><rect x="30.0283%" y="693" width="0.3777%" height="15" fill="rgb(243,202,5)" fg:x="2544" fg:w="32"/><text x="30.2783%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (32 samples, 0.38%)</title><rect x="30.0283%" y="677" width="0.3777%" height="15" fill="rgb(233,70,48)" fg:x="2544" fg:w="32"/><text x="30.2783%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::buckets (1 samples, 0.01%)</title><rect x="30.3942%" y="661" width="0.0118%" height="15" fill="rgb(238,41,26)" fg:x="2575" fg:w="1"/><text x="30.6442%" y="671.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="30.4060%" y="645" width="0.0354%" height="15" fill="rgb(241,19,31)" fg:x="2576" fg:w="3"/><text x="30.6560%" y="655.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="30.4060%" y="629" width="0.0354%" height="15" fill="rgb(214,76,10)" fg:x="2576" fg:w="3"/><text x="30.6560%" y="639.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="30.4178%" y="613" width="0.0236%" height="15" fill="rgb(254,202,22)" fg:x="2577" fg:w="2"/><text x="30.6678%" y="623.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="30.4415%" y="645" width="0.0118%" height="15" fill="rgb(214,72,24)" fg:x="2579" fg:w="1"/><text x="30.6915%" y="655.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="30.4533%" y="629" width="0.0472%" height="15" fill="rgb(221,92,46)" fg:x="2580" fg:w="4"/><text x="30.7033%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="30.4533%" y="613" width="0.0472%" height="15" fill="rgb(246,13,50)" fg:x="2580" fg:w="4"/><text x="30.7033%" y="623.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="30.4533%" y="597" width="0.0472%" height="15" fill="rgb(240,165,38)" fg:x="2580" fg:w="4"/><text x="30.7033%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="30.4533%" y="581" width="0.0472%" height="15" fill="rgb(241,24,51)" fg:x="2580" fg:w="4"/><text x="30.7033%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="30.4533%" y="565" width="0.0472%" height="15" fill="rgb(227,51,44)" fg:x="2580" fg:w="4"/><text x="30.7033%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::iter::Iter&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (10 samples, 0.12%)</title><rect x="30.4060%" y="725" width="0.1180%" height="15" fill="rgb(231,121,3)" fg:x="2576" fg:w="10"/><text x="30.6560%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (10 samples, 0.12%)</title><rect x="30.4060%" y="709" width="0.1180%" height="15" fill="rgb(245,3,41)" fg:x="2576" fg:w="10"/><text x="30.6560%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (10 samples, 0.12%)</title><rect x="30.4060%" y="693" width="0.1180%" height="15" fill="rgb(214,13,26)" fg:x="2576" fg:w="10"/><text x="30.6560%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="30.4060%" y="677" width="0.1180%" height="15" fill="rgb(252,75,11)" fg:x="2576" fg:w="10"/><text x="30.6560%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="30.4060%" y="661" width="0.1180%" height="15" fill="rgb(218,226,17)" fg:x="2576" fg:w="10"/><text x="30.6560%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.07%)</title><rect x="30.4533%" y="645" width="0.0708%" height="15" fill="rgb(248,89,38)" fg:x="2580" fg:w="6"/><text x="30.7033%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="30.5005%" y="629" width="0.0236%" height="15" fill="rgb(237,73,46)" fg:x="2584" fg:w="2"/><text x="30.7505%" y="639.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="30.5005%" y="613" width="0.0236%" height="15" fill="rgb(242,78,33)" fg:x="2584" fg:w="2"/><text x="30.7505%" y="623.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (2 samples, 0.02%)</title><rect x="30.5005%" y="597" width="0.0236%" height="15" fill="rgb(235,60,3)" fg:x="2584" fg:w="2"/><text x="30.7505%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="30.5005%" y="581" width="0.0236%" height="15" fill="rgb(216,172,19)" fg:x="2584" fg:w="2"/><text x="30.7505%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="30.5005%" y="565" width="0.0236%" height="15" fill="rgb(227,6,42)" fg:x="2584" fg:w="2"/><text x="30.7505%" y="575.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (1 samples, 0.01%)</title><rect x="30.5241%" y="693" width="0.0118%" height="15" fill="rgb(223,207,42)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="703.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (1 samples, 0.01%)</title><rect x="30.5241%" y="677" width="0.0118%" height="15" fill="rgb(246,138,30)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="687.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (1 samples, 0.01%)</title><rect x="30.5241%" y="661" width="0.0118%" height="15" fill="rgb(251,199,47)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="671.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (1 samples, 0.01%)</title><rect x="30.5241%" y="645" width="0.0118%" height="15" fill="rgb(228,218,44)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.01%)</title><rect x="30.5241%" y="629" width="0.0118%" height="15" fill="rgb(220,68,6)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="30.5241%" y="613" width="0.0118%" height="15" fill="rgb(240,60,26)" fg:x="2586" fg:w="1"/><text x="30.7741%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="30.5359%" y="677" width="0.0118%" height="15" fill="rgb(211,200,19)" fg:x="2587" fg:w="1"/><text x="30.7859%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="30.5359%" y="661" width="0.0118%" height="15" fill="rgb(242,145,30)" fg:x="2587" fg:w="1"/><text x="30.7859%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="30.5359%" y="645" width="0.0118%" height="15" fill="rgb(225,64,13)" fg:x="2587" fg:w="1"/><text x="30.7859%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="30.5359%" y="629" width="0.0118%" height="15" fill="rgb(218,103,35)" fg:x="2587" fg:w="1"/><text x="30.7859%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="30.5359%" y="613" width="0.0118%" height="15" fill="rgb(216,93,46)" fg:x="2587" fg:w="1"/><text x="30.7859%" y="623.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="30.5477%" y="677" width="0.0236%" height="15" fill="rgb(225,159,27)" fg:x="2588" fg:w="2"/><text x="30.7977%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.01%)</title><rect x="30.5595%" y="661" width="0.0118%" height="15" fill="rgb(225,204,11)" fg:x="2589" fg:w="1"/><text x="30.8095%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.01%)</title><rect x="30.5595%" y="645" width="0.0118%" height="15" fill="rgb(205,56,4)" fg:x="2589" fg:w="1"/><text x="30.8095%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.01%)</title><rect x="30.5595%" y="629" width="0.0118%" height="15" fill="rgb(206,6,35)" fg:x="2589" fg:w="1"/><text x="30.8095%" y="639.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (14 samples, 0.17%)</title><rect x="30.5359%" y="693" width="0.1653%" height="15" fill="rgb(247,73,52)" fg:x="2587" fg:w="14"/><text x="30.7859%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.13%)</title><rect x="30.5713%" y="677" width="0.1298%" height="15" fill="rgb(246,97,4)" fg:x="2590" fg:w="11"/><text x="30.8213%" y="687.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (11 samples, 0.13%)</title><rect x="30.5713%" y="661" width="0.1298%" height="15" fill="rgb(212,37,15)" fg:x="2590" fg:w="11"/><text x="30.8213%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="30.6303%" y="645" width="0.0708%" height="15" fill="rgb(208,130,40)" fg:x="2595" fg:w="6"/><text x="30.8803%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="30.6303%" y="629" width="0.0708%" height="15" fill="rgb(236,55,29)" fg:x="2595" fg:w="6"/><text x="30.8803%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="30.6303%" y="613" width="0.0708%" height="15" fill="rgb(209,156,45)" fg:x="2595" fg:w="6"/><text x="30.8803%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="30.6893%" y="597" width="0.0118%" height="15" fill="rgb(249,107,4)" fg:x="2600" fg:w="1"/><text x="30.9393%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="30.7129%" y="629" width="0.0118%" height="15" fill="rgb(227,7,13)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="30.7129%" y="613" width="0.0118%" height="15" fill="rgb(250,129,14)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="30.7129%" y="597" width="0.0118%" height="15" fill="rgb(229,92,13)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="30.7129%" y="581" width="0.0118%" height="15" fill="rgb(245,98,39)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="591.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="30.7129%" y="565" width="0.0118%" height="15" fill="rgb(234,135,48)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="30.7129%" y="549" width="0.0118%" height="15" fill="rgb(230,98,28)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7129%" y="533" width="0.0118%" height="15" fill="rgb(223,121,0)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7129%" y="517" width="0.0118%" height="15" fill="rgb(234,173,33)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7129%" y="501" width="0.0118%" height="15" fill="rgb(245,47,8)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="30.7129%" y="485" width="0.0118%" height="15" fill="rgb(205,17,20)" fg:x="2602" fg:w="1"/><text x="30.9629%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7247%" y="629" width="0.0118%" height="15" fill="rgb(232,151,16)" fg:x="2603" fg:w="1"/><text x="30.9747%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7247%" y="613" width="0.0118%" height="15" fill="rgb(208,30,32)" fg:x="2603" fg:w="1"/><text x="30.9747%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7247%" y="597" width="0.0118%" height="15" fill="rgb(254,26,3)" fg:x="2603" fg:w="1"/><text x="30.9747%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="30.7247%" y="581" width="0.0118%" height="15" fill="rgb(240,177,30)" fg:x="2603" fg:w="1"/><text x="30.9747%" y="591.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="30.7129%" y="645" width="0.0472%" height="15" fill="rgb(248,76,44)" fg:x="2602" fg:w="4"/><text x="30.9629%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.02%)</title><rect x="30.7365%" y="629" width="0.0236%" height="15" fill="rgb(241,186,54)" fg:x="2604" fg:w="2"/><text x="30.9865%" y="639.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.02%)</title><rect x="30.7365%" y="613" width="0.0236%" height="15" fill="rgb(249,171,29)" fg:x="2604" fg:w="2"/><text x="30.9865%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="30.7365%" y="597" width="0.0236%" height="15" fill="rgb(237,151,44)" fg:x="2604" fg:w="2"/><text x="30.9865%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7483%" y="581" width="0.0118%" height="15" fill="rgb(228,174,30)" fg:x="2605" fg:w="1"/><text x="30.9983%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7483%" y="565" width="0.0118%" height="15" fill="rgb(252,14,37)" fg:x="2605" fg:w="1"/><text x="30.9983%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="30.7483%" y="549" width="0.0118%" height="15" fill="rgb(207,111,40)" fg:x="2605" fg:w="1"/><text x="30.9983%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="30.7602%" y="581" width="0.0118%" height="15" fill="rgb(248,171,54)" fg:x="2606" fg:w="1"/><text x="31.0102%" y="591.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (22 samples, 0.26%)</title><rect x="30.5241%" y="725" width="0.2597%" height="15" fill="rgb(211,127,2)" fg:x="2586" fg:w="22"/><text x="30.7741%" y="735.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (22 samples, 0.26%)</title><rect x="30.5241%" y="709" width="0.2597%" height="15" fill="rgb(236,87,47)" fg:x="2586" fg:w="22"/><text x="30.7741%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (7 samples, 0.08%)</title><rect x="30.7011%" y="693" width="0.0826%" height="15" fill="rgb(223,190,45)" fg:x="2601" fg:w="7"/><text x="30.9511%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.08%)</title><rect x="30.7011%" y="677" width="0.0826%" height="15" fill="rgb(215,5,16)" fg:x="2601" fg:w="7"/><text x="30.9511%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="30.7129%" y="661" width="0.0708%" height="15" fill="rgb(252,82,33)" fg:x="2602" fg:w="6"/><text x="30.9629%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.7602%" y="645" width="0.0236%" height="15" fill="rgb(247,213,44)" fg:x="2606" fg:w="2"/><text x="31.0102%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.7602%" y="629" width="0.0236%" height="15" fill="rgb(205,196,44)" fg:x="2606" fg:w="2"/><text x="31.0102%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.7602%" y="613" width="0.0236%" height="15" fill="rgb(237,96,54)" fg:x="2606" fg:w="2"/><text x="31.0102%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="30.7602%" y="597" width="0.0236%" height="15" fill="rgb(230,113,34)" fg:x="2606" fg:w="2"/><text x="31.0102%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="30.7720%" y="581" width="0.0118%" height="15" fill="rgb(221,224,12)" fg:x="2607" fg:w="1"/><text x="31.0220%" y="591.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (192 samples, 2.27%)</title><rect x="28.5293%" y="741" width="2.2663%" height="15" fill="rgb(219,112,44)" fg:x="2417" fg:w="192"/><text x="28.7793%" y="751.50">b..</text></g><g><title>dashmap::mapref::multiple::RefMulti&lt;K,V,S&gt;::key (1 samples, 0.01%)</title><rect x="30.7838%" y="725" width="0.0118%" height="15" fill="rgb(210,31,13)" fg:x="2608" fg:w="1"/><text x="31.0338%" y="735.50"></text></g><g><title>dashmap::mapref::multiple::RefMulti&lt;K,V,S&gt;::pair (1 samples, 0.01%)</title><rect x="30.7838%" y="709" width="0.0118%" height="15" fill="rgb(230,25,16)" fg:x="2608" fg:w="1"/><text x="31.0338%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::multiple::RefMulti&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="30.7956%" y="741" width="0.1298%" height="15" fill="rgb(246,108,53)" fg:x="2609" fg:w="11"/><text x="31.0456%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="30.7956%" y="725" width="0.1298%" height="15" fill="rgb(241,172,50)" fg:x="2609" fg:w="11"/><text x="31.0456%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="30.7956%" y="709" width="0.1298%" height="15" fill="rgb(235,141,10)" fg:x="2609" fg:w="11"/><text x="31.0456%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.12%)</title><rect x="30.8074%" y="693" width="0.1180%" height="15" fill="rgb(220,174,43)" fg:x="2610" fg:w="10"/><text x="31.0574%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.12%)</title><rect x="30.8074%" y="677" width="0.1180%" height="15" fill="rgb(215,181,40)" fg:x="2610" fg:w="10"/><text x="31.0574%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="30.9490%" y="677" width="0.0590%" height="15" fill="rgb(230,97,2)" fg:x="2622" fg:w="5"/><text x="31.1990%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="30.9490%" y="661" width="0.0590%" height="15" fill="rgb(211,25,27)" fg:x="2622" fg:w="5"/><text x="31.1990%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="30.9490%" y="645" width="0.0590%" height="15" fill="rgb(230,87,26)" fg:x="2622" fg:w="5"/><text x="31.1990%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="30.9844%" y="629" width="0.0236%" height="15" fill="rgb(227,160,17)" fg:x="2625" fg:w="2"/><text x="31.2344%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="30.9962%" y="613" width="0.0118%" height="15" fill="rgb(244,85,34)" fg:x="2626" fg:w="1"/><text x="31.2462%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="31.0198%" y="645" width="0.0236%" height="15" fill="rgb(207,70,0)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="31.0198%" y="629" width="0.0236%" height="15" fill="rgb(223,129,7)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="31.0198%" y="613" width="0.0236%" height="15" fill="rgb(246,105,7)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="31.0198%" y="597" width="0.0236%" height="15" fill="rgb(215,154,42)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="31.0198%" y="581" width="0.0236%" height="15" fill="rgb(220,215,30)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="31.0198%" y="565" width="0.0236%" height="15" fill="rgb(228,81,51)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0198%" y="549" width="0.0236%" height="15" fill="rgb(247,71,54)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0198%" y="533" width="0.0236%" height="15" fill="rgb(234,176,34)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0198%" y="517" width="0.0236%" height="15" fill="rgb(241,103,54)" fg:x="2628" fg:w="2"/><text x="31.2698%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="31.0316%" y="501" width="0.0118%" height="15" fill="rgb(228,22,34)" fg:x="2629" fg:w="1"/><text x="31.2816%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="31.0434%" y="597" width="0.0118%" height="15" fill="rgb(241,179,48)" fg:x="2630" fg:w="1"/><text x="31.2934%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="31.0434%" y="581" width="0.0118%" height="15" fill="rgb(235,167,37)" fg:x="2630" fg:w="1"/><text x="31.2934%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0434%" y="645" width="0.0236%" height="15" fill="rgb(213,109,30)" fg:x="2630" fg:w="2"/><text x="31.2934%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0434%" y="629" width="0.0236%" height="15" fill="rgb(222,172,16)" fg:x="2630" fg:w="2"/><text x="31.2934%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.0434%" y="613" width="0.0236%" height="15" fill="rgb(233,192,5)" fg:x="2630" fg:w="2"/><text x="31.2934%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="31.0552%" y="597" width="0.0118%" height="15" fill="rgb(247,189,41)" fg:x="2631" fg:w="1"/><text x="31.3052%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.13%)</title><rect x="30.9490%" y="709" width="0.1298%" height="15" fill="rgb(218,134,47)" fg:x="2622" fg:w="11"/><text x="31.1990%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.13%)</title><rect x="30.9490%" y="693" width="0.1298%" height="15" fill="rgb(216,29,3)" fg:x="2622" fg:w="11"/><text x="31.1990%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="31.0080%" y="677" width="0.0708%" height="15" fill="rgb(246,140,12)" fg:x="2627" fg:w="6"/><text x="31.2580%" y="687.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="31.0080%" y="661" width="0.0708%" height="15" fill="rgb(230,136,11)" fg:x="2627" fg:w="6"/><text x="31.2580%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="31.0670%" y="645" width="0.0118%" height="15" fill="rgb(247,22,47)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="655.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="31.0670%" y="629" width="0.0118%" height="15" fill="rgb(218,84,22)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="31.0670%" y="613" width="0.0118%" height="15" fill="rgb(216,87,39)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.0670%" y="597" width="0.0118%" height="15" fill="rgb(221,178,8)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.0670%" y="581" width="0.0118%" height="15" fill="rgb(230,42,11)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.0670%" y="565" width="0.0118%" height="15" fill="rgb(237,229,4)" fg:x="2632" fg:w="1"/><text x="31.3170%" y="575.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="31.1851%" y="501" width="0.0118%" height="15" fill="rgb(222,31,33)" fg:x="2642" fg:w="1"/><text x="31.4351%" y="511.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="31.1969%" y="501" width="0.0118%" height="15" fill="rgb(210,17,39)" fg:x="2643" fg:w="1"/><text x="31.4469%" y="511.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="31.2087%" y="485" width="0.0118%" height="15" fill="rgb(244,93,20)" fg:x="2644" fg:w="1"/><text x="31.4587%" y="495.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="31.2087%" y="469" width="0.0118%" height="15" fill="rgb(210,40,47)" fg:x="2644" fg:w="1"/><text x="31.4587%" y="479.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="31.2205%" y="469" width="0.0118%" height="15" fill="rgb(239,211,47)" fg:x="2645" fg:w="1"/><text x="31.4705%" y="479.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="31.2323%" y="469" width="0.0118%" height="15" fill="rgb(251,223,49)" fg:x="2646" fg:w="1"/><text x="31.4823%" y="479.50"></text></g><g><title>cgroup_rstat_updated (7 samples, 0.08%)</title><rect x="31.2441%" y="453" width="0.0826%" height="15" fill="rgb(221,149,5)" fg:x="2647" fg:w="7"/><text x="31.4941%" y="463.50"></text></g><g><title>charge_memcg (9 samples, 0.11%)</title><rect x="31.2441%" y="469" width="0.1062%" height="15" fill="rgb(219,224,51)" fg:x="2647" fg:w="9"/><text x="31.4941%" y="479.50"></text></g><g><title>consume_stock (2 samples, 0.02%)</title><rect x="31.3267%" y="453" width="0.0236%" height="15" fill="rgb(223,7,8)" fg:x="2654" fg:w="2"/><text x="31.5767%" y="463.50"></text></g><g><title>__mem_cgroup_charge (12 samples, 0.14%)</title><rect x="31.2205%" y="485" width="0.1416%" height="15" fill="rgb(241,217,22)" fg:x="2645" fg:w="12"/><text x="31.4705%" y="495.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="31.3503%" y="469" width="0.0118%" height="15" fill="rgb(248,209,0)" fg:x="2656" fg:w="1"/><text x="31.6003%" y="479.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="31.3621%" y="485" width="0.0236%" height="15" fill="rgb(217,205,4)" fg:x="2657" fg:w="2"/><text x="31.6121%" y="495.50"></text></g><g><title>_raw_spin_lock (7 samples, 0.08%)</title><rect x="31.3857%" y="485" width="0.0826%" height="15" fill="rgb(228,124,39)" fg:x="2659" fg:w="7"/><text x="31.6357%" y="495.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="31.4684%" y="485" width="0.0236%" height="15" fill="rgb(250,116,42)" fg:x="2666" fg:w="2"/><text x="31.7184%" y="495.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="31.4684%" y="469" width="0.0236%" height="15" fill="rgb(223,202,9)" fg:x="2666" fg:w="2"/><text x="31.7184%" y="479.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="31.4684%" y="453" width="0.0236%" height="15" fill="rgb(242,222,40)" fg:x="2666" fg:w="2"/><text x="31.7184%" y="463.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="31.4684%" y="437" width="0.0236%" height="15" fill="rgb(229,99,46)" fg:x="2666" fg:w="2"/><text x="31.7184%" y="447.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="31.4802%" y="421" width="0.0118%" height="15" fill="rgb(225,56,46)" fg:x="2667" fg:w="1"/><text x="31.7302%" y="431.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="31.4802%" y="405" width="0.0118%" height="15" fill="rgb(227,94,5)" fg:x="2667" fg:w="1"/><text x="31.7302%" y="415.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="31.4802%" y="389" width="0.0118%" height="15" fill="rgb(205,112,38)" fg:x="2667" fg:w="1"/><text x="31.7302%" y="399.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.02%)</title><rect x="31.4920%" y="469" width="0.0236%" height="15" fill="rgb(231,133,46)" fg:x="2668" fg:w="2"/><text x="31.7420%" y="479.50"></text></g><g><title>folio_add_new_anon_rmap (3 samples, 0.04%)</title><rect x="31.4920%" y="485" width="0.0354%" height="15" fill="rgb(217,16,9)" fg:x="2668" fg:w="3"/><text x="31.7420%" y="495.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="31.5156%" y="469" width="0.0118%" height="15" fill="rgb(249,173,9)" fg:x="2670" fg:w="1"/><text x="31.7656%" y="479.50"></text></g><g><title>__folio_alloc (3 samples, 0.04%)</title><rect x="31.5392%" y="469" width="0.0354%" height="15" fill="rgb(205,163,53)" fg:x="2672" fg:w="3"/><text x="31.7892%" y="479.50"></text></g><g><title>__alloc_pages (3 samples, 0.04%)</title><rect x="31.5392%" y="453" width="0.0354%" height="15" fill="rgb(217,54,41)" fg:x="2672" fg:w="3"/><text x="31.7892%" y="463.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.04%)</title><rect x="31.5392%" y="437" width="0.0354%" height="15" fill="rgb(228,216,12)" fg:x="2672" fg:w="3"/><text x="31.7892%" y="447.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="31.5510%" y="421" width="0.0236%" height="15" fill="rgb(244,228,15)" fg:x="2673" fg:w="2"/><text x="31.8010%" y="431.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="31.5510%" y="405" width="0.0236%" height="15" fill="rgb(221,176,53)" fg:x="2673" fg:w="2"/><text x="31.8010%" y="415.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="31.5628%" y="389" width="0.0118%" height="15" fill="rgb(205,94,34)" fg:x="2674" fg:w="1"/><text x="31.8128%" y="399.50"></text></g><g><title>__handle_mm_fault (37 samples, 0.44%)</title><rect x="31.1497%" y="533" width="0.4367%" height="15" fill="rgb(213,110,48)" fg:x="2639" fg:w="37"/><text x="31.3997%" y="543.50"></text></g><g><title>handle_pte_fault (34 samples, 0.40%)</title><rect x="31.1851%" y="517" width="0.4013%" height="15" fill="rgb(236,142,28)" fg:x="2642" fg:w="34"/><text x="31.4351%" y="527.50"></text></g><g><title>do_anonymous_page (32 samples, 0.38%)</title><rect x="31.2087%" y="501" width="0.3777%" height="15" fill="rgb(225,135,29)" fg:x="2644" fg:w="32"/><text x="31.4587%" y="511.50"></text></g><g><title>vma_alloc_folio (5 samples, 0.06%)</title><rect x="31.5274%" y="485" width="0.0590%" height="15" fill="rgb(252,45,31)" fg:x="2671" fg:w="5"/><text x="31.7774%" y="495.50"></text></g><g><title>_find_first_bit (1 samples, 0.01%)</title><rect x="31.5746%" y="469" width="0.0118%" height="15" fill="rgb(211,187,50)" fg:x="2675" fg:w="1"/><text x="31.8246%" y="479.50"></text></g><g><title>handle_mm_fault (38 samples, 0.45%)</title><rect x="31.1497%" y="549" width="0.4485%" height="15" fill="rgb(229,109,7)" fg:x="2639" fg:w="38"/><text x="31.3997%" y="559.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.01%)</title><rect x="31.5864%" y="533" width="0.0118%" height="15" fill="rgb(251,131,51)" fg:x="2676" fg:w="1"/><text x="31.8364%" y="543.50"></text></g><g><title>do_user_addr_fault (39 samples, 0.46%)</title><rect x="31.1497%" y="565" width="0.4603%" height="15" fill="rgb(251,180,35)" fg:x="2639" fg:w="39"/><text x="31.3997%" y="575.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="31.5982%" y="549" width="0.0118%" height="15" fill="rgb(211,46,32)" fg:x="2677" fg:w="1"/><text x="31.8482%" y="559.50"></text></g><g><title>asm_exc_page_fault (41 samples, 0.48%)</title><rect x="31.1379%" y="597" width="0.4839%" height="15" fill="rgb(248,123,17)" fg:x="2638" fg:w="41"/><text x="31.3879%" y="607.50"></text></g><g><title>exc_page_fault (40 samples, 0.47%)</title><rect x="31.1497%" y="581" width="0.4721%" height="15" fill="rgb(227,141,18)" fg:x="2639" fg:w="40"/><text x="31.3997%" y="591.50"></text></g><g><title>irqentry_exit (1 samples, 0.01%)</title><rect x="31.6100%" y="565" width="0.0118%" height="15" fill="rgb(216,102,9)" fg:x="2678" fg:w="1"/><text x="31.8600%" y="575.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.01%)</title><rect x="31.6100%" y="549" width="0.0118%" height="15" fill="rgb(253,47,13)" fg:x="2678" fg:w="1"/><text x="31.8600%" y="559.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.01%)</title><rect x="31.6100%" y="533" width="0.0118%" height="15" fill="rgb(226,93,23)" fg:x="2678" fg:w="1"/><text x="31.8600%" y="543.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="31.6218%" y="597" width="0.0118%" height="15" fill="rgb(247,104,17)" fg:x="2679" fg:w="1"/><text x="31.8718%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.58%)</title><rect x="31.0788%" y="629" width="0.5784%" height="15" fill="rgb(233,203,26)" fg:x="2633" fg:w="49"/><text x="31.3288%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (49 samples, 0.58%)</title><rect x="31.0788%" y="613" width="0.5784%" height="15" fill="rgb(244,98,49)" fg:x="2633" fg:w="49"/><text x="31.3288%" y="623.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="31.6336%" y="597" width="0.0236%" height="15" fill="rgb(235,134,22)" fg:x="2680" fg:w="2"/><text x="31.8836%" y="607.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="31.6690%" y="325" width="0.0118%" height="15" fill="rgb(221,70,32)" fg:x="2683" fg:w="1"/><text x="31.9190%" y="335.50"></text></g><g><title>tlb_finish_mmu (3 samples, 0.04%)</title><rect x="31.6572%" y="389" width="0.0354%" height="15" fill="rgb(238,15,50)" fg:x="2682" fg:w="3"/><text x="31.9072%" y="399.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 0.04%)</title><rect x="31.6572%" y="373" width="0.0354%" height="15" fill="rgb(215,221,48)" fg:x="2682" fg:w="3"/><text x="31.9072%" y="383.50"></text></g><g><title>free_pages_and_swap_cache (3 samples, 0.04%)</title><rect x="31.6572%" y="357" width="0.0354%" height="15" fill="rgb(236,73,3)" fg:x="2682" fg:w="3"/><text x="31.9072%" y="367.50"></text></g><g><title>release_pages (3 samples, 0.04%)</title><rect x="31.6572%" y="341" width="0.0354%" height="15" fill="rgb(250,107,11)" fg:x="2682" fg:w="3"/><text x="31.9072%" y="351.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="31.6808%" y="325" width="0.0118%" height="15" fill="rgb(242,39,14)" fg:x="2684" fg:w="1"/><text x="31.9308%" y="335.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="31.6808%" y="309" width="0.0118%" height="15" fill="rgb(248,164,37)" fg:x="2684" fg:w="1"/><text x="31.9308%" y="319.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="31.6926%" y="325" width="0.0118%" height="15" fill="rgb(217,60,12)" fg:x="2685" fg:w="1"/><text x="31.9426%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (5 samples, 0.06%)</title><rect x="31.6572%" y="629" width="0.0590%" height="15" fill="rgb(240,125,29)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="639.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="31.6572%" y="613" width="0.0590%" height="15" fill="rgb(208,207,28)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (5 samples, 0.06%)</title><rect x="31.6572%" y="597" width="0.0590%" height="15" fill="rgb(209,159,27)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 0.06%)</title><rect x="31.6572%" y="581" width="0.0590%" height="15" fill="rgb(251,176,53)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.06%)</title><rect x="31.6572%" y="565" width="0.0590%" height="15" fill="rgb(211,85,7)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.06%)</title><rect x="31.6572%" y="549" width="0.0590%" height="15" fill="rgb(216,64,54)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="559.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="31.6572%" y="533" width="0.0590%" height="15" fill="rgb(217,54,24)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="543.50"></text></g><g><title>__GI_munmap (5 samples, 0.06%)</title><rect x="31.6572%" y="517" width="0.0590%" height="15" fill="rgb(208,206,53)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="31.6572%" y="501" width="0.0590%" height="15" fill="rgb(251,74,39)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="511.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="31.6572%" y="485" width="0.0590%" height="15" fill="rgb(226,47,5)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="495.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.06%)</title><rect x="31.6572%" y="469" width="0.0590%" height="15" fill="rgb(234,111,33)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="479.50"></text></g><g><title>__vm_munmap (5 samples, 0.06%)</title><rect x="31.6572%" y="453" width="0.0590%" height="15" fill="rgb(251,14,10)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="463.50"></text></g><g><title>do_vmi_munmap (5 samples, 0.06%)</title><rect x="31.6572%" y="437" width="0.0590%" height="15" fill="rgb(232,43,0)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="447.50"></text></g><g><title>do_vmi_align_munmap (5 samples, 0.06%)</title><rect x="31.6572%" y="421" width="0.0590%" height="15" fill="rgb(222,68,43)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="431.50"></text></g><g><title>unmap_region (5 samples, 0.06%)</title><rect x="31.6572%" y="405" width="0.0590%" height="15" fill="rgb(217,24,23)" fg:x="2682" fg:w="5"/><text x="31.9072%" y="415.50"></text></g><g><title>unmap_vmas (2 samples, 0.02%)</title><rect x="31.6926%" y="389" width="0.0236%" height="15" fill="rgb(229,209,14)" fg:x="2685" fg:w="2"/><text x="31.9426%" y="399.50"></text></g><g><title>unmap_single_vma (2 samples, 0.02%)</title><rect x="31.6926%" y="373" width="0.0236%" height="15" fill="rgb(250,149,48)" fg:x="2685" fg:w="2"/><text x="31.9426%" y="383.50"></text></g><g><title>unmap_page_range (2 samples, 0.02%)</title><rect x="31.6926%" y="357" width="0.0236%" height="15" fill="rgb(210,120,37)" fg:x="2685" fg:w="2"/><text x="31.9426%" y="367.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.02%)</title><rect x="31.6926%" y="341" width="0.0236%" height="15" fill="rgb(210,21,8)" fg:x="2685" fg:w="2"/><text x="31.9426%" y="351.50"></text></g><g><title>zap_pte_range (1 samples, 0.01%)</title><rect x="31.7044%" y="325" width="0.0118%" height="15" fill="rgb(243,145,7)" fg:x="2686" fg:w="1"/><text x="31.9544%" y="335.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.01%)</title><rect x="31.7044%" y="309" width="0.0118%" height="15" fill="rgb(238,178,32)" fg:x="2686" fg:w="1"/><text x="31.9544%" y="319.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="31.7044%" y="293" width="0.0118%" height="15" fill="rgb(222,4,10)" fg:x="2686" fg:w="1"/><text x="31.9544%" y="303.50"></text></g><g><title>free_swap_cache (1 samples, 0.01%)</title><rect x="31.7044%" y="277" width="0.0118%" height="15" fill="rgb(239,7,37)" fg:x="2686" fg:w="1"/><text x="31.9544%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.7162%" y="565" width="0.0236%" height="15" fill="rgb(215,31,37)" fg:x="2687" fg:w="2"/><text x="31.9662%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.7162%" y="549" width="0.0236%" height="15" fill="rgb(224,83,33)" fg:x="2687" fg:w="2"/><text x="31.9662%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.7162%" y="533" width="0.0236%" height="15" fill="rgb(239,55,3)" fg:x="2687" fg:w="2"/><text x="31.9662%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="31.7162%" y="517" width="0.0236%" height="15" fill="rgb(247,92,11)" fg:x="2687" fg:w="2"/><text x="31.9662%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="31.7162%" y="501" width="0.0236%" height="15" fill="rgb(239,200,7)" fg:x="2687" fg:w="2"/><text x="31.9662%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.8225%" y="437" width="0.0236%" height="15" fill="rgb(227,115,8)" fg:x="2696" fg:w="2"/><text x="32.0725%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.8225%" y="421" width="0.0236%" height="15" fill="rgb(215,189,27)" fg:x="2696" fg:w="2"/><text x="32.0725%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.8225%" y="405" width="0.0236%" height="15" fill="rgb(251,216,39)" fg:x="2696" fg:w="2"/><text x="32.0725%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="31.8225%" y="389" width="0.0236%" height="15" fill="rgb(207,29,47)" fg:x="2696" fg:w="2"/><text x="32.0725%" y="399.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="31.8225%" y="533" width="0.0354%" height="15" fill="rgb(210,71,34)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="31.8225%" y="517" width="0.0354%" height="15" fill="rgb(253,217,51)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="527.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="31.8225%" y="501" width="0.0354%" height="15" fill="rgb(222,117,46)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="31.8225%" y="485" width="0.0354%" height="15" fill="rgb(226,132,6)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="495.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="31.8225%" y="469" width="0.0354%" height="15" fill="rgb(254,145,51)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="479.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="31.8225%" y="453" width="0.0354%" height="15" fill="rgb(231,199,27)" fg:x="2696" fg:w="3"/><text x="32.0725%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="31.8461%" y="437" width="0.0118%" height="15" fill="rgb(245,158,14)" fg:x="2698" fg:w="1"/><text x="32.0961%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8579%" y="533" width="0.0118%" height="15" fill="rgb(240,113,14)" fg:x="2699" fg:w="1"/><text x="32.1079%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8579%" y="517" width="0.0118%" height="15" fill="rgb(210,20,13)" fg:x="2699" fg:w="1"/><text x="32.1079%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8579%" y="501" width="0.0118%" height="15" fill="rgb(241,144,13)" fg:x="2699" fg:w="1"/><text x="32.1079%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="31.8579%" y="485" width="0.0118%" height="15" fill="rgb(235,43,34)" fg:x="2699" fg:w="1"/><text x="32.1079%" y="495.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (14 samples, 0.17%)</title><rect x="31.7162%" y="613" width="0.1653%" height="15" fill="rgb(208,36,20)" fg:x="2687" fg:w="14"/><text x="31.9662%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.17%)</title><rect x="31.7162%" y="597" width="0.1653%" height="15" fill="rgb(239,204,10)" fg:x="2687" fg:w="14"/><text x="31.9662%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.17%)</title><rect x="31.7162%" y="581" width="0.1653%" height="15" fill="rgb(217,84,43)" fg:x="2687" fg:w="14"/><text x="31.9662%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.14%)</title><rect x="31.7398%" y="565" width="0.1416%" height="15" fill="rgb(241,170,50)" fg:x="2689" fg:w="12"/><text x="31.9898%" y="575.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (12 samples, 0.14%)</title><rect x="31.7398%" y="549" width="0.1416%" height="15" fill="rgb(226,205,29)" fg:x="2689" fg:w="12"/><text x="31.9898%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="31.8697%" y="533" width="0.0118%" height="15" fill="rgb(233,113,1)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="543.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="31.8697%" y="517" width="0.0118%" height="15" fill="rgb(253,98,13)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="527.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="31.8697%" y="501" width="0.0118%" height="15" fill="rgb(211,115,12)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8697%" y="485" width="0.0118%" height="15" fill="rgb(208,12,16)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8697%" y="469" width="0.0118%" height="15" fill="rgb(237,193,54)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="31.8697%" y="453" width="0.0118%" height="15" fill="rgb(243,22,42)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="31.8697%" y="437" width="0.0118%" height="15" fill="rgb(233,151,36)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="31.8697%" y="421" width="0.0118%" height="15" fill="rgb(237,57,45)" fg:x="2700" fg:w="1"/><text x="32.1197%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (15 samples, 0.18%)</title><rect x="31.7162%" y="629" width="0.1771%" height="15" fill="rgb(221,88,17)" fg:x="2687" fg:w="15"/><text x="31.9662%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (1 samples, 0.01%)</title><rect x="31.8815%" y="613" width="0.0118%" height="15" fill="rgb(230,79,15)" fg:x="2701" fg:w="1"/><text x="32.1315%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="31.8815%" y="597" width="0.0118%" height="15" fill="rgb(213,57,13)" fg:x="2701" fg:w="1"/><text x="32.1315%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="31.8815%" y="581" width="0.0118%" height="15" fill="rgb(222,116,39)" fg:x="2701" fg:w="1"/><text x="32.1315%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (4 samples, 0.05%)</title><rect x="31.8933%" y="629" width="0.0472%" height="15" fill="rgb(245,107,2)" fg:x="2702" fg:w="4"/><text x="32.1433%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (74 samples, 0.87%)</title><rect x="31.0788%" y="693" width="0.8735%" height="15" fill="rgb(238,1,10)" fg:x="2633" fg:w="74"/><text x="31.3288%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (74 samples, 0.87%)</title><rect x="31.0788%" y="677" width="0.8735%" height="15" fill="rgb(249,4,48)" fg:x="2633" fg:w="74"/><text x="31.3288%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (74 samples, 0.87%)</title><rect x="31.0788%" y="661" width="0.8735%" height="15" fill="rgb(223,151,18)" fg:x="2633" fg:w="74"/><text x="31.3288%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (74 samples, 0.87%)</title><rect x="31.0788%" y="645" width="0.8735%" height="15" fill="rgb(227,65,43)" fg:x="2633" fg:w="74"/><text x="31.3288%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.01%)</title><rect x="31.9405%" y="629" width="0.0118%" height="15" fill="rgb(218,40,45)" fg:x="2706" fg:w="1"/><text x="32.1905%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.01%)</title><rect x="31.9405%" y="613" width="0.0118%" height="15" fill="rgb(252,121,31)" fg:x="2706" fg:w="1"/><text x="32.1905%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="31.9405%" y="597" width="0.0118%" height="15" fill="rgb(219,158,43)" fg:x="2706" fg:w="1"/><text x="32.1905%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="31.9405%" y="581" width="0.0118%" height="15" fill="rgb(231,162,42)" fg:x="2706" fg:w="1"/><text x="32.1905%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (4 samples, 0.05%)</title><rect x="31.9523%" y="677" width="0.0472%" height="15" fill="rgb(217,179,25)" fg:x="2707" fg:w="4"/><text x="32.2023%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4 samples, 0.05%)</title><rect x="31.9523%" y="661" width="0.0472%" height="15" fill="rgb(206,212,31)" fg:x="2707" fg:w="4"/><text x="32.2023%" y="671.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.05%)</title><rect x="31.9523%" y="645" width="0.0472%" height="15" fill="rgb(235,144,12)" fg:x="2707" fg:w="4"/><text x="32.2023%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.05%)</title><rect x="31.9523%" y="629" width="0.0472%" height="15" fill="rgb(213,51,10)" fg:x="2707" fg:w="4"/><text x="32.2023%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="31.9523%" y="613" width="0.0472%" height="15" fill="rgb(231,145,14)" fg:x="2707" fg:w="4"/><text x="32.2023%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (80 samples, 0.94%)</title><rect x="31.0788%" y="709" width="0.9443%" height="15" fill="rgb(235,15,28)" fg:x="2633" fg:w="80"/><text x="31.3288%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.07%)</title><rect x="31.9523%" y="693" width="0.0708%" height="15" fill="rgb(237,206,10)" fg:x="2707" fg:w="6"/><text x="32.2023%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="31.9995%" y="677" width="0.0236%" height="15" fill="rgb(236,227,27)" fg:x="2711" fg:w="2"/><text x="32.2495%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="31.9995%" y="661" width="0.0236%" height="15" fill="rgb(246,83,35)" fg:x="2711" fg:w="2"/><text x="32.2495%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="31.9995%" y="645" width="0.0236%" height="15" fill="rgb(220,136,24)" fg:x="2711" fg:w="2"/><text x="32.2495%" y="655.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::snapshot (304 samples, 3.59%)</title><rect x="28.5057%" y="757" width="3.5883%" height="15" fill="rgb(217,3,25)" fg:x="2415" fg:w="304"/><text x="28.7557%" y="767.50">bloc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (99 samples, 1.17%)</title><rect x="30.9254%" y="741" width="1.1686%" height="15" fill="rgb(239,24,14)" fg:x="2620" fg:w="99"/><text x="31.1754%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (99 samples, 1.17%)</title><rect x="30.9254%" y="725" width="1.1686%" height="15" fill="rgb(244,16,53)" fg:x="2620" fg:w="99"/><text x="31.1754%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.07%)</title><rect x="32.0231%" y="709" width="0.0708%" height="15" fill="rgb(208,175,44)" fg:x="2713" fg:w="6"/><text x="32.2731%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (6 samples, 0.07%)</title><rect x="32.0231%" y="693" width="0.0708%" height="15" fill="rgb(252,18,48)" fg:x="2713" fg:w="6"/><text x="32.2731%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.07%)</title><rect x="32.0231%" y="677" width="0.0708%" height="15" fill="rgb(234,199,32)" fg:x="2713" fg:w="6"/><text x="32.2731%" y="687.50"></text></g><g><title>core::ptr::write (6 samples, 0.07%)</title><rect x="32.0231%" y="661" width="0.0708%" height="15" fill="rgb(225,77,54)" fg:x="2713" fg:w="6"/><text x="32.2731%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.07%)</title><rect x="32.0231%" y="645" width="0.0708%" height="15" fill="rgb(225,42,25)" fg:x="2713" fg:w="6"/><text x="32.2731%" y="655.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="32.1058%" y="405" width="0.0236%" height="15" fill="rgb(242,227,46)" fg:x="2720" fg:w="2"/><text x="32.3558%" y="415.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="32.1058%" y="389" width="0.0236%" height="15" fill="rgb(246,197,35)" fg:x="2720" fg:w="2"/><text x="32.3558%" y="399.50"></text></g><g><title>__mem_cgroup_charge (3 samples, 0.04%)</title><rect x="32.1058%" y="421" width="0.0354%" height="15" fill="rgb(215,159,26)" fg:x="2720" fg:w="3"/><text x="32.3558%" y="431.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="32.1294%" y="405" width="0.0118%" height="15" fill="rgb(212,194,50)" fg:x="2722" fg:w="1"/><text x="32.3794%" y="415.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="32.1412%" y="421" width="0.0118%" height="15" fill="rgb(246,132,1)" fg:x="2723" fg:w="1"/><text x="32.3912%" y="431.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="32.1530%" y="421" width="0.0118%" height="15" fill="rgb(217,71,7)" fg:x="2724" fg:w="1"/><text x="32.4030%" y="431.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="32.1530%" y="405" width="0.0118%" height="15" fill="rgb(252,59,32)" fg:x="2724" fg:w="1"/><text x="32.4030%" y="415.50"></text></g><g><title>do_anonymous_page (6 samples, 0.07%)</title><rect x="32.1058%" y="437" width="0.0708%" height="15" fill="rgb(253,204,25)" fg:x="2720" fg:w="6"/><text x="32.3558%" y="447.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="32.1648%" y="421" width="0.0118%" height="15" fill="rgb(232,21,16)" fg:x="2725" fg:w="1"/><text x="32.4148%" y="431.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="32.1648%" y="405" width="0.0118%" height="15" fill="rgb(248,90,29)" fg:x="2725" fg:w="1"/><text x="32.4148%" y="415.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::new (8 samples, 0.09%)</title><rect x="32.0940%" y="757" width="0.0944%" height="15" fill="rgb(249,223,7)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.09%)</title><rect x="32.0940%" y="741" width="0.0944%" height="15" fill="rgb(231,119,42)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.09%)</title><rect x="32.0940%" y="725" width="0.0944%" height="15" fill="rgb(215,41,35)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.09%)</title><rect x="32.0940%" y="709" width="0.0944%" height="15" fill="rgb(220,44,45)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.09%)</title><rect x="32.0940%" y="693" width="0.0944%" height="15" fill="rgb(253,197,36)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.09%)</title><rect x="32.0940%" y="677" width="0.0944%" height="15" fill="rgb(245,225,54)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.09%)</title><rect x="32.0940%" y="661" width="0.0944%" height="15" fill="rgb(239,94,37)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.09%)</title><rect x="32.0940%" y="645" width="0.0944%" height="15" fill="rgb(242,217,10)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.09%)</title><rect x="32.0940%" y="629" width="0.0944%" height="15" fill="rgb(250,193,7)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.09%)</title><rect x="32.0940%" y="613" width="0.0944%" height="15" fill="rgb(230,104,19)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.09%)</title><rect x="32.0940%" y="597" width="0.0944%" height="15" fill="rgb(230,181,4)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.09%)</title><rect x="32.0940%" y="581" width="0.0944%" height="15" fill="rgb(216,219,49)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (8 samples, 0.09%)</title><rect x="32.0940%" y="565" width="0.0944%" height="15" fill="rgb(254,144,0)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="575.50"></text></g><g><title>core::ptr::write (8 samples, 0.09%)</title><rect x="32.0940%" y="549" width="0.0944%" height="15" fill="rgb(205,209,38)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="559.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.09%)</title><rect x="32.0940%" y="533" width="0.0944%" height="15" fill="rgb(240,21,42)" fg:x="2719" fg:w="8"/><text x="32.3440%" y="543.50"></text></g><g><title>exc_page_fault (7 samples, 0.08%)</title><rect x="32.1058%" y="517" width="0.0826%" height="15" fill="rgb(241,132,3)" fg:x="2720" fg:w="7"/><text x="32.3558%" y="527.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.08%)</title><rect x="32.1058%" y="501" width="0.0826%" height="15" fill="rgb(225,14,2)" fg:x="2720" fg:w="7"/><text x="32.3558%" y="511.50"></text></g><g><title>handle_mm_fault (7 samples, 0.08%)</title><rect x="32.1058%" y="485" width="0.0826%" height="15" fill="rgb(210,141,35)" fg:x="2720" fg:w="7"/><text x="32.3558%" y="495.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.08%)</title><rect x="32.1058%" y="469" width="0.0826%" height="15" fill="rgb(251,14,44)" fg:x="2720" fg:w="7"/><text x="32.3558%" y="479.50"></text></g><g><title>handle_pte_fault (7 samples, 0.08%)</title><rect x="32.1058%" y="453" width="0.0826%" height="15" fill="rgb(247,48,18)" fg:x="2720" fg:w="7"/><text x="32.3558%" y="463.50"></text></g><g><title>pte_offset_map_nolock (1 samples, 0.01%)</title><rect x="32.1766%" y="437" width="0.0118%" height="15" fill="rgb(225,0,40)" fg:x="2726" fg:w="1"/><text x="32.4266%" y="447.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="32.2238%" y="357" width="0.0118%" height="15" fill="rgb(221,31,33)" fg:x="2730" fg:w="1"/><text x="32.4738%" y="367.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="32.2238%" y="341" width="0.0118%" height="15" fill="rgb(237,42,40)" fg:x="2730" fg:w="1"/><text x="32.4738%" y="351.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="32.2238%" y="389" width="0.0236%" height="15" fill="rgb(233,51,29)" fg:x="2730" fg:w="2"/><text x="32.4738%" y="399.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="32.2238%" y="373" width="0.0236%" height="15" fill="rgb(226,58,20)" fg:x="2730" fg:w="2"/><text x="32.4738%" y="383.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="32.2356%" y="357" width="0.0118%" height="15" fill="rgb(208,98,7)" fg:x="2731" fg:w="1"/><text x="32.4856%" y="367.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="32.2474%" y="389" width="0.0118%" height="15" fill="rgb(228,143,44)" fg:x="2732" fg:w="1"/><text x="32.4974%" y="399.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.04%)</title><rect x="32.2592%" y="389" width="0.0354%" height="15" fill="rgb(246,55,38)" fg:x="2733" fg:w="3"/><text x="32.5092%" y="399.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="32.3064%" y="341" width="0.0118%" height="15" fill="rgb(247,87,16)" fg:x="2737" fg:w="1"/><text x="32.5564%" y="351.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="32.3064%" y="325" width="0.0118%" height="15" fill="rgb(234,129,42)" fg:x="2737" fg:w="1"/><text x="32.5564%" y="335.50"></text></g><g><title>folio_add_lru_vma (3 samples, 0.04%)</title><rect x="32.2946%" y="389" width="0.0354%" height="15" fill="rgb(220,82,16)" fg:x="2736" fg:w="3"/><text x="32.5446%" y="399.50"></text></g><g><title>folio_add_lru (3 samples, 0.04%)</title><rect x="32.2946%" y="373" width="0.0354%" height="15" fill="rgb(211,88,4)" fg:x="2736" fg:w="3"/><text x="32.5446%" y="383.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="32.3064%" y="357" width="0.0236%" height="15" fill="rgb(248,151,21)" fg:x="2737" fg:w="2"/><text x="32.5564%" y="367.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="32.3182%" y="341" width="0.0118%" height="15" fill="rgb(238,163,6)" fg:x="2738" fg:w="1"/><text x="32.5682%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (13 samples, 0.15%)</title><rect x="32.1884%" y="565" width="0.1534%" height="15" fill="rgb(209,183,11)" fg:x="2727" fg:w="13"/><text x="32.4384%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (13 samples, 0.15%)</title><rect x="32.1884%" y="549" width="0.1534%" height="15" fill="rgb(219,37,20)" fg:x="2727" fg:w="13"/><text x="32.4384%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (13 samples, 0.15%)</title><rect x="32.1884%" y="533" width="0.1534%" height="15" fill="rgb(210,158,4)" fg:x="2727" fg:w="13"/><text x="32.4384%" y="543.50"></text></g><g><title>core::ptr::write (13 samples, 0.15%)</title><rect x="32.1884%" y="517" width="0.1534%" height="15" fill="rgb(221,167,53)" fg:x="2727" fg:w="13"/><text x="32.4384%" y="527.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="501" width="0.1180%" height="15" fill="rgb(237,151,45)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="511.50"></text></g><g><title>exc_page_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="485" width="0.1180%" height="15" fill="rgb(231,39,3)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="495.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="469" width="0.1180%" height="15" fill="rgb(212,167,28)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="479.50"></text></g><g><title>handle_mm_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="453" width="0.1180%" height="15" fill="rgb(232,178,8)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="463.50"></text></g><g><title>__handle_mm_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="437" width="0.1180%" height="15" fill="rgb(225,151,20)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="447.50"></text></g><g><title>handle_pte_fault (10 samples, 0.12%)</title><rect x="32.2238%" y="421" width="0.1180%" height="15" fill="rgb(238,3,37)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="431.50"></text></g><g><title>do_anonymous_page (10 samples, 0.12%)</title><rect x="32.2238%" y="405" width="0.1180%" height="15" fill="rgb(251,147,42)" fg:x="2730" fg:w="10"/><text x="32.4738%" y="415.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="32.3300%" y="389" width="0.0118%" height="15" fill="rgb(208,173,10)" fg:x="2739" fg:w="1"/><text x="32.5800%" y="399.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="32.3300%" y="373" width="0.0118%" height="15" fill="rgb(246,225,4)" fg:x="2739" fg:w="1"/><text x="32.5800%" y="383.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="32.3300%" y="357" width="0.0118%" height="15" fill="rgb(248,102,6)" fg:x="2739" fg:w="1"/><text x="32.5800%" y="367.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="32.3300%" y="341" width="0.0118%" height="15" fill="rgb(232,6,21)" fg:x="2739" fg:w="1"/><text x="32.5800%" y="351.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (8 samples, 0.09%)</title><rect x="32.3418%" y="517" width="0.0944%" height="15" fill="rgb(221,179,22)" fg:x="2740" fg:w="8"/><text x="32.5918%" y="527.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="32.4008%" y="501" width="0.0354%" height="15" fill="rgb(252,50,20)" fg:x="2745" fg:w="3"/><text x="32.6508%" y="511.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (32 samples, 0.38%)</title><rect x="32.4835%" y="421" width="0.3777%" height="15" fill="rgb(222,56,38)" fg:x="2752" fg:w="32"/><text x="32.7335%" y="431.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="32.9202%" y="389" width="0.0236%" height="15" fill="rgb(206,193,29)" fg:x="2789" fg:w="2"/><text x="33.1702%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.30%)</title><rect x="32.9438%" y="389" width="0.2951%" height="15" fill="rgb(239,192,45)" fg:x="2791" fg:w="25"/><text x="33.1938%" y="399.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (25 samples, 0.30%)</title><rect x="32.9438%" y="373" width="0.2951%" height="15" fill="rgb(254,18,36)" fg:x="2791" fg:w="25"/><text x="33.1938%" y="383.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (24 samples, 0.28%)</title><rect x="32.9556%" y="357" width="0.2833%" height="15" fill="rgb(221,127,11)" fg:x="2792" fg:w="24"/><text x="33.2056%" y="367.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (24 samples, 0.28%)</title><rect x="32.9556%" y="341" width="0.2833%" height="15" fill="rgb(234,146,35)" fg:x="2792" fg:w="24"/><text x="33.2056%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.28%)</title><rect x="32.9556%" y="325" width="0.2833%" height="15" fill="rgb(254,201,37)" fg:x="2792" fg:w="24"/><text x="33.2056%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.28%)</title><rect x="32.9556%" y="309" width="0.2833%" height="15" fill="rgb(211,202,23)" fg:x="2792" fg:w="24"/><text x="33.2056%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.28%)</title><rect x="32.9556%" y="293" width="0.2833%" height="15" fill="rgb(237,91,2)" fg:x="2792" fg:w="24"/><text x="33.2056%" y="303.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (31 samples, 0.37%)</title><rect x="32.9084%" y="405" width="0.3659%" height="15" fill="rgb(226,228,36)" fg:x="2788" fg:w="31"/><text x="33.1584%" y="415.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="33.2389%" y="389" width="0.0354%" height="15" fill="rgb(213,63,50)" fg:x="2816" fg:w="3"/><text x="33.4889%" y="399.50"></text></g><g><title>core::clone::Clone::clone (68 samples, 0.80%)</title><rect x="32.4835%" y="437" width="0.8026%" height="15" fill="rgb(235,194,19)" fg:x="2752" fg:w="68"/><text x="32.7335%" y="447.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (36 samples, 0.42%)</title><rect x="32.8612%" y="421" width="0.4249%" height="15" fill="rgb(207,204,18)" fg:x="2784" fg:w="36"/><text x="33.1112%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="33.2743%" y="405" width="0.0118%" height="15" fill="rgb(248,8,7)" fg:x="2819" fg:w="1"/><text x="33.5243%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="33.2743%" y="389" width="0.0118%" height="15" fill="rgb(223,145,47)" fg:x="2819" fg:w="1"/><text x="33.5243%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="33.2743%" y="373" width="0.0118%" height="15" fill="rgb(228,84,11)" fg:x="2819" fg:w="1"/><text x="33.5243%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (24 samples, 0.28%)</title><rect x="33.2861%" y="437" width="0.2833%" height="15" fill="rgb(218,76,45)" fg:x="2820" fg:w="24"/><text x="33.5361%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.28%)</title><rect x="33.2861%" y="421" width="0.2833%" height="15" fill="rgb(223,80,15)" fg:x="2820" fg:w="24"/><text x="33.5361%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (24 samples, 0.28%)</title><rect x="33.2861%" y="405" width="0.2833%" height="15" fill="rgb(219,218,33)" fg:x="2820" fg:w="24"/><text x="33.5361%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (99 samples, 1.17%)</title><rect x="32.4599%" y="469" width="1.1686%" height="15" fill="rgb(208,51,11)" fg:x="2750" fg:w="99"/><text x="32.7099%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (99 samples, 1.17%)</title><rect x="32.4599%" y="453" width="1.1686%" height="15" fill="rgb(229,165,39)" fg:x="2750" fg:w="99"/><text x="32.7099%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5 samples, 0.06%)</title><rect x="33.5694%" y="437" width="0.0590%" height="15" fill="rgb(241,100,24)" fg:x="2844" fg:w="5"/><text x="33.8194%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5 samples, 0.06%)</title><rect x="33.5694%" y="421" width="0.0590%" height="15" fill="rgb(228,14,23)" fg:x="2844" fg:w="5"/><text x="33.8194%" y="431.50"></text></g><g><title>core::ptr::write (5 samples, 0.06%)</title><rect x="33.5694%" y="405" width="0.0590%" height="15" fill="rgb(247,116,52)" fg:x="2844" fg:w="5"/><text x="33.8194%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="33.5694%" y="389" width="0.0590%" height="15" fill="rgb(216,149,33)" fg:x="2844" fg:w="5"/><text x="33.8194%" y="399.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="33.6284%" y="437" width="0.0118%" height="15" fill="rgb(238,142,29)" fg:x="2849" fg:w="1"/><text x="33.8784%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.01%)</title><rect x="33.6284%" y="421" width="0.0118%" height="15" fill="rgb(224,83,40)" fg:x="2849" fg:w="1"/><text x="33.8784%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="33.6284%" y="405" width="0.0118%" height="15" fill="rgb(234,165,11)" fg:x="2849" fg:w="1"/><text x="33.8784%" y="415.50"></text></g><g><title>access_error (3 samples, 0.04%)</title><rect x="33.7701%" y="309" width="0.0354%" height="15" fill="rgb(215,96,23)" fg:x="2861" fg:w="3"/><text x="34.0201%" y="319.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="33.8409%" y="261" width="0.0118%" height="15" fill="rgb(233,179,26)" fg:x="2867" fg:w="1"/><text x="34.0909%" y="271.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="33.8527%" y="245" width="0.0118%" height="15" fill="rgb(225,129,33)" fg:x="2868" fg:w="1"/><text x="34.1027%" y="255.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="33.8881%" y="229" width="0.0118%" height="15" fill="rgb(237,49,13)" fg:x="2871" fg:w="1"/><text x="34.1381%" y="239.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="33.8881%" y="213" width="0.0118%" height="15" fill="rgb(211,3,31)" fg:x="2871" fg:w="1"/><text x="34.1381%" y="223.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="33.8999%" y="213" width="0.0118%" height="15" fill="rgb(216,152,19)" fg:x="2872" fg:w="1"/><text x="34.1499%" y="223.50"></text></g><g><title>cgroup_rstat_updated (7 samples, 0.08%)</title><rect x="33.9353%" y="197" width="0.0826%" height="15" fill="rgb(251,121,35)" fg:x="2875" fg:w="7"/><text x="34.1853%" y="207.50"></text></g><g><title>memcg_check_events (1 samples, 0.01%)</title><rect x="34.0179%" y="197" width="0.0118%" height="15" fill="rgb(210,217,47)" fg:x="2882" fg:w="1"/><text x="34.2679%" y="207.50"></text></g><g><title>__mem_cgroup_charge (12 samples, 0.14%)</title><rect x="33.8999%" y="229" width="0.1416%" height="15" fill="rgb(244,116,22)" fg:x="2872" fg:w="12"/><text x="34.1499%" y="239.50"></text></g><g><title>charge_memcg (11 samples, 0.13%)</title><rect x="33.9117%" y="213" width="0.1298%" height="15" fill="rgb(228,17,21)" fg:x="2873" fg:w="11"/><text x="34.1617%" y="223.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="34.0297%" y="197" width="0.0118%" height="15" fill="rgb(240,149,34)" fg:x="2883" fg:w="1"/><text x="34.2797%" y="207.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.01%)</title><rect x="34.0297%" y="181" width="0.0118%" height="15" fill="rgb(208,125,47)" fg:x="2883" fg:w="1"/><text x="34.2797%" y="191.50"></text></g><g><title>__pte_offset_map (2 samples, 0.02%)</title><rect x="34.0415%" y="229" width="0.0236%" height="15" fill="rgb(249,186,39)" fg:x="2884" fg:w="2"/><text x="34.2915%" y="239.50"></text></g><g><title>__pte_offset_map_lock (4 samples, 0.05%)</title><rect x="34.0652%" y="229" width="0.0472%" height="15" fill="rgb(240,220,33)" fg:x="2886" fg:w="4"/><text x="34.3152%" y="239.50"></text></g><g><title>_raw_spin_lock (5 samples, 0.06%)</title><rect x="34.1124%" y="229" width="0.0590%" height="15" fill="rgb(243,110,23)" fg:x="2890" fg:w="5"/><text x="34.3624%" y="239.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="34.1714%" y="229" width="0.0118%" height="15" fill="rgb(219,163,46)" fg:x="2895" fg:w="1"/><text x="34.4214%" y="239.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="34.1714%" y="213" width="0.0118%" height="15" fill="rgb(216,126,30)" fg:x="2895" fg:w="1"/><text x="34.4214%" y="223.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="34.1832%" y="229" width="0.0118%" height="15" fill="rgb(208,139,11)" fg:x="2896" fg:w="1"/><text x="34.4332%" y="239.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="34.1950%" y="229" width="0.0118%" height="15" fill="rgb(213,118,36)" fg:x="2897" fg:w="1"/><text x="34.4450%" y="239.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="34.1950%" y="213" width="0.0118%" height="15" fill="rgb(226,43,17)" fg:x="2897" fg:w="1"/><text x="34.4450%" y="223.50"></text></g><g><title>policy_nodemask (1 samples, 0.01%)</title><rect x="34.2068%" y="229" width="0.0118%" height="15" fill="rgb(254,217,4)" fg:x="2898" fg:w="1"/><text x="34.4568%" y="239.50"></text></g><g><title>do_anonymous_page (32 samples, 0.38%)</title><rect x="33.8645%" y="245" width="0.3777%" height="15" fill="rgb(210,134,47)" fg:x="2869" fg:w="32"/><text x="34.1145%" y="255.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="34.2186%" y="229" width="0.0236%" height="15" fill="rgb(237,24,49)" fg:x="2899" fg:w="2"/><text x="34.4686%" y="239.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="34.2304%" y="213" width="0.0118%" height="15" fill="rgb(251,39,46)" fg:x="2900" fg:w="1"/><text x="34.4804%" y="223.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="34.2304%" y="197" width="0.0118%" height="15" fill="rgb(251,220,3)" fg:x="2900" fg:w="1"/><text x="34.4804%" y="207.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="34.2304%" y="181" width="0.0118%" height="15" fill="rgb(228,105,12)" fg:x="2900" fg:w="1"/><text x="34.4804%" y="191.50"></text></g><g><title>post_alloc_hook (1 samples, 0.01%)</title><rect x="34.2304%" y="165" width="0.0118%" height="15" fill="rgb(215,196,1)" fg:x="2900" fg:w="1"/><text x="34.4804%" y="175.50"></text></g><g><title>__handle_mm_fault (35 samples, 0.41%)</title><rect x="33.8409%" y="277" width="0.4131%" height="15" fill="rgb(214,33,39)" fg:x="2867" fg:w="35"/><text x="34.0909%" y="287.50"></text></g><g><title>handle_pte_fault (34 samples, 0.40%)</title><rect x="33.8527%" y="261" width="0.4013%" height="15" fill="rgb(220,19,52)" fg:x="2868" fg:w="34"/><text x="34.1027%" y="271.50"></text></g><g><title>set_pte (1 samples, 0.01%)</title><rect x="34.2422%" y="245" width="0.0118%" height="15" fill="rgb(221,78,38)" fg:x="2901" fg:w="1"/><text x="34.4922%" y="255.50"></text></g><g><title>handle_mm_fault (40 samples, 0.47%)</title><rect x="33.8055%" y="293" width="0.4721%" height="15" fill="rgb(253,30,16)" fg:x="2864" fg:w="40"/><text x="34.0555%" y="303.50"></text></g><g><title>count_memcg_events.constprop.0 (2 samples, 0.02%)</title><rect x="34.2540%" y="277" width="0.0236%" height="15" fill="rgb(242,65,0)" fg:x="2902" fg:w="2"/><text x="34.5040%" y="287.50"></text></g><g><title>do_user_addr_fault (42 samples, 0.50%)</title><rect x="33.8055%" y="309" width="0.4958%" height="15" fill="rgb(235,201,12)" fg:x="2864" fg:w="42"/><text x="34.0555%" y="319.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="34.2776%" y="293" width="0.0236%" height="15" fill="rgb(233,161,9)" fg:x="2904" fg:w="2"/><text x="34.5276%" y="303.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="34.2894%" y="277" width="0.0118%" height="15" fill="rgb(241,207,41)" fg:x="2905" fg:w="1"/><text x="34.5394%" y="287.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="34.2894%" y="261" width="0.0118%" height="15" fill="rgb(212,69,46)" fg:x="2905" fg:w="1"/><text x="34.5394%" y="271.50"></text></g><g><title>asm_exc_page_fault (48 samples, 0.57%)</title><rect x="33.7465%" y="341" width="0.5666%" height="15" fill="rgb(239,69,45)" fg:x="2859" fg:w="48"/><text x="33.9965%" y="351.50"></text></g><g><title>exc_page_fault (46 samples, 0.54%)</title><rect x="33.7701%" y="325" width="0.5430%" height="15" fill="rgb(242,117,48)" fg:x="2861" fg:w="46"/><text x="34.0201%" y="335.50"></text></g><g><title>irqentry_exit (1 samples, 0.01%)</title><rect x="34.3012%" y="309" width="0.0118%" height="15" fill="rgb(228,41,36)" fg:x="2906" fg:w="1"/><text x="34.5512%" y="319.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.01%)</title><rect x="34.3012%" y="293" width="0.0118%" height="15" fill="rgb(212,3,32)" fg:x="2906" fg:w="1"/><text x="34.5512%" y="303.50"></text></g><g><title>sync_regs (5 samples, 0.06%)</title><rect x="34.3130%" y="341" width="0.0590%" height="15" fill="rgb(233,41,49)" fg:x="2907" fg:w="5"/><text x="34.5630%" y="351.50"></text></g><g><title>__glibc_morecore (1 samples, 0.01%)</title><rect x="34.3720%" y="325" width="0.0118%" height="15" fill="rgb(252,170,49)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="335.50"></text></g><g><title>__GI___sbrk (1 samples, 0.01%)</title><rect x="34.3720%" y="309" width="0.0118%" height="15" fill="rgb(229,53,26)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="319.50"></text></g><g><title>__brk (1 samples, 0.01%)</title><rect x="34.3720%" y="293" width="0.0118%" height="15" fill="rgb(217,157,12)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="34.3720%" y="277" width="0.0118%" height="15" fill="rgb(227,17,9)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="287.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="34.3720%" y="261" width="0.0118%" height="15" fill="rgb(218,84,12)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="271.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.01%)</title><rect x="34.3720%" y="245" width="0.0118%" height="15" fill="rgb(212,79,24)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="255.50"></text></g><g><title>__do_sys_brk (1 samples, 0.01%)</title><rect x="34.3720%" y="229" width="0.0118%" height="15" fill="rgb(217,222,37)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="239.50"></text></g><g><title>check_brk_limits (1 samples, 0.01%)</title><rect x="34.3720%" y="213" width="0.0118%" height="15" fill="rgb(246,208,8)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="223.50"></text></g><g><title>get_unmapped_area (1 samples, 0.01%)</title><rect x="34.3720%" y="197" width="0.0118%" height="15" fill="rgb(244,133,10)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="207.50"></text></g><g><title>arch_get_unmapped_area_topdown (1 samples, 0.01%)</title><rect x="34.3720%" y="181" width="0.0118%" height="15" fill="rgb(209,219,41)" fg:x="2912" fg:w="1"/><text x="34.6220%" y="191.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="34.3839%" y="213" width="0.0118%" height="15" fill="rgb(253,175,45)" fg:x="2913" fg:w="1"/><text x="34.6339%" y="223.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="34.3839%" y="197" width="0.0118%" height="15" fill="rgb(235,100,37)" fg:x="2913" fg:w="1"/><text x="34.6339%" y="207.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="34.3957%" y="213" width="0.0118%" height="15" fill="rgb(225,87,19)" fg:x="2914" fg:w="1"/><text x="34.6457%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (189 samples, 2.23%)</title><rect x="32.1884%" y="757" width="2.2309%" height="15" fill="rgb(217,152,17)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="767.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (189 samples, 2.23%)</title><rect x="32.1884%" y="741" width="2.2309%" height="15" fill="rgb(235,72,13)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="751.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (189 samples, 2.23%)</title><rect x="32.1884%" y="725" width="2.2309%" height="15" fill="rgb(233,140,18)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="735.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (189 samples, 2.23%)</title><rect x="32.1884%" y="709" width="2.2309%" height="15" fill="rgb(207,212,28)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="719.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (189 samples, 2.23%)</title><rect x="32.1884%" y="693" width="2.2309%" height="15" fill="rgb(220,130,25)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="703.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (189 samples, 2.23%)</title><rect x="32.1884%" y="677" width="2.2309%" height="15" fill="rgb(205,55,34)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="687.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (189 samples, 2.23%)</title><rect x="32.1884%" y="661" width="2.2309%" height="15" fill="rgb(237,54,35)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="671.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (189 samples, 2.23%)</title><rect x="32.1884%" y="645" width="2.2309%" height="15" fill="rgb(208,67,23)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="655.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (189 samples, 2.23%)</title><rect x="32.1884%" y="629" width="2.2309%" height="15" fill="rgb(206,207,50)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="639.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (189 samples, 2.23%)</title><rect x="32.1884%" y="613" width="2.2309%" height="15" fill="rgb(213,211,42)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="623.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (189 samples, 2.23%)</title><rect x="32.1884%" y="597" width="2.2309%" height="15" fill="rgb(252,197,50)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="607.50">&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (189 samples, 2.23%)</title><rect x="32.1884%" y="581" width="2.2309%" height="15" fill="rgb(251,211,41)" fg:x="2727" fg:w="189"/><text x="32.4384%" y="591.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (176 samples, 2.08%)</title><rect x="32.3418%" y="565" width="2.0774%" height="15" fill="rgb(229,211,5)" fg:x="2740" fg:w="176"/><text x="32.5918%" y="575.50">c..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (176 samples, 2.08%)</title><rect x="32.3418%" y="549" width="2.0774%" height="15" fill="rgb(239,36,31)" fg:x="2740" fg:w="176"/><text x="32.5918%" y="559.50">&lt;..</text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (176 samples, 2.08%)</title><rect x="32.3418%" y="533" width="2.0774%" height="15" fill="rgb(248,67,31)" fg:x="2740" fg:w="176"/><text x="32.5918%" y="543.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (168 samples, 1.98%)</title><rect x="32.4363%" y="517" width="1.9830%" height="15" fill="rgb(249,55,44)" fg:x="2748" fg:w="168"/><text x="32.6863%" y="527.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (168 samples, 1.98%)</title><rect x="32.4363%" y="501" width="1.9830%" height="15" fill="rgb(216,82,12)" fg:x="2748" fg:w="168"/><text x="32.6863%" y="511.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (167 samples, 1.97%)</title><rect x="32.4481%" y="485" width="1.9712%" height="15" fill="rgb(242,174,1)" fg:x="2749" fg:w="167"/><text x="32.6981%" y="495.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (67 samples, 0.79%)</title><rect x="33.6284%" y="469" width="0.7908%" height="15" fill="rgb(208,120,29)" fg:x="2849" fg:w="67"/><text x="33.8784%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (67 samples, 0.79%)</title><rect x="33.6284%" y="453" width="0.7908%" height="15" fill="rgb(221,105,43)" fg:x="2849" fg:w="67"/><text x="33.8784%" y="463.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (66 samples, 0.78%)</title><rect x="33.6402%" y="437" width="0.7790%" height="15" fill="rgb(234,124,22)" fg:x="2850" fg:w="66"/><text x="33.8902%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.78%)</title><rect x="33.6402%" y="421" width="0.7790%" height="15" fill="rgb(212,23,30)" fg:x="2850" fg:w="66"/><text x="33.8902%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.78%)</title><rect x="33.6402%" y="405" width="0.7790%" height="15" fill="rgb(219,122,53)" fg:x="2850" fg:w="66"/><text x="33.8902%" y="415.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.78%)</title><rect x="33.6402%" y="389" width="0.7790%" height="15" fill="rgb(248,84,24)" fg:x="2850" fg:w="66"/><text x="33.8902%" y="399.50"></text></g><g><title>__GI___libc_malloc (66 samples, 0.78%)</title><rect x="33.6402%" y="373" width="0.7790%" height="15" fill="rgb(245,115,18)" fg:x="2850" fg:w="66"/><text x="33.8902%" y="383.50"></text></g><g><title>_int_malloc (60 samples, 0.71%)</title><rect x="33.7110%" y="357" width="0.7082%" height="15" fill="rgb(227,176,51)" fg:x="2856" fg:w="60"/><text x="33.9610%" y="367.50"></text></g><g><title>sysmalloc (4 samples, 0.05%)</title><rect x="34.3720%" y="341" width="0.0472%" height="15" fill="rgb(229,63,42)" fg:x="2912" fg:w="4"/><text x="34.6220%" y="351.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="325" width="0.0354%" height="15" fill="rgb(247,202,24)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="335.50"></text></g><g><title>exc_page_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="309" width="0.0354%" height="15" fill="rgb(244,173,20)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="319.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="293" width="0.0354%" height="15" fill="rgb(242,81,47)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="303.50"></text></g><g><title>handle_mm_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="277" width="0.0354%" height="15" fill="rgb(231,185,54)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="287.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="261" width="0.0354%" height="15" fill="rgb(243,55,32)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="271.50"></text></g><g><title>handle_pte_fault (3 samples, 0.04%)</title><rect x="34.3839%" y="245" width="0.0354%" height="15" fill="rgb(208,167,19)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="255.50"></text></g><g><title>do_anonymous_page (3 samples, 0.04%)</title><rect x="34.3839%" y="229" width="0.0354%" height="15" fill="rgb(231,72,35)" fg:x="2913" fg:w="3"/><text x="34.6339%" y="239.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="34.4075%" y="213" width="0.0118%" height="15" fill="rgb(250,173,51)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="223.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="34.4075%" y="197" width="0.0118%" height="15" fill="rgb(209,5,22)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="207.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="34.4075%" y="181" width="0.0118%" height="15" fill="rgb(250,174,19)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="191.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="34.4075%" y="165" width="0.0118%" height="15" fill="rgb(217,3,49)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="175.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="34.4075%" y="149" width="0.0118%" height="15" fill="rgb(218,225,5)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="159.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="34.4075%" y="133" width="0.0118%" height="15" fill="rgb(236,89,11)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="143.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="34.4075%" y="117" width="0.0118%" height="15" fill="rgb(206,33,28)" fg:x="2915" fg:w="1"/><text x="34.6575%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloy_primitives::bits::address::Address,alloc::vec::Vec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="34.4193%" y="645" width="0.0118%" height="15" fill="rgb(241,56,42)" fg:x="2916" fg:w="1"/><text x="34.6693%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="34.4193%" y="629" width="0.0118%" height="15" fill="rgb(222,44,11)" fg:x="2916" fg:w="1"/><text x="34.6693%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="34.4193%" y="693" width="0.0354%" height="15" fill="rgb(234,111,20)" fg:x="2916" fg:w="3"/><text x="34.6693%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::env::TxEnv]&gt; (3 samples, 0.04%)</title><rect x="34.4193%" y="677" width="0.0354%" height="15" fill="rgb(237,77,6)" fg:x="2916" fg:w="3"/><text x="34.6693%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (3 samples, 0.04%)</title><rect x="34.4193%" y="661" width="0.0354%" height="15" fill="rgb(235,111,23)" fg:x="2916" fg:w="3"/><text x="34.6693%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="34.4311%" y="645" width="0.0236%" height="15" fill="rgb(251,135,29)" fg:x="2917" fg:w="2"/><text x="34.6811%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="34.4311%" y="629" width="0.0236%" height="15" fill="rgb(217,57,1)" fg:x="2917" fg:w="2"/><text x="34.6811%" y="639.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="34.4311%" y="613" width="0.0236%" height="15" fill="rgb(249,119,31)" fg:x="2917" fg:w="2"/><text x="34.6811%" y="623.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="34.4547%" y="421" width="0.0118%" height="15" fill="rgb(233,164,33)" fg:x="2919" fg:w="1"/><text x="34.7047%" y="431.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="34.4783%" y="373" width="0.0118%" height="15" fill="rgb(250,217,43)" fg:x="2921" fg:w="1"/><text x="34.7283%" y="383.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="34.4783%" y="357" width="0.0118%" height="15" fill="rgb(232,154,50)" fg:x="2921" fg:w="1"/><text x="34.7283%" y="367.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="34.4783%" y="341" width="0.0118%" height="15" fill="rgb(227,190,8)" fg:x="2921" fg:w="1"/><text x="34.7283%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="34.4193%" y="757" width="0.0826%" height="15" fill="rgb(209,217,32)" fg:x="2916" fg:w="7"/><text x="34.6693%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="34.4193%" y="741" width="0.0826%" height="15" fill="rgb(243,203,50)" fg:x="2916" fg:w="7"/><text x="34.6693%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.08%)</title><rect x="34.4193%" y="725" width="0.0826%" height="15" fill="rgb(232,152,27)" fg:x="2916" fg:w="7"/><text x="34.6693%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt; (7 samples, 0.08%)</title><rect x="34.4193%" y="709" width="0.0826%" height="15" fill="rgb(240,34,29)" fg:x="2916" fg:w="7"/><text x="34.6693%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::env::TxEnv&gt;&gt; (4 samples, 0.05%)</title><rect x="34.4547%" y="693" width="0.0472%" height="15" fill="rgb(215,185,52)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="34.4547%" y="677" width="0.0472%" height="15" fill="rgb(240,89,49)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.05%)</title><rect x="34.4547%" y="661" width="0.0472%" height="15" fill="rgb(225,12,52)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.05%)</title><rect x="34.4547%" y="645" width="0.0472%" height="15" fill="rgb(239,128,45)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="655.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="34.4547%" y="629" width="0.0472%" height="15" fill="rgb(211,78,47)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="639.50"></text></g><g><title>__GI_munmap (4 samples, 0.05%)</title><rect x="34.4547%" y="613" width="0.0472%" height="15" fill="rgb(232,31,21)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="34.4547%" y="597" width="0.0472%" height="15" fill="rgb(222,168,14)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="607.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="34.4547%" y="581" width="0.0472%" height="15" fill="rgb(209,128,24)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="591.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.05%)</title><rect x="34.4547%" y="565" width="0.0472%" height="15" fill="rgb(249,35,13)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="575.50"></text></g><g><title>__vm_munmap (4 samples, 0.05%)</title><rect x="34.4547%" y="549" width="0.0472%" height="15" fill="rgb(218,7,2)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="559.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.05%)</title><rect x="34.4547%" y="533" width="0.0472%" height="15" fill="rgb(238,107,27)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="543.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.05%)</title><rect x="34.4547%" y="517" width="0.0472%" height="15" fill="rgb(217,88,38)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="527.50"></text></g><g><title>unmap_region (4 samples, 0.05%)</title><rect x="34.4547%" y="501" width="0.0472%" height="15" fill="rgb(230,207,0)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="511.50"></text></g><g><title>unmap_vmas (4 samples, 0.05%)</title><rect x="34.4547%" y="485" width="0.0472%" height="15" fill="rgb(249,64,54)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="495.50"></text></g><g><title>unmap_single_vma (4 samples, 0.05%)</title><rect x="34.4547%" y="469" width="0.0472%" height="15" fill="rgb(231,7,11)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="479.50"></text></g><g><title>unmap_page_range (4 samples, 0.05%)</title><rect x="34.4547%" y="453" width="0.0472%" height="15" fill="rgb(205,149,21)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="463.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.05%)</title><rect x="34.4547%" y="437" width="0.0472%" height="15" fill="rgb(215,126,34)" fg:x="2919" fg:w="4"/><text x="34.7047%" y="447.50"></text></g><g><title>zap_pte_range (3 samples, 0.04%)</title><rect x="34.4665%" y="421" width="0.0354%" height="15" fill="rgb(241,132,45)" fg:x="2920" fg:w="3"/><text x="34.7165%" y="431.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="34.4783%" y="405" width="0.0236%" height="15" fill="rgb(252,69,32)" fg:x="2921" fg:w="2"/><text x="34.7283%" y="415.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="34.4783%" y="389" width="0.0236%" height="15" fill="rgb(232,204,19)" fg:x="2921" fg:w="2"/><text x="34.7283%" y="399.50"></text></g><g><title>free_swap_cache (1 samples, 0.01%)</title><rect x="34.4901%" y="373" width="0.0118%" height="15" fill="rgb(249,15,47)" fg:x="2922" fg:w="1"/><text x="34.7401%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt;&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="693" width="0.5076%" height="15" fill="rgb(209,227,23)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.51%)</title><rect x="34.5019%" y="677" width="0.5076%" height="15" fill="rgb(248,92,24)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;]&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="661" width="0.5076%" height="15" fill="rgb(247,59,2)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="645" width="0.5076%" height="15" fill="rgb(221,30,5)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="629" width="0.5076%" height="15" fill="rgb(208,108,53)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="613" width="0.5076%" height="15" fill="rgb(211,183,26)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (43 samples, 0.51%)</title><rect x="34.5019%" y="597" width="0.5076%" height="15" fill="rgb(232,132,4)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.51%)</title><rect x="34.5019%" y="581" width="0.5076%" height="15" fill="rgb(253,128,37)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.51%)</title><rect x="34.5019%" y="565" width="0.5076%" height="15" fill="rgb(221,58,24)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.51%)</title><rect x="34.5019%" y="549" width="0.5076%" height="15" fill="rgb(230,54,45)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="559.50"></text></g><g><title>__GI___libc_free (43 samples, 0.51%)</title><rect x="34.5019%" y="533" width="0.5076%" height="15" fill="rgb(254,21,18)" fg:x="2923" fg:w="43"/><text x="34.7519%" y="543.50"></text></g><g><title>_int_free (41 samples, 0.48%)</title><rect x="34.5255%" y="517" width="0.4839%" height="15" fill="rgb(221,108,0)" fg:x="2925" fg:w="41"/><text x="34.7755%" y="527.50"></text></g><g><title>_int_free_merge_chunk (33 samples, 0.39%)</title><rect x="34.6199%" y="501" width="0.3895%" height="15" fill="rgb(206,95,1)" fg:x="2933" fg:w="33"/><text x="34.8699%" y="511.50"></text></g><g><title>_int_free_create_chunk (26 samples, 0.31%)</title><rect x="34.7025%" y="485" width="0.3069%" height="15" fill="rgb(237,52,5)" fg:x="2940" fg:w="26"/><text x="34.9525%" y="495.50"></text></g><g><title>unlink_chunk (16 samples, 0.19%)</title><rect x="34.8206%" y="469" width="0.1889%" height="15" fill="rgb(218,150,34)" fg:x="2950" fg:w="16"/><text x="35.0706%" y="479.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="35.0921%" y="517" width="0.0826%" height="15" fill="rgb(235,194,28)" fg:x="2973" fg:w="7"/><text x="35.3421%" y="527.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="35.1629%" y="501" width="0.0118%" height="15" fill="rgb(245,92,18)" fg:x="2979" fg:w="1"/><text x="35.4129%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.18%)</title><rect x="35.0094%" y="677" width="0.1771%" height="15" fill="rgb(253,203,53)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;]&gt; (15 samples, 0.18%)</title><rect x="35.0094%" y="661" width="0.1771%" height="15" fill="rgb(249,185,47)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="35.0094%" y="645" width="0.1771%" height="15" fill="rgb(252,194,52)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="35.0094%" y="629" width="0.1771%" height="15" fill="rgb(210,53,36)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt; (15 samples, 0.18%)</title><rect x="35.0094%" y="613" width="0.1771%" height="15" fill="rgb(237,37,25)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;block_stm_revm::MemoryLocation&gt;&gt; (15 samples, 0.18%)</title><rect x="35.0094%" y="597" width="0.1771%" height="15" fill="rgb(242,116,27)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.18%)</title><rect x="35.0094%" y="581" width="0.1771%" height="15" fill="rgb(213,185,26)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.18%)</title><rect x="35.0094%" y="565" width="0.1771%" height="15" fill="rgb(225,204,8)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.18%)</title><rect x="35.0094%" y="549" width="0.1771%" height="15" fill="rgb(254,111,37)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="559.50"></text></g><g><title>__GI___libc_free (15 samples, 0.18%)</title><rect x="35.0094%" y="533" width="0.1771%" height="15" fill="rgb(242,35,9)" fg:x="2966" fg:w="15"/><text x="35.2594%" y="543.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="35.1747%" y="517" width="0.0118%" height="15" fill="rgb(232,138,49)" fg:x="2980" fg:w="1"/><text x="35.4247%" y="527.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="35.1747%" y="501" width="0.0118%" height="15" fill="rgb(247,56,4)" fg:x="2980" fg:w="1"/><text x="35.4247%" y="511.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="35.1747%" y="485" width="0.0118%" height="15" fill="rgb(226,179,17)" fg:x="2980" fg:w="1"/><text x="35.4247%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt;&gt; (16 samples, 0.19%)</title><rect x="35.0094%" y="693" width="0.1889%" height="15" fill="rgb(216,163,45)" fg:x="2966" fg:w="16"/><text x="35.2594%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="35.1865%" y="677" width="0.0118%" height="15" fill="rgb(211,157,3)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.1865%" y="661" width="0.0118%" height="15" fill="rgb(234,44,20)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="35.1865%" y="645" width="0.0118%" height="15" fill="rgb(254,138,23)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="35.1865%" y="629" width="0.0118%" height="15" fill="rgb(206,119,39)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="35.1865%" y="613" width="0.0118%" height="15" fill="rgb(231,105,52)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="623.50"></text></g><g><title>__GI_munmap (1 samples, 0.01%)</title><rect x="35.1865%" y="597" width="0.0118%" height="15" fill="rgb(250,20,5)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="35.1865%" y="581" width="0.0118%" height="15" fill="rgb(215,198,30)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="591.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="35.1865%" y="565" width="0.0118%" height="15" fill="rgb(246,142,8)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="575.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.01%)</title><rect x="35.1865%" y="549" width="0.0118%" height="15" fill="rgb(243,26,38)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="559.50"></text></g><g><title>__vm_munmap (1 samples, 0.01%)</title><rect x="35.1865%" y="533" width="0.0118%" height="15" fill="rgb(205,133,28)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="543.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.01%)</title><rect x="35.1865%" y="517" width="0.0118%" height="15" fill="rgb(212,34,0)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="527.50"></text></g><g><title>do_vmi_align_munmap (1 samples, 0.01%)</title><rect x="35.1865%" y="501" width="0.0118%" height="15" fill="rgb(251,226,22)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="511.50"></text></g><g><title>unmap_region (1 samples, 0.01%)</title><rect x="35.1865%" y="485" width="0.0118%" height="15" fill="rgb(252,119,9)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="495.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="35.1865%" y="469" width="0.0118%" height="15" fill="rgb(213,150,50)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="479.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="35.1865%" y="453" width="0.0118%" height="15" fill="rgb(212,24,39)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="463.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="35.1865%" y="437" width="0.0118%" height="15" fill="rgb(213,46,39)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="447.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="35.1865%" y="421" width="0.0118%" height="15" fill="rgb(239,106,12)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="431.50"></text></g><g><title>free_unref_page_list (1 samples, 0.01%)</title><rect x="35.1865%" y="405" width="0.0118%" height="15" fill="rgb(249,229,21)" fg:x="2981" fg:w="1"/><text x="35.4365%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="35.1983%" y="421" width="0.0354%" height="15" fill="rgb(212,158,3)" fg:x="2982" fg:w="3"/><text x="35.4483%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="35.1983%" y="405" width="0.0354%" height="15" fill="rgb(253,26,48)" fg:x="2982" fg:w="3"/><text x="35.4483%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="35.1983%" y="389" width="0.0354%" height="15" fill="rgb(238,178,20)" fg:x="2982" fg:w="3"/><text x="35.4483%" y="399.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="35.1983%" y="373" width="0.0354%" height="15" fill="rgb(208,86,15)" fg:x="2982" fg:w="3"/><text x="35.4483%" y="383.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="35.1983%" y="357" width="0.0354%" height="15" fill="rgb(239,42,53)" fg:x="2982" fg:w="3"/><text x="35.4483%" y="367.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.01%)</title><rect x="35.3045%" y="293" width="0.0118%" height="15" fill="rgb(245,226,8)" fg:x="2991" fg:w="1"/><text x="35.5545%" y="303.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="35.3636%" y="277" width="0.0118%" height="15" fill="rgb(216,176,32)" fg:x="2996" fg:w="1"/><text x="35.6136%" y="287.50"></text></g><g><title>__GI___libc_free (15 samples, 0.18%)</title><rect x="35.2337%" y="325" width="0.1771%" height="15" fill="rgb(231,186,21)" fg:x="2985" fg:w="15"/><text x="35.4837%" y="335.50"></text></g><g><title>_int_free (14 samples, 0.17%)</title><rect x="35.2455%" y="309" width="0.1653%" height="15" fill="rgb(205,95,49)" fg:x="2986" fg:w="14"/><text x="35.4955%" y="319.50"></text></g><g><title>_int_free_merge_chunk (8 samples, 0.09%)</title><rect x="35.3163%" y="293" width="0.0944%" height="15" fill="rgb(217,145,8)" fg:x="2992" fg:w="8"/><text x="35.5663%" y="303.50"></text></g><g><title>unlink_chunk (3 samples, 0.04%)</title><rect x="35.3754%" y="277" width="0.0354%" height="15" fill="rgb(239,144,48)" fg:x="2997" fg:w="3"/><text x="35.6254%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="35.4108%" y="293" width="0.0118%" height="15" fill="rgb(214,189,23)" fg:x="3000" fg:w="1"/><text x="35.6608%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="35.4108%" y="277" width="0.0118%" height="15" fill="rgb(229,157,17)" fg:x="3000" fg:w="1"/><text x="35.6608%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="35.4108%" y="261" width="0.0118%" height="15" fill="rgb(230,5,48)" fg:x="3000" fg:w="1"/><text x="35.6608%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (3 samples, 0.04%)</title><rect x="35.6586%" y="117" width="0.0354%" height="15" fill="rgb(224,156,48)" fg:x="3021" fg:w="3"/><text x="35.9086%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.04%)</title><rect x="35.6586%" y="101" width="0.0354%" height="15" fill="rgb(223,14,29)" fg:x="3021" fg:w="3"/><text x="35.9086%" y="111.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="35.6586%" y="85" width="0.0354%" height="15" fill="rgb(229,96,36)" fg:x="3021" fg:w="3"/><text x="35.9086%" y="95.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (48 samples, 0.57%)</title><rect x="35.4226%" y="293" width="0.5666%" height="15" fill="rgb(231,102,53)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (48 samples, 0.57%)</title><rect x="35.4226%" y="277" width="0.5666%" height="15" fill="rgb(210,77,38)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;)&gt; (48 samples, 0.57%)</title><rect x="35.4226%" y="261" width="0.5666%" height="15" fill="rgb(235,131,6)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (48 samples, 0.57%)</title><rect x="35.4226%" y="245" width="0.5666%" height="15" fill="rgb(252,55,38)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (48 samples, 0.57%)</title><rect x="35.4226%" y="229" width="0.5666%" height="15" fill="rgb(246,38,14)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MemoryEntry&gt; (48 samples, 0.57%)</title><rect x="35.4226%" y="213" width="0.5666%" height="15" fill="rgb(242,27,5)" fg:x="3001" fg:w="48"/><text x="35.6726%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (28 samples, 0.33%)</title><rect x="35.6586%" y="197" width="0.3305%" height="15" fill="rgb(228,65,35)" fg:x="3021" fg:w="28"/><text x="35.9086%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (28 samples, 0.33%)</title><rect x="35.6586%" y="181" width="0.3305%" height="15" fill="rgb(245,93,11)" fg:x="3021" fg:w="28"/><text x="35.9086%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (28 samples, 0.33%)</title><rect x="35.6586%" y="165" width="0.3305%" height="15" fill="rgb(213,1,31)" fg:x="3021" fg:w="28"/><text x="35.9086%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (28 samples, 0.33%)</title><rect x="35.6586%" y="149" width="0.3305%" height="15" fill="rgb(237,205,14)" fg:x="3021" fg:w="28"/><text x="35.9086%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (28 samples, 0.33%)</title><rect x="35.6586%" y="133" width="0.3305%" height="15" fill="rgb(232,118,45)" fg:x="3021" fg:w="28"/><text x="35.9086%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (25 samples, 0.30%)</title><rect x="35.6941%" y="117" width="0.2951%" height="15" fill="rgb(218,5,6)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (25 samples, 0.30%)</title><rect x="35.6941%" y="101" width="0.2951%" height="15" fill="rgb(251,87,51)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (25 samples, 0.30%)</title><rect x="35.6941%" y="85" width="0.2951%" height="15" fill="rgb(207,225,20)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="95.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.30%)</title><rect x="35.6941%" y="69" width="0.2951%" height="15" fill="rgb(222,78,54)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.30%)</title><rect x="35.6941%" y="53" width="0.2951%" height="15" fill="rgb(232,85,16)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.30%)</title><rect x="35.6941%" y="37" width="0.2951%" height="15" fill="rgb(244,25,33)" fg:x="3024" fg:w="25"/><text x="35.9441%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (70 samples, 0.83%)</title><rect x="35.4108%" y="309" width="0.8263%" height="15" fill="rgb(233,24,36)" fg:x="3000" fg:w="70"/><text x="35.6608%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (21 samples, 0.25%)</title><rect x="35.9891%" y="293" width="0.2479%" height="15" fill="rgb(253,49,54)" fg:x="3049" fg:w="21"/><text x="36.2391%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (21 samples, 0.25%)</title><rect x="35.9891%" y="277" width="0.2479%" height="15" fill="rgb(245,12,22)" fg:x="3049" fg:w="21"/><text x="36.2391%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (21 samples, 0.25%)</title><rect x="35.9891%" y="261" width="0.2479%" height="15" fill="rgb(253,141,28)" fg:x="3049" fg:w="21"/><text x="36.2391%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (21 samples, 0.25%)</title><rect x="35.9891%" y="245" width="0.2479%" height="15" fill="rgb(225,207,27)" fg:x="3049" fg:w="21"/><text x="36.2391%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (100 samples, 1.18%)</title><rect x="35.1983%" y="549" width="1.1804%" height="15" fill="rgb(220,84,2)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (100 samples, 1.18%)</title><rect x="35.1983%" y="533" width="1.1804%" height="15" fill="rgb(224,37,37)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (100 samples, 1.18%)</title><rect x="35.1983%" y="517" width="1.1804%" height="15" fill="rgb(220,143,18)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (100 samples, 1.18%)</title><rect x="35.1983%" y="501" width="1.1804%" height="15" fill="rgb(210,88,33)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (100 samples, 1.18%)</title><rect x="35.1983%" y="485" width="1.1804%" height="15" fill="rgb(219,87,51)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (100 samples, 1.18%)</title><rect x="35.1983%" y="469" width="1.1804%" height="15" fill="rgb(211,7,35)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (100 samples, 1.18%)</title><rect x="35.1983%" y="453" width="1.1804%" height="15" fill="rgb(232,77,2)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (100 samples, 1.18%)</title><rect x="35.1983%" y="437" width="1.1804%" height="15" fill="rgb(249,94,25)" fg:x="2982" fg:w="100"/><text x="35.4483%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (97 samples, 1.14%)</title><rect x="35.2337%" y="421" width="1.1449%" height="15" fill="rgb(215,112,2)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (97 samples, 1.14%)</title><rect x="35.2337%" y="405" width="1.1449%" height="15" fill="rgb(226,115,48)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (97 samples, 1.14%)</title><rect x="35.2337%" y="389" width="1.1449%" height="15" fill="rgb(249,196,10)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt; (97 samples, 1.14%)</title><rect x="35.2337%" y="373" width="1.1449%" height="15" fill="rgb(237,109,14)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;)&gt;&gt; (97 samples, 1.14%)</title><rect x="35.2337%" y="357" width="1.1449%" height="15" fill="rgb(217,103,53)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 1.14%)</title><rect x="35.2337%" y="341" width="1.1449%" height="15" fill="rgb(244,137,9)" fg:x="2985" fg:w="97"/><text x="35.4837%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (82 samples, 0.97%)</title><rect x="35.4108%" y="325" width="0.9679%" height="15" fill="rgb(227,201,3)" fg:x="3000" fg:w="82"/><text x="35.6608%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (12 samples, 0.14%)</title><rect x="36.2370%" y="309" width="0.1416%" height="15" fill="rgb(243,94,6)" fg:x="3070" fg:w="12"/><text x="36.4870%" y="319.50"></text></g><g><title>__split_vma (2 samples, 0.02%)</title><rect x="36.3787%" y="373" width="0.0236%" height="15" fill="rgb(235,118,5)" fg:x="3082" fg:w="2"/><text x="36.6287%" y="383.50"></text></g><g><title>mas_preallocate (2 samples, 0.02%)</title><rect x="36.3787%" y="357" width="0.0236%" height="15" fill="rgb(247,10,30)" fg:x="3082" fg:w="2"/><text x="36.6287%" y="367.50"></text></g><g><title>mas_alloc_nodes (2 samples, 0.02%)</title><rect x="36.3787%" y="341" width="0.0236%" height="15" fill="rgb(205,26,28)" fg:x="3082" fg:w="2"/><text x="36.6287%" y="351.50"></text></g><g><title>kmem_cache_alloc_bulk (2 samples, 0.02%)</title><rect x="36.3787%" y="325" width="0.0236%" height="15" fill="rgb(206,99,35)" fg:x="3082" fg:w="2"/><text x="36.6287%" y="335.50"></text></g><g><title>__kmem_cache_alloc_bulk (2 samples, 0.02%)</title><rect x="36.3787%" y="309" width="0.0236%" height="15" fill="rgb(238,130,40)" fg:x="3082" fg:w="2"/><text x="36.6287%" y="319.50"></text></g><g><title>___slab_alloc (1 samples, 0.01%)</title><rect x="36.3905%" y="293" width="0.0118%" height="15" fill="rgb(224,126,31)" fg:x="3083" fg:w="1"/><text x="36.6405%" y="303.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.01%)</title><rect x="36.4141%" y="293" width="0.0118%" height="15" fill="rgb(254,105,17)" fg:x="3085" fg:w="1"/><text x="36.6641%" y="303.50"></text></g><g><title>tlb_finish_mmu (4 samples, 0.05%)</title><rect x="36.4023%" y="357" width="0.0472%" height="15" fill="rgb(216,87,36)" fg:x="3084" fg:w="4"/><text x="36.6523%" y="367.50"></text></g><g><title>tlb_batch_pages_flush (4 samples, 0.05%)</title><rect x="36.4023%" y="341" width="0.0472%" height="15" fill="rgb(240,21,12)" fg:x="3084" fg:w="4"/><text x="36.6523%" y="351.50"></text></g><g><title>free_pages_and_swap_cache (4 samples, 0.05%)</title><rect x="36.4023%" y="325" width="0.0472%" height="15" fill="rgb(245,192,34)" fg:x="3084" fg:w="4"/><text x="36.6523%" y="335.50"></text></g><g><title>release_pages (4 samples, 0.05%)</title><rect x="36.4023%" y="309" width="0.0472%" height="15" fill="rgb(226,100,49)" fg:x="3084" fg:w="4"/><text x="36.6523%" y="319.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.02%)</title><rect x="36.4259%" y="293" width="0.0236%" height="15" fill="rgb(245,188,27)" fg:x="3086" fg:w="2"/><text x="36.6759%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (166 samples, 1.96%)</title><rect x="34.5019%" y="757" width="1.9594%" height="15" fill="rgb(212,170,8)" fg:x="2923" fg:w="166"/><text x="34.7519%" y="767.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (166 samples, 1.96%)</title><rect x="34.5019%" y="741" width="1.9594%" height="15" fill="rgb(217,113,29)" fg:x="2923" fg:w="166"/><text x="34.7519%" y="751.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (166 samples, 1.96%)</title><rect x="34.5019%" y="725" width="1.9594%" height="15" fill="rgb(237,30,3)" fg:x="2923" fg:w="166"/><text x="34.7519%" y="735.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MvMemory&gt; (166 samples, 1.96%)</title><rect x="34.5019%" y="709" width="1.9594%" height="15" fill="rgb(227,19,28)" fg:x="2923" fg:w="166"/><text x="34.7519%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="693" width="1.2630%" height="15" fill="rgb(239,172,45)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="677" width="1.2630%" height="15" fill="rgb(254,55,39)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="661" width="1.2630%" height="15" fill="rgb(249,208,12)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="645" width="1.2630%" height="15" fill="rgb(240,52,13)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="629" width="1.2630%" height="15" fill="rgb(252,149,13)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="613" width="1.2630%" height="15" fill="rgb(232,81,48)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (107 samples, 1.26%)</title><rect x="35.1983%" y="597" width="1.2630%" height="15" fill="rgb(222,144,2)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 1.26%)</title><rect x="35.1983%" y="581" width="1.2630%" height="15" fill="rgb(216,81,32)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (107 samples, 1.26%)</title><rect x="35.1983%" y="565" width="1.2630%" height="15" fill="rgb(244,78,51)" fg:x="2982" fg:w="107"/><text x="35.4483%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7 samples, 0.08%)</title><rect x="36.3787%" y="549" width="0.0826%" height="15" fill="rgb(217,66,21)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="559.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (7 samples, 0.08%)</title><rect x="36.3787%" y="533" width="0.0826%" height="15" fill="rgb(247,101,42)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.08%)</title><rect x="36.3787%" y="517" width="0.0826%" height="15" fill="rgb(227,81,39)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="527.50"></text></g><g><title>__GI___libc_free (7 samples, 0.08%)</title><rect x="36.3787%" y="501" width="0.0826%" height="15" fill="rgb(220,223,44)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="511.50"></text></g><g><title>__GI_munmap (7 samples, 0.08%)</title><rect x="36.3787%" y="485" width="0.0826%" height="15" fill="rgb(205,218,2)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="36.3787%" y="469" width="0.0826%" height="15" fill="rgb(212,207,28)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="479.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="36.3787%" y="453" width="0.0826%" height="15" fill="rgb(224,12,41)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="463.50"></text></g><g><title>__x64_sys_munmap (7 samples, 0.08%)</title><rect x="36.3787%" y="437" width="0.0826%" height="15" fill="rgb(216,118,12)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="447.50"></text></g><g><title>__vm_munmap (7 samples, 0.08%)</title><rect x="36.3787%" y="421" width="0.0826%" height="15" fill="rgb(252,97,46)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="431.50"></text></g><g><title>do_vmi_munmap (7 samples, 0.08%)</title><rect x="36.3787%" y="405" width="0.0826%" height="15" fill="rgb(244,206,19)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="415.50"></text></g><g><title>do_vmi_align_munmap (7 samples, 0.08%)</title><rect x="36.3787%" y="389" width="0.0826%" height="15" fill="rgb(231,84,31)" fg:x="3082" fg:w="7"/><text x="36.6287%" y="399.50"></text></g><g><title>unmap_region (5 samples, 0.06%)</title><rect x="36.4023%" y="373" width="0.0590%" height="15" fill="rgb(244,133,0)" fg:x="3084" fg:w="5"/><text x="36.6523%" y="383.50"></text></g><g><title>unmap_vmas (1 samples, 0.01%)</title><rect x="36.4495%" y="357" width="0.0118%" height="15" fill="rgb(223,15,50)" fg:x="3088" fg:w="1"/><text x="36.6995%" y="367.50"></text></g><g><title>unmap_single_vma (1 samples, 0.01%)</title><rect x="36.4495%" y="341" width="0.0118%" height="15" fill="rgb(250,118,49)" fg:x="3088" fg:w="1"/><text x="36.6995%" y="351.50"></text></g><g><title>unmap_page_range (1 samples, 0.01%)</title><rect x="36.4495%" y="325" width="0.0118%" height="15" fill="rgb(248,25,38)" fg:x="3088" fg:w="1"/><text x="36.6995%" y="335.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="36.4495%" y="309" width="0.0118%" height="15" fill="rgb(215,70,14)" fg:x="3088" fg:w="1"/><text x="36.6995%" y="319.50"></text></g><g><title>zap_pte_range (1 samples, 0.01%)</title><rect x="36.4495%" y="293" width="0.0118%" height="15" fill="rgb(215,28,15)" fg:x="3088" fg:w="1"/><text x="36.6995%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::scheduler::Scheduler&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="757" width="0.0118%" height="15" fill="rgb(243,6,28)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="741" width="0.0118%" height="15" fill="rgb(222,130,1)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.4613%" y="725" width="0.0118%" height="15" fill="rgb(236,166,44)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;]&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="709" width="0.0118%" height="15" fill="rgb(221,108,14)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="693" width="0.0118%" height="15" fill="rgb(252,3,45)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="677" width="0.0118%" height="15" fill="rgb(237,68,30)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="661" width="0.0118%" height="15" fill="rgb(211,79,22)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.01%)</title><rect x="36.4613%" y="645" width="0.0118%" height="15" fill="rgb(252,185,21)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.4613%" y="629" width="0.0118%" height="15" fill="rgb(225,189,26)" fg:x="3089" fg:w="1"/><text x="36.7113%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.15%)</title><rect x="36.4731%" y="709" width="0.1534%" height="15" fill="rgb(241,30,40)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (13 samples, 0.15%)</title><rect x="36.4731%" y="693" width="0.1534%" height="15" fill="rgb(235,215,44)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (13 samples, 0.15%)</title><rect x="36.4731%" y="677" width="0.1534%" height="15" fill="rgb(205,8,29)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (13 samples, 0.15%)</title><rect x="36.4731%" y="661" width="0.1534%" height="15" fill="rgb(241,137,42)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (13 samples, 0.15%)</title><rect x="36.4731%" y="645" width="0.1534%" height="15" fill="rgb(237,155,2)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="629" width="0.1534%" height="15" fill="rgb(245,29,42)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="613" width="0.1534%" height="15" fill="rgb(234,101,35)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="597" width="0.1534%" height="15" fill="rgb(228,64,37)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="581" width="0.1534%" height="15" fill="rgb(217,214,36)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="565" width="0.1534%" height="15" fill="rgb(243,70,3)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="549" width="0.1534%" height="15" fill="rgb(253,158,52)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="533" width="0.1534%" height="15" fill="rgb(234,111,54)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="517" width="0.1534%" height="15" fill="rgb(217,70,32)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (13 samples, 0.15%)</title><rect x="36.4731%" y="501" width="0.1534%" height="15" fill="rgb(234,18,33)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.15%)</title><rect x="36.4731%" y="485" width="0.1534%" height="15" fill="rgb(234,12,49)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.15%)</title><rect x="36.4731%" y="469" width="0.1534%" height="15" fill="rgb(236,10,21)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.15%)</title><rect x="36.4731%" y="453" width="0.1534%" height="15" fill="rgb(248,182,45)" fg:x="3090" fg:w="13"/><text x="36.7231%" y="463.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="36.6265%" y="501" width="0.0118%" height="15" fill="rgb(217,95,36)" fg:x="3103" fg:w="1"/><text x="36.8765%" y="511.50"></text></g><g><title>vm_normal_page (1 samples, 0.01%)</title><rect x="36.6383%" y="501" width="0.0118%" height="15" fill="rgb(212,110,31)" fg:x="3104" fg:w="1"/><text x="36.8883%" y="511.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="36.6501%" y="405" width="0.0118%" height="15" fill="rgb(206,32,53)" fg:x="3105" fg:w="1"/><text x="36.9001%" y="415.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.01%)</title><rect x="36.6501%" y="389" width="0.0118%" height="15" fill="rgb(246,141,37)" fg:x="3105" fg:w="1"/><text x="36.9001%" y="399.50"></text></g><g><title>__free_one_page (1 samples, 0.01%)</title><rect x="36.6501%" y="373" width="0.0118%" height="15" fill="rgb(219,16,7)" fg:x="3105" fg:w="1"/><text x="36.9001%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue&gt;&gt; (17 samples, 0.20%)</title><rect x="36.4731%" y="757" width="0.2007%" height="15" fill="rgb(230,205,45)" fg:x="3090" fg:w="17"/><text x="36.7231%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue,std::hash::random::RandomState&gt;&gt; (17 samples, 0.20%)</title><rect x="36.4731%" y="741" width="0.2007%" height="15" fill="rgb(231,43,49)" fg:x="3090" fg:w="17"/><text x="36.7231%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (17 samples, 0.20%)</title><rect x="36.4731%" y="725" width="0.2007%" height="15" fill="rgb(212,106,34)" fg:x="3090" fg:w="17"/><text x="36.7231%" y="735.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="36.6265%" y="709" width="0.0472%" height="15" fill="rgb(206,83,17)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="719.50"></text></g><g><title>__GI_munmap (4 samples, 0.05%)</title><rect x="36.6265%" y="693" width="0.0472%" height="15" fill="rgb(244,154,49)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="36.6265%" y="677" width="0.0472%" height="15" fill="rgb(244,149,49)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="687.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="36.6265%" y="661" width="0.0472%" height="15" fill="rgb(227,134,18)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="671.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.05%)</title><rect x="36.6265%" y="645" width="0.0472%" height="15" fill="rgb(237,116,36)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="655.50"></text></g><g><title>__vm_munmap (4 samples, 0.05%)</title><rect x="36.6265%" y="629" width="0.0472%" height="15" fill="rgb(205,129,40)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="639.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.05%)</title><rect x="36.6265%" y="613" width="0.0472%" height="15" fill="rgb(236,178,4)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="623.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.05%)</title><rect x="36.6265%" y="597" width="0.0472%" height="15" fill="rgb(251,76,53)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="607.50"></text></g><g><title>unmap_region (4 samples, 0.05%)</title><rect x="36.6265%" y="581" width="0.0472%" height="15" fill="rgb(242,92,40)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="591.50"></text></g><g><title>unmap_vmas (4 samples, 0.05%)</title><rect x="36.6265%" y="565" width="0.0472%" height="15" fill="rgb(209,45,30)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="575.50"></text></g><g><title>unmap_single_vma (4 samples, 0.05%)</title><rect x="36.6265%" y="549" width="0.0472%" height="15" fill="rgb(218,157,36)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="559.50"></text></g><g><title>unmap_page_range (4 samples, 0.05%)</title><rect x="36.6265%" y="533" width="0.0472%" height="15" fill="rgb(222,186,16)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="543.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.05%)</title><rect x="36.6265%" y="517" width="0.0472%" height="15" fill="rgb(254,72,35)" fg:x="3103" fg:w="4"/><text x="36.8765%" y="527.50"></text></g><g><title>zap_pte_range (2 samples, 0.02%)</title><rect x="36.6501%" y="501" width="0.0236%" height="15" fill="rgb(224,25,35)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="511.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="36.6501%" y="485" width="0.0236%" height="15" fill="rgb(206,135,52)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="495.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="36.6501%" y="469" width="0.0236%" height="15" fill="rgb(229,174,47)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="479.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="36.6501%" y="453" width="0.0236%" height="15" fill="rgb(242,184,21)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="463.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="36.6501%" y="437" width="0.0236%" height="15" fill="rgb(213,22,45)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="447.50"></text></g><g><title>free_unref_page_list (2 samples, 0.02%)</title><rect x="36.6501%" y="421" width="0.0236%" height="15" fill="rgb(237,81,54)" fg:x="3105" fg:w="2"/><text x="36.9001%" y="431.50"></text></g><g><title>free_unref_page_prepare (1 samples, 0.01%)</title><rect x="36.6619%" y="405" width="0.0118%" height="15" fill="rgb(248,177,18)" fg:x="3106" fg:w="1"/><text x="36.9119%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (1 samples, 0.01%)</title><rect x="36.6737%" y="645" width="0.0118%" height="15" fill="rgb(254,31,16)" fg:x="3107" fg:w="1"/><text x="36.9237%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::Output&gt; (1 samples, 0.01%)</title><rect x="36.6737%" y="629" width="0.0118%" height="15" fill="rgb(235,20,31)" fg:x="3107" fg:w="1"/><text x="36.9237%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="36.6737%" y="613" width="0.0118%" height="15" fill="rgb(240,56,43)" fg:x="3107" fg:w="1"/><text x="36.9237%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="36.6737%" y="597" width="0.0118%" height="15" fill="rgb(237,197,51)" fg:x="3107" fg:w="1"/><text x="36.9237%" y="607.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.6737%" y="581" width="0.0118%" height="15" fill="rgb(241,162,44)" fg:x="3107" fg:w="1"/><text x="36.9237%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="36.6856%" y="549" width="0.0118%" height="15" fill="rgb(224,23,20)" fg:x="3108" fg:w="1"/><text x="36.9356%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (6 samples, 0.07%)</title><rect x="36.8508%" y="437" width="0.0708%" height="15" fill="rgb(250,109,34)" fg:x="3122" fg:w="6"/><text x="37.1008%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (6 samples, 0.07%)</title><rect x="36.8508%" y="421" width="0.0708%" height="15" fill="rgb(214,175,50)" fg:x="3122" fg:w="6"/><text x="37.1008%" y="431.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="36.8508%" y="405" width="0.0708%" height="15" fill="rgb(213,182,5)" fg:x="3122" fg:w="6"/><text x="37.1008%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (29 samples, 0.34%)</title><rect x="36.6974%" y="549" width="0.3423%" height="15" fill="rgb(209,199,19)" fg:x="3109" fg:w="29"/><text x="36.9474%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (29 samples, 0.34%)</title><rect x="36.6974%" y="533" width="0.3423%" height="15" fill="rgb(236,224,42)" fg:x="3109" fg:w="29"/><text x="36.9474%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (29 samples, 0.34%)</title><rect x="36.6974%" y="517" width="0.3423%" height="15" fill="rgb(246,226,29)" fg:x="3109" fg:w="29"/><text x="36.9474%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (29 samples, 0.34%)</title><rect x="36.6974%" y="501" width="0.3423%" height="15" fill="rgb(227,223,11)" fg:x="3109" fg:w="29"/><text x="36.9474%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (27 samples, 0.32%)</title><rect x="36.7210%" y="485" width="0.3187%" height="15" fill="rgb(219,7,51)" fg:x="3111" fg:w="27"/><text x="36.9710%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (27 samples, 0.32%)</title><rect x="36.7210%" y="469" width="0.3187%" height="15" fill="rgb(245,167,10)" fg:x="3111" fg:w="27"/><text x="36.9710%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (16 samples, 0.19%)</title><rect x="36.8508%" y="453" width="0.1889%" height="15" fill="rgb(237,224,16)" fg:x="3122" fg:w="16"/><text x="37.1008%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (10 samples, 0.12%)</title><rect x="36.9216%" y="437" width="0.1180%" height="15" fill="rgb(226,132,13)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (10 samples, 0.12%)</title><rect x="36.9216%" y="421" width="0.1180%" height="15" fill="rgb(214,140,3)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="36.9216%" y="405" width="0.1180%" height="15" fill="rgb(221,177,4)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="36.9216%" y="389" width="0.1180%" height="15" fill="rgb(238,139,3)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.12%)</title><rect x="36.9216%" y="373" width="0.1180%" height="15" fill="rgb(216,17,39)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.12%)</title><rect x="36.9216%" y="357" width="0.1180%" height="15" fill="rgb(238,120,9)" fg:x="3128" fg:w="10"/><text x="37.1716%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (45 samples, 0.53%)</title><rect x="36.6856%" y="565" width="0.5312%" height="15" fill="rgb(244,92,53)" fg:x="3108" fg:w="45"/><text x="36.9356%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (15 samples, 0.18%)</title><rect x="37.0397%" y="549" width="0.1771%" height="15" fill="rgb(224,148,33)" fg:x="3138" fg:w="15"/><text x="37.2897%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (15 samples, 0.18%)</title><rect x="37.0397%" y="533" width="0.1771%" height="15" fill="rgb(243,6,36)" fg:x="3138" fg:w="15"/><text x="37.2897%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (15 samples, 0.18%)</title><rect x="37.0397%" y="517" width="0.1771%" height="15" fill="rgb(230,102,11)" fg:x="3138" fg:w="15"/><text x="37.2897%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (15 samples, 0.18%)</title><rect x="37.0397%" y="501" width="0.1771%" height="15" fill="rgb(234,148,36)" fg:x="3138" fg:w="15"/><text x="37.2897%" y="511.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.01%)</title><rect x="37.2521%" y="485" width="0.0118%" height="15" fill="rgb(251,153,25)" fg:x="3156" fg:w="1"/><text x="37.5021%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.64%)</title><rect x="36.6737%" y="709" width="0.6374%" height="15" fill="rgb(215,129,8)" fg:x="3107" fg:w="54"/><text x="36.9237%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;revm_primitives::result::ResultAndState&gt;]&gt; (54 samples, 0.64%)</title><rect x="36.6737%" y="693" width="0.6374%" height="15" fill="rgb(224,128,35)" fg:x="3107" fg:w="54"/><text x="36.9237%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt; (54 samples, 0.64%)</title><rect x="36.6737%" y="677" width="0.6374%" height="15" fill="rgb(237,56,52)" fg:x="3107" fg:w="54"/><text x="36.9237%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (54 samples, 0.64%)</title><rect x="36.6737%" y="661" width="0.6374%" height="15" fill="rgb(234,213,19)" fg:x="3107" fg:w="54"/><text x="36.9237%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (53 samples, 0.63%)</title><rect x="36.6856%" y="645" width="0.6256%" height="15" fill="rgb(252,82,23)" fg:x="3108" fg:w="53"/><text x="36.9356%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (53 samples, 0.63%)</title><rect x="36.6856%" y="629" width="0.6256%" height="15" fill="rgb(254,201,21)" fg:x="3108" fg:w="53"/><text x="36.9356%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (53 samples, 0.63%)</title><rect x="36.6856%" y="613" width="0.6256%" height="15" fill="rgb(250,186,11)" fg:x="3108" fg:w="53"/><text x="36.9356%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.63%)</title><rect x="36.6856%" y="597" width="0.6256%" height="15" fill="rgb(211,174,5)" fg:x="3108" fg:w="53"/><text x="36.9356%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (53 samples, 0.63%)</title><rect x="36.6856%" y="581" width="0.6256%" height="15" fill="rgb(214,121,10)" fg:x="3108" fg:w="53"/><text x="36.9356%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.09%)</title><rect x="37.2167%" y="565" width="0.0944%" height="15" fill="rgb(241,66,2)" fg:x="3153" fg:w="8"/><text x="37.4667%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.09%)</title><rect x="37.2167%" y="549" width="0.0944%" height="15" fill="rgb(220,167,19)" fg:x="3153" fg:w="8"/><text x="37.4667%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.09%)</title><rect x="37.2167%" y="533" width="0.0944%" height="15" fill="rgb(231,54,50)" fg:x="3153" fg:w="8"/><text x="37.4667%" y="543.50"></text></g><g><title>__GI___libc_free (8 samples, 0.09%)</title><rect x="37.2167%" y="517" width="0.0944%" height="15" fill="rgb(239,217,53)" fg:x="3153" fg:w="8"/><text x="37.4667%" y="527.50"></text></g><g><title>_int_free (8 samples, 0.09%)</title><rect x="37.2167%" y="501" width="0.0944%" height="15" fill="rgb(248,8,0)" fg:x="3153" fg:w="8"/><text x="37.4667%" y="511.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.05%)</title><rect x="37.2639%" y="485" width="0.0472%" height="15" fill="rgb(229,118,37)" fg:x="3157" fg:w="4"/><text x="37.5139%" y="495.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.05%)</title><rect x="37.2639%" y="469" width="0.0472%" height="15" fill="rgb(253,223,43)" fg:x="3157" fg:w="4"/><text x="37.5139%" y="479.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="37.3111%" y="501" width="0.0118%" height="15" fill="rgb(211,77,36)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="511.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="37.3111%" y="485" width="0.0118%" height="15" fill="rgb(219,3,53)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="495.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="37.3111%" y="469" width="0.0118%" height="15" fill="rgb(244,45,42)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="479.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="37.3111%" y="453" width="0.0118%" height="15" fill="rgb(225,95,27)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="463.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.01%)</title><rect x="37.3111%" y="437" width="0.0118%" height="15" fill="rgb(207,74,8)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="447.50"></text></g><g><title>uncharge_folio (1 samples, 0.01%)</title><rect x="37.3111%" y="421" width="0.0118%" height="15" fill="rgb(243,63,36)" fg:x="3161" fg:w="1"/><text x="37.5611%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (56 samples, 0.66%)</title><rect x="36.6737%" y="757" width="0.6610%" height="15" fill="rgb(211,180,12)" fg:x="3107" fg:w="56"/><text x="36.9237%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (56 samples, 0.66%)</title><rect x="36.6737%" y="741" width="0.6610%" height="15" fill="rgb(254,166,49)" fg:x="3107" fg:w="56"/><text x="36.9237%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (56 samples, 0.66%)</title><rect x="36.6737%" y="725" width="0.6610%" height="15" fill="rgb(205,19,0)" fg:x="3107" fg:w="56"/><text x="36.9237%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="37.3111%" y="709" width="0.0236%" height="15" fill="rgb(224,172,32)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="37.3111%" y="693" width="0.0236%" height="15" fill="rgb(254,136,30)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="37.3111%" y="677" width="0.0236%" height="15" fill="rgb(246,19,35)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="37.3111%" y="661" width="0.0236%" height="15" fill="rgb(219,24,36)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="671.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="37.3111%" y="645" width="0.0236%" height="15" fill="rgb(251,55,1)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="655.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="37.3111%" y="629" width="0.0236%" height="15" fill="rgb(218,117,39)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="37.3111%" y="613" width="0.0236%" height="15" fill="rgb(248,169,11)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="623.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="37.3111%" y="597" width="0.0236%" height="15" fill="rgb(244,40,44)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="607.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.02%)</title><rect x="37.3111%" y="581" width="0.0236%" height="15" fill="rgb(234,62,37)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="591.50"></text></g><g><title>__vm_munmap (2 samples, 0.02%)</title><rect x="37.3111%" y="565" width="0.0236%" height="15" fill="rgb(207,117,42)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="575.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.02%)</title><rect x="37.3111%" y="549" width="0.0236%" height="15" fill="rgb(213,43,2)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="559.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.02%)</title><rect x="37.3111%" y="533" width="0.0236%" height="15" fill="rgb(244,202,51)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="543.50"></text></g><g><title>unmap_region (2 samples, 0.02%)</title><rect x="37.3111%" y="517" width="0.0236%" height="15" fill="rgb(253,174,46)" fg:x="3161" fg:w="2"/><text x="37.5611%" y="527.50"></text></g><g><title>unmap_vmas (1 samples, 0.01%)</title><rect x="37.3229%" y="501" width="0.0118%" height="15" fill="rgb(251,23,1)" fg:x="3162" fg:w="1"/><text x="37.5729%" y="511.50"></text></g><g><title>unmap_single_vma (1 samples, 0.01%)</title><rect x="37.3229%" y="485" width="0.0118%" height="15" fill="rgb(253,26,1)" fg:x="3162" fg:w="1"/><text x="37.5729%" y="495.50"></text></g><g><title>unmap_page_range (1 samples, 0.01%)</title><rect x="37.3229%" y="469" width="0.0118%" height="15" fill="rgb(216,89,31)" fg:x="3162" fg:w="1"/><text x="37.5729%" y="479.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="37.3229%" y="453" width="0.0118%" height="15" fill="rgb(209,109,5)" fg:x="3162" fg:w="1"/><text x="37.5729%" y="463.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="37.3229%" y="437" width="0.0118%" height="15" fill="rgb(229,63,13)" fg:x="3162" fg:w="1"/><text x="37.5729%" y="447.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="37.3347%" y="437" width="0.0118%" height="15" fill="rgb(238,137,54)" fg:x="3163" fg:w="1"/><text x="37.5847%" y="447.50"></text></g><g><title>mmap_region (1 samples, 0.01%)</title><rect x="37.3347%" y="421" width="0.0118%" height="15" fill="rgb(228,1,9)" fg:x="3163" fg:w="1"/><text x="37.5847%" y="431.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.01%)</title><rect x="37.3347%" y="405" width="0.0118%" height="15" fill="rgb(249,120,48)" fg:x="3163" fg:w="1"/><text x="37.5847%" y="415.50"></text></g><g><title>mas_find (1 samples, 0.01%)</title><rect x="37.3347%" y="389" width="0.0118%" height="15" fill="rgb(209,72,36)" fg:x="3163" fg:w="1"/><text x="37.5847%" y="399.50"></text></g><g><title>mas_next_slot (1 samples, 0.01%)</title><rect x="37.3347%" y="373" width="0.0118%" height="15" fill="rgb(247,98,49)" fg:x="3163" fg:w="1"/><text x="37.5847%" y="383.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.07%)</title><rect x="37.3347%" y="549" width="0.0708%" height="15" fill="rgb(233,75,36)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="559.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.07%)</title><rect x="37.3347%" y="533" width="0.0708%" height="15" fill="rgb(225,14,24)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="37.3347%" y="517" width="0.0708%" height="15" fill="rgb(237,193,20)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="527.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="37.3347%" y="501" width="0.0708%" height="15" fill="rgb(239,122,19)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="511.50"></text></g><g><title>__x64_sys_mmap (6 samples, 0.07%)</title><rect x="37.3347%" y="485" width="0.0708%" height="15" fill="rgb(231,220,10)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="495.50"></text></g><g><title>ksys_mmap_pgoff (6 samples, 0.07%)</title><rect x="37.3347%" y="469" width="0.0708%" height="15" fill="rgb(220,66,15)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="479.50"></text></g><g><title>vm_mmap_pgoff (6 samples, 0.07%)</title><rect x="37.3347%" y="453" width="0.0708%" height="15" fill="rgb(215,171,52)" fg:x="3163" fg:w="6"/><text x="37.5847%" y="463.50"></text></g><g><title>down_write_killable (5 samples, 0.06%)</title><rect x="37.3466%" y="437" width="0.0590%" height="15" fill="rgb(241,169,50)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="447.50"></text></g><g><title>rwsem_down_write_slowpath (5 samples, 0.06%)</title><rect x="37.3466%" y="421" width="0.0590%" height="15" fill="rgb(236,189,0)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="431.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.06%)</title><rect x="37.3466%" y="405" width="0.0590%" height="15" fill="rgb(217,147,20)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="415.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="37.3466%" y="389" width="0.0590%" height="15" fill="rgb(206,188,39)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="399.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="37.3466%" y="373" width="0.0590%" height="15" fill="rgb(227,118,25)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="37.3466%" y="357" width="0.0590%" height="15" fill="rgb(248,171,40)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="367.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="37.3466%" y="341" width="0.0590%" height="15" fill="rgb(251,90,54)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="351.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="37.3466%" y="325" width="0.0590%" height="15" fill="rgb(234,11,46)" fg:x="3164" fg:w="5"/><text x="37.5966%" y="335.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="37.4056%" y="549" width="0.0590%" height="15" fill="rgb(229,134,13)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="559.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="37.4056%" y="533" width="0.0590%" height="15" fill="rgb(223,129,3)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="543.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="37.4056%" y="517" width="0.0590%" height="15" fill="rgb(221,124,13)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="527.50"></text></g><g><title>lock_mm_and_find_vma (5 samples, 0.06%)</title><rect x="37.4056%" y="501" width="0.0590%" height="15" fill="rgb(234,3,18)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="511.50"></text></g><g><title>down_read_killable (5 samples, 0.06%)</title><rect x="37.4056%" y="485" width="0.0590%" height="15" fill="rgb(249,199,20)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="495.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.06%)</title><rect x="37.4056%" y="469" width="0.0590%" height="15" fill="rgb(224,134,6)" fg:x="3169" fg:w="5"/><text x="37.6556%" y="479.50"></text></g><g><title>schedule_preempt_disabled (4 samples, 0.05%)</title><rect x="37.4174%" y="453" width="0.0472%" height="15" fill="rgb(254,83,26)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="463.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="37.4174%" y="437" width="0.0472%" height="15" fill="rgb(217,88,9)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="447.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="37.4174%" y="421" width="0.0472%" height="15" fill="rgb(225,73,2)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="431.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="37.4174%" y="405" width="0.0472%" height="15" fill="rgb(226,44,39)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="37.4174%" y="389" width="0.0472%" height="15" fill="rgb(228,53,17)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="399.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="37.4174%" y="373" width="0.0472%" height="15" fill="rgb(212,27,27)" fg:x="3170" fg:w="4"/><text x="37.6674%" y="383.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run (776 samples, 9.16%)</title><rect x="28.3168%" y="773" width="9.1596%" height="15" fill="rgb(241,50,6)" fg:x="2399" fg:w="776"/><text x="28.5668%" y="783.50">block_stm_rev..</text></g><g><title>std::thread::scoped::scope (12 samples, 0.14%)</title><rect x="37.3347%" y="757" width="0.1416%" height="15" fill="rgb(225,28,51)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="767.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.14%)</title><rect x="37.3347%" y="741" width="0.1416%" height="15" fill="rgb(215,33,16)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="751.50"></text></g><g><title>std::panicking::try (12 samples, 0.14%)</title><rect x="37.3347%" y="725" width="0.1416%" height="15" fill="rgb(243,40,39)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="735.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.14%)</title><rect x="37.3347%" y="709" width="0.1416%" height="15" fill="rgb(225,11,42)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.14%)</title><rect x="37.3347%" y="693" width="0.1416%" height="15" fill="rgb(241,220,38)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="703.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (12 samples, 0.14%)</title><rect x="37.3347%" y="677" width="0.1416%" height="15" fill="rgb(244,52,35)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="687.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}} (12 samples, 0.14%)</title><rect x="37.3347%" y="661" width="0.1416%" height="15" fill="rgb(246,42,46)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="671.50"></text></g><g><title>std::thread::scoped::Scope::spawn (12 samples, 0.14%)</title><rect x="37.3347%" y="645" width="0.1416%" height="15" fill="rgb(205,184,13)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="655.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (12 samples, 0.14%)</title><rect x="37.3347%" y="629" width="0.1416%" height="15" fill="rgb(209,48,36)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="639.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (12 samples, 0.14%)</title><rect x="37.3347%" y="613" width="0.1416%" height="15" fill="rgb(244,34,51)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="623.50"></text></g><g><title>std::sys::unix::thread::Thread::new (12 samples, 0.14%)</title><rect x="37.3347%" y="597" width="0.1416%" height="15" fill="rgb(221,107,33)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="607.50"></text></g><g><title>__pthread_create_2_1 (12 samples, 0.14%)</title><rect x="37.3347%" y="581" width="0.1416%" height="15" fill="rgb(224,203,12)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="591.50"></text></g><g><title>allocate_stack (12 samples, 0.14%)</title><rect x="37.3347%" y="565" width="0.1416%" height="15" fill="rgb(230,215,18)" fg:x="3163" fg:w="12"/><text x="37.5847%" y="575.50"></text></g><g><title>setup_stack_prot (1 samples, 0.01%)</title><rect x="37.4646%" y="549" width="0.0118%" height="15" fill="rgb(206,185,35)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="559.50"></text></g><g><title>__GI_mprotect (1 samples, 0.01%)</title><rect x="37.4646%" y="533" width="0.0118%" height="15" fill="rgb(228,140,34)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="37.4646%" y="517" width="0.0118%" height="15" fill="rgb(208,93,13)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="37.4646%" y="501" width="0.0118%" height="15" fill="rgb(221,193,39)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="511.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.01%)</title><rect x="37.4646%" y="485" width="0.0118%" height="15" fill="rgb(241,132,34)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="495.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.01%)</title><rect x="37.4646%" y="469" width="0.0118%" height="15" fill="rgb(221,141,10)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="479.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="37.4646%" y="453" width="0.0118%" height="15" fill="rgb(226,90,31)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="463.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="37.4646%" y="437" width="0.0118%" height="15" fill="rgb(243,75,5)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="447.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="37.4646%" y="421" width="0.0118%" height="15" fill="rgb(227,156,21)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="431.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="37.4646%" y="405" width="0.0118%" height="15" fill="rgb(250,195,8)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="415.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="37.4646%" y="389" width="0.0118%" height="15" fill="rgb(220,134,5)" fg:x="3174" fg:w="1"/><text x="37.7146%" y="399.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="37.5000%" y="453" width="0.0118%" height="15" fill="rgb(246,106,34)" fg:x="3177" fg:w="1"/><text x="37.7500%" y="463.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="37.5000%" y="437" width="0.0118%" height="15" fill="rgb(205,1,4)" fg:x="3177" fg:w="1"/><text x="37.7500%" y="447.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="37.5118%" y="437" width="0.0118%" height="15" fill="rgb(224,151,29)" fg:x="3178" fg:w="1"/><text x="37.7618%" y="447.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="37.5118%" y="453" width="0.0236%" height="15" fill="rgb(251,196,0)" fg:x="3178" fg:w="2"/><text x="37.7618%" y="463.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="37.5236%" y="437" width="0.0118%" height="15" fill="rgb(212,127,0)" fg:x="3179" fg:w="1"/><text x="37.7736%" y="447.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="37.5354%" y="453" width="0.0236%" height="15" fill="rgb(236,71,53)" fg:x="3180" fg:w="2"/><text x="37.7854%" y="463.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="37.5472%" y="437" width="0.0118%" height="15" fill="rgb(227,99,0)" fg:x="3181" fg:w="1"/><text x="37.7972%" y="447.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="37.5590%" y="453" width="0.0118%" height="15" fill="rgb(239,89,21)" fg:x="3182" fg:w="1"/><text x="37.8090%" y="463.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="37.5590%" y="437" width="0.0118%" height="15" fill="rgb(243,122,19)" fg:x="3182" fg:w="1"/><text x="37.8090%" y="447.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="37.5590%" y="421" width="0.0118%" height="15" fill="rgb(229,192,45)" fg:x="3182" fg:w="1"/><text x="37.8090%" y="431.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="37.5590%" y="405" width="0.0118%" height="15" fill="rgb(235,165,35)" fg:x="3182" fg:w="1"/><text x="37.8090%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.12%)</title><rect x="37.4764%" y="773" width="0.1180%" height="15" fill="rgb(253,202,0)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.12%)</title><rect x="37.4764%" y="757" width="0.1180%" height="15" fill="rgb(235,51,20)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.12%)</title><rect x="37.4764%" y="741" width="0.1180%" height="15" fill="rgb(218,95,46)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.12%)</title><rect x="37.4764%" y="725" width="0.1180%" height="15" fill="rgb(212,81,10)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.12%)</title><rect x="37.4764%" y="709" width="0.1180%" height="15" fill="rgb(240,59,0)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (10 samples, 0.12%)</title><rect x="37.4764%" y="693" width="0.1180%" height="15" fill="rgb(212,191,42)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.12%)</title><rect x="37.4764%" y="677" width="0.1180%" height="15" fill="rgb(233,140,3)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.12%)</title><rect x="37.4764%" y="661" width="0.1180%" height="15" fill="rgb(215,69,23)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.12%)</title><rect x="37.4764%" y="645" width="0.1180%" height="15" fill="rgb(240,202,20)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.12%)</title><rect x="37.4764%" y="629" width="0.1180%" height="15" fill="rgb(209,146,50)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (10 samples, 0.12%)</title><rect x="37.4764%" y="613" width="0.1180%" height="15" fill="rgb(253,102,54)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (10 samples, 0.12%)</title><rect x="37.4764%" y="597" width="0.1180%" height="15" fill="rgb(250,173,47)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="607.50"></text></g><g><title>core::ptr::write (10 samples, 0.12%)</title><rect x="37.4764%" y="581" width="0.1180%" height="15" fill="rgb(232,142,7)" fg:x="3175" fg:w="10"/><text x="37.7264%" y="591.50"></text></g><g><title>asm_exc_page_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="565" width="0.1062%" height="15" fill="rgb(230,157,47)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="575.50"></text></g><g><title>exc_page_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="549" width="0.1062%" height="15" fill="rgb(214,177,35)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="559.50"></text></g><g><title>do_user_addr_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="533" width="0.1062%" height="15" fill="rgb(234,119,46)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="543.50"></text></g><g><title>handle_mm_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="517" width="0.1062%" height="15" fill="rgb(241,180,50)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="527.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="501" width="0.1062%" height="15" fill="rgb(221,54,25)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="511.50"></text></g><g><title>handle_pte_fault (9 samples, 0.11%)</title><rect x="37.4882%" y="485" width="0.1062%" height="15" fill="rgb(209,157,44)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="495.50"></text></g><g><title>do_anonymous_page (9 samples, 0.11%)</title><rect x="37.4882%" y="469" width="0.1062%" height="15" fill="rgb(246,115,41)" fg:x="3176" fg:w="9"/><text x="37.7382%" y="479.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="37.5708%" y="453" width="0.0236%" height="15" fill="rgb(229,86,1)" fg:x="3183" fg:w="2"/><text x="37.8208%" y="463.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="37.5826%" y="437" width="0.0118%" height="15" fill="rgb(240,108,53)" fg:x="3184" fg:w="1"/><text x="37.8326%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="37.5826%" y="421" width="0.0118%" height="15" fill="rgb(227,134,2)" fg:x="3184" fg:w="1"/><text x="37.8326%" y="431.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="37.5826%" y="405" width="0.0118%" height="15" fill="rgb(213,129,25)" fg:x="3184" fg:w="1"/><text x="37.8326%" y="415.50"></text></g><g><title>clear_page_erms (1 samples, 0.01%)</title><rect x="37.5826%" y="389" width="0.0118%" height="15" fill="rgb(226,35,21)" fg:x="3184" fg:w="1"/><text x="37.8326%" y="399.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.01%)</title><rect x="37.6534%" y="693" width="0.0118%" height="15" fill="rgb(208,129,26)" fg:x="3190" fg:w="1"/><text x="37.9034%" y="703.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.04%)</title><rect x="37.7007%" y="677" width="0.0354%" height="15" fill="rgb(224,83,6)" fg:x="3194" fg:w="3"/><text x="37.9507%" y="687.50"></text></g><g><title>_int_free_merge_chunk (7 samples, 0.08%)</title><rect x="37.6653%" y="693" width="0.0826%" height="15" fill="rgb(227,52,39)" fg:x="3191" fg:w="7"/><text x="37.9153%" y="703.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="37.7361%" y="677" width="0.0118%" height="15" fill="rgb(241,30,17)" fg:x="3197" fg:w="1"/><text x="37.9861%" y="687.50"></text></g><g><title>page_remove_rmap (1 samples, 0.01%)</title><rect x="37.7597%" y="453" width="0.0118%" height="15" fill="rgb(246,186,42)" fg:x="3199" fg:w="1"/><text x="38.0097%" y="463.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="37.7833%" y="373" width="0.0118%" height="15" fill="rgb(221,169,15)" fg:x="3201" fg:w="1"/><text x="38.0333%" y="383.50"></text></g><g><title>free_unref_page_list (3 samples, 0.04%)</title><rect x="37.7833%" y="389" width="0.0354%" height="15" fill="rgb(235,108,21)" fg:x="3201" fg:w="3"/><text x="38.0333%" y="399.50"></text></g><g><title>free_unref_page_prepare (2 samples, 0.02%)</title><rect x="37.7951%" y="373" width="0.0236%" height="15" fill="rgb(219,148,30)" fg:x="3202" fg:w="2"/><text x="38.0451%" y="383.50"></text></g><g><title>__GI___libc_free (20 samples, 0.24%)</title><rect x="37.5944%" y="725" width="0.2361%" height="15" fill="rgb(220,109,5)" fg:x="3185" fg:w="20"/><text x="37.8444%" y="735.50"></text></g><g><title>_int_free (19 samples, 0.22%)</title><rect x="37.6062%" y="709" width="0.2243%" height="15" fill="rgb(213,203,48)" fg:x="3186" fg:w="19"/><text x="37.8562%" y="719.50"></text></g><g><title>systrim (7 samples, 0.08%)</title><rect x="37.7479%" y="693" width="0.0826%" height="15" fill="rgb(244,71,33)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="703.50"></text></g><g><title>__glibc_morecore (7 samples, 0.08%)</title><rect x="37.7479%" y="677" width="0.0826%" height="15" fill="rgb(209,23,2)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="687.50"></text></g><g><title>__GI___sbrk (7 samples, 0.08%)</title><rect x="37.7479%" y="661" width="0.0826%" height="15" fill="rgb(219,97,7)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="671.50"></text></g><g><title>__brk (7 samples, 0.08%)</title><rect x="37.7479%" y="645" width="0.0826%" height="15" fill="rgb(216,161,23)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="37.7479%" y="629" width="0.0826%" height="15" fill="rgb(207,45,42)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="639.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="37.7479%" y="613" width="0.0826%" height="15" fill="rgb(241,61,4)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="623.50"></text></g><g><title>__x64_sys_brk (7 samples, 0.08%)</title><rect x="37.7479%" y="597" width="0.0826%" height="15" fill="rgb(236,170,1)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="607.50"></text></g><g><title>__do_sys_brk (7 samples, 0.08%)</title><rect x="37.7479%" y="581" width="0.0826%" height="15" fill="rgb(239,72,5)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="591.50"></text></g><g><title>do_vmi_align_munmap (7 samples, 0.08%)</title><rect x="37.7479%" y="565" width="0.0826%" height="15" fill="rgb(214,13,50)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="575.50"></text></g><g><title>unmap_region (7 samples, 0.08%)</title><rect x="37.7479%" y="549" width="0.0826%" height="15" fill="rgb(224,88,9)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="559.50"></text></g><g><title>unmap_vmas (7 samples, 0.08%)</title><rect x="37.7479%" y="533" width="0.0826%" height="15" fill="rgb(238,192,34)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="543.50"></text></g><g><title>unmap_single_vma (7 samples, 0.08%)</title><rect x="37.7479%" y="517" width="0.0826%" height="15" fill="rgb(217,203,50)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="527.50"></text></g><g><title>unmap_page_range (7 samples, 0.08%)</title><rect x="37.7479%" y="501" width="0.0826%" height="15" fill="rgb(241,123,32)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="511.50"></text></g><g><title>zap_pmd_range.isra.0 (7 samples, 0.08%)</title><rect x="37.7479%" y="485" width="0.0826%" height="15" fill="rgb(248,151,39)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="495.50"></text></g><g><title>zap_pte_range (7 samples, 0.08%)</title><rect x="37.7479%" y="469" width="0.0826%" height="15" fill="rgb(208,89,6)" fg:x="3198" fg:w="7"/><text x="37.9979%" y="479.50"></text></g><g><title>tlb_flush_mmu (5 samples, 0.06%)</title><rect x="37.7715%" y="453" width="0.0590%" height="15" fill="rgb(254,43,26)" fg:x="3200" fg:w="5"/><text x="38.0215%" y="463.50"></text></g><g><title>tlb_batch_pages_flush (5 samples, 0.06%)</title><rect x="37.7715%" y="437" width="0.0590%" height="15" fill="rgb(216,158,13)" fg:x="3200" fg:w="5"/><text x="38.0215%" y="447.50"></text></g><g><title>free_pages_and_swap_cache (5 samples, 0.06%)</title><rect x="37.7715%" y="421" width="0.0590%" height="15" fill="rgb(212,47,37)" fg:x="3200" fg:w="5"/><text x="38.0215%" y="431.50"></text></g><g><title>release_pages (5 samples, 0.06%)</title><rect x="37.7715%" y="405" width="0.0590%" height="15" fill="rgb(254,16,10)" fg:x="3200" fg:w="5"/><text x="38.0215%" y="415.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="37.8187%" y="389" width="0.0118%" height="15" fill="rgb(223,228,16)" fg:x="3204" fg:w="1"/><text x="38.0687%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="37.8305%" y="725" width="0.0118%" height="15" fill="rgb(249,108,50)" fg:x="3205" fg:w="1"/><text x="38.0805%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="37.8305%" y="709" width="0.0118%" height="15" fill="rgb(208,220,5)" fg:x="3205" fg:w="1"/><text x="38.0805%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (1 samples, 0.01%)</title><rect x="37.8423%" y="709" width="0.0118%" height="15" fill="rgb(217,89,48)" fg:x="3206" fg:w="1"/><text x="38.0923%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (5 samples, 0.06%)</title><rect x="38.0784%" y="501" width="0.0590%" height="15" fill="rgb(212,113,41)" fg:x="3226" fg:w="5"/><text x="38.3284%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (5 samples, 0.06%)</title><rect x="38.0784%" y="485" width="0.0590%" height="15" fill="rgb(231,127,5)" fg:x="3226" fg:w="5"/><text x="38.3284%" y="495.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="38.0784%" y="469" width="0.0590%" height="15" fill="rgb(217,141,17)" fg:x="3226" fg:w="5"/><text x="38.3284%" y="479.50"></text></g><g><title>__GI___libc_free (12 samples, 0.14%)</title><rect x="38.1374%" y="437" width="0.1416%" height="15" fill="rgb(245,125,54)" fg:x="3231" fg:w="12"/><text x="38.3874%" y="447.50"></text></g><g><title>_int_free (9 samples, 0.11%)</title><rect x="38.1728%" y="421" width="0.1062%" height="15" fill="rgb(248,125,3)" fg:x="3234" fg:w="9"/><text x="38.4228%" y="431.50"></text></g><g><title>core::mem::drop (8 samples, 0.09%)</title><rect x="38.2790%" y="421" width="0.0944%" height="15" fill="rgb(236,119,51)" fg:x="3243" fg:w="8"/><text x="38.5290%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;bitvec::vec::BitVec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (8 samples, 0.09%)</title><rect x="38.2790%" y="405" width="0.0944%" height="15" fill="rgb(239,99,8)" fg:x="3243" fg:w="8"/><text x="38.5290%" y="415.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.09%)</title><rect x="38.2790%" y="389" width="0.0944%" height="15" fill="rgb(224,228,4)" fg:x="3243" fg:w="8"/><text x="38.5290%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="38.3026%" y="373" width="0.0708%" height="15" fill="rgb(220,131,45)" fg:x="3245" fg:w="6"/><text x="38.5526%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="38.3026%" y="357" width="0.0708%" height="15" fill="rgb(215,62,5)" fg:x="3245" fg:w="6"/><text x="38.5526%" y="367.50"></text></g><g><title>_int_free (18 samples, 0.21%)</title><rect x="38.6568%" y="245" width="0.2125%" height="15" fill="rgb(253,12,24)" fg:x="3275" fg:w="18"/><text x="38.9068%" y="255.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="38.8574%" y="229" width="0.0118%" height="15" fill="rgb(248,120,50)" fg:x="3292" fg:w="1"/><text x="39.1074%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (51 samples, 0.60%)</title><rect x="38.2790%" y="437" width="0.6020%" height="15" fill="rgb(245,194,10)" fg:x="3243" fg:w="51"/><text x="38.5290%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (43 samples, 0.51%)</title><rect x="38.3735%" y="421" width="0.5076%" height="15" fill="rgb(241,149,38)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="431.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (43 samples, 0.51%)</title><rect x="38.3735%" y="405" width="0.5076%" height="15" fill="rgb(219,215,7)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="415.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (43 samples, 0.51%)</title><rect x="38.3735%" y="389" width="0.5076%" height="15" fill="rgb(208,120,31)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="399.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (43 samples, 0.51%)</title><rect x="38.3735%" y="373" width="0.5076%" height="15" fill="rgb(244,30,8)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (43 samples, 0.51%)</title><rect x="38.3735%" y="357" width="0.5076%" height="15" fill="rgb(238,35,44)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (43 samples, 0.51%)</title><rect x="38.3735%" y="341" width="0.5076%" height="15" fill="rgb(243,218,37)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (43 samples, 0.51%)</title><rect x="38.3735%" y="325" width="0.5076%" height="15" fill="rgb(218,169,10)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.51%)</title><rect x="38.3735%" y="309" width="0.5076%" height="15" fill="rgb(221,144,10)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.51%)</title><rect x="38.3735%" y="293" width="0.5076%" height="15" fill="rgb(226,41,38)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.51%)</title><rect x="38.3735%" y="277" width="0.5076%" height="15" fill="rgb(228,3,1)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="287.50"></text></g><g><title>__GI___libc_free (43 samples, 0.51%)</title><rect x="38.3735%" y="261" width="0.5076%" height="15" fill="rgb(209,129,12)" fg:x="3251" fg:w="43"/><text x="38.6235%" y="271.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="38.8692%" y="245" width="0.0118%" height="15" fill="rgb(213,136,33)" fg:x="3293" fg:w="1"/><text x="39.1192%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (124 samples, 1.46%)</title><rect x="37.9013%" y="549" width="1.4636%" height="15" fill="rgb(209,181,29)" fg:x="3211" fg:w="124"/><text x="38.1513%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (124 samples, 1.46%)</title><rect x="37.9013%" y="533" width="1.4636%" height="15" fill="rgb(234,173,18)" fg:x="3211" fg:w="124"/><text x="38.1513%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (109 samples, 1.29%)</title><rect x="38.0784%" y="517" width="1.2866%" height="15" fill="rgb(227,73,47)" fg:x="3226" fg:w="109"/><text x="38.3284%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (104 samples, 1.23%)</title><rect x="38.1374%" y="501" width="1.2276%" height="15" fill="rgb(234,9,34)" fg:x="3231" fg:w="104"/><text x="38.3874%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (104 samples, 1.23%)</title><rect x="38.1374%" y="485" width="1.2276%" height="15" fill="rgb(235,172,15)" fg:x="3231" fg:w="104"/><text x="38.3874%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (104 samples, 1.23%)</title><rect x="38.1374%" y="469" width="1.2276%" height="15" fill="rgb(245,61,2)" fg:x="3231" fg:w="104"/><text x="38.3874%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 1.23%)</title><rect x="38.1374%" y="453" width="1.2276%" height="15" fill="rgb(238,39,47)" fg:x="3231" fg:w="104"/><text x="38.3874%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41 samples, 0.48%)</title><rect x="38.8810%" y="437" width="0.4839%" height="15" fill="rgb(234,37,24)" fg:x="3294" fg:w="41"/><text x="39.1310%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.48%)</title><rect x="38.8810%" y="421" width="0.4839%" height="15" fill="rgb(248,223,24)" fg:x="3294" fg:w="41"/><text x="39.1310%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 1.79%)</title><rect x="37.5944%" y="757" width="1.7941%" height="15" fill="rgb(223,12,15)" fg:x="3185" fg:w="152"/><text x="37.8444%" y="767.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::result::ResultAndState]&gt; (152 samples, 1.79%)</title><rect x="37.5944%" y="741" width="1.7941%" height="15" fill="rgb(249,6,3)" fg:x="3185" fg:w="152"/><text x="37.8444%" y="751.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (131 samples, 1.55%)</title><rect x="37.8423%" y="725" width="1.5463%" height="15" fill="rgb(237,105,33)" fg:x="3206" fg:w="131"/><text x="38.0923%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (130 samples, 1.53%)</title><rect x="37.8541%" y="709" width="1.5345%" height="15" fill="rgb(252,208,35)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (130 samples, 1.53%)</title><rect x="37.8541%" y="693" width="1.5345%" height="15" fill="rgb(215,181,35)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (130 samples, 1.53%)</title><rect x="37.8541%" y="677" width="1.5345%" height="15" fill="rgb(246,212,3)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 1.53%)</title><rect x="37.8541%" y="661" width="1.5345%" height="15" fill="rgb(247,156,24)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (130 samples, 1.53%)</title><rect x="37.8541%" y="645" width="1.5345%" height="15" fill="rgb(248,9,31)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (130 samples, 1.53%)</title><rect x="37.8541%" y="629" width="1.5345%" height="15" fill="rgb(234,26,45)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (130 samples, 1.53%)</title><rect x="37.8541%" y="613" width="1.5345%" height="15" fill="rgb(249,11,32)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (130 samples, 1.53%)</title><rect x="37.8541%" y="597" width="1.5345%" height="15" fill="rgb(249,162,33)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (130 samples, 1.53%)</title><rect x="37.8541%" y="581" width="1.5345%" height="15" fill="rgb(232,4,32)" fg:x="3207" fg:w="130"/><text x="38.1041%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (129 samples, 1.52%)</title><rect x="37.8659%" y="565" width="1.5227%" height="15" fill="rgb(212,5,45)" fg:x="3208" fg:w="129"/><text x="38.1159%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot&gt;&gt; (2 samples, 0.02%)</title><rect x="39.3650%" y="549" width="0.0236%" height="15" fill="rgb(227,95,13)" fg:x="3335" fg:w="2"/><text x="39.6150%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot,std::hash::random::RandomState&gt;&gt; (2 samples, 0.02%)</title><rect x="39.3650%" y="533" width="0.0236%" height="15" fill="rgb(223,205,10)" fg:x="3335" fg:w="2"/><text x="39.6150%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot)&gt;&gt; (2 samples, 0.02%)</title><rect x="39.3650%" y="517" width="0.0236%" height="15" fill="rgb(222,178,8)" fg:x="3335" fg:w="2"/><text x="39.6150%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="39.3650%" y="501" width="0.0236%" height="15" fill="rgb(216,13,22)" fg:x="3335" fg:w="2"/><text x="39.6150%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.02%)</title><rect x="39.3650%" y="485" width="0.0236%" height="15" fill="rgb(240,167,12)" fg:x="3335" fg:w="2"/><text x="39.6150%" y="495.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.02%)</title><rect x="39.3886%" y="549" width="0.0236%" height="15" fill="rgb(235,68,35)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="559.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="39.3886%" y="533" width="0.0236%" height="15" fill="rgb(253,40,27)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="543.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="39.3886%" y="517" width="0.0236%" height="15" fill="rgb(214,19,28)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="527.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="39.3886%" y="501" width="0.0236%" height="15" fill="rgb(210,167,45)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="511.50"></text></g><g><title>free_unref_page_list (2 samples, 0.02%)</title><rect x="39.3886%" y="485" width="0.0236%" height="15" fill="rgb(232,97,40)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="495.50"></text></g><g><title>free_unref_page_commit (2 samples, 0.02%)</title><rect x="39.3886%" y="469" width="0.0236%" height="15" fill="rgb(250,35,23)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="479.50"></text></g><g><title>free_pcppages_bulk (2 samples, 0.02%)</title><rect x="39.3886%" y="453" width="0.0236%" height="15" fill="rgb(248,47,53)" fg:x="3337" fg:w="2"/><text x="39.6386%" y="463.50"></text></g><g><title>__free_one_page (1 samples, 0.01%)</title><rect x="39.4004%" y="437" width="0.0118%" height="15" fill="rgb(226,58,50)" fg:x="3338" fg:w="1"/><text x="39.6504%" y="447.50"></text></g><g><title>page_remove_rmap (1 samples, 0.01%)</title><rect x="39.4122%" y="469" width="0.0118%" height="15" fill="rgb(217,105,26)" fg:x="3339" fg:w="1"/><text x="39.6622%" y="479.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="39.4122%" y="453" width="0.0118%" height="15" fill="rgb(208,64,1)" fg:x="3339" fg:w="1"/><text x="39.6622%" y="463.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="39.4122%" y="437" width="0.0118%" height="15" fill="rgb(214,80,1)" fg:x="3339" fg:w="1"/><text x="39.6622%" y="447.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="39.4122%" y="421" width="0.0118%" height="15" fill="rgb(206,175,26)" fg:x="3339" fg:w="1"/><text x="39.6622%" y="431.50"></text></g><g><title>_start (1,017 samples, 12.00%)</title><rect x="27.4315%" y="1045" width="12.0042%" height="15" fill="rgb(235,156,37)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="1055.50">_start</text></g><g><title>__libc_start_main_impl (1,017 samples, 12.00%)</title><rect x="27.4315%" y="1029" width="12.0042%" height="15" fill="rgb(213,100,9)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="1039.50">__libc_start_main_..</text></g><g><title>__libc_start_call_main (1,017 samples, 12.00%)</title><rect x="27.4315%" y="1013" width="12.0042%" height="15" fill="rgb(241,15,13)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="1023.50">__libc_start_call_..</text></g><g><title>main (1,017 samples, 12.00%)</title><rect x="27.4315%" y="997" width="12.0042%" height="15" fill="rgb(205,97,43)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,017 samples, 12.00%)</title><rect x="27.4315%" y="981" width="12.0042%" height="15" fill="rgb(216,106,32)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="991.50">std::rt::lang_star..</text></g><g><title>std::panic::catch_unwind (1,017 samples, 12.00%)</title><rect x="27.4315%" y="965" width="12.0042%" height="15" fill="rgb(226,200,8)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="975.50">std::panic::catch_..</text></g><g><title>std::panicking::try (1,017 samples, 12.00%)</title><rect x="27.4315%" y="949" width="12.0042%" height="15" fill="rgb(244,54,29)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,017 samples, 12.00%)</title><rect x="27.4315%" y="933" width="12.0042%" height="15" fill="rgb(252,169,12)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="943.50">std::panicking::tr..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,017 samples, 12.00%)</title><rect x="27.4315%" y="917" width="12.0042%" height="15" fill="rgb(231,199,11)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="927.50">std::rt::lang_star..</text></g><g><title>std::panic::catch_unwind (1,017 samples, 12.00%)</title><rect x="27.4315%" y="901" width="12.0042%" height="15" fill="rgb(233,191,18)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="911.50">std::panic::catch_..</text></g><g><title>std::panicking::try (1,017 samples, 12.00%)</title><rect x="27.4315%" y="885" width="12.0042%" height="15" fill="rgb(215,83,47)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,017 samples, 12.00%)</title><rect x="27.4315%" y="869" width="12.0042%" height="15" fill="rgb(251,67,19)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="879.50">std::panicking::tr..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,017 samples, 12.00%)</title><rect x="27.4315%" y="853" width="12.0042%" height="15" fill="rgb(240,7,20)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="863.50">core::ops::functio..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,017 samples, 12.00%)</title><rect x="27.4315%" y="837" width="12.0042%" height="15" fill="rgb(210,150,26)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="847.50">std::rt::lang_star..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,017 samples, 12.00%)</title><rect x="27.4315%" y="821" width="12.0042%" height="15" fill="rgb(228,75,42)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="831.50">std::sys_common::b..</text></g><g><title>core::ops::function::FnOnce::call_once (1,017 samples, 12.00%)</title><rect x="27.4315%" y="805" width="12.0042%" height="15" fill="rgb(237,134,48)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="815.50">core::ops::functio..</text></g><g><title>block_stm_revm::main (1,017 samples, 12.00%)</title><rect x="27.4315%" y="789" width="12.0042%" height="15" fill="rgb(205,80,50)" fg:x="2324" fg:w="1017"/><text x="27.6815%" y="799.50">block_stm_revm::ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::result::ResultAndState&gt;&gt; (156 samples, 1.84%)</title><rect x="37.5944%" y="773" width="1.8414%" height="15" fill="rgb(217,74,48)" fg:x="3185" fg:w="156"/><text x="37.8444%" y="783.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::result::ResultAndState&gt;&gt; (4 samples, 0.05%)</title><rect x="39.3886%" y="757" width="0.0472%" height="15" fill="rgb(205,82,50)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="39.3886%" y="741" width="0.0472%" height="15" fill="rgb(228,1,33)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.05%)</title><rect x="39.3886%" y="725" width="0.0472%" height="15" fill="rgb(214,50,23)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.05%)</title><rect x="39.3886%" y="709" width="0.0472%" height="15" fill="rgb(210,62,9)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="719.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="39.3886%" y="693" width="0.0472%" height="15" fill="rgb(210,104,37)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="703.50"></text></g><g><title>__GI_munmap (4 samples, 0.05%)</title><rect x="39.3886%" y="677" width="0.0472%" height="15" fill="rgb(232,104,43)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="39.3886%" y="661" width="0.0472%" height="15" fill="rgb(244,52,6)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="671.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="39.3886%" y="645" width="0.0472%" height="15" fill="rgb(211,174,52)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="655.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.05%)</title><rect x="39.3886%" y="629" width="0.0472%" height="15" fill="rgb(229,48,4)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="639.50"></text></g><g><title>__vm_munmap (4 samples, 0.05%)</title><rect x="39.3886%" y="613" width="0.0472%" height="15" fill="rgb(205,155,16)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="623.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.05%)</title><rect x="39.3886%" y="597" width="0.0472%" height="15" fill="rgb(211,141,53)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="607.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.05%)</title><rect x="39.3886%" y="581" width="0.0472%" height="15" fill="rgb(240,148,11)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="591.50"></text></g><g><title>unmap_region (4 samples, 0.05%)</title><rect x="39.3886%" y="565" width="0.0472%" height="15" fill="rgb(214,45,23)" fg:x="3337" fg:w="4"/><text x="39.6386%" y="575.50"></text></g><g><title>unmap_vmas (2 samples, 0.02%)</title><rect x="39.4122%" y="549" width="0.0236%" height="15" fill="rgb(248,74,26)" fg:x="3339" fg:w="2"/><text x="39.6622%" y="559.50"></text></g><g><title>unmap_single_vma (2 samples, 0.02%)</title><rect x="39.4122%" y="533" width="0.0236%" height="15" fill="rgb(218,121,16)" fg:x="3339" fg:w="2"/><text x="39.6622%" y="543.50"></text></g><g><title>unmap_page_range (2 samples, 0.02%)</title><rect x="39.4122%" y="517" width="0.0236%" height="15" fill="rgb(218,10,47)" fg:x="3339" fg:w="2"/><text x="39.6622%" y="527.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.02%)</title><rect x="39.4122%" y="501" width="0.0236%" height="15" fill="rgb(227,99,14)" fg:x="3339" fg:w="2"/><text x="39.6622%" y="511.50"></text></g><g><title>zap_pte_range (2 samples, 0.02%)</title><rect x="39.4122%" y="485" width="0.0236%" height="15" fill="rgb(229,83,46)" fg:x="3339" fg:w="2"/><text x="39.6622%" y="495.50"></text></g><g><title>vm_normal_page (1 samples, 0.01%)</title><rect x="39.4240%" y="469" width="0.0118%" height="15" fill="rgb(228,25,1)" fg:x="3340" fg:w="1"/><text x="39.6740%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="39.4358%" y="1029" width="0.0118%" height="15" fill="rgb(252,190,15)" fg:x="3341" fg:w="1"/><text x="39.6858%" y="1039.50"></text></g><g><title>anon.d8017c6b9381c39ca152b1bdae9a0f36.1.llvm.14938807915284456228 (2 samples, 0.02%)</title><rect x="39.4358%" y="1045" width="0.0236%" height="15" fill="rgb(213,103,51)" fg:x="3341" fg:w="2"/><text x="39.6858%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)]&gt; (1 samples, 0.01%)</title><rect x="39.4476%" y="1029" width="0.0118%" height="15" fill="rgb(220,38,44)" fg:x="3342" fg:w="1"/><text x="39.6976%" y="1039.50"></text></g><g><title>asm_exc_page_fault (76 samples, 0.90%)</title><rect x="39.4594%" y="1045" width="0.8971%" height="15" fill="rgb(210,45,26)" fg:x="3343" fg:w="76"/><text x="39.7094%" y="1055.50"></text></g><g><title>exc_page_fault (3 samples, 0.04%)</title><rect x="40.3211%" y="1029" width="0.0354%" height="15" fill="rgb(205,95,48)" fg:x="3416" fg:w="3"/><text x="40.5711%" y="1039.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="40.3211%" y="1013" width="0.0354%" height="15" fill="rgb(225,179,37)" fg:x="3416" fg:w="3"/><text x="40.5711%" y="1023.50"></text></g><g><title>lock_vma_under_rcu (3 samples, 0.04%)</title><rect x="40.3211%" y="997" width="0.0354%" height="15" fill="rgb(230,209,3)" fg:x="3416" fg:w="3"/><text x="40.5711%" y="1007.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="40.3329%" y="981" width="0.0236%" height="15" fill="rgb(248,12,46)" fg:x="3417" fg:w="2"/><text x="40.5829%" y="991.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::try_incarnate (1 samples, 0.01%)</title><rect x="40.3565%" y="1045" width="0.0118%" height="15" fill="rgb(234,18,0)" fg:x="3419" fg:w="1"/><text x="40.6065%" y="1055.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="40.3683%" y="1029" width="0.0118%" height="15" fill="rgb(238,197,14)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="1039.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="40.3683%" y="1013" width="0.0118%" height="15" fill="rgb(251,162,48)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="1023.50"></text></g><g><title>__x64_sys_clone3 (1 samples, 0.01%)</title><rect x="40.3683%" y="997" width="0.0118%" height="15" fill="rgb(237,73,42)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="1007.50"></text></g><g><title>__do_sys_clone3 (1 samples, 0.01%)</title><rect x="40.3683%" y="981" width="0.0118%" height="15" fill="rgb(211,108,8)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="991.50"></text></g><g><title>kernel_clone (1 samples, 0.01%)</title><rect x="40.3683%" y="965" width="0.0118%" height="15" fill="rgb(213,45,22)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="975.50"></text></g><g><title>copy_process (1 samples, 0.01%)</title><rect x="40.3683%" y="949" width="0.0118%" height="15" fill="rgb(252,154,5)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="959.50"></text></g><g><title>perf_event_init_task (1 samples, 0.01%)</title><rect x="40.3683%" y="933" width="0.0118%" height="15" fill="rgb(221,79,52)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="943.50"></text></g><g><title>perf_event_init_context (1 samples, 0.01%)</title><rect x="40.3683%" y="917" width="0.0118%" height="15" fill="rgb(229,220,36)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="927.50"></text></g><g><title>inherit_task_group.isra.0 (1 samples, 0.01%)</title><rect x="40.3683%" y="901" width="0.0118%" height="15" fill="rgb(211,17,16)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="911.50"></text></g><g><title>inherit_event.isra.0 (1 samples, 0.01%)</title><rect x="40.3683%" y="885" width="0.0118%" height="15" fill="rgb(222,55,31)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="895.50"></text></g><g><title>find_get_pmu_context (1 samples, 0.01%)</title><rect x="40.3683%" y="869" width="0.0118%" height="15" fill="rgb(221,221,31)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="879.50"></text></g><g><title>kmalloc_trace (1 samples, 0.01%)</title><rect x="40.3683%" y="853" width="0.0118%" height="15" fill="rgb(227,168,26)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="863.50"></text></g><g><title>__kmem_cache_alloc_node (1 samples, 0.01%)</title><rect x="40.3683%" y="837" width="0.0118%" height="15" fill="rgb(224,139,9)" fg:x="3420" fg:w="1"/><text x="40.6183%" y="847.50"></text></g><g><title>__GI__setjmp (1 samples, 0.01%)</title><rect x="40.3801%" y="1013" width="0.0118%" height="15" fill="rgb(254,172,0)" fg:x="3421" fg:w="1"/><text x="40.6301%" y="1023.50"></text></g><g><title>asm_sysvec_call_function (1 samples, 0.01%)</title><rect x="40.3919%" y="837" width="0.0118%" height="15" fill="rgb(235,203,1)" fg:x="3422" fg:w="1"/><text x="40.6419%" y="847.50"></text></g><g><title>advise_stack_range (5 samples, 0.06%)</title><rect x="40.3919%" y="1013" width="0.0590%" height="15" fill="rgb(216,205,24)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="1023.50"></text></g><g><title>__GI_madvise (5 samples, 0.06%)</title><rect x="40.3919%" y="997" width="0.0590%" height="15" fill="rgb(233,24,6)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="1007.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="40.3919%" y="981" width="0.0590%" height="15" fill="rgb(244,110,9)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="991.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="40.3919%" y="965" width="0.0590%" height="15" fill="rgb(239,222,42)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="975.50"></text></g><g><title>__x64_sys_madvise (5 samples, 0.06%)</title><rect x="40.3919%" y="949" width="0.0590%" height="15" fill="rgb(218,145,13)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="959.50"></text></g><g><title>do_madvise (5 samples, 0.06%)</title><rect x="40.3919%" y="933" width="0.0590%" height="15" fill="rgb(207,69,11)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="943.50"></text></g><g><title>down_read (5 samples, 0.06%)</title><rect x="40.3919%" y="917" width="0.0590%" height="15" fill="rgb(220,223,22)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="927.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.06%)</title><rect x="40.3919%" y="901" width="0.0590%" height="15" fill="rgb(245,102,5)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="911.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.06%)</title><rect x="40.3919%" y="885" width="0.0590%" height="15" fill="rgb(211,148,2)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="895.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="40.3919%" y="869" width="0.0590%" height="15" fill="rgb(241,13,44)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="879.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="40.3919%" y="853" width="0.0590%" height="15" fill="rgb(219,137,21)" fg:x="3422" fg:w="5"/><text x="40.6419%" y="863.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="40.4037%" y="837" width="0.0472%" height="15" fill="rgb(242,206,5)" fg:x="3423" fg:w="4"/><text x="40.6537%" y="847.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="40.4037%" y="821" width="0.0472%" height="15" fill="rgb(217,114,22)" fg:x="3423" fg:w="4"/><text x="40.6537%" y="831.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="40.4037%" y="805" width="0.0472%" height="15" fill="rgb(253,206,42)" fg:x="3423" fg:w="4"/><text x="40.6537%" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="40.4509%" y="1013" width="0.0118%" height="15" fill="rgb(236,102,18)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="1023.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="40.4509%" y="997" width="0.0118%" height="15" fill="rgb(208,59,49)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="1007.50"></text></g><g><title>__x64_sys_exit (1 samples, 0.01%)</title><rect x="40.4509%" y="981" width="0.0118%" height="15" fill="rgb(215,194,28)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="991.50"></text></g><g><title>do_exit (1 samples, 0.01%)</title><rect x="40.4509%" y="965" width="0.0118%" height="15" fill="rgb(243,207,11)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="975.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="40.4509%" y="949" width="0.0118%" height="15" fill="rgb(254,179,35)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="959.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="40.4509%" y="933" width="0.0118%" height="15" fill="rgb(235,97,3)" fg:x="3427" fg:w="1"/><text x="40.7009%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.13%)</title><rect x="40.5335%" y="789" width="0.1298%" height="15" fill="rgb(215,155,33)" fg:x="3434" fg:w="11"/><text x="40.7835%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="40.6634%" y="789" width="0.0118%" height="15" fill="rgb(223,128,12)" fg:x="3445" fg:w="1"/><text x="40.9134%" y="799.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="41.0057%" y="613" width="0.0118%" height="15" fill="rgb(208,157,18)" fg:x="3474" fg:w="1"/><text x="41.2557%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.0057%" y="741" width="0.0590%" height="15" fill="rgb(249,70,54)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.0057%" y="725" width="0.0590%" height="15" fill="rgb(244,118,24)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="41.0057%" y="709" width="0.0590%" height="15" fill="rgb(211,54,0)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="41.0057%" y="693" width="0.0590%" height="15" fill="rgb(245,137,45)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="41.0057%" y="677" width="0.0590%" height="15" fill="rgb(232,154,31)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="41.0057%" y="661" width="0.0590%" height="15" fill="rgb(253,6,39)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.0057%" y="645" width="0.0590%" height="15" fill="rgb(234,183,24)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.0057%" y="629" width="0.0590%" height="15" fill="rgb(252,84,40)" fg:x="3474" fg:w="5"/><text x="41.2557%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="41.0175%" y="613" width="0.0472%" height="15" fill="rgb(224,65,2)" fg:x="3475" fg:w="4"/><text x="41.2675%" y="623.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="41.0175%" y="597" width="0.0472%" height="15" fill="rgb(229,38,24)" fg:x="3475" fg:w="4"/><text x="41.2675%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.17%)</title><rect x="41.0057%" y="757" width="0.1653%" height="15" fill="rgb(218,131,50)" fg:x="3474" fg:w="14"/><text x="41.2557%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.11%)</title><rect x="41.0647%" y="741" width="0.1062%" height="15" fill="rgb(233,106,18)" fg:x="3479" fg:w="9"/><text x="41.3147%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.11%)</title><rect x="41.0647%" y="725" width="0.1062%" height="15" fill="rgb(220,216,11)" fg:x="3479" fg:w="9"/><text x="41.3147%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.01%)</title><rect x="41.1709%" y="741" width="0.0118%" height="15" fill="rgb(251,100,45)" fg:x="3488" fg:w="1"/><text x="41.4209%" y="751.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.01%)</title><rect x="41.1709%" y="725" width="0.0118%" height="15" fill="rgb(235,143,32)" fg:x="3488" fg:w="1"/><text x="41.4209%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.01%)</title><rect x="41.1709%" y="709" width="0.0118%" height="15" fill="rgb(248,124,34)" fg:x="3488" fg:w="1"/><text x="41.4209%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.06%)</title><rect x="41.1827%" y="693" width="0.0590%" height="15" fill="rgb(225,221,4)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.06%)</title><rect x="41.1827%" y="677" width="0.0590%" height="15" fill="rgb(242,27,43)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.1827%" y="661" width="0.0590%" height="15" fill="rgb(227,54,8)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="671.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.1827%" y="645" width="0.0590%" height="15" fill="rgb(253,139,49)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="655.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="41.1827%" y="629" width="0.0590%" height="15" fill="rgb(231,26,43)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="41.1827%" y="613" width="0.0590%" height="15" fill="rgb(207,121,39)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="41.1827%" y="597" width="0.0590%" height="15" fill="rgb(223,101,35)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="41.1827%" y="581" width="0.0590%" height="15" fill="rgb(232,87,23)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="591.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.1827%" y="565" width="0.0590%" height="15" fill="rgb(225,180,29)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="575.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.1827%" y="549" width="0.0590%" height="15" fill="rgb(225,25,17)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.1827%" y="533" width="0.0590%" height="15" fill="rgb(223,8,52)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="41.1827%" y="517" width="0.0590%" height="15" fill="rgb(246,42,21)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="527.50"></text></g><g><title>perf_pmu_nop_void (5 samples, 0.06%)</title><rect x="41.1827%" y="501" width="0.0590%" height="15" fill="rgb(205,64,43)" fg:x="3489" fg:w="5"/><text x="41.4327%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (25 samples, 0.30%)</title><rect x="41.2417%" y="693" width="0.2951%" height="15" fill="rgb(221,160,13)" fg:x="3494" fg:w="25"/><text x="41.4917%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.30%)</title><rect x="41.2417%" y="677" width="0.2951%" height="15" fill="rgb(239,58,35)" fg:x="3494" fg:w="25"/><text x="41.4917%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (74 samples, 0.87%)</title><rect x="41.1709%" y="757" width="0.8735%" height="15" fill="rgb(251,26,40)" fg:x="3488" fg:w="74"/><text x="41.4209%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (73 samples, 0.86%)</title><rect x="41.1827%" y="741" width="0.8617%" height="15" fill="rgb(247,0,4)" fg:x="3489" fg:w="73"/><text x="41.4327%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (73 samples, 0.86%)</title><rect x="41.1827%" y="725" width="0.8617%" height="15" fill="rgb(218,130,10)" fg:x="3489" fg:w="73"/><text x="41.4327%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (73 samples, 0.86%)</title><rect x="41.1827%" y="709" width="0.8617%" height="15" fill="rgb(239,32,7)" fg:x="3489" fg:w="73"/><text x="41.4327%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (43 samples, 0.51%)</title><rect x="41.5368%" y="693" width="0.5076%" height="15" fill="rgb(210,192,24)" fg:x="3519" fg:w="43"/><text x="41.7868%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (43 samples, 0.51%)</title><rect x="41.5368%" y="677" width="0.5076%" height="15" fill="rgb(226,212,17)" fg:x="3519" fg:w="43"/><text x="41.7868%" y="687.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="42.0444%" y="757" width="0.0236%" height="15" fill="rgb(219,201,28)" fg:x="3562" fg:w="2"/><text x="42.2944%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="42.0444%" y="741" width="0.0236%" height="15" fill="rgb(235,207,41)" fg:x="3562" fg:w="2"/><text x="42.2944%" y="751.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="42.0680%" y="661" width="0.0236%" height="15" fill="rgb(241,95,54)" fg:x="3564" fg:w="2"/><text x="42.3180%" y="671.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="42.0798%" y="645" width="0.0118%" height="15" fill="rgb(248,12,23)" fg:x="3565" fg:w="1"/><text x="42.3298%" y="655.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="42.0798%" y="629" width="0.0118%" height="15" fill="rgb(228,173,4)" fg:x="3565" fg:w="1"/><text x="42.3298%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="42.0916%" y="661" width="0.0118%" height="15" fill="rgb(254,99,5)" fg:x="3566" fg:w="1"/><text x="42.3416%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="42.0916%" y="645" width="0.0118%" height="15" fill="rgb(212,184,17)" fg:x="3566" fg:w="1"/><text x="42.3416%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="42.0680%" y="725" width="0.0472%" height="15" fill="rgb(252,174,1)" fg:x="3564" fg:w="4"/><text x="42.3180%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="42.0680%" y="709" width="0.0472%" height="15" fill="rgb(241,118,51)" fg:x="3564" fg:w="4"/><text x="42.3180%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="42.0680%" y="693" width="0.0472%" height="15" fill="rgb(227,94,47)" fg:x="3564" fg:w="4"/><text x="42.3180%" y="703.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="42.0680%" y="677" width="0.0472%" height="15" fill="rgb(229,104,2)" fg:x="3564" fg:w="4"/><text x="42.3180%" y="687.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="42.1034%" y="661" width="0.0118%" height="15" fill="rgb(219,28,31)" fg:x="3567" fg:w="1"/><text x="42.3534%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="42.0680%" y="757" width="0.1062%" height="15" fill="rgb(233,109,36)" fg:x="3564" fg:w="9"/><text x="42.3180%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="42.0680%" y="741" width="0.1062%" height="15" fill="rgb(246,88,11)" fg:x="3564" fg:w="9"/><text x="42.3180%" y="751.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="42.1152%" y="725" width="0.0590%" height="15" fill="rgb(209,212,17)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="735.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="42.1152%" y="709" width="0.0590%" height="15" fill="rgb(243,59,29)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="719.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="42.1152%" y="693" width="0.0590%" height="15" fill="rgb(244,205,48)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="703.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="42.1152%" y="677" width="0.0590%" height="15" fill="rgb(227,30,6)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="42.1152%" y="661" width="0.0590%" height="15" fill="rgb(220,205,48)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="671.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="42.1152%" y="645" width="0.0590%" height="15" fill="rgb(250,94,14)" fg:x="3568" fg:w="5"/><text x="42.3652%" y="655.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="42.1270%" y="629" width="0.0472%" height="15" fill="rgb(216,119,42)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="639.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="42.1270%" y="613" width="0.0472%" height="15" fill="rgb(232,155,0)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="623.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="42.1270%" y="597" width="0.0472%" height="15" fill="rgb(212,24,32)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="607.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="42.1270%" y="581" width="0.0472%" height="15" fill="rgb(216,69,20)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="591.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="42.1270%" y="565" width="0.0472%" height="15" fill="rgb(229,73,31)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="575.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="42.1270%" y="549" width="0.0472%" height="15" fill="rgb(224,219,20)" fg:x="3569" fg:w="4"/><text x="42.3770%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.01%)</title><rect x="42.1742%" y="757" width="0.0118%" height="15" fill="rgb(215,146,41)" fg:x="3573" fg:w="1"/><text x="42.4242%" y="767.50"></text></g><g><title>__GI___libc_free (6 samples, 0.07%)</title><rect x="42.1860%" y="693" width="0.0708%" height="15" fill="rgb(244,71,31)" fg:x="3574" fg:w="6"/><text x="42.4360%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="42.2332%" y="677" width="0.0236%" height="15" fill="rgb(224,24,11)" fg:x="3578" fg:w="2"/><text x="42.4832%" y="687.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="42.2450%" y="661" width="0.0118%" height="15" fill="rgb(229,76,15)" fg:x="3579" fg:w="1"/><text x="42.4950%" y="671.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="42.2568%" y="693" width="0.0118%" height="15" fill="rgb(209,93,2)" fg:x="3580" fg:w="1"/><text x="42.5068%" y="703.50"></text></g><g><title>core::mem::drop (7 samples, 0.08%)</title><rect x="42.2686%" y="677" width="0.0826%" height="15" fill="rgb(216,200,50)" fg:x="3581" fg:w="7"/><text x="42.5186%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (7 samples, 0.08%)</title><rect x="42.2686%" y="661" width="0.0826%" height="15" fill="rgb(211,67,34)" fg:x="3581" fg:w="7"/><text x="42.5186%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="42.2686%" y="645" width="0.0826%" height="15" fill="rgb(225,87,47)" fg:x="3581" fg:w="7"/><text x="42.5186%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="42.2805%" y="629" width="0.0708%" height="15" fill="rgb(217,185,16)" fg:x="3582" fg:w="6"/><text x="42.5305%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="42.2805%" y="613" width="0.0708%" height="15" fill="rgb(205,0,0)" fg:x="3582" fg:w="6"/><text x="42.5305%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.12%)</title><rect x="42.2686%" y="693" width="0.1180%" height="15" fill="rgb(207,116,45)" fg:x="3581" fg:w="10"/><text x="42.5186%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="42.3513%" y="677" width="0.0354%" height="15" fill="rgb(221,156,26)" fg:x="3588" fg:w="3"/><text x="42.6013%" y="687.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="42.3513%" y="661" width="0.0354%" height="15" fill="rgb(213,140,4)" fg:x="3588" fg:w="3"/><text x="42.6013%" y="671.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (3 samples, 0.04%)</title><rect x="42.3513%" y="645" width="0.0354%" height="15" fill="rgb(231,224,15)" fg:x="3588" fg:w="3"/><text x="42.6013%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="42.3513%" y="629" width="0.0354%" height="15" fill="rgb(244,76,20)" fg:x="3588" fg:w="3"/><text x="42.6013%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="42.3513%" y="613" width="0.0354%" height="15" fill="rgb(238,117,7)" fg:x="3588" fg:w="3"/><text x="42.6013%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (25 samples, 0.30%)</title><rect x="42.1860%" y="757" width="0.2951%" height="15" fill="rgb(235,1,10)" fg:x="3574" fg:w="25"/><text x="42.4360%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (25 samples, 0.30%)</title><rect x="42.1860%" y="741" width="0.2951%" height="15" fill="rgb(216,165,6)" fg:x="3574" fg:w="25"/><text x="42.4360%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (25 samples, 0.30%)</title><rect x="42.1860%" y="725" width="0.2951%" height="15" fill="rgb(246,91,35)" fg:x="3574" fg:w="25"/><text x="42.4360%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.30%)</title><rect x="42.1860%" y="709" width="0.2951%" height="15" fill="rgb(228,96,24)" fg:x="3574" fg:w="25"/><text x="42.4360%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.09%)</title><rect x="42.3867%" y="693" width="0.0944%" height="15" fill="rgb(254,217,53)" fg:x="3591" fg:w="8"/><text x="42.6367%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.09%)</title><rect x="42.3867%" y="677" width="0.0944%" height="15" fill="rgb(209,60,0)" fg:x="3591" fg:w="8"/><text x="42.6367%" y="687.50"></text></g><g><title>rseq_update_cpu_node_id (1 samples, 0.01%)</title><rect x="42.6346%" y="565" width="0.0118%" height="15" fill="rgb(250,93,26)" fg:x="3612" fg:w="1"/><text x="42.8846%" y="575.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="42.6464%" y="501" width="0.0472%" height="15" fill="rgb(211,9,40)" fg:x="3613" fg:w="4"/><text x="42.8964%" y="511.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 1.82%)</title><rect x="40.9230%" y="773" width="1.8178%" height="15" fill="rgb(242,57,20)" fg:x="3467" fg:w="154"/><text x="41.1730%" y="783.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (22 samples, 0.26%)</title><rect x="42.4811%" y="757" width="0.2597%" height="15" fill="rgb(248,85,48)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (22 samples, 0.26%)</title><rect x="42.4811%" y="741" width="0.2597%" height="15" fill="rgb(212,117,2)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (22 samples, 0.26%)</title><rect x="42.4811%" y="725" width="0.2597%" height="15" fill="rgb(243,19,3)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (22 samples, 0.26%)</title><rect x="42.4811%" y="709" width="0.2597%" height="15" fill="rgb(232,217,24)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (22 samples, 0.26%)</title><rect x="42.4811%" y="693" width="0.2597%" height="15" fill="rgb(224,175,40)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (22 samples, 0.26%)</title><rect x="42.4811%" y="677" width="0.2597%" height="15" fill="rgb(212,162,32)" fg:x="3599" fg:w="22"/><text x="42.7311%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="42.6228%" y="661" width="0.1180%" height="15" fill="rgb(215,9,4)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="671.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="42.6228%" y="645" width="0.1180%" height="15" fill="rgb(242,42,7)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="655.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="42.6228%" y="629" width="0.1180%" height="15" fill="rgb(242,184,45)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="42.6228%" y="613" width="0.1180%" height="15" fill="rgb(228,111,51)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="42.6228%" y="597" width="0.1180%" height="15" fill="rgb(236,147,17)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="42.6228%" y="581" width="0.1180%" height="15" fill="rgb(210,75,22)" fg:x="3611" fg:w="10"/><text x="42.8728%" y="591.50"></text></g><g><title>schedule (8 samples, 0.09%)</title><rect x="42.6464%" y="565" width="0.0944%" height="15" fill="rgb(217,159,45)" fg:x="3613" fg:w="8"/><text x="42.8964%" y="575.50"></text></g><g><title>__schedule (8 samples, 0.09%)</title><rect x="42.6464%" y="549" width="0.0944%" height="15" fill="rgb(245,165,53)" fg:x="3613" fg:w="8"/><text x="42.8964%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (8 samples, 0.09%)</title><rect x="42.6464%" y="533" width="0.0944%" height="15" fill="rgb(251,190,50)" fg:x="3613" fg:w="8"/><text x="42.8964%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (8 samples, 0.09%)</title><rect x="42.6464%" y="517" width="0.0944%" height="15" fill="rgb(208,203,29)" fg:x="3613" fg:w="8"/><text x="42.8964%" y="527.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="42.6936%" y="501" width="0.0472%" height="15" fill="rgb(207,209,35)" fg:x="3617" fg:w="4"/><text x="42.9436%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="42.7644%" y="677" width="0.0118%" height="15" fill="rgb(230,144,49)" fg:x="3623" fg:w="1"/><text x="43.0144%" y="687.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="42.7408%" y="693" width="0.0472%" height="15" fill="rgb(229,31,6)" fg:x="3621" fg:w="4"/><text x="42.9908%" y="703.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="42.7762%" y="677" width="0.0118%" height="15" fill="rgb(251,129,24)" fg:x="3624" fg:w="1"/><text x="43.0262%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="42.7762%" y="661" width="0.0118%" height="15" fill="rgb(235,105,15)" fg:x="3624" fg:w="1"/><text x="43.0262%" y="671.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="42.7762%" y="645" width="0.0118%" height="15" fill="rgb(216,52,43)" fg:x="3624" fg:w="1"/><text x="43.0262%" y="655.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="42.7880%" y="693" width="0.0118%" height="15" fill="rgb(238,144,41)" fg:x="3625" fg:w="1"/><text x="43.0380%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="42.7880%" y="677" width="0.0118%" height="15" fill="rgb(243,63,9)" fg:x="3625" fg:w="1"/><text x="43.0380%" y="687.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="42.7998%" y="693" width="0.0236%" height="15" fill="rgb(246,208,1)" fg:x="3626" fg:w="2"/><text x="43.0498%" y="703.50"></text></g><g><title>core::mem::drop (8 samples, 0.09%)</title><rect x="42.8234%" y="677" width="0.0944%" height="15" fill="rgb(233,182,18)" fg:x="3628" fg:w="8"/><text x="43.0734%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (8 samples, 0.09%)</title><rect x="42.8234%" y="661" width="0.0944%" height="15" fill="rgb(242,224,8)" fg:x="3628" fg:w="8"/><text x="43.0734%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.09%)</title><rect x="42.8234%" y="645" width="0.0944%" height="15" fill="rgb(243,54,37)" fg:x="3628" fg:w="8"/><text x="43.0734%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.09%)</title><rect x="42.8234%" y="629" width="0.0944%" height="15" fill="rgb(233,192,12)" fg:x="3628" fg:w="8"/><text x="43.0734%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.09%)</title><rect x="42.8234%" y="613" width="0.0944%" height="15" fill="rgb(251,192,53)" fg:x="3628" fg:w="8"/><text x="43.0734%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.13%)</title><rect x="42.8234%" y="693" width="0.1298%" height="15" fill="rgb(246,141,26)" fg:x="3628" fg:w="11"/><text x="43.0734%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="42.9178%" y="677" width="0.0354%" height="15" fill="rgb(239,195,19)" fg:x="3636" fg:w="3"/><text x="43.1678%" y="687.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="42.9178%" y="661" width="0.0354%" height="15" fill="rgb(241,16,39)" fg:x="3636" fg:w="3"/><text x="43.1678%" y="671.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (3 samples, 0.04%)</title><rect x="42.9178%" y="645" width="0.0354%" height="15" fill="rgb(223,13,53)" fg:x="3636" fg:w="3"/><text x="43.1678%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="42.9178%" y="629" width="0.0354%" height="15" fill="rgb(214,227,0)" fg:x="3636" fg:w="3"/><text x="43.1678%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="42.9178%" y="613" width="0.0354%" height="15" fill="rgb(228,103,26)" fg:x="3636" fg:w="3"/><text x="43.1678%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::iter::Iter&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (20 samples, 0.24%)</title><rect x="42.7408%" y="773" width="0.2361%" height="15" fill="rgb(254,177,53)" fg:x="3621" fg:w="20"/><text x="42.9908%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (20 samples, 0.24%)</title><rect x="42.7408%" y="757" width="0.2361%" height="15" fill="rgb(208,201,34)" fg:x="3621" fg:w="20"/><text x="42.9908%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (20 samples, 0.24%)</title><rect x="42.7408%" y="741" width="0.2361%" height="15" fill="rgb(212,39,5)" fg:x="3621" fg:w="20"/><text x="42.9908%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (20 samples, 0.24%)</title><rect x="42.7408%" y="725" width="0.2361%" height="15" fill="rgb(246,117,3)" fg:x="3621" fg:w="20"/><text x="42.9908%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.24%)</title><rect x="42.7408%" y="709" width="0.2361%" height="15" fill="rgb(244,118,39)" fg:x="3621" fg:w="20"/><text x="42.9908%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="42.9533%" y="693" width="0.0236%" height="15" fill="rgb(241,64,10)" fg:x="3639" fg:w="2"/><text x="43.2033%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="42.9533%" y="677" width="0.0236%" height="15" fill="rgb(229,39,44)" fg:x="3639" fg:w="2"/><text x="43.2033%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::multiple::RefMulti&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (2 samples, 0.02%)</title><rect x="42.9769%" y="773" width="0.0236%" height="15" fill="rgb(230,226,3)" fg:x="3641" fg:w="2"/><text x="43.2269%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="42.9769%" y="757" width="0.0236%" height="15" fill="rgb(222,13,42)" fg:x="3641" fg:w="2"/><text x="43.2269%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="42.9769%" y="741" width="0.0236%" height="15" fill="rgb(247,180,54)" fg:x="3641" fg:w="2"/><text x="43.2269%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="42.9769%" y="725" width="0.0236%" height="15" fill="rgb(205,96,16)" fg:x="3641" fg:w="2"/><text x="43.2269%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="42.9769%" y="709" width="0.0236%" height="15" fill="rgb(205,100,21)" fg:x="3641" fg:w="2"/><text x="43.2269%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="43.0005%" y="773" width="0.1653%" height="15" fill="rgb(248,51,4)" fg:x="3643" fg:w="14"/><text x="43.2505%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="43.0005%" y="757" width="0.1653%" height="15" fill="rgb(217,197,30)" fg:x="3643" fg:w="14"/><text x="43.2505%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.17%)</title><rect x="43.0005%" y="741" width="0.1653%" height="15" fill="rgb(240,179,40)" fg:x="3643" fg:w="14"/><text x="43.2505%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (14 samples, 0.17%)</title><rect x="43.0005%" y="725" width="0.1653%" height="15" fill="rgb(212,185,35)" fg:x="3643" fg:w="14"/><text x="43.2505%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.15%)</title><rect x="43.0123%" y="709" width="0.1534%" height="15" fill="rgb(251,222,31)" fg:x="3644" fg:w="13"/><text x="43.2623%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.15%)</title><rect x="43.0123%" y="693" width="0.1534%" height="15" fill="rgb(208,140,36)" fg:x="3644" fg:w="13"/><text x="43.2623%" y="703.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="43.2011%" y="533" width="0.0118%" height="15" fill="rgb(220,148,1)" fg:x="3660" fg:w="1"/><text x="43.4511%" y="543.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="43.2011%" y="693" width="0.0590%" height="15" fill="rgb(254,4,28)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="43.2011%" y="677" width="0.0590%" height="15" fill="rgb(222,185,44)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="43.2011%" y="661" width="0.0590%" height="15" fill="rgb(215,74,39)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="43.2011%" y="645" width="0.0590%" height="15" fill="rgb(247,86,4)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="43.2011%" y="629" width="0.0590%" height="15" fill="rgb(231,105,32)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="43.2011%" y="613" width="0.0590%" height="15" fill="rgb(222,65,35)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="623.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="43.2011%" y="597" width="0.0590%" height="15" fill="rgb(218,145,35)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="43.2011%" y="581" width="0.0590%" height="15" fill="rgb(208,7,15)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="43.2011%" y="565" width="0.0590%" height="15" fill="rgb(209,83,13)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="43.2011%" y="549" width="0.0590%" height="15" fill="rgb(218,3,10)" fg:x="3660" fg:w="5"/><text x="43.4511%" y="559.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="43.2129%" y="533" width="0.0472%" height="15" fill="rgb(211,219,4)" fg:x="3661" fg:w="4"/><text x="43.4629%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.20%)</title><rect x="43.2602%" y="677" width="0.2007%" height="15" fill="rgb(228,194,12)" fg:x="3665" fg:w="17"/><text x="43.5102%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.20%)</title><rect x="43.2602%" y="661" width="0.2007%" height="15" fill="rgb(210,175,7)" fg:x="3665" fg:w="17"/><text x="43.5102%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.07%)</title><rect x="43.4608%" y="677" width="0.0708%" height="15" fill="rgb(243,132,6)" fg:x="3682" fg:w="6"/><text x="43.7108%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.07%)</title><rect x="43.4608%" y="661" width="0.0708%" height="15" fill="rgb(207,72,18)" fg:x="3682" fg:w="6"/><text x="43.7108%" y="671.50"></text></g><g><title>_nv040310rm (1 samples, 0.01%)</title><rect x="43.5316%" y="581" width="0.0118%" height="15" fill="rgb(236,1,18)" fg:x="3688" fg:w="1"/><text x="43.7816%" y="591.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="43.5434%" y="581" width="0.0590%" height="15" fill="rgb(227,0,18)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="43.5434%" y="565" width="0.0590%" height="15" fill="rgb(247,37,5)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="43.5434%" y="549" width="0.0590%" height="15" fill="rgb(237,179,24)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="43.5434%" y="533" width="0.0590%" height="15" fill="rgb(226,53,20)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="43.5434%" y="517" width="0.0590%" height="15" fill="rgb(247,75,7)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="43.5434%" y="501" width="0.0590%" height="15" fill="rgb(233,96,12)" fg:x="3689" fg:w="5"/><text x="43.7934%" y="511.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="43.5552%" y="485" width="0.0472%" height="15" fill="rgb(224,125,0)" fg:x="3690" fg:w="4"/><text x="43.8052%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="43.5552%" y="469" width="0.0472%" height="15" fill="rgb(224,92,25)" fg:x="3690" fg:w="4"/><text x="43.8052%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="43.5552%" y="453" width="0.0472%" height="15" fill="rgb(224,42,24)" fg:x="3690" fg:w="4"/><text x="43.8052%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="43.5552%" y="437" width="0.0472%" height="15" fill="rgb(234,132,49)" fg:x="3690" fg:w="4"/><text x="43.8052%" y="447.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="43.5552%" y="421" width="0.0472%" height="15" fill="rgb(248,100,35)" fg:x="3690" fg:w="4"/><text x="43.8052%" y="431.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="43.6025%" y="517" width="0.0118%" height="15" fill="rgb(239,94,40)" fg:x="3694" fg:w="1"/><text x="43.8525%" y="527.50"></text></g><g><title>asm_sysvec_irq_work (4 samples, 0.05%)</title><rect x="43.6379%" y="453" width="0.0472%" height="15" fill="rgb(235,139,28)" fg:x="3697" fg:w="4"/><text x="43.8879%" y="463.50"></text></g><g><title>perf_ctx_enable (45 samples, 0.53%)</title><rect x="43.8621%" y="421" width="0.5312%" height="15" fill="rgb(217,144,7)" fg:x="3716" fg:w="45"/><text x="44.1121%" y="431.50"></text></g><g><title>x86_pmu_enable (19 samples, 0.22%)</title><rect x="44.1690%" y="405" width="0.2243%" height="15" fill="rgb(227,55,4)" fg:x="3742" fg:w="19"/><text x="44.4190%" y="415.50"></text></g><g><title>perf_pmu_nop_void (22 samples, 0.26%)</title><rect x="44.3933%" y="421" width="0.2597%" height="15" fill="rgb(252,82,54)" fg:x="3761" fg:w="22"/><text x="44.6433%" y="431.50"></text></g><g><title>__perf_event_task_sched_in (86 samples, 1.02%)</title><rect x="43.7559%" y="437" width="1.0151%" height="15" fill="rgb(245,172,4)" fg:x="3707" fg:w="86"/><text x="44.0059%" y="447.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.12%)</title><rect x="44.6530%" y="421" width="0.1180%" height="15" fill="rgb(207,26,27)" fg:x="3783" fg:w="10"/><text x="44.9030%" y="431.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="44.7710%" y="437" width="0.0472%" height="15" fill="rgb(252,98,18)" fg:x="3793" fg:w="4"/><text x="45.0210%" y="447.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="44.8182%" y="437" width="0.0472%" height="15" fill="rgb(244,8,26)" fg:x="3797" fg:w="4"/><text x="45.0682%" y="447.50"></text></g><g><title>__x64_sys_futex (111 samples, 1.31%)</title><rect x="43.6025%" y="549" width="1.3102%" height="15" fill="rgb(237,173,45)" fg:x="3694" fg:w="111"/><text x="43.8525%" y="559.50"></text></g><g><title>do_futex (111 samples, 1.31%)</title><rect x="43.6025%" y="533" width="1.3102%" height="15" fill="rgb(208,213,49)" fg:x="3694" fg:w="111"/><text x="43.8525%" y="543.50"></text></g><g><title>futex_wait (110 samples, 1.30%)</title><rect x="43.6143%" y="517" width="1.2984%" height="15" fill="rgb(212,122,37)" fg:x="3695" fg:w="110"/><text x="43.8643%" y="527.50"></text></g><g><title>futex_wait_queue (110 samples, 1.30%)</title><rect x="43.6143%" y="501" width="1.2984%" height="15" fill="rgb(213,80,17)" fg:x="3695" fg:w="110"/><text x="43.8643%" y="511.50"></text></g><g><title>schedule (110 samples, 1.30%)</title><rect x="43.6143%" y="485" width="1.2984%" height="15" fill="rgb(206,210,43)" fg:x="3695" fg:w="110"/><text x="43.8643%" y="495.50"></text></g><g><title>__schedule (108 samples, 1.27%)</title><rect x="43.6379%" y="469" width="1.2748%" height="15" fill="rgb(229,214,3)" fg:x="3697" fg:w="108"/><text x="43.8879%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (104 samples, 1.23%)</title><rect x="43.6851%" y="453" width="1.2276%" height="15" fill="rgb(235,213,29)" fg:x="3701" fg:w="104"/><text x="43.9351%" y="463.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="44.8654%" y="437" width="0.0472%" height="15" fill="rgb(248,135,26)" fg:x="3801" fg:w="4"/><text x="45.1154%" y="447.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.01%)</title><rect x="44.9127%" y="517" width="0.0118%" height="15" fill="rgb(242,188,12)" fg:x="3805" fg:w="1"/><text x="45.1627%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::park (120 samples, 1.42%)</title><rect x="43.5316%" y="677" width="1.4164%" height="15" fill="rgb(245,38,12)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (120 samples, 1.42%)</title><rect x="43.5316%" y="661" width="1.4164%" height="15" fill="rgb(218,42,13)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (120 samples, 1.42%)</title><rect x="43.5316%" y="645" width="1.4164%" height="15" fill="rgb(238,132,49)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="655.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (120 samples, 1.42%)</title><rect x="43.5316%" y="629" width="1.4164%" height="15" fill="rgb(209,196,19)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="639.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (120 samples, 1.42%)</title><rect x="43.5316%" y="613" width="1.4164%" height="15" fill="rgb(244,131,22)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="623.50"></text></g><g><title>syscall (120 samples, 1.42%)</title><rect x="43.5316%" y="597" width="1.4164%" height="15" fill="rgb(223,18,34)" fg:x="3688" fg:w="120"/><text x="43.7816%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (114 samples, 1.35%)</title><rect x="43.6025%" y="581" width="1.3456%" height="15" fill="rgb(252,124,54)" fg:x="3694" fg:w="114"/><text x="43.8525%" y="591.50"></text></g><g><title>do_syscall_64 (114 samples, 1.35%)</title><rect x="43.6025%" y="565" width="1.3456%" height="15" fill="rgb(229,106,42)" fg:x="3694" fg:w="114"/><text x="43.8525%" y="575.50"></text></g><g><title>syscall_exit_to_user_mode (3 samples, 0.04%)</title><rect x="44.9127%" y="549" width="0.0354%" height="15" fill="rgb(221,129,1)" fg:x="3805" fg:w="3"/><text x="45.1627%" y="559.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.04%)</title><rect x="44.9127%" y="533" width="0.0354%" height="15" fill="rgb(229,74,15)" fg:x="3805" fg:w="3"/><text x="45.1627%" y="543.50"></text></g><g><title>switch_fpu_return (2 samples, 0.02%)</title><rect x="44.9245%" y="517" width="0.0236%" height="15" fill="rgb(210,206,50)" fg:x="3806" fg:w="2"/><text x="45.1745%" y="527.50"></text></g><g><title>restore_fpregs_from_fpstate (2 samples, 0.02%)</title><rect x="44.9245%" y="501" width="0.0236%" height="15" fill="rgb(251,114,31)" fg:x="3806" fg:w="2"/><text x="45.1745%" y="511.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.01%)</title><rect x="44.9481%" y="677" width="0.0118%" height="15" fill="rgb(215,225,28)" fg:x="3808" fg:w="1"/><text x="45.1981%" y="687.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.01%)</title><rect x="44.9481%" y="661" width="0.0118%" height="15" fill="rgb(237,109,14)" fg:x="3808" fg:w="1"/><text x="45.1981%" y="671.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.01%)</title><rect x="44.9481%" y="645" width="0.0118%" height="15" fill="rgb(230,13,37)" fg:x="3808" fg:w="1"/><text x="45.1981%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.01%)</title><rect x="44.9481%" y="629" width="0.0118%" height="15" fill="rgb(231,40,28)" fg:x="3808" fg:w="1"/><text x="45.1981%" y="639.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (149 samples, 1.76%)</title><rect x="43.2602%" y="693" width="1.7587%" height="15" fill="rgb(231,202,18)" fg:x="3665" fg:w="149"/><text x="43.5102%" y="703.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin_no_yield (5 samples, 0.06%)</title><rect x="44.9599%" y="677" width="0.0590%" height="15" fill="rgb(225,33,18)" fg:x="3809" fg:w="5"/><text x="45.2099%" y="687.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (5 samples, 0.06%)</title><rect x="44.9599%" y="661" width="0.0590%" height="15" fill="rgb(223,64,47)" fg:x="3809" fg:w="5"/><text x="45.2099%" y="671.50"></text></g><g><title>core::hint::spin_loop (5 samples, 0.06%)</title><rect x="44.9599%" y="645" width="0.0590%" height="15" fill="rgb(234,114,13)" fg:x="3809" fg:w="5"/><text x="45.2099%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (5 samples, 0.06%)</title><rect x="44.9599%" y="629" width="0.0590%" height="15" fill="rgb(248,56,40)" fg:x="3809" fg:w="5"/><text x="45.2099%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.01%)</title><rect x="45.0189%" y="677" width="0.0118%" height="15" fill="rgb(221,194,21)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.01%)</title><rect x="45.0189%" y="661" width="0.0118%" height="15" fill="rgb(242,108,46)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="671.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="45.0189%" y="645" width="0.0118%" height="15" fill="rgb(220,106,10)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="655.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="45.0189%" y="629" width="0.0118%" height="15" fill="rgb(211,88,4)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="639.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="45.0189%" y="613" width="0.0118%" height="15" fill="rgb(214,95,34)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="623.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="45.0189%" y="597" width="0.0118%" height="15" fill="rgb(250,160,33)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="607.50"></text></g><g><title>tick_program_event (1 samples, 0.01%)</title><rect x="45.0189%" y="581" width="0.0118%" height="15" fill="rgb(225,29,10)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="591.50"></text></g><g><title>clockevents_program_event (1 samples, 0.01%)</title><rect x="45.0189%" y="565" width="0.0118%" height="15" fill="rgb(224,28,30)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="575.50"></text></g><g><title>read_tsc (1 samples, 0.01%)</title><rect x="45.0189%" y="549" width="0.0118%" height="15" fill="rgb(231,77,4)" fg:x="3814" fg:w="1"/><text x="45.2689%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (58 samples, 0.68%)</title><rect x="45.0307%" y="677" width="0.6846%" height="15" fill="rgb(209,63,21)" fg:x="3815" fg:w="58"/><text x="45.2807%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (58 samples, 0.68%)</title><rect x="45.0307%" y="661" width="0.6846%" height="15" fill="rgb(226,22,11)" fg:x="3815" fg:w="58"/><text x="45.2807%" y="671.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (291 samples, 3.43%)</title><rect x="43.2011%" y="741" width="3.4348%" height="15" fill="rgb(216,82,30)" fg:x="3660" fg:w="291"/><text x="43.4511%" y="751.50">&lt;da..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (291 samples, 3.43%)</title><rect x="43.2011%" y="725" width="3.4348%" height="15" fill="rgb(246,227,38)" fg:x="3660" fg:w="291"/><text x="43.4511%" y="735.50">loc..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (291 samples, 3.43%)</title><rect x="43.2011%" y="709" width="3.4348%" height="15" fill="rgb(251,203,53)" fg:x="3660" fg:w="291"/><text x="43.4511%" y="719.50">&lt;da..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (137 samples, 1.62%)</title><rect x="45.0189%" y="693" width="1.6171%" height="15" fill="rgb(254,101,1)" fg:x="3814" fg:w="137"/><text x="45.2689%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (78 samples, 0.92%)</title><rect x="45.7153%" y="677" width="0.9207%" height="15" fill="rgb(241,180,5)" fg:x="3873" fg:w="78"/><text x="45.9653%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (78 samples, 0.92%)</title><rect x="45.7153%" y="661" width="0.9207%" height="15" fill="rgb(218,168,4)" fg:x="3873" fg:w="78"/><text x="45.9653%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (32 samples, 0.38%)</title><rect x="46.6360%" y="741" width="0.3777%" height="15" fill="rgb(224,223,32)" fg:x="3951" fg:w="32"/><text x="46.8860%" y="751.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.38%)</title><rect x="46.6360%" y="725" width="0.3777%" height="15" fill="rgb(236,106,22)" fg:x="3951" fg:w="32"/><text x="46.8860%" y="735.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (32 samples, 0.38%)</title><rect x="46.6360%" y="709" width="0.3777%" height="15" fill="rgb(206,121,5)" fg:x="3951" fg:w="32"/><text x="46.8860%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.38%)</title><rect x="46.6360%" y="693" width="0.3777%" height="15" fill="rgb(233,87,28)" fg:x="3951" fg:w="32"/><text x="46.8860%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.38%)</title><rect x="46.6360%" y="677" width="0.3777%" height="15" fill="rgb(236,137,17)" fg:x="3951" fg:w="32"/><text x="46.8860%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="47.0137%" y="725" width="0.0472%" height="15" fill="rgb(209,183,38)" fg:x="3983" fg:w="4"/><text x="47.2637%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="47.0137%" y="709" width="0.0472%" height="15" fill="rgb(206,162,44)" fg:x="3983" fg:w="4"/><text x="47.2637%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="47.0137%" y="693" width="0.0472%" height="15" fill="rgb(237,70,39)" fg:x="3983" fg:w="4"/><text x="47.2637%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.05%)</title><rect x="47.0137%" y="677" width="0.0472%" height="15" fill="rgb(212,176,5)" fg:x="3983" fg:w="4"/><text x="47.2637%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="47.0373%" y="661" width="0.0236%" height="15" fill="rgb(232,95,16)" fg:x="3985" fg:w="2"/><text x="47.2873%" y="671.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (12 samples, 0.14%)</title><rect x="47.0609%" y="725" width="0.1416%" height="15" fill="rgb(219,115,35)" fg:x="3987" fg:w="12"/><text x="47.3109%" y="735.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (10 samples, 0.12%)</title><rect x="47.0845%" y="709" width="0.1180%" height="15" fill="rgb(251,67,27)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="719.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (10 samples, 0.12%)</title><rect x="47.0845%" y="693" width="0.1180%" height="15" fill="rgb(222,95,40)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="703.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (10 samples, 0.12%)</title><rect x="47.0845%" y="677" width="0.1180%" height="15" fill="rgb(250,35,16)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="47.0845%" y="661" width="0.1180%" height="15" fill="rgb(224,86,44)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="671.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="47.0845%" y="645" width="0.1180%" height="15" fill="rgb(237,53,53)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="655.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="47.0845%" y="629" width="0.1180%" height="15" fill="rgb(208,171,33)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="47.0845%" y="613" width="0.1180%" height="15" fill="rgb(222,64,27)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="47.0845%" y="597" width="0.1180%" height="15" fill="rgb(221,121,35)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="47.0845%" y="581" width="0.1180%" height="15" fill="rgb(228,137,42)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="591.50"></text></g><g><title>schedule (10 samples, 0.12%)</title><rect x="47.0845%" y="565" width="0.1180%" height="15" fill="rgb(227,54,21)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="575.50"></text></g><g><title>__schedule (10 samples, 0.12%)</title><rect x="47.0845%" y="549" width="0.1180%" height="15" fill="rgb(240,168,33)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="47.0845%" y="533" width="0.1180%" height="15" fill="rgb(243,159,6)" fg:x="3989" fg:w="10"/><text x="47.3345%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.11%)</title><rect x="47.0963%" y="517" width="0.1062%" height="15" fill="rgb(205,211,41)" fg:x="3990" fg:w="9"/><text x="47.3463%" y="527.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="47.1553%" y="501" width="0.0472%" height="15" fill="rgb(253,30,1)" fg:x="3995" fg:w="4"/><text x="47.4053%" y="511.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="47.1553%" y="485" width="0.0472%" height="15" fill="rgb(226,80,18)" fg:x="3995" fg:w="4"/><text x="47.4053%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="47.3324%" y="549" width="0.0118%" height="15" fill="rgb(253,156,46)" fg:x="4010" fg:w="1"/><text x="47.5824%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="47.3324%" y="533" width="0.0118%" height="15" fill="rgb(248,87,27)" fg:x="4010" fg:w="1"/><text x="47.5824%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="47.2734%" y="597" width="0.0826%" height="15" fill="rgb(227,122,2)" fg:x="4005" fg:w="7"/><text x="47.5234%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="47.2734%" y="581" width="0.0826%" height="15" fill="rgb(229,94,39)" fg:x="4005" fg:w="7"/><text x="47.5234%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="47.2734%" y="565" width="0.0826%" height="15" fill="rgb(225,173,31)" fg:x="4005" fg:w="7"/><text x="47.5234%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="47.3442%" y="549" width="0.0118%" height="15" fill="rgb(239,176,30)" fg:x="4011" fg:w="1"/><text x="47.5942%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.09%)</title><rect x="47.2734%" y="693" width="0.0944%" height="15" fill="rgb(212,104,21)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.09%)</title><rect x="47.2734%" y="677" width="0.0944%" height="15" fill="rgb(240,209,40)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.09%)</title><rect x="47.2734%" y="661" width="0.0944%" height="15" fill="rgb(234,195,5)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.09%)</title><rect x="47.2734%" y="645" width="0.0944%" height="15" fill="rgb(238,213,1)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (8 samples, 0.09%)</title><rect x="47.2734%" y="629" width="0.0944%" height="15" fill="rgb(235,182,54)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.09%)</title><rect x="47.2734%" y="613" width="0.0944%" height="15" fill="rgb(229,50,46)" fg:x="4005" fg:w="8"/><text x="47.5234%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="47.3560%" y="597" width="0.0118%" height="15" fill="rgb(219,145,13)" fg:x="4012" fg:w="1"/><text x="47.6060%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="47.4858%" y="629" width="0.0236%" height="15" fill="rgb(220,226,10)" fg:x="4023" fg:w="2"/><text x="47.7358%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.12%)</title><rect x="47.4032%" y="645" width="0.1180%" height="15" fill="rgb(248,47,30)" fg:x="4016" fg:w="10"/><text x="47.6532%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="47.5094%" y="629" width="0.0118%" height="15" fill="rgb(231,209,44)" fg:x="4025" fg:w="1"/><text x="47.7594%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="47.3678%" y="693" width="0.1653%" height="15" fill="rgb(209,80,30)" fg:x="4013" fg:w="14"/><text x="47.6178%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="47.3678%" y="677" width="0.1653%" height="15" fill="rgb(232,9,14)" fg:x="4013" fg:w="14"/><text x="47.6178%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="47.3678%" y="661" width="0.1653%" height="15" fill="rgb(243,91,43)" fg:x="4013" fg:w="14"/><text x="47.6178%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="47.5212%" y="645" width="0.0118%" height="15" fill="rgb(231,90,52)" fg:x="4026" fg:w="1"/><text x="47.7712%" y="655.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (49 samples, 0.58%)</title><rect x="47.0137%" y="741" width="0.5784%" height="15" fill="rgb(253,192,44)" fg:x="3983" fg:w="49"/><text x="47.2637%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (33 samples, 0.39%)</title><rect x="47.2025%" y="725" width="0.3895%" height="15" fill="rgb(241,66,31)" fg:x="3999" fg:w="33"/><text x="47.4525%" y="735.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (33 samples, 0.39%)</title><rect x="47.2025%" y="709" width="0.3895%" height="15" fill="rgb(235,81,37)" fg:x="3999" fg:w="33"/><text x="47.4525%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5 samples, 0.06%)</title><rect x="47.5331%" y="693" width="0.0590%" height="15" fill="rgb(223,221,9)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="703.50"></text></g><g><title>core::hash::Hasher::write_isize (5 samples, 0.06%)</title><rect x="47.5331%" y="677" width="0.0590%" height="15" fill="rgb(242,180,7)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.06%)</title><rect x="47.5331%" y="661" width="0.0590%" height="15" fill="rgb(243,78,19)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="47.5331%" y="645" width="0.0590%" height="15" fill="rgb(233,23,17)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="47.5331%" y="629" width="0.0590%" height="15" fill="rgb(252,122,45)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="47.5331%" y="613" width="0.0590%" height="15" fill="rgb(247,108,20)" fg:x="4027" fg:w="5"/><text x="47.7831%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="47.5803%" y="597" width="0.0118%" height="15" fill="rgb(235,84,21)" fg:x="4031" fg:w="1"/><text x="47.8303%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="47.5803%" y="581" width="0.0118%" height="15" fill="rgb(247,129,10)" fg:x="4031" fg:w="1"/><text x="47.8303%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="48.0642%" y="517" width="0.0118%" height="15" fill="rgb(208,173,14)" fg:x="4072" fg:w="1"/><text x="48.3142%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="48.0642%" y="533" width="0.0236%" height="15" fill="rgb(236,31,38)" fg:x="4072" fg:w="2"/><text x="48.3142%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="48.0760%" y="517" width="0.0118%" height="15" fill="rgb(232,65,17)" fg:x="4073" fg:w="1"/><text x="48.3260%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="48.0052%" y="677" width="0.1062%" height="15" fill="rgb(224,45,49)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="48.0052%" y="661" width="0.1062%" height="15" fill="rgb(225,2,53)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9 samples, 0.11%)</title><rect x="48.0052%" y="645" width="0.1062%" height="15" fill="rgb(248,210,53)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.11%)</title><rect x="48.0052%" y="629" width="0.1062%" height="15" fill="rgb(211,1,30)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="639.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (9 samples, 0.11%)</title><rect x="48.0052%" y="613" width="0.1062%" height="15" fill="rgb(224,96,15)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (9 samples, 0.11%)</title><rect x="48.0052%" y="597" width="0.1062%" height="15" fill="rgb(252,45,11)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="48.0052%" y="581" width="0.1062%" height="15" fill="rgb(220,125,38)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="48.0052%" y="565" width="0.1062%" height="15" fill="rgb(243,161,33)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="48.0052%" y="549" width="0.1062%" height="15" fill="rgb(248,197,34)" fg:x="4067" fg:w="9"/><text x="48.2552%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="48.0878%" y="533" width="0.0236%" height="15" fill="rgb(228,165,23)" fg:x="4074" fg:w="2"/><text x="48.3378%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="48.1704%" y="629" width="0.0354%" height="15" fill="rgb(236,94,38)" fg:x="4081" fg:w="3"/><text x="48.4204%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="48.1822%" y="613" width="0.0236%" height="15" fill="rgb(220,13,23)" fg:x="4082" fg:w="2"/><text x="48.4322%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.12%)</title><rect x="48.1114%" y="677" width="0.1180%" height="15" fill="rgb(234,26,39)" fg:x="4076" fg:w="10"/><text x="48.3614%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.12%)</title><rect x="48.1114%" y="661" width="0.1180%" height="15" fill="rgb(205,117,44)" fg:x="4076" fg:w="10"/><text x="48.3614%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.12%)</title><rect x="48.1114%" y="645" width="0.1180%" height="15" fill="rgb(250,42,2)" fg:x="4076" fg:w="10"/><text x="48.3614%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="48.2059%" y="629" width="0.0236%" height="15" fill="rgb(223,83,14)" fg:x="4084" fg:w="2"/><text x="48.4559%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (34 samples, 0.40%)</title><rect x="47.9934%" y="693" width="0.4013%" height="15" fill="rgb(241,147,50)" fg:x="4066" fg:w="34"/><text x="48.2434%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (14 samples, 0.17%)</title><rect x="48.2295%" y="677" width="0.1653%" height="15" fill="rgb(218,90,6)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="687.50"></text></g><g><title>core::hash::Hasher::write_isize (14 samples, 0.17%)</title><rect x="48.2295%" y="661" width="0.1653%" height="15" fill="rgb(210,191,5)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.17%)</title><rect x="48.2295%" y="645" width="0.1653%" height="15" fill="rgb(225,139,19)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="48.2295%" y="629" width="0.1653%" height="15" fill="rgb(210,1,33)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="48.2295%" y="613" width="0.1653%" height="15" fill="rgb(213,50,3)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="48.2295%" y="597" width="0.1653%" height="15" fill="rgb(234,227,4)" fg:x="4086" fg:w="14"/><text x="48.4795%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.09%)</title><rect x="48.3003%" y="581" width="0.0944%" height="15" fill="rgb(246,63,5)" fg:x="4092" fg:w="8"/><text x="48.5503%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="48.3593%" y="565" width="0.0354%" height="15" fill="rgb(245,136,27)" fg:x="4097" fg:w="3"/><text x="48.6093%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="48.4065%" y="629" width="0.0118%" height="15" fill="rgb(247,199,27)" fg:x="4101" fg:w="1"/><text x="48.6565%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="48.3947%" y="693" width="0.0354%" height="15" fill="rgb(252,158,49)" fg:x="4100" fg:w="3"/><text x="48.6447%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="48.3947%" y="677" width="0.0354%" height="15" fill="rgb(254,73,1)" fg:x="4100" fg:w="3"/><text x="48.6447%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="48.3947%" y="661" width="0.0354%" height="15" fill="rgb(248,93,19)" fg:x="4100" fg:w="3"/><text x="48.6447%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="48.4065%" y="645" width="0.0236%" height="15" fill="rgb(206,67,5)" fg:x="4101" fg:w="2"/><text x="48.6565%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="48.4183%" y="629" width="0.0118%" height="15" fill="rgb(209,210,4)" fg:x="4102" fg:w="1"/><text x="48.6683%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (42 samples, 0.50%)</title><rect x="47.9934%" y="709" width="0.4958%" height="15" fill="rgb(214,185,36)" fg:x="4066" fg:w="42"/><text x="48.2434%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="48.4301%" y="693" width="0.0590%" height="15" fill="rgb(233,191,26)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="48.4301%" y="677" width="0.0590%" height="15" fill="rgb(248,94,17)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="48.4301%" y="661" width="0.0590%" height="15" fill="rgb(250,64,4)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="48.4301%" y="645" width="0.0590%" height="15" fill="rgb(218,41,53)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="48.4301%" y="629" width="0.0590%" height="15" fill="rgb(251,176,28)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="48.4301%" y="613" width="0.0590%" height="15" fill="rgb(247,22,9)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="623.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="48.4301%" y="597" width="0.0590%" height="15" fill="rgb(218,201,14)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="48.4301%" y="581" width="0.0590%" height="15" fill="rgb(218,94,10)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="48.4301%" y="565" width="0.0590%" height="15" fill="rgb(222,183,52)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="575.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="48.4301%" y="549" width="0.0590%" height="15" fill="rgb(242,140,25)" fg:x="4103" fg:w="5"/><text x="48.6801%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="48.5127%" y="661" width="0.0118%" height="15" fill="rgb(235,197,38)" fg:x="4110" fg:w="1"/><text x="48.7627%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (43 samples, 0.51%)</title><rect x="48.5246%" y="661" width="0.5076%" height="15" fill="rgb(237,136,15)" fg:x="4111" fg:w="43"/><text x="48.7746%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (43 samples, 0.51%)</title><rect x="48.5246%" y="645" width="0.5076%" height="15" fill="rgb(223,44,49)" fg:x="4111" fg:w="43"/><text x="48.7746%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (43 samples, 0.51%)</title><rect x="48.5246%" y="629" width="0.5076%" height="15" fill="rgb(227,71,15)" fg:x="4111" fg:w="43"/><text x="48.7746%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.51%)</title><rect x="48.5246%" y="613" width="0.5076%" height="15" fill="rgb(225,153,20)" fg:x="4111" fg:w="43"/><text x="48.7746%" y="623.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (43 samples, 0.51%)</title><rect x="48.5246%" y="597" width="0.5076%" height="15" fill="rgb(210,190,26)" fg:x="4111" fg:w="43"/><text x="48.7746%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="48.9849%" y="581" width="0.0472%" height="15" fill="rgb(223,147,5)" fg:x="4150" fg:w="4"/><text x="49.2349%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="48.9849%" y="565" width="0.0472%" height="15" fill="rgb(207,14,23)" fg:x="4150" fg:w="4"/><text x="49.2349%" y="575.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (4 samples, 0.05%)</title><rect x="48.9849%" y="549" width="0.0472%" height="15" fill="rgb(211,195,53)" fg:x="4150" fg:w="4"/><text x="49.2349%" y="559.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.05%)</title><rect x="48.9849%" y="533" width="0.0472%" height="15" fill="rgb(237,75,46)" fg:x="4150" fg:w="4"/><text x="49.2349%" y="543.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.04%)</title><rect x="49.0321%" y="661" width="0.0354%" height="15" fill="rgb(254,55,14)" fg:x="4154" fg:w="3"/><text x="49.2821%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.24%)</title><rect x="49.0675%" y="661" width="0.2361%" height="15" fill="rgb(230,185,30)" fg:x="4157" fg:w="20"/><text x="49.3175%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 0.24%)</title><rect x="49.0675%" y="645" width="0.2361%" height="15" fill="rgb(220,14,11)" fg:x="4157" fg:w="20"/><text x="49.3175%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.24%)</title><rect x="49.0675%" y="629" width="0.2361%" height="15" fill="rgb(215,169,44)" fg:x="4157" fg:w="20"/><text x="49.3175%" y="639.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (523 samples, 6.17%)</title><rect x="43.1657%" y="757" width="6.1733%" height="15" fill="rgb(253,203,20)" fg:x="3657" fg:w="523"/><text x="43.4157%" y="767.50">&lt;dashmap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (148 samples, 1.75%)</title><rect x="47.5921%" y="741" width="1.7469%" height="15" fill="rgb(229,225,17)" fg:x="4032" fg:w="148"/><text x="47.8421%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (148 samples, 1.75%)</title><rect x="47.5921%" y="725" width="1.7469%" height="15" fill="rgb(236,76,26)" fg:x="4032" fg:w="148"/><text x="47.8421%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (72 samples, 0.85%)</title><rect x="48.4891%" y="709" width="0.8499%" height="15" fill="rgb(234,15,30)" fg:x="4108" fg:w="72"/><text x="48.7391%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (72 samples, 0.85%)</title><rect x="48.4891%" y="693" width="0.8499%" height="15" fill="rgb(211,113,48)" fg:x="4108" fg:w="72"/><text x="48.7391%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (72 samples, 0.85%)</title><rect x="48.4891%" y="677" width="0.8499%" height="15" fill="rgb(221,31,36)" fg:x="4108" fg:w="72"/><text x="48.7391%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.04%)</title><rect x="49.3036%" y="661" width="0.0354%" height="15" fill="rgb(215,118,52)" fg:x="4177" fg:w="3"/><text x="49.5536%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.04%)</title><rect x="49.3036%" y="645" width="0.0354%" height="15" fill="rgb(241,151,27)" fg:x="4177" fg:w="3"/><text x="49.5536%" y="655.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (735 samples, 8.68%)</title><rect x="40.6752%" y="789" width="8.6756%" height="15" fill="rgb(253,51,3)" fg:x="3446" fg:w="735"/><text x="40.9252%" y="799.50">block_stm_re..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (524 samples, 6.19%)</title><rect x="43.1657%" y="773" width="6.1851%" height="15" fill="rgb(216,201,24)" fg:x="3657" fg:w="524"/><text x="43.4157%" y="783.50">dashmap:..</text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="49.3390%" y="757" width="0.0118%" height="15" fill="rgb(231,107,4)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="49.3390%" y="741" width="0.0118%" height="15" fill="rgb(243,97,54)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (1 samples, 0.01%)</title><rect x="49.3390%" y="725" width="0.0118%" height="15" fill="rgb(221,32,51)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="49.3390%" y="709" width="0.0118%" height="15" fill="rgb(218,171,35)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="49.3390%" y="693" width="0.0118%" height="15" fill="rgb(214,20,53)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="703.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.01%)</title><rect x="49.3390%" y="677" width="0.0118%" height="15" fill="rgb(239,9,52)" fg:x="4180" fg:w="1"/><text x="49.5890%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (25 samples, 0.30%)</title><rect x="49.3508%" y="741" width="0.2951%" height="15" fill="rgb(215,114,45)" fg:x="4181" fg:w="25"/><text x="49.6008%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (25 samples, 0.30%)</title><rect x="49.3508%" y="725" width="0.2951%" height="15" fill="rgb(208,118,9)" fg:x="4181" fg:w="25"/><text x="49.6008%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (26 samples, 0.31%)</title><rect x="49.3508%" y="789" width="0.3069%" height="15" fill="rgb(235,7,39)" fg:x="4181" fg:w="26"/><text x="49.6008%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.31%)</title><rect x="49.3508%" y="773" width="0.3069%" height="15" fill="rgb(243,225,15)" fg:x="4181" fg:w="26"/><text x="49.6008%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (26 samples, 0.31%)</title><rect x="49.3508%" y="757" width="0.3069%" height="15" fill="rgb(225,216,18)" fg:x="4181" fg:w="26"/><text x="49.6008%" y="767.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="49.6459%" y="741" width="0.0118%" height="15" fill="rgb(233,36,38)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="49.6459%" y="725" width="0.0118%" height="15" fill="rgb(239,88,23)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="49.6459%" y="709" width="0.0118%" height="15" fill="rgb(219,181,35)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="719.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.01%)</title><rect x="49.6459%" y="693" width="0.0118%" height="15" fill="rgb(215,18,46)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="703.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="49.6459%" y="677" width="0.0118%" height="15" fill="rgb(241,38,11)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="687.50"></text></g><g><title>futex_wake (1 samples, 0.01%)</title><rect x="49.6459%" y="661" width="0.0118%" height="15" fill="rgb(248,169,45)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="671.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="49.6459%" y="645" width="0.0118%" height="15" fill="rgb(239,50,49)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="655.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="49.6459%" y="629" width="0.0118%" height="15" fill="rgb(231,96,31)" fg:x="4206" fg:w="1"/><text x="49.8959%" y="639.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="49.6577%" y="773" width="0.0590%" height="15" fill="rgb(224,193,37)" fg:x="4207" fg:w="5"/><text x="49.9077%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (5 samples, 0.06%)</title><rect x="49.6577%" y="757" width="0.0590%" height="15" fill="rgb(227,153,50)" fg:x="4207" fg:w="5"/><text x="49.9077%" y="767.50"></text></g><g><title>std::sync::poison::Flag::get (5 samples, 0.06%)</title><rect x="49.6577%" y="741" width="0.0590%" height="15" fill="rgb(249,228,3)" fg:x="4207" fg:w="5"/><text x="49.9077%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (5 samples, 0.06%)</title><rect x="49.6577%" y="725" width="0.0590%" height="15" fill="rgb(219,164,43)" fg:x="4207" fg:w="5"/><text x="49.9077%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="49.6577%" y="709" width="0.0590%" height="15" fill="rgb(216,45,41)" fg:x="4207" fg:w="5"/><text x="49.9077%" y="719.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.7167%" y="757" width="0.0118%" height="15" fill="rgb(210,226,51)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="767.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.7167%" y="741" width="0.0118%" height="15" fill="rgb(209,117,49)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="751.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.7167%" y="725" width="0.0118%" height="15" fill="rgb(206,196,24)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="735.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="49.7167%" y="709" width="0.0118%" height="15" fill="rgb(253,218,3)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="719.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="49.7167%" y="693" width="0.0118%" height="15" fill="rgb(252,166,2)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="703.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="49.7167%" y="677" width="0.0118%" height="15" fill="rgb(236,218,26)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="687.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="49.7167%" y="661" width="0.0118%" height="15" fill="rgb(254,84,19)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="671.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="49.7167%" y="645" width="0.0118%" height="15" fill="rgb(219,137,29)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="655.50"></text></g><g><title>account_process_tick (1 samples, 0.01%)</title><rect x="49.7167%" y="629" width="0.0118%" height="15" fill="rgb(227,47,52)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="639.50"></text></g><g><title>account_user_time (1 samples, 0.01%)</title><rect x="49.7167%" y="613" width="0.0118%" height="15" fill="rgb(229,167,24)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="623.50"></text></g><g><title>acct_account_cputime (1 samples, 0.01%)</title><rect x="49.7167%" y="597" width="0.0118%" height="15" fill="rgb(233,164,1)" fg:x="4212" fg:w="1"/><text x="49.9667%" y="607.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="49.7285%" y="613" width="0.0472%" height="15" fill="rgb(218,88,48)" fg:x="4213" fg:w="4"/><text x="49.9785%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="49.7285%" y="757" width="0.0590%" height="15" fill="rgb(226,214,24)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="49.7285%" y="741" width="0.0590%" height="15" fill="rgb(233,29,12)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="49.7285%" y="725" width="0.0590%" height="15" fill="rgb(219,120,34)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="49.7285%" y="709" width="0.0590%" height="15" fill="rgb(226,78,44)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="49.7285%" y="693" width="0.0590%" height="15" fill="rgb(240,15,48)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="49.7285%" y="677" width="0.0590%" height="15" fill="rgb(253,176,7)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="49.7285%" y="661" width="0.0590%" height="15" fill="rgb(206,166,28)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="49.7285%" y="645" width="0.0590%" height="15" fill="rgb(241,53,51)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="49.7285%" y="629" width="0.0590%" height="15" fill="rgb(249,112,30)" fg:x="4213" fg:w="5"/><text x="49.9785%" y="639.50"></text></g><g><title>asm_sysvec_call_function (1 samples, 0.01%)</title><rect x="49.7757%" y="613" width="0.0118%" height="15" fill="rgb(217,85,30)" fg:x="4217" fg:w="1"/><text x="50.0257%" y="623.50"></text></g><g><title>sysvec_call_function (1 samples, 0.01%)</title><rect x="49.7757%" y="597" width="0.0118%" height="15" fill="rgb(233,49,7)" fg:x="4217" fg:w="1"/><text x="50.0257%" y="607.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="49.7757%" y="581" width="0.0118%" height="15" fill="rgb(234,109,9)" fg:x="4217" fg:w="1"/><text x="50.0257%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (27 samples, 0.32%)</title><rect x="49.7875%" y="757" width="0.3187%" height="15" fill="rgb(253,95,22)" fg:x="4218" fg:w="27"/><text x="50.0375%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.32%)</title><rect x="49.7875%" y="741" width="0.3187%" height="15" fill="rgb(233,176,25)" fg:x="4218" fg:w="27"/><text x="50.0375%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.02%)</title><rect x="50.1062%" y="741" width="0.0236%" height="15" fill="rgb(236,33,39)" fg:x="4245" fg:w="2"/><text x="50.3562%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="50.1062%" y="725" width="0.0236%" height="15" fill="rgb(223,226,42)" fg:x="4245" fg:w="2"/><text x="50.3562%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.01%)</title><rect x="50.1298%" y="725" width="0.0118%" height="15" fill="rgb(216,99,33)" fg:x="4247" fg:w="1"/><text x="50.3798%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="50.1298%" y="709" width="0.0118%" height="15" fill="rgb(235,84,23)" fg:x="4247" fg:w="1"/><text x="50.3798%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="50.1534%" y="709" width="0.0118%" height="15" fill="rgb(232,2,27)" fg:x="4249" fg:w="1"/><text x="50.4034%" y="719.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="50.1653%" y="645" width="0.0118%" height="15" fill="rgb(241,23,22)" fg:x="4250" fg:w="1"/><text x="50.4153%" y="655.50"></text></g><g><title>__schedule (2 samples, 0.02%)</title><rect x="50.2007%" y="613" width="0.0236%" height="15" fill="rgb(211,73,27)" fg:x="4253" fg:w="2"/><text x="50.4507%" y="623.50"></text></g><g><title>asm_sysvec_irq_work (6 samples, 0.07%)</title><rect x="50.2597%" y="581" width="0.0708%" height="15" fill="rgb(235,109,49)" fg:x="4258" fg:w="6"/><text x="50.5097%" y="591.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="50.5666%" y="549" width="0.0590%" height="15" fill="rgb(230,99,29)" fg:x="4284" fg:w="5"/><text x="50.8166%" y="559.50"></text></g><g><title>perf_ctx_enable (101 samples, 1.19%)</title><rect x="50.6256%" y="549" width="1.1922%" height="15" fill="rgb(245,199,7)" fg:x="4289" fg:w="101"/><text x="50.8756%" y="559.50"></text></g><g><title>x86_pmu_enable (35 samples, 0.41%)</title><rect x="51.4046%" y="533" width="0.4131%" height="15" fill="rgb(217,179,10)" fg:x="4355" fg:w="35"/><text x="51.6546%" y="543.50"></text></g><g><title>perf_pmu_nop_void (61 samples, 0.72%)</title><rect x="51.8178%" y="549" width="0.7200%" height="15" fill="rgb(254,99,47)" fg:x="4390" fg:w="61"/><text x="52.0678%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (199 samples, 2.35%)</title><rect x="50.4013%" y="565" width="2.3489%" height="15" fill="rgb(251,121,7)" fg:x="4270" fg:w="199"/><text x="50.6513%" y="575.50">_..</text></g><g><title>x86_pmu_enable (18 samples, 0.21%)</title><rect x="52.5378%" y="549" width="0.2125%" height="15" fill="rgb(250,177,26)" fg:x="4451" fg:w="18"/><text x="52.7878%" y="559.50"></text></g><g><title>__rcu_read_unlock (10 samples, 0.12%)</title><rect x="52.7502%" y="565" width="0.1180%" height="15" fill="rgb(232,88,15)" fg:x="4469" fg:w="10"/><text x="53.0002%" y="575.50"></text></g><g><title>_raw_spin_unlock (23 samples, 0.27%)</title><rect x="52.8683%" y="565" width="0.2715%" height="15" fill="rgb(251,54,54)" fg:x="4479" fg:w="23"/><text x="53.1183%" y="575.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="53.1398%" y="565" width="0.0236%" height="15" fill="rgb(208,177,15)" fg:x="4502" fg:w="2"/><text x="53.3898%" y="575.50"></text></g><g><title>sysvec_irq_work (2 samples, 0.02%)</title><rect x="53.1398%" y="549" width="0.0236%" height="15" fill="rgb(205,97,32)" fg:x="4502" fg:w="2"/><text x="53.3898%" y="559.50"></text></g><g><title>__sysvec_irq_work (1 samples, 0.01%)</title><rect x="53.1516%" y="533" width="0.0118%" height="15" fill="rgb(217,192,13)" fg:x="4503" fg:w="1"/><text x="53.4016%" y="543.50"></text></g><g><title>irq_work_run (1 samples, 0.01%)</title><rect x="53.1516%" y="517" width="0.0118%" height="15" fill="rgb(215,163,41)" fg:x="4503" fg:w="1"/><text x="53.4016%" y="527.50"></text></g><g><title>irq_work_run_list (1 samples, 0.01%)</title><rect x="53.1516%" y="501" width="0.0118%" height="15" fill="rgb(246,83,29)" fg:x="4503" fg:w="1"/><text x="53.4016%" y="511.50"></text></g><g><title>finish_task_switch.isra.0 (264 samples, 3.12%)</title><rect x="50.3305%" y="581" width="3.1161%" height="15" fill="rgb(219,2,45)" fg:x="4264" fg:w="264"/><text x="50.5805%" y="591.50">fin..</text></g><g><title>perf_ctx_enable (24 samples, 0.28%)</title><rect x="53.1634%" y="565" width="0.2833%" height="15" fill="rgb(242,215,33)" fg:x="4504" fg:w="24"/><text x="53.4134%" y="575.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="53.4585%" y="533" width="0.0118%" height="15" fill="rgb(217,1,6)" fg:x="4529" fg:w="1"/><text x="53.7085%" y="543.50"></text></g><g><title>calculate_imbalance (1 samples, 0.01%)</title><rect x="53.4585%" y="517" width="0.0118%" height="15" fill="rgb(207,85,52)" fg:x="4529" fg:w="1"/><text x="53.7085%" y="527.50"></text></g><g><title>__x64_sys_futex (281 samples, 3.32%)</title><rect x="50.1653%" y="677" width="3.3168%" height="15" fill="rgb(231,171,19)" fg:x="4250" fg:w="281"/><text x="50.4153%" y="687.50">__x..</text></g><g><title>do_futex (281 samples, 3.32%)</title><rect x="50.1653%" y="661" width="3.3168%" height="15" fill="rgb(207,128,4)" fg:x="4250" fg:w="281"/><text x="50.4153%" y="671.50">do_..</text></g><g><title>futex_wait (280 samples, 3.31%)</title><rect x="50.1771%" y="645" width="3.3050%" height="15" fill="rgb(219,208,4)" fg:x="4251" fg:w="280"/><text x="50.4271%" y="655.50">fut..</text></g><g><title>futex_wait_queue (280 samples, 3.31%)</title><rect x="50.1771%" y="629" width="3.3050%" height="15" fill="rgb(235,161,42)" fg:x="4251" fg:w="280"/><text x="50.4271%" y="639.50">fut..</text></g><g><title>schedule (276 samples, 3.26%)</title><rect x="50.2243%" y="613" width="3.2578%" height="15" fill="rgb(247,218,18)" fg:x="4255" fg:w="276"/><text x="50.4743%" y="623.50">sch..</text></g><g><title>__schedule (276 samples, 3.26%)</title><rect x="50.2243%" y="597" width="3.2578%" height="15" fill="rgb(232,114,51)" fg:x="4255" fg:w="276"/><text x="50.4743%" y="607.50">__s..</text></g><g><title>pick_next_task (3 samples, 0.04%)</title><rect x="53.4466%" y="581" width="0.0354%" height="15" fill="rgb(222,95,3)" fg:x="4528" fg:w="3"/><text x="53.6966%" y="591.50"></text></g><g><title>pick_next_task_fair (3 samples, 0.04%)</title><rect x="53.4466%" y="565" width="0.0354%" height="15" fill="rgb(240,65,29)" fg:x="4528" fg:w="3"/><text x="53.6966%" y="575.50"></text></g><g><title>newidle_balance (3 samples, 0.04%)</title><rect x="53.4466%" y="549" width="0.0354%" height="15" fill="rgb(249,209,20)" fg:x="4528" fg:w="3"/><text x="53.6966%" y="559.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="53.4703%" y="533" width="0.0118%" height="15" fill="rgb(241,48,37)" fg:x="4530" fg:w="1"/><text x="53.7203%" y="543.50"></text></g><g><title>_raw_spin_rq_lock_irqsave (1 samples, 0.01%)</title><rect x="53.4703%" y="517" width="0.0118%" height="15" fill="rgb(230,140,42)" fg:x="4530" fg:w="1"/><text x="53.7203%" y="527.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="53.4703%" y="501" width="0.0118%" height="15" fill="rgb(230,176,45)" fg:x="4530" fg:w="1"/><text x="53.7203%" y="511.50"></text></g><g><title>__put_user_8 (2 samples, 0.02%)</title><rect x="53.5057%" y="613" width="0.0236%" height="15" fill="rgb(245,112,21)" fg:x="4533" fg:w="2"/><text x="53.7557%" y="623.50"></text></g><g><title>rseq_get_rseq_cs (1 samples, 0.01%)</title><rect x="53.5293%" y="613" width="0.0118%" height="15" fill="rgb(207,183,35)" fg:x="4535" fg:w="1"/><text x="53.7793%" y="623.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="53.5411%" y="613" width="0.0118%" height="15" fill="rgb(227,44,33)" fg:x="4536" fg:w="1"/><text x="53.7911%" y="623.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="53.5411%" y="597" width="0.0118%" height="15" fill="rgb(246,120,21)" fg:x="4536" fg:w="1"/><text x="53.7911%" y="607.50"></text></g><g><title>__rseq_handle_notify_resume (6 samples, 0.07%)</title><rect x="53.5057%" y="629" width="0.0708%" height="15" fill="rgb(235,57,52)" fg:x="4533" fg:w="6"/><text x="53.7557%" y="639.50"></text></g><g><title>rseq_update_cpu_node_id (2 samples, 0.02%)</title><rect x="53.5529%" y="613" width="0.0236%" height="15" fill="rgb(238,84,10)" fg:x="4537" fg:w="2"/><text x="53.8029%" y="623.50"></text></g><g><title>exit_to_user_mode_loop (9 samples, 0.11%)</title><rect x="53.4821%" y="645" width="0.1062%" height="15" fill="rgb(251,200,32)" fg:x="4531" fg:w="9"/><text x="53.7321%" y="655.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="53.5765%" y="629" width="0.0118%" height="15" fill="rgb(247,159,13)" fg:x="4539" fg:w="1"/><text x="53.8265%" y="639.50"></text></g><g><title>do_syscall_64 (291 samples, 3.43%)</title><rect x="50.1653%" y="693" width="3.4348%" height="15" fill="rgb(238,64,4)" fg:x="4250" fg:w="291"/><text x="50.4153%" y="703.50">do_..</text></g><g><title>syscall_exit_to_user_mode (10 samples, 0.12%)</title><rect x="53.4821%" y="677" width="0.1180%" height="15" fill="rgb(221,131,51)" fg:x="4531" fg:w="10"/><text x="53.7321%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="53.4821%" y="661" width="0.1180%" height="15" fill="rgb(242,5,29)" fg:x="4531" fg:w="10"/><text x="53.7321%" y="671.50"></text></g><g><title>switch_fpu_return (1 samples, 0.01%)</title><rect x="53.5883%" y="645" width="0.0118%" height="15" fill="rgb(214,130,32)" fg:x="4540" fg:w="1"/><text x="53.8383%" y="655.50"></text></g><g><title>restore_fpregs_from_fpstate (1 samples, 0.01%)</title><rect x="53.5883%" y="629" width="0.0118%" height="15" fill="rgb(244,210,16)" fg:x="4540" fg:w="1"/><text x="53.8383%" y="639.50"></text></g><g><title>std::sys::unix::futex::futex_wait (295 samples, 3.48%)</title><rect x="50.1298%" y="741" width="3.4821%" height="15" fill="rgb(234,48,26)" fg:x="4247" fg:w="295"/><text x="50.3798%" y="751.50">std..</text></g><g><title>syscall (294 samples, 3.47%)</title><rect x="50.1416%" y="725" width="3.4703%" height="15" fill="rgb(231,82,38)" fg:x="4248" fg:w="294"/><text x="50.3916%" y="735.50">sys..</text></g><g><title>entry_SYSCALL_64_after_hwframe (292 samples, 3.45%)</title><rect x="50.1653%" y="709" width="3.4466%" height="15" fill="rgb(254,128,41)" fg:x="4250" fg:w="292"/><text x="50.4153%" y="719.50">ent..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.01%)</title><rect x="53.6001%" y="693" width="0.0118%" height="15" fill="rgb(212,73,49)" fg:x="4541" fg:w="1"/><text x="53.8501%" y="703.50"></text></g><g><title>core::hint::spin_loop (4 samples, 0.05%)</title><rect x="53.6119%" y="725" width="0.0472%" height="15" fill="rgb(205,62,54)" fg:x="4542" fg:w="4"/><text x="53.8619%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4 samples, 0.05%)</title><rect x="53.6119%" y="709" width="0.0472%" height="15" fill="rgb(228,0,8)" fg:x="4542" fg:w="4"/><text x="53.8619%" y="719.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::validate_read_set (1,122 samples, 13.24%)</title><rect x="40.5099%" y="805" width="13.2436%" height="15" fill="rgb(251,28,17)" fg:x="3432" fg:w="1122"/><text x="40.7599%" y="815.50">block_stm_revm::mv_m..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (347 samples, 4.10%)</title><rect x="49.6577%" y="789" width="4.0958%" height="15" fill="rgb(238,105,27)" fg:x="4207" fg:w="347"/><text x="49.9077%" y="799.50">std:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (342 samples, 4.04%)</title><rect x="49.7167%" y="773" width="4.0368%" height="15" fill="rgb(237,216,33)" fg:x="4212" fg:w="342"/><text x="49.9667%" y="783.50">std:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (309 samples, 3.65%)</title><rect x="50.1062%" y="757" width="3.6473%" height="15" fill="rgb(229,228,25)" fg:x="4245" fg:w="309"/><text x="50.3562%" y="767.50">std:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (12 samples, 0.14%)</title><rect x="53.6119%" y="741" width="0.1416%" height="15" fill="rgb(233,75,23)" fg:x="4542" fg:w="12"/><text x="53.8619%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (8 samples, 0.09%)</title><rect x="53.6591%" y="725" width="0.0944%" height="15" fill="rgb(231,207,16)" fg:x="4546" fg:w="8"/><text x="53.9091%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.09%)</title><rect x="53.6591%" y="709" width="0.0944%" height="15" fill="rgb(231,191,45)" fg:x="4546" fg:w="8"/><text x="53.9091%" y="719.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="55.3706%" y="757" width="0.0118%" height="15" fill="rgb(224,133,17)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="767.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="55.3706%" y="741" width="0.0118%" height="15" fill="rgb(209,178,27)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="751.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="55.3706%" y="725" width="0.0118%" height="15" fill="rgb(218,37,11)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="735.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="55.3706%" y="709" width="0.0118%" height="15" fill="rgb(251,226,25)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="719.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="55.3706%" y="693" width="0.0118%" height="15" fill="rgb(209,222,27)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="703.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="55.3706%" y="677" width="0.0118%" height="15" fill="rgb(238,22,21)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="687.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="55.3706%" y="661" width="0.0118%" height="15" fill="rgb(233,161,25)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="671.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="55.3706%" y="645" width="0.0118%" height="15" fill="rgb(226,122,53)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="655.50"></text></g><g><title>rcu_segcblist_ready_cbs (1 samples, 0.01%)</title><rect x="55.3706%" y="629" width="0.0118%" height="15" fill="rgb(220,123,17)" fg:x="4691" fg:w="1"/><text x="55.6206%" y="639.50"></text></g><g><title>block_stm_revm::block_stm::needs_reexecution (1,261 samples, 14.88%)</title><rect x="40.5099%" y="821" width="14.8843%" height="15" fill="rgb(230,224,35)" fg:x="3432" fg:w="1261"/><text x="40.7599%" y="831.50">block_stm_revm::block_s..</text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_validation (139 samples, 1.64%)</title><rect x="53.7535%" y="805" width="1.6407%" height="15" fill="rgb(246,83,8)" fg:x="4554" fg:w="139"/><text x="54.0035%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (139 samples, 1.64%)</title><rect x="53.7535%" y="789" width="1.6407%" height="15" fill="rgb(230,214,17)" fg:x="4554" fg:w="139"/><text x="54.0035%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (139 samples, 1.64%)</title><rect x="53.7535%" y="773" width="1.6407%" height="15" fill="rgb(222,97,18)" fg:x="4554" fg:w="139"/><text x="54.0035%" y="783.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="55.3824%" y="757" width="0.0118%" height="15" fill="rgb(206,79,1)" fg:x="4692" fg:w="1"/><text x="55.6324%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="55.3942%" y="805" width="0.0354%" height="15" fill="rgb(214,121,34)" fg:x="4693" fg:w="3"/><text x="55.6442%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3 samples, 0.04%)</title><rect x="55.3942%" y="789" width="0.0354%" height="15" fill="rgb(249,199,46)" fg:x="4693" fg:w="3"/><text x="55.6442%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.04%)</title><rect x="55.3942%" y="773" width="0.0354%" height="15" fill="rgb(214,222,46)" fg:x="4693" fg:w="3"/><text x="55.6442%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4769%" y="789" width="0.0472%" height="15" fill="rgb(248,168,30)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.05%)</title><rect x="55.4769%" y="773" width="0.0472%" height="15" fill="rgb(226,14,28)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.05%)</title><rect x="55.4769%" y="757" width="0.0472%" height="15" fill="rgb(253,123,1)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.05%)</title><rect x="55.4769%" y="741" width="0.0472%" height="15" fill="rgb(225,24,42)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="55.4769%" y="725" width="0.0472%" height="15" fill="rgb(216,161,37)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="55.4769%" y="709" width="0.0472%" height="15" fill="rgb(251,164,26)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.05%)</title><rect x="55.4769%" y="693" width="0.0472%" height="15" fill="rgb(219,177,3)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="55.4769%" y="677" width="0.0472%" height="15" fill="rgb(222,65,0)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="55.4769%" y="661" width="0.0472%" height="15" fill="rgb(223,69,54)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="671.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="55.4769%" y="645" width="0.0472%" height="15" fill="rgb(235,30,27)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="655.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="55.4769%" y="629" width="0.0472%" height="15" fill="rgb(220,183,50)" fg:x="4700" fg:w="4"/><text x="55.7269%" y="639.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="55.5005%" y="613" width="0.0236%" height="15" fill="rgb(248,198,15)" fg:x="4702" fg:w="2"/><text x="55.7505%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="55.5241%" y="789" width="0.0236%" height="15" fill="rgb(222,211,4)" fg:x="4704" fg:w="2"/><text x="55.7741%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="55.5477%" y="773" width="0.0236%" height="15" fill="rgb(214,102,34)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)]&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="757" width="0.0236%" height="15" fill="rgb(245,92,5)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="741" width="0.0236%" height="15" fill="rgb(252,72,51)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="725" width="0.0236%" height="15" fill="rgb(252,208,19)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="709" width="0.0236%" height="15" fill="rgb(211,69,7)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="693" width="0.0236%" height="15" fill="rgb(211,27,16)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (2 samples, 0.02%)</title><rect x="55.5477%" y="677" width="0.0236%" height="15" fill="rgb(219,216,14)" fg:x="4706" fg:w="2"/><text x="55.7977%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (1 samples, 0.01%)</title><rect x="55.5595%" y="661" width="0.0118%" height="15" fill="rgb(219,71,8)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="55.5595%" y="645" width="0.0118%" height="15" fill="rgb(223,170,53)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="55.5595%" y="629" width="0.0118%" height="15" fill="rgb(246,21,26)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="55.5595%" y="613" width="0.0118%" height="15" fill="rgb(248,20,46)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="55.5595%" y="597" width="0.0118%" height="15" fill="rgb(252,94,11)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="55.5595%" y="581" width="0.0118%" height="15" fill="rgb(236,163,8)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="55.5595%" y="565" width="0.0118%" height="15" fill="rgb(217,221,45)" fg:x="4707" fg:w="1"/><text x="55.8095%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (4 samples, 0.05%)</title><rect x="55.5477%" y="789" width="0.0472%" height="15" fill="rgb(238,38,17)" fg:x="4706" fg:w="4"/><text x="55.7977%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (2 samples, 0.02%)</title><rect x="55.5713%" y="773" width="0.0236%" height="15" fill="rgb(242,210,23)" fg:x="4708" fg:w="2"/><text x="55.8213%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="55.5713%" y="757" width="0.0236%" height="15" fill="rgb(250,86,53)" fg:x="4708" fg:w="2"/><text x="55.8213%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="55.5713%" y="741" width="0.0236%" height="15" fill="rgb(223,168,25)" fg:x="4708" fg:w="2"/><text x="55.8213%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="55.5713%" y="725" width="0.0236%" height="15" fill="rgb(251,189,4)" fg:x="4708" fg:w="2"/><text x="55.8213%" y="735.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="55.5713%" y="709" width="0.0236%" height="15" fill="rgb(245,19,28)" fg:x="4708" fg:w="2"/><text x="55.8213%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="55.5831%" y="693" width="0.0118%" height="15" fill="rgb(207,10,34)" fg:x="4709" fg:w="1"/><text x="55.8331%" y="703.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="55.5831%" y="677" width="0.0118%" height="15" fill="rgb(235,153,31)" fg:x="4709" fg:w="1"/><text x="55.8331%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt; (5 samples, 0.06%)</title><rect x="55.5949%" y="789" width="0.0590%" height="15" fill="rgb(228,72,37)" fg:x="4710" fg:w="5"/><text x="55.8449%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;block_stm_revm::MemoryLocation&gt;&gt; (5 samples, 0.06%)</title><rect x="55.5949%" y="773" width="0.0590%" height="15" fill="rgb(215,15,16)" fg:x="4710" fg:w="5"/><text x="55.8449%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="55.5949%" y="757" width="0.0590%" height="15" fill="rgb(250,119,29)" fg:x="4710" fg:w="5"/><text x="55.8449%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.05%)</title><rect x="55.6067%" y="741" width="0.0472%" height="15" fill="rgb(214,59,1)" fg:x="4711" fg:w="4"/><text x="55.8567%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.05%)</title><rect x="55.6067%" y="725" width="0.0472%" height="15" fill="rgb(223,109,25)" fg:x="4711" fg:w="4"/><text x="55.8567%" y="735.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="55.6067%" y="709" width="0.0472%" height="15" fill="rgb(230,198,22)" fg:x="4711" fg:w="4"/><text x="55.8567%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="55.6303%" y="693" width="0.0236%" height="15" fill="rgb(245,184,46)" fg:x="4713" fg:w="2"/><text x="55.8803%" y="703.50"></text></g><g><title>_nv040310rm (1 samples, 0.01%)</title><rect x="55.6421%" y="677" width="0.0118%" height="15" fill="rgb(253,73,16)" fg:x="4714" fg:w="1"/><text x="55.8921%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="55.6539%" y="789" width="0.0118%" height="15" fill="rgb(206,94,45)" fg:x="4715" fg:w="1"/><text x="55.9039%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="55.6539%" y="773" width="0.0118%" height="15" fill="rgb(236,83,27)" fg:x="4715" fg:w="1"/><text x="55.9039%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.01%)</title><rect x="55.6539%" y="757" width="0.0118%" height="15" fill="rgb(220,196,8)" fg:x="4715" fg:w="1"/><text x="55.9039%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.01%)</title><rect x="55.6539%" y="741" width="0.0118%" height="15" fill="rgb(254,185,14)" fg:x="4715" fg:w="1"/><text x="55.9039%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.01%)</title><rect x="55.6539%" y="725" width="0.0118%" height="15" fill="rgb(226,50,22)" fg:x="4715" fg:w="1"/><text x="55.9039%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="55.6657%" y="789" width="0.0236%" height="15" fill="rgb(253,147,0)" fg:x="4716" fg:w="2"/><text x="55.9157%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="55.6657%" y="773" width="0.0236%" height="15" fill="rgb(252,46,33)" fg:x="4716" fg:w="2"/><text x="55.9157%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="55.6657%" y="757" width="0.0236%" height="15" fill="rgb(242,22,54)" fg:x="4716" fg:w="2"/><text x="55.9157%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="55.6657%" y="741" width="0.0236%" height="15" fill="rgb(223,178,32)" fg:x="4716" fg:w="2"/><text x="55.9157%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="55.6657%" y="725" width="0.0236%" height="15" fill="rgb(214,106,53)" fg:x="4716" fg:w="2"/><text x="55.9157%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.01%)</title><rect x="55.6893%" y="789" width="0.0118%" height="15" fill="rgb(232,65,50)" fg:x="4718" fg:w="1"/><text x="55.9393%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.09%)</title><rect x="55.7129%" y="709" width="0.0944%" height="15" fill="rgb(231,110,28)" fg:x="4720" fg:w="8"/><text x="55.9629%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.09%)</title><rect x="55.7129%" y="693" width="0.0944%" height="15" fill="rgb(216,71,40)" fg:x="4720" fg:w="8"/><text x="55.9629%" y="703.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (13 samples, 0.15%)</title><rect x="55.7129%" y="757" width="0.1534%" height="15" fill="rgb(229,89,53)" fg:x="4720" fg:w="13"/><text x="55.9629%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (13 samples, 0.15%)</title><rect x="55.7129%" y="741" width="0.1534%" height="15" fill="rgb(210,124,14)" fg:x="4720" fg:w="13"/><text x="55.9629%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (13 samples, 0.15%)</title><rect x="55.7129%" y="725" width="0.1534%" height="15" fill="rgb(236,213,6)" fg:x="4720" fg:w="13"/><text x="55.9629%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (5 samples, 0.06%)</title><rect x="55.8074%" y="709" width="0.0590%" height="15" fill="rgb(228,41,5)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (5 samples, 0.06%)</title><rect x="55.8074%" y="693" width="0.0590%" height="15" fill="rgb(221,167,25)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (5 samples, 0.06%)</title><rect x="55.8074%" y="677" width="0.0590%" height="15" fill="rgb(228,144,37)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="687.50"></text></g><g><title>__GI_sched_yield (5 samples, 0.06%)</title><rect x="55.8074%" y="661" width="0.0590%" height="15" fill="rgb(227,189,38)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="55.8074%" y="645" width="0.0590%" height="15" fill="rgb(218,8,2)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="55.8074%" y="629" width="0.0590%" height="15" fill="rgb(209,61,28)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="639.50"></text></g><g><title>__x64_sys_sched_yield (5 samples, 0.06%)</title><rect x="55.8074%" y="613" width="0.0590%" height="15" fill="rgb(233,140,39)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="623.50"></text></g><g><title>do_sched_yield (5 samples, 0.06%)</title><rect x="55.8074%" y="597" width="0.0590%" height="15" fill="rgb(251,66,48)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="607.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="55.8074%" y="581" width="0.0590%" height="15" fill="rgb(210,44,45)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="55.8074%" y="565" width="0.0590%" height="15" fill="rgb(214,136,46)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="55.8074%" y="549" width="0.0590%" height="15" fill="rgb(207,130,50)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="55.8074%" y="533" width="0.0590%" height="15" fill="rgb(228,102,49)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="543.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="55.8074%" y="517" width="0.0590%" height="15" fill="rgb(253,55,1)" fg:x="4728" fg:w="5"/><text x="56.0574%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="55.8664%" y="757" width="0.0118%" height="15" fill="rgb(238,222,9)" fg:x="4733" fg:w="1"/><text x="56.1164%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="55.8664%" y="741" width="0.0118%" height="15" fill="rgb(246,99,6)" fg:x="4733" fg:w="1"/><text x="56.1164%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (1 samples, 0.01%)</title><rect x="55.8664%" y="725" width="0.0118%" height="15" fill="rgb(219,110,26)" fg:x="4733" fg:w="1"/><text x="56.1164%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.01%)</title><rect x="55.8664%" y="709" width="0.0118%" height="15" fill="rgb(239,160,33)" fg:x="4733" fg:w="1"/><text x="56.1164%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="55.8664%" y="693" width="0.0118%" height="15" fill="rgb(220,202,23)" fg:x="4733" fg:w="1"/><text x="56.1164%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="55.8782%" y="661" width="0.0118%" height="15" fill="rgb(208,80,26)" fg:x="4734" fg:w="1"/><text x="56.1282%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="55.8782%" y="645" width="0.0118%" height="15" fill="rgb(243,85,7)" fg:x="4734" fg:w="1"/><text x="56.1282%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.8782%" y="709" width="0.0236%" height="15" fill="rgb(228,77,47)" fg:x="4734" fg:w="2"/><text x="56.1282%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.8782%" y="693" width="0.0236%" height="15" fill="rgb(212,226,8)" fg:x="4734" fg:w="2"/><text x="56.1282%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.8782%" y="677" width="0.0236%" height="15" fill="rgb(241,120,54)" fg:x="4734" fg:w="2"/><text x="56.1282%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="55.8900%" y="661" width="0.0118%" height="15" fill="rgb(226,80,16)" fg:x="4735" fg:w="1"/><text x="56.1400%" y="671.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (4 samples, 0.05%)</title><rect x="55.8782%" y="757" width="0.0472%" height="15" fill="rgb(240,76,13)" fg:x="4734" fg:w="4"/><text x="56.1282%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="55.8782%" y="741" width="0.0472%" height="15" fill="rgb(252,74,8)" fg:x="4734" fg:w="4"/><text x="56.1282%" y="751.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="55.8782%" y="725" width="0.0472%" height="15" fill="rgb(244,155,2)" fg:x="4734" fg:w="4"/><text x="56.1282%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.02%)</title><rect x="55.9018%" y="709" width="0.0236%" height="15" fill="rgb(215,81,35)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="719.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.02%)</title><rect x="55.9018%" y="693" width="0.0236%" height="15" fill="rgb(206,55,2)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="55.9018%" y="677" width="0.0236%" height="15" fill="rgb(231,2,34)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.9018%" y="661" width="0.0236%" height="15" fill="rgb(242,176,48)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.9018%" y="645" width="0.0236%" height="15" fill="rgb(249,31,36)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="55.9018%" y="629" width="0.0236%" height="15" fill="rgb(205,18,17)" fg:x="4736" fg:w="2"/><text x="56.1518%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="55.9136%" y="613" width="0.0118%" height="15" fill="rgb(254,130,5)" fg:x="4737" fg:w="1"/><text x="56.1636%" y="623.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="55.9254%" y="709" width="0.0118%" height="15" fill="rgb(229,42,45)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="55.9254%" y="693" width="0.0118%" height="15" fill="rgb(245,95,25)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="55.9254%" y="677" width="0.0118%" height="15" fill="rgb(249,193,38)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="55.9254%" y="661" width="0.0118%" height="15" fill="rgb(241,140,43)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="55.9254%" y="645" width="0.0118%" height="15" fill="rgb(245,78,48)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="55.9254%" y="629" width="0.0118%" height="15" fill="rgb(214,92,39)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="55.9254%" y="613" width="0.0118%" height="15" fill="rgb(211,189,14)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="55.9254%" y="597" width="0.0118%" height="15" fill="rgb(218,7,24)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="55.9254%" y="581" width="0.0118%" height="15" fill="rgb(224,200,49)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="55.9254%" y="565" width="0.0118%" height="15" fill="rgb(218,210,14)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="55.9254%" y="549" width="0.0118%" height="15" fill="rgb(234,142,31)" fg:x="4738" fg:w="1"/><text x="56.1754%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="55.9372%" y="709" width="0.0118%" height="15" fill="rgb(227,165,2)" fg:x="4739" fg:w="1"/><text x="56.1872%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="55.9372%" y="693" width="0.0118%" height="15" fill="rgb(232,44,46)" fg:x="4739" fg:w="1"/><text x="56.1872%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="55.9372%" y="677" width="0.0118%" height="15" fill="rgb(236,149,47)" fg:x="4739" fg:w="1"/><text x="56.1872%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="55.9254%" y="725" width="0.0354%" height="15" fill="rgb(227,45,31)" fg:x="4738" fg:w="3"/><text x="56.1754%" y="735.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="55.9490%" y="709" width="0.0118%" height="15" fill="rgb(240,176,51)" fg:x="4740" fg:w="1"/><text x="56.1990%" y="719.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.01%)</title><rect x="55.9490%" y="693" width="0.0118%" height="15" fill="rgb(249,146,41)" fg:x="4740" fg:w="1"/><text x="56.1990%" y="703.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.01%)</title><rect x="55.9490%" y="677" width="0.0118%" height="15" fill="rgb(213,208,4)" fg:x="4740" fg:w="1"/><text x="56.1990%" y="687.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.01%)</title><rect x="55.9490%" y="661" width="0.0118%" height="15" fill="rgb(245,84,36)" fg:x="4740" fg:w="1"/><text x="56.1990%" y="671.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get_mut (23 samples, 0.27%)</title><rect x="55.7011%" y="789" width="0.2715%" height="15" fill="rgb(254,84,18)" fg:x="4719" fg:w="23"/><text x="55.9511%" y="799.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (22 samples, 0.26%)</title><rect x="55.7129%" y="773" width="0.2597%" height="15" fill="rgb(225,38,54)" fg:x="4720" fg:w="22"/><text x="55.9629%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (4 samples, 0.05%)</title><rect x="55.9254%" y="757" width="0.0472%" height="15" fill="rgb(246,50,30)" fg:x="4738" fg:w="4"/><text x="56.1754%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.05%)</title><rect x="55.9254%" y="741" width="0.0472%" height="15" fill="rgb(246,148,9)" fg:x="4738" fg:w="4"/><text x="56.1754%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.01%)</title><rect x="55.9608%" y="725" width="0.0118%" height="15" fill="rgb(223,75,4)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="55.9608%" y="709" width="0.0118%" height="15" fill="rgb(239,148,41)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="55.9608%" y="693" width="0.0118%" height="15" fill="rgb(205,195,3)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="55.9608%" y="677" width="0.0118%" height="15" fill="rgb(254,161,1)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.01%)</title><rect x="55.9608%" y="661" width="0.0118%" height="15" fill="rgb(211,229,8)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="671.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="55.9608%" y="645" width="0.0118%" height="15" fill="rgb(220,97,9)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="55.9608%" y="629" width="0.0118%" height="15" fill="rgb(240,218,8)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="55.9608%" y="613" width="0.0118%" height="15" fill="rgb(250,44,0)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="55.9608%" y="597" width="0.0118%" height="15" fill="rgb(236,41,53)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="55.9608%" y="581" width="0.0118%" height="15" fill="rgb(218,227,13)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="591.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="55.9608%" y="565" width="0.0118%" height="15" fill="rgb(217,94,32)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="575.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="55.9608%" y="549" width="0.0118%" height="15" fill="rgb(213,217,12)" fg:x="4741" fg:w="1"/><text x="56.2108%" y="559.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.9726%" y="709" width="0.0590%" height="15" fill="rgb(229,13,46)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.9726%" y="693" width="0.0590%" height="15" fill="rgb(243,139,5)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="55.9726%" y="677" width="0.0590%" height="15" fill="rgb(249,38,45)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="55.9726%" y="661" width="0.0590%" height="15" fill="rgb(216,70,11)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="55.9726%" y="645" width="0.0590%" height="15" fill="rgb(253,101,25)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="55.9726%" y="629" width="0.0590%" height="15" fill="rgb(207,197,30)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="55.9726%" y="613" width="0.0590%" height="15" fill="rgb(238,87,13)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="55.9726%" y="597" width="0.0590%" height="15" fill="rgb(215,155,8)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="55.9726%" y="581" width="0.0590%" height="15" fill="rgb(239,166,38)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="55.9726%" y="565" width="0.0590%" height="15" fill="rgb(240,194,35)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="575.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="55.9726%" y="549" width="0.0590%" height="15" fill="rgb(219,10,44)" fg:x="4742" fg:w="5"/><text x="56.2226%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (7 samples, 0.08%)</title><rect x="56.0316%" y="709" width="0.0826%" height="15" fill="rgb(251,220,35)" fg:x="4747" fg:w="7"/><text x="56.2816%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7 samples, 0.08%)</title><rect x="56.0316%" y="693" width="0.0826%" height="15" fill="rgb(218,117,13)" fg:x="4747" fg:w="7"/><text x="56.2816%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="56.1143%" y="693" width="0.0118%" height="15" fill="rgb(221,213,40)" fg:x="4754" fg:w="1"/><text x="56.3643%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="56.1143%" y="677" width="0.0118%" height="15" fill="rgb(251,224,35)" fg:x="4754" fg:w="1"/><text x="56.3643%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (14 samples, 0.17%)</title><rect x="55.9726%" y="757" width="0.1653%" height="15" fill="rgb(241,33,39)" fg:x="4742" fg:w="14"/><text x="56.2226%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (14 samples, 0.17%)</title><rect x="55.9726%" y="741" width="0.1653%" height="15" fill="rgb(222,74,17)" fg:x="4742" fg:w="14"/><text x="56.2226%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (14 samples, 0.17%)</title><rect x="55.9726%" y="725" width="0.1653%" height="15" fill="rgb(225,103,0)" fg:x="4742" fg:w="14"/><text x="56.2226%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (2 samples, 0.02%)</title><rect x="56.1143%" y="709" width="0.0236%" height="15" fill="rgb(240,0,12)" fg:x="4754" fg:w="2"/><text x="56.3643%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.01%)</title><rect x="56.1261%" y="693" width="0.0118%" height="15" fill="rgb(233,213,37)" fg:x="4755" fg:w="1"/><text x="56.3761%" y="703.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.01%)</title><rect x="56.1261%" y="677" width="0.0118%" height="15" fill="rgb(225,84,52)" fg:x="4755" fg:w="1"/><text x="56.3761%" y="687.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.01%)</title><rect x="56.1261%" y="661" width="0.0118%" height="15" fill="rgb(247,160,51)" fg:x="4755" fg:w="1"/><text x="56.3761%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.01%)</title><rect x="56.1261%" y="645" width="0.0118%" height="15" fill="rgb(244,60,51)" fg:x="4755" fg:w="1"/><text x="56.3761%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="56.1379%" y="757" width="0.0708%" height="15" fill="rgb(233,114,7)" fg:x="4756" fg:w="6"/><text x="56.3879%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="56.1379%" y="741" width="0.0708%" height="15" fill="rgb(246,136,16)" fg:x="4756" fg:w="6"/><text x="56.3879%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (6 samples, 0.07%)</title><rect x="56.1379%" y="725" width="0.0708%" height="15" fill="rgb(243,114,45)" fg:x="4756" fg:w="6"/><text x="56.3879%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.07%)</title><rect x="56.1379%" y="709" width="0.0708%" height="15" fill="rgb(247,183,43)" fg:x="4756" fg:w="6"/><text x="56.3879%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.07%)</title><rect x="56.1379%" y="693" width="0.0708%" height="15" fill="rgb(251,210,42)" fg:x="4756" fg:w="6"/><text x="56.3879%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="56.2087%" y="757" width="0.0708%" height="15" fill="rgb(221,88,35)" fg:x="4762" fg:w="6"/><text x="56.4587%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="56.2087%" y="741" width="0.0708%" height="15" fill="rgb(242,21,20)" fg:x="4762" fg:w="6"/><text x="56.4587%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (6 samples, 0.07%)</title><rect x="56.2087%" y="725" width="0.0708%" height="15" fill="rgb(233,226,36)" fg:x="4762" fg:w="6"/><text x="56.4587%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.07%)</title><rect x="56.2087%" y="709" width="0.0708%" height="15" fill="rgb(243,189,34)" fg:x="4762" fg:w="6"/><text x="56.4587%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.07%)</title><rect x="56.2087%" y="693" width="0.0708%" height="15" fill="rgb(207,145,50)" fg:x="4762" fg:w="6"/><text x="56.4587%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.2795%" y="629" width="0.0118%" height="15" fill="rgb(242,1,50)" fg:x="4768" fg:w="1"/><text x="56.5295%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.2795%" y="613" width="0.0118%" height="15" fill="rgb(231,65,32)" fg:x="4768" fg:w="1"/><text x="56.5295%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.2795%" y="597" width="0.0118%" height="15" fill="rgb(208,68,49)" fg:x="4768" fg:w="1"/><text x="56.5295%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="56.2795%" y="581" width="0.0118%" height="15" fill="rgb(253,54,49)" fg:x="4768" fg:w="1"/><text x="56.5295%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="56.2795%" y="725" width="0.0236%" height="15" fill="rgb(245,186,24)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="56.2795%" y="709" width="0.0236%" height="15" fill="rgb(209,2,41)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="719.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="56.2795%" y="693" width="0.0236%" height="15" fill="rgb(242,208,54)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="56.2795%" y="677" width="0.0236%" height="15" fill="rgb(225,9,51)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="687.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="56.2795%" y="661" width="0.0236%" height="15" fill="rgb(207,207,25)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="56.2795%" y="645" width="0.0236%" height="15" fill="rgb(253,96,18)" fg:x="4768" fg:w="2"/><text x="56.5295%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="56.2913%" y="629" width="0.0118%" height="15" fill="rgb(252,215,20)" fg:x="4769" fg:w="1"/><text x="56.5413%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="56.3031%" y="677" width="0.0118%" height="15" fill="rgb(245,227,26)" fg:x="4770" fg:w="1"/><text x="56.5531%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="56.3031%" y="725" width="0.0354%" height="15" fill="rgb(241,208,0)" fg:x="4770" fg:w="3"/><text x="56.5531%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="56.3031%" y="709" width="0.0354%" height="15" fill="rgb(224,130,10)" fg:x="4770" fg:w="3"/><text x="56.5531%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="56.3031%" y="693" width="0.0354%" height="15" fill="rgb(237,29,0)" fg:x="4770" fg:w="3"/><text x="56.5531%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="56.3149%" y="677" width="0.0236%" height="15" fill="rgb(219,27,41)" fg:x="4771" fg:w="2"/><text x="56.5649%" y="687.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="56.2795%" y="741" width="0.0708%" height="15" fill="rgb(245,101,19)" fg:x="4768" fg:w="6"/><text x="56.5295%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="56.3385%" y="725" width="0.0118%" height="15" fill="rgb(243,44,37)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="735.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="56.3385%" y="709" width="0.0118%" height="15" fill="rgb(228,213,43)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="56.3385%" y="693" width="0.0118%" height="15" fill="rgb(219,163,21)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3385%" y="677" width="0.0118%" height="15" fill="rgb(234,86,24)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3385%" y="661" width="0.0118%" height="15" fill="rgb(225,10,24)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3385%" y="645" width="0.0118%" height="15" fill="rgb(218,109,7)" fg:x="4773" fg:w="1"/><text x="56.5885%" y="655.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (7 samples, 0.08%)</title><rect x="56.2795%" y="757" width="0.0826%" height="15" fill="rgb(210,20,26)" fg:x="4768" fg:w="7"/><text x="56.5295%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="56.3503%" y="741" width="0.0118%" height="15" fill="rgb(216,18,1)" fg:x="4774" fg:w="1"/><text x="56.6003%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="56.3503%" y="725" width="0.0118%" height="15" fill="rgb(206,163,23)" fg:x="4774" fg:w="1"/><text x="56.6003%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3503%" y="709" width="0.0118%" height="15" fill="rgb(229,150,31)" fg:x="4774" fg:w="1"/><text x="56.6003%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3503%" y="693" width="0.0118%" height="15" fill="rgb(231,10,5)" fg:x="4774" fg:w="1"/><text x="56.6003%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.3503%" y="677" width="0.0118%" height="15" fill="rgb(250,40,50)" fg:x="4774" fg:w="1"/><text x="56.6003%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="56.3975%" y="741" width="0.0118%" height="15" fill="rgb(217,119,7)" fg:x="4778" fg:w="1"/><text x="56.6475%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="56.4093%" y="709" width="0.0118%" height="15" fill="rgb(245,214,40)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="56.4093%" y="693" width="0.0118%" height="15" fill="rgb(216,187,1)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="56.4093%" y="677" width="0.0118%" height="15" fill="rgb(237,146,21)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="56.4093%" y="661" width="0.0118%" height="15" fill="rgb(210,174,47)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="56.4093%" y="645" width="0.0118%" height="15" fill="rgb(218,111,39)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="56.4093%" y="629" width="0.0118%" height="15" fill="rgb(224,95,19)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4093%" y="613" width="0.0118%" height="15" fill="rgb(234,15,38)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4093%" y="597" width="0.0118%" height="15" fill="rgb(246,56,12)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4093%" y="581" width="0.0118%" height="15" fill="rgb(247,16,17)" fg:x="4779" fg:w="1"/><text x="56.6593%" y="591.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="56.4093%" y="725" width="0.0236%" height="15" fill="rgb(215,151,11)" fg:x="4779" fg:w="2"/><text x="56.6593%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4212%" y="709" width="0.0118%" height="15" fill="rgb(225,16,24)" fg:x="4780" fg:w="1"/><text x="56.6712%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4212%" y="693" width="0.0118%" height="15" fill="rgb(217,117,5)" fg:x="4780" fg:w="1"/><text x="56.6712%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="56.4212%" y="677" width="0.0118%" height="15" fill="rgb(246,187,53)" fg:x="4780" fg:w="1"/><text x="56.6712%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="56.4093%" y="741" width="0.0472%" height="15" fill="rgb(241,71,40)" fg:x="4779" fg:w="4"/><text x="56.6593%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="56.4330%" y="725" width="0.0236%" height="15" fill="rgb(231,67,39)" fg:x="4781" fg:w="2"/><text x="56.6830%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="56.4330%" y="709" width="0.0236%" height="15" fill="rgb(222,120,24)" fg:x="4781" fg:w="2"/><text x="56.6830%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="56.4330%" y="693" width="0.0236%" height="15" fill="rgb(248,3,3)" fg:x="4781" fg:w="2"/><text x="56.6830%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="56.4330%" y="677" width="0.0236%" height="15" fill="rgb(228,218,5)" fg:x="4781" fg:w="2"/><text x="56.6830%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="56.4448%" y="661" width="0.0118%" height="15" fill="rgb(212,202,43)" fg:x="4782" fg:w="1"/><text x="56.6948%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="56.4684%" y="661" width="0.0118%" height="15" fill="rgb(235,183,2)" fg:x="4784" fg:w="1"/><text x="56.7184%" y="671.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.01%)</title><rect x="56.4684%" y="645" width="0.0118%" height="15" fill="rgb(230,165,10)" fg:x="4784" fg:w="1"/><text x="56.7184%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="56.4684%" y="629" width="0.0118%" height="15" fill="rgb(219,54,40)" fg:x="4784" fg:w="1"/><text x="56.7184%" y="639.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="56.5392%" y="517" width="0.0118%" height="15" fill="rgb(244,73,9)" fg:x="4790" fg:w="1"/><text x="56.7892%" y="527.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="56.5392%" y="501" width="0.0118%" height="15" fill="rgb(212,32,45)" fg:x="4790" fg:w="1"/><text x="56.7892%" y="511.50"></text></g><g><title>__mem_cgroup_charge (7 samples, 0.08%)</title><rect x="56.5156%" y="533" width="0.0826%" height="15" fill="rgb(205,58,31)" fg:x="4788" fg:w="7"/><text x="56.7656%" y="543.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.05%)</title><rect x="56.5510%" y="517" width="0.0472%" height="15" fill="rgb(250,120,43)" fg:x="4791" fg:w="4"/><text x="56.8010%" y="527.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="56.5982%" y="533" width="0.0118%" height="15" fill="rgb(235,13,10)" fg:x="4795" fg:w="1"/><text x="56.8482%" y="543.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="56.6100%" y="533" width="0.0236%" height="15" fill="rgb(232,219,31)" fg:x="4796" fg:w="2"/><text x="56.8600%" y="543.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="56.6100%" y="517" width="0.0236%" height="15" fill="rgb(218,157,51)" fg:x="4796" fg:w="2"/><text x="56.8600%" y="527.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="56.6100%" y="501" width="0.0236%" height="15" fill="rgb(211,91,52)" fg:x="4796" fg:w="2"/><text x="56.8600%" y="511.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="56.6100%" y="485" width="0.0236%" height="15" fill="rgb(240,173,1)" fg:x="4796" fg:w="2"/><text x="56.8600%" y="495.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="56.6100%" y="469" width="0.0236%" height="15" fill="rgb(248,20,47)" fg:x="4796" fg:w="2"/><text x="56.8600%" y="479.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="56.6218%" y="453" width="0.0118%" height="15" fill="rgb(217,221,40)" fg:x="4797" fg:w="1"/><text x="56.8718%" y="463.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="56.6218%" y="437" width="0.0118%" height="15" fill="rgb(226,149,51)" fg:x="4797" fg:w="1"/><text x="56.8718%" y="447.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="56.6336%" y="533" width="0.0118%" height="15" fill="rgb(252,193,7)" fg:x="4798" fg:w="1"/><text x="56.8836%" y="543.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="56.6336%" y="517" width="0.0118%" height="15" fill="rgb(205,123,0)" fg:x="4798" fg:w="1"/><text x="56.8836%" y="527.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="56.6336%" y="501" width="0.0118%" height="15" fill="rgb(233,173,25)" fg:x="4798" fg:w="1"/><text x="56.8836%" y="511.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="56.6336%" y="485" width="0.0118%" height="15" fill="rgb(216,63,32)" fg:x="4798" fg:w="1"/><text x="56.8836%" y="495.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.04%)</title><rect x="56.6454%" y="533" width="0.0354%" height="15" fill="rgb(209,56,45)" fg:x="4799" fg:w="3"/><text x="56.8954%" y="543.50"></text></g><g><title>__cond_resched (5 samples, 0.06%)</title><rect x="56.6808%" y="485" width="0.0590%" height="15" fill="rgb(226,111,49)" fg:x="4802" fg:w="5"/><text x="56.9308%" y="495.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="56.6808%" y="469" width="0.0590%" height="15" fill="rgb(244,181,21)" fg:x="4802" fg:w="5"/><text x="56.9308%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="56.6808%" y="453" width="0.0590%" height="15" fill="rgb(222,126,15)" fg:x="4802" fg:w="5"/><text x="56.9308%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="56.6808%" y="437" width="0.0590%" height="15" fill="rgb(222,95,17)" fg:x="4802" fg:w="5"/><text x="56.9308%" y="447.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="56.6808%" y="421" width="0.0590%" height="15" fill="rgb(254,46,5)" fg:x="4802" fg:w="5"/><text x="56.9308%" y="431.50"></text></g><g><title>handle_mm_fault (25 samples, 0.30%)</title><rect x="56.4920%" y="597" width="0.2951%" height="15" fill="rgb(236,216,35)" fg:x="4786" fg:w="25"/><text x="56.7420%" y="607.50"></text></g><g><title>__handle_mm_fault (25 samples, 0.30%)</title><rect x="56.4920%" y="581" width="0.2951%" height="15" fill="rgb(217,187,26)" fg:x="4786" fg:w="25"/><text x="56.7420%" y="591.50"></text></g><g><title>handle_pte_fault (24 samples, 0.28%)</title><rect x="56.5038%" y="565" width="0.2833%" height="15" fill="rgb(207,192,25)" fg:x="4787" fg:w="24"/><text x="56.7538%" y="575.50"></text></g><g><title>do_anonymous_page (24 samples, 0.28%)</title><rect x="56.5038%" y="549" width="0.2833%" height="15" fill="rgb(253,135,27)" fg:x="4787" fg:w="24"/><text x="56.7538%" y="559.50"></text></g><g><title>vma_alloc_folio (9 samples, 0.11%)</title><rect x="56.6808%" y="533" width="0.1062%" height="15" fill="rgb(211,122,29)" fg:x="4802" fg:w="9"/><text x="56.9308%" y="543.50"></text></g><g><title>__folio_alloc (9 samples, 0.11%)</title><rect x="56.6808%" y="517" width="0.1062%" height="15" fill="rgb(233,162,40)" fg:x="4802" fg:w="9"/><text x="56.9308%" y="527.50"></text></g><g><title>__alloc_pages (9 samples, 0.11%)</title><rect x="56.6808%" y="501" width="0.1062%" height="15" fill="rgb(222,184,47)" fg:x="4802" fg:w="9"/><text x="56.9308%" y="511.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.05%)</title><rect x="56.7398%" y="485" width="0.0472%" height="15" fill="rgb(249,99,23)" fg:x="4807" fg:w="4"/><text x="56.9898%" y="495.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="56.7635%" y="469" width="0.0236%" height="15" fill="rgb(214,60,12)" fg:x="4809" fg:w="2"/><text x="57.0135%" y="479.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="56.7753%" y="453" width="0.0118%" height="15" fill="rgb(250,229,36)" fg:x="4810" fg:w="1"/><text x="57.0253%" y="463.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="56.7753%" y="437" width="0.0118%" height="15" fill="rgb(232,195,10)" fg:x="4810" fg:w="1"/><text x="57.0253%" y="447.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="56.8225%" y="501" width="0.0118%" height="15" fill="rgb(205,213,31)" fg:x="4814" fg:w="1"/><text x="57.0725%" y="511.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="56.9051%" y="469" width="0.0590%" height="15" fill="rgb(237,43,8)" fg:x="4821" fg:w="5"/><text x="57.1551%" y="479.50"></text></g><g><title>perf_ctx_enable (12 samples, 0.14%)</title><rect x="56.9641%" y="469" width="0.1416%" height="15" fill="rgb(216,208,3)" fg:x="4826" fg:w="12"/><text x="57.2141%" y="479.50"></text></g><g><title>x86_pmu_enable (8 samples, 0.09%)</title><rect x="57.0113%" y="453" width="0.0944%" height="15" fill="rgb(228,179,44)" fg:x="4830" fg:w="8"/><text x="57.2613%" y="463.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="57.1058%" y="469" width="0.0472%" height="15" fill="rgb(230,192,27)" fg:x="4838" fg:w="4"/><text x="57.3558%" y="479.50"></text></g><g><title>lock_mm_and_find_vma (35 samples, 0.41%)</title><rect x="56.7871%" y="597" width="0.4131%" height="15" fill="rgb(251,30,38)" fg:x="4811" fg:w="35"/><text x="57.0371%" y="607.50"></text></g><g><title>down_read_killable (35 samples, 0.41%)</title><rect x="56.7871%" y="581" width="0.4131%" height="15" fill="rgb(246,55,52)" fg:x="4811" fg:w="35"/><text x="57.0371%" y="591.50"></text></g><g><title>rwsem_down_read_slowpath (35 samples, 0.41%)</title><rect x="56.7871%" y="565" width="0.4131%" height="15" fill="rgb(249,79,26)" fg:x="4811" fg:w="35"/><text x="57.0371%" y="575.50"></text></g><g><title>schedule_preempt_disabled (33 samples, 0.39%)</title><rect x="56.8107%" y="549" width="0.3895%" height="15" fill="rgb(220,202,16)" fg:x="4813" fg:w="33"/><text x="57.0607%" y="559.50"></text></g><g><title>schedule (32 samples, 0.38%)</title><rect x="56.8225%" y="533" width="0.3777%" height="15" fill="rgb(250,170,23)" fg:x="4814" fg:w="32"/><text x="57.0725%" y="543.50"></text></g><g><title>__schedule (32 samples, 0.38%)</title><rect x="56.8225%" y="517" width="0.3777%" height="15" fill="rgb(230,7,37)" fg:x="4814" fg:w="32"/><text x="57.0725%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (31 samples, 0.37%)</title><rect x="56.8343%" y="501" width="0.3659%" height="15" fill="rgb(213,71,1)" fg:x="4815" fg:w="31"/><text x="57.0843%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (26 samples, 0.31%)</title><rect x="56.8933%" y="485" width="0.3069%" height="15" fill="rgb(227,87,39)" fg:x="4820" fg:w="26"/><text x="57.1433%" y="495.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="57.1530%" y="469" width="0.0472%" height="15" fill="rgb(210,41,29)" fg:x="4842" fg:w="4"/><text x="57.4030%" y="479.50"></text></g><g><title>do_user_addr_fault (61 samples, 0.72%)</title><rect x="56.4920%" y="613" width="0.7200%" height="15" fill="rgb(206,191,31)" fg:x="4786" fg:w="61"/><text x="56.7420%" y="623.50"></text></g><g><title>lock_vma_under_rcu (1 samples, 0.01%)</title><rect x="57.2002%" y="597" width="0.0118%" height="15" fill="rgb(247,75,54)" fg:x="4846" fg:w="1"/><text x="57.4502%" y="607.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="57.2002%" y="581" width="0.0118%" height="15" fill="rgb(208,54,50)" fg:x="4846" fg:w="1"/><text x="57.4502%" y="591.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="57.2002%" y="565" width="0.0118%" height="15" fill="rgb(214,90,37)" fg:x="4846" fg:w="1"/><text x="57.4502%" y="575.50"></text></g><g><title>asm_exc_page_fault (67 samples, 0.79%)</title><rect x="56.4802%" y="645" width="0.7908%" height="15" fill="rgb(220,132,6)" fg:x="4785" fg:w="67"/><text x="56.7302%" y="655.50"></text></g><g><title>exc_page_fault (66 samples, 0.78%)</title><rect x="56.4920%" y="629" width="0.7790%" height="15" fill="rgb(213,167,7)" fg:x="4786" fg:w="66"/><text x="56.7420%" y="639.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="57.2120%" y="613" width="0.0590%" height="15" fill="rgb(243,36,27)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="57.2120%" y="597" width="0.0590%" height="15" fill="rgb(235,147,12)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="607.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="57.2120%" y="581" width="0.0590%" height="15" fill="rgb(212,198,44)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="591.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="57.2120%" y="565" width="0.0590%" height="15" fill="rgb(218,68,50)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="575.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="57.2120%" y="549" width="0.0590%" height="15" fill="rgb(224,79,48)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="559.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="57.2120%" y="533" width="0.0590%" height="15" fill="rgb(213,191,50)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="57.2120%" y="517" width="0.0590%" height="15" fill="rgb(254,146,10)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="57.2120%" y="501" width="0.0590%" height="15" fill="rgb(215,175,11)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="511.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="57.2120%" y="485" width="0.0590%" height="15" fill="rgb(207,49,7)" fg:x="4847" fg:w="5"/><text x="57.4620%" y="495.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="57.2710%" y="645" width="0.0590%" height="15" fill="rgb(234,144,29)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="655.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="57.2710%" y="629" width="0.0590%" height="15" fill="rgb(213,222,48)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="639.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="57.2710%" y="613" width="0.0590%" height="15" fill="rgb(222,8,6)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="57.2710%" y="597" width="0.0590%" height="15" fill="rgb(221,114,49)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="607.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="57.2710%" y="581" width="0.0590%" height="15" fill="rgb(250,140,42)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="591.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="57.2710%" y="565" width="0.0590%" height="15" fill="rgb(250,150,27)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="575.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="57.2710%" y="549" width="0.0590%" height="15" fill="rgb(252,159,3)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="559.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="57.2710%" y="533" width="0.0590%" height="15" fill="rgb(241,182,3)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="57.2710%" y="517" width="0.0590%" height="15" fill="rgb(236,3,9)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="527.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="57.2710%" y="501" width="0.0590%" height="15" fill="rgb(223,227,51)" fg:x="4852" fg:w="5"/><text x="57.5210%" y="511.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="57.3300%" y="645" width="0.0118%" height="15" fill="rgb(232,133,30)" fg:x="4857" fg:w="1"/><text x="57.5800%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.89%)</title><rect x="56.4802%" y="661" width="0.8853%" height="15" fill="rgb(209,93,27)" fg:x="4785" fg:w="75"/><text x="56.7302%" y="671.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="57.3418%" y="645" width="0.0236%" height="15" fill="rgb(208,108,34)" fg:x="4858" fg:w="2"/><text x="57.5918%" y="655.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="57.3654%" y="421" width="0.0118%" height="15" fill="rgb(215,189,13)" fg:x="4860" fg:w="1"/><text x="57.6154%" y="431.50"></text></g><g><title>__GI___lll_lock_wake_private (5 samples, 0.06%)</title><rect x="57.3654%" y="549" width="0.0590%" height="15" fill="rgb(206,88,23)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="57.3654%" y="533" width="0.0590%" height="15" fill="rgb(240,173,0)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="543.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="57.3654%" y="517" width="0.0590%" height="15" fill="rgb(223,106,52)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="527.50"></text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="57.3654%" y="501" width="0.0590%" height="15" fill="rgb(206,130,16)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="511.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="57.3654%" y="485" width="0.0590%" height="15" fill="rgb(220,54,25)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="495.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="57.3654%" y="469" width="0.0590%" height="15" fill="rgb(210,4,38)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="479.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="57.3654%" y="453" width="0.0590%" height="15" fill="rgb(238,94,39)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="463.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="57.3654%" y="437" width="0.0590%" height="15" fill="rgb(234,124,34)" fg:x="4860" fg:w="5"/><text x="57.6154%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="57.3772%" y="421" width="0.0472%" height="15" fill="rgb(221,91,40)" fg:x="4861" fg:w="4"/><text x="57.6272%" y="431.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="57.3772%" y="405" width="0.0472%" height="15" fill="rgb(246,53,28)" fg:x="4861" fg:w="4"/><text x="57.6272%" y="415.50"></text></g><g><title>lru_add_drain (1 samples, 0.01%)</title><rect x="57.4245%" y="421" width="0.0118%" height="15" fill="rgb(229,109,7)" fg:x="4865" fg:w="1"/><text x="57.6745%" y="431.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.01%)</title><rect x="57.4245%" y="405" width="0.0118%" height="15" fill="rgb(249,117,8)" fg:x="4865" fg:w="1"/><text x="57.6745%" y="415.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="57.4245%" y="389" width="0.0118%" height="15" fill="rgb(210,181,1)" fg:x="4865" fg:w="1"/><text x="57.6745%" y="399.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="57.4245%" y="373" width="0.0118%" height="15" fill="rgb(211,66,1)" fg:x="4865" fg:w="1"/><text x="57.6745%" y="383.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="57.4245%" y="357" width="0.0118%" height="15" fill="rgb(221,90,14)" fg:x="4865" fg:w="1"/><text x="57.6745%" y="367.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.01%)</title><rect x="57.4363%" y="405" width="0.0118%" height="15" fill="rgb(219,222,44)" fg:x="4866" fg:w="1"/><text x="57.6863%" y="415.50"></text></g><g><title>native_flush_tlb_multi (1 samples, 0.01%)</title><rect x="57.4363%" y="389" width="0.0118%" height="15" fill="rgb(246,34,33)" fg:x="4866" fg:w="1"/><text x="57.6863%" y="399.50"></text></g><g><title>on_each_cpu_cond_mask (1 samples, 0.01%)</title><rect x="57.4363%" y="373" width="0.0118%" height="15" fill="rgb(227,135,41)" fg:x="4866" fg:w="1"/><text x="57.6863%" y="383.50"></text></g><g><title>smp_call_function_many_cond (1 samples, 0.01%)</title><rect x="57.4363%" y="357" width="0.0118%" height="15" fill="rgb(226,15,14)" fg:x="4866" fg:w="1"/><text x="57.6863%" y="367.50"></text></g><g><title>__GI_munmap (7 samples, 0.08%)</title><rect x="57.4245%" y="549" width="0.0826%" height="15" fill="rgb(236,148,47)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="57.4245%" y="533" width="0.0826%" height="15" fill="rgb(233,162,52)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="543.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="57.4245%" y="517" width="0.0826%" height="15" fill="rgb(244,35,28)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="527.50"></text></g><g><title>__x64_sys_munmap (7 samples, 0.08%)</title><rect x="57.4245%" y="501" width="0.0826%" height="15" fill="rgb(205,121,10)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="511.50"></text></g><g><title>__vm_munmap (7 samples, 0.08%)</title><rect x="57.4245%" y="485" width="0.0826%" height="15" fill="rgb(250,58,18)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="495.50"></text></g><g><title>do_vmi_munmap (7 samples, 0.08%)</title><rect x="57.4245%" y="469" width="0.0826%" height="15" fill="rgb(216,37,13)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="479.50"></text></g><g><title>do_vmi_align_munmap (7 samples, 0.08%)</title><rect x="57.4245%" y="453" width="0.0826%" height="15" fill="rgb(221,215,42)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="463.50"></text></g><g><title>unmap_region (7 samples, 0.08%)</title><rect x="57.4245%" y="437" width="0.0826%" height="15" fill="rgb(217,214,19)" fg:x="4865" fg:w="7"/><text x="57.6745%" y="447.50"></text></g><g><title>tlb_finish_mmu (6 samples, 0.07%)</title><rect x="57.4363%" y="421" width="0.0708%" height="15" fill="rgb(233,139,13)" fg:x="4866" fg:w="6"/><text x="57.6863%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (5 samples, 0.06%)</title><rect x="57.4481%" y="405" width="0.0590%" height="15" fill="rgb(247,168,23)" fg:x="4867" fg:w="5"/><text x="57.6981%" y="415.50"></text></g><g><title>__cond_resched (4 samples, 0.05%)</title><rect x="57.4599%" y="389" width="0.0472%" height="15" fill="rgb(207,202,1)" fg:x="4868" fg:w="4"/><text x="57.7099%" y="399.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="57.4599%" y="373" width="0.0472%" height="15" fill="rgb(220,155,48)" fg:x="4868" fg:w="4"/><text x="57.7099%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="57.4599%" y="357" width="0.0472%" height="15" fill="rgb(250,43,26)" fg:x="4868" fg:w="4"/><text x="57.7099%" y="367.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="57.4599%" y="341" width="0.0472%" height="15" fill="rgb(212,190,23)" fg:x="4868" fg:w="4"/><text x="57.7099%" y="351.50"></text></g><g><title>perf_ctx_enable (8 samples, 0.09%)</title><rect x="57.6605%" y="341" width="0.0944%" height="15" fill="rgb(216,39,24)" fg:x="4885" fg:w="8"/><text x="57.9105%" y="351.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="57.7077%" y="325" width="0.0472%" height="15" fill="rgb(252,113,16)" fg:x="4889" fg:w="4"/><text x="57.9577%" y="335.50"></text></g><g><title>__perf_event_task_sched_in (21 samples, 0.25%)</title><rect x="57.5543%" y="357" width="0.2479%" height="15" fill="rgb(208,113,19)" fg:x="4876" fg:w="21"/><text x="57.8043%" y="367.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="57.7550%" y="341" width="0.0472%" height="15" fill="rgb(234,107,25)" fg:x="4893" fg:w="4"/><text x="58.0050%" y="351.50"></text></g><g><title>_raw_spin_unlock (15 samples, 0.18%)</title><rect x="57.8022%" y="357" width="0.1771%" height="15" fill="rgb(234,217,51)" fg:x="4897" fg:w="15"/><text x="58.0522%" y="367.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="57.9792%" y="357" width="0.0118%" height="15" fill="rgb(251,29,42)" fg:x="4912" fg:w="1"/><text x="58.2292%" y="367.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="57.9792%" y="341" width="0.0118%" height="15" fill="rgb(221,62,51)" fg:x="4912" fg:w="1"/><text x="58.2292%" y="351.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="57.9792%" y="325" width="0.0118%" height="15" fill="rgb(240,192,43)" fg:x="4912" fg:w="1"/><text x="58.2292%" y="335.50"></text></g><g><title>finish_task_switch.isra.0 (42 samples, 0.50%)</title><rect x="57.5425%" y="373" width="0.4958%" height="15" fill="rgb(224,157,47)" fg:x="4875" fg:w="42"/><text x="57.7925%" y="383.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="57.9910%" y="357" width="0.0472%" height="15" fill="rgb(226,84,45)" fg:x="4913" fg:w="4"/><text x="58.2410%" y="367.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="58.0382%" y="325" width="0.0118%" height="15" fill="rgb(208,207,23)" fg:x="4917" fg:w="1"/><text x="58.2882%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;allocator_api2::stable::alloc::global::Global&gt;::{{closure}}&gt;&gt; (59 samples, 0.70%)</title><rect x="57.3654%" y="661" width="0.6964%" height="15" fill="rgb(253,34,51)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="671.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.70%)</title><rect x="57.3654%" y="645" width="0.6964%" height="15" fill="rgb(227,26,34)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (59 samples, 0.70%)</title><rect x="57.3654%" y="629" width="0.6964%" height="15" fill="rgb(245,75,19)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (59 samples, 0.70%)</title><rect x="57.3654%" y="613" width="0.6964%" height="15" fill="rgb(250,191,31)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="623.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (59 samples, 0.70%)</title><rect x="57.3654%" y="597" width="0.6964%" height="15" fill="rgb(224,11,50)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.70%)</title><rect x="57.3654%" y="581" width="0.6964%" height="15" fill="rgb(231,171,7)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="591.50"></text></g><g><title>__GI___libc_free (59 samples, 0.70%)</title><rect x="57.3654%" y="565" width="0.6964%" height="15" fill="rgb(252,214,10)" fg:x="4860" fg:w="59"/><text x="57.6154%" y="575.50"></text></g><g><title>_int_free (47 samples, 0.55%)</title><rect x="57.5071%" y="549" width="0.5548%" height="15" fill="rgb(249,45,46)" fg:x="4872" fg:w="47"/><text x="57.7571%" y="559.50"></text></g><g><title>__GI___lll_lock_wait_private (47 samples, 0.55%)</title><rect x="57.5071%" y="533" width="0.5548%" height="15" fill="rgb(240,173,7)" fg:x="4872" fg:w="47"/><text x="57.7571%" y="543.50"></text></g><g><title>futex_wait (47 samples, 0.55%)</title><rect x="57.5071%" y="517" width="0.5548%" height="15" fill="rgb(235,214,13)" fg:x="4872" fg:w="47"/><text x="57.7571%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (47 samples, 0.55%)</title><rect x="57.5071%" y="501" width="0.5548%" height="15" fill="rgb(245,156,8)" fg:x="4872" fg:w="47"/><text x="57.7571%" y="511.50"></text></g><g><title>do_syscall_64 (47 samples, 0.55%)</title><rect x="57.5071%" y="485" width="0.5548%" height="15" fill="rgb(235,46,12)" fg:x="4872" fg:w="47"/><text x="57.7571%" y="495.50"></text></g><g><title>__x64_sys_futex (46 samples, 0.54%)</title><rect x="57.5189%" y="469" width="0.5430%" height="15" fill="rgb(221,81,14)" fg:x="4873" fg:w="46"/><text x="57.7689%" y="479.50"></text></g><g><title>do_futex (46 samples, 0.54%)</title><rect x="57.5189%" y="453" width="0.5430%" height="15" fill="rgb(238,207,9)" fg:x="4873" fg:w="46"/><text x="57.7689%" y="463.50"></text></g><g><title>futex_wait (46 samples, 0.54%)</title><rect x="57.5189%" y="437" width="0.5430%" height="15" fill="rgb(224,129,35)" fg:x="4873" fg:w="46"/><text x="57.7689%" y="447.50"></text></g><g><title>futex_wait_queue (46 samples, 0.54%)</title><rect x="57.5189%" y="421" width="0.5430%" height="15" fill="rgb(243,218,34)" fg:x="4873" fg:w="46"/><text x="57.7689%" y="431.50"></text></g><g><title>schedule (46 samples, 0.54%)</title><rect x="57.5189%" y="405" width="0.5430%" height="15" fill="rgb(220,166,13)" fg:x="4873" fg:w="46"/><text x="57.7689%" y="415.50"></text></g><g><title>__schedule (44 samples, 0.52%)</title><rect x="57.5425%" y="389" width="0.5194%" height="15" fill="rgb(227,167,49)" fg:x="4875" fg:w="44"/><text x="57.7925%" y="399.50"></text></g><g><title>pick_next_task (2 samples, 0.02%)</title><rect x="58.0382%" y="373" width="0.0236%" height="15" fill="rgb(234,142,12)" fg:x="4917" fg:w="2"/><text x="58.2882%" y="383.50"></text></g><g><title>pick_next_task_fair (2 samples, 0.02%)</title><rect x="58.0382%" y="357" width="0.0236%" height="15" fill="rgb(207,100,48)" fg:x="4917" fg:w="2"/><text x="58.2882%" y="367.50"></text></g><g><title>newidle_balance (2 samples, 0.02%)</title><rect x="58.0382%" y="341" width="0.0236%" height="15" fill="rgb(210,25,14)" fg:x="4917" fg:w="2"/><text x="58.2882%" y="351.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="58.0500%" y="325" width="0.0118%" height="15" fill="rgb(246,116,27)" fg:x="4918" fg:w="1"/><text x="58.3000%" y="335.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="58.0500%" y="309" width="0.0118%" height="15" fill="rgb(214,193,42)" fg:x="4918" fg:w="1"/><text x="58.3000%" y="319.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.0737%" y="453" width="0.0590%" height="15" fill="rgb(214,122,8)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="463.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.0737%" y="437" width="0.0590%" height="15" fill="rgb(244,173,18)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="447.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="58.0737%" y="421" width="0.0590%" height="15" fill="rgb(232,68,19)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="431.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="58.0737%" y="405" width="0.0590%" height="15" fill="rgb(236,224,1)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="415.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="58.0737%" y="389" width="0.0590%" height="15" fill="rgb(240,11,8)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="399.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="58.0737%" y="373" width="0.0590%" height="15" fill="rgb(244,159,20)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="383.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="58.0737%" y="357" width="0.0590%" height="15" fill="rgb(240,223,54)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="367.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="58.0737%" y="341" width="0.0590%" height="15" fill="rgb(237,146,5)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="351.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="58.0737%" y="325" width="0.0590%" height="15" fill="rgb(218,221,32)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="335.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="58.0737%" y="309" width="0.0590%" height="15" fill="rgb(244,96,26)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="319.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="58.0737%" y="293" width="0.0590%" height="15" fill="rgb(245,184,37)" fg:x="4920" fg:w="5"/><text x="58.3237%" y="303.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="58.0737%" y="597" width="0.0708%" height="15" fill="rgb(248,91,47)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="58.0737%" y="581" width="0.0708%" height="15" fill="rgb(243,199,8)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="591.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="58.0737%" y="565" width="0.0708%" height="15" fill="rgb(249,12,15)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="58.0737%" y="549" width="0.0708%" height="15" fill="rgb(245,97,12)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="559.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.07%)</title><rect x="58.0737%" y="533" width="0.0708%" height="15" fill="rgb(244,61,1)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.07%)</title><rect x="58.0737%" y="517" width="0.0708%" height="15" fill="rgb(222,194,10)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="58.0737%" y="501" width="0.0708%" height="15" fill="rgb(226,178,8)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="58.0737%" y="485" width="0.0708%" height="15" fill="rgb(241,32,34)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="58.0737%" y="469" width="0.0708%" height="15" fill="rgb(254,26,6)" fg:x="4920" fg:w="6"/><text x="58.3237%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="58.1327%" y="453" width="0.0118%" height="15" fill="rgb(249,71,11)" fg:x="4925" fg:w="1"/><text x="58.3827%" y="463.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (8 samples, 0.09%)</title><rect x="58.0619%" y="613" width="0.0944%" height="15" fill="rgb(232,170,27)" fg:x="4919" fg:w="8"/><text x="58.3119%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="58.1445%" y="597" width="0.0118%" height="15" fill="rgb(214,223,17)" fg:x="4926" fg:w="1"/><text x="58.3945%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="58.1445%" y="581" width="0.0118%" height="15" fill="rgb(250,18,15)" fg:x="4926" fg:w="1"/><text x="58.3945%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="58.1445%" y="565" width="0.0118%" height="15" fill="rgb(212,153,51)" fg:x="4926" fg:w="1"/><text x="58.3945%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="58.1445%" y="549" width="0.0118%" height="15" fill="rgb(219,194,12)" fg:x="4926" fg:w="1"/><text x="58.3945%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (10 samples, 0.12%)</title><rect x="58.0619%" y="661" width="0.1180%" height="15" fill="rgb(212,58,17)" fg:x="4919" fg:w="10"/><text x="58.3119%" y="671.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (10 samples, 0.12%)</title><rect x="58.0619%" y="645" width="0.1180%" height="15" fill="rgb(254,5,10)" fg:x="4919" fg:w="10"/><text x="58.3119%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.12%)</title><rect x="58.0619%" y="629" width="0.1180%" height="15" fill="rgb(246,91,7)" fg:x="4919" fg:w="10"/><text x="58.3119%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="58.1563%" y="613" width="0.0236%" height="15" fill="rgb(218,108,49)" fg:x="4927" fg:w="2"/><text x="58.4063%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="58.1563%" y="597" width="0.0236%" height="15" fill="rgb(238,123,20)" fg:x="4927" fg:w="2"/><text x="58.4063%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="58.1563%" y="581" width="0.0236%" height="15" fill="rgb(231,69,23)" fg:x="4927" fg:w="2"/><text x="58.4063%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="58.1563%" y="565" width="0.0236%" height="15" fill="rgb(230,209,3)" fg:x="4927" fg:w="2"/><text x="58.4063%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="58.1681%" y="549" width="0.0118%" height="15" fill="rgb(231,19,0)" fg:x="4928" fg:w="1"/><text x="58.4181%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (5 samples, 0.06%)</title><rect x="58.1799%" y="629" width="0.0590%" height="15" fill="rgb(226,192,25)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (5 samples, 0.06%)</title><rect x="58.1799%" y="613" width="0.0590%" height="15" fill="rgb(223,175,53)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.06%)</title><rect x="58.1799%" y="597" width="0.0590%" height="15" fill="rgb(248,35,51)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="607.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.1799%" y="581" width="0.0590%" height="15" fill="rgb(230,37,26)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.1799%" y="565" width="0.0590%" height="15" fill="rgb(206,120,22)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="58.1799%" y="549" width="0.0590%" height="15" fill="rgb(207,165,28)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="58.1799%" y="533" width="0.0590%" height="15" fill="rgb(226,23,46)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="58.1799%" y="517" width="0.0590%" height="15" fill="rgb(208,130,44)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="58.1799%" y="501" width="0.0590%" height="15" fill="rgb(231,67,8)" fg:x="4929" fg:w="5"/><text x="58.4299%" y="511.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="58.1917%" y="485" width="0.0472%" height="15" fill="rgb(205,183,22)" fg:x="4930" fg:w="4"/><text x="58.4417%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="58.1917%" y="469" width="0.0472%" height="15" fill="rgb(224,47,9)" fg:x="4930" fg:w="4"/><text x="58.4417%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="58.1917%" y="453" width="0.0472%" height="15" fill="rgb(250,183,49)" fg:x="4930" fg:w="4"/><text x="58.4417%" y="463.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="58.1917%" y="437" width="0.0472%" height="15" fill="rgb(220,151,39)" fg:x="4930" fg:w="4"/><text x="58.4417%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (10 samples, 0.12%)</title><rect x="58.1799%" y="661" width="0.1180%" height="15" fill="rgb(220,118,20)" fg:x="4929" fg:w="10"/><text x="58.4299%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (10 samples, 0.12%)</title><rect x="58.1799%" y="645" width="0.1180%" height="15" fill="rgb(231,65,51)" fg:x="4929" fg:w="10"/><text x="58.4299%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.06%)</title><rect x="58.2389%" y="629" width="0.0590%" height="15" fill="rgb(253,125,37)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.06%)</title><rect x="58.2389%" y="613" width="0.0590%" height="15" fill="rgb(232,102,6)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.06%)</title><rect x="58.2389%" y="597" width="0.0590%" height="15" fill="rgb(251,105,13)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="607.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.2389%" y="581" width="0.0590%" height="15" fill="rgb(222,179,29)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="58.2389%" y="565" width="0.0590%" height="15" fill="rgb(229,180,53)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="58.2389%" y="549" width="0.0590%" height="15" fill="rgb(238,104,13)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="58.2389%" y="533" width="0.0590%" height="15" fill="rgb(210,130,5)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="58.2389%" y="517" width="0.0590%" height="15" fill="rgb(233,87,49)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="58.2389%" y="501" width="0.0590%" height="15" fill="rgb(243,34,9)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="511.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="58.2389%" y="485" width="0.0590%" height="15" fill="rgb(235,225,10)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="495.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="58.2389%" y="469" width="0.0590%" height="15" fill="rgb(212,0,30)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="58.2389%" y="453" width="0.0590%" height="15" fill="rgb(211,177,0)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="463.50"></text></g><g><title>__rcu_read_unlock (5 samples, 0.06%)</title><rect x="58.2389%" y="437" width="0.0590%" height="15" fill="rgb(225,220,11)" fg:x="4934" fg:w="5"/><text x="58.4889%" y="447.50"></text></g><g><title>malloc_consolidate (9 samples, 0.11%)</title><rect x="58.4514%" y="517" width="0.1062%" height="15" fill="rgb(215,10,13)" fg:x="4952" fg:w="9"/><text x="58.7014%" y="527.50"></text></g><g><title>__rcu_read_lock (2 samples, 0.02%)</title><rect x="58.5812%" y="453" width="0.0236%" height="15" fill="rgb(240,177,14)" fg:x="4963" fg:w="2"/><text x="58.8312%" y="463.50"></text></g><g><title>down_read_trylock (2 samples, 0.02%)</title><rect x="58.6048%" y="453" width="0.0236%" height="15" fill="rgb(243,7,39)" fg:x="4965" fg:w="2"/><text x="58.8548%" y="463.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="58.6520%" y="405" width="0.0118%" height="15" fill="rgb(212,99,0)" fg:x="4969" fg:w="1"/><text x="58.9020%" y="415.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="58.6874%" y="373" width="0.0118%" height="15" fill="rgb(225,162,48)" fg:x="4972" fg:w="1"/><text x="58.9374%" y="383.50"></text></g><g><title>__mem_cgroup_charge (14 samples, 0.17%)</title><rect x="58.6756%" y="389" width="0.1653%" height="15" fill="rgb(246,16,25)" fg:x="4971" fg:w="14"/><text x="58.9256%" y="399.50"></text></g><g><title>get_mem_cgroup_from_mm (12 samples, 0.14%)</title><rect x="58.6992%" y="373" width="0.1416%" height="15" fill="rgb(220,150,2)" fg:x="4973" fg:w="12"/><text x="58.9492%" y="383.50"></text></g><g><title>folio_lruvec_lock_irqsave (1 samples, 0.01%)</title><rect x="58.8645%" y="341" width="0.0118%" height="15" fill="rgb(237,113,11)" fg:x="4987" fg:w="1"/><text x="59.1145%" y="351.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="58.8645%" y="325" width="0.0118%" height="15" fill="rgb(236,70,20)" fg:x="4987" fg:w="1"/><text x="59.1145%" y="335.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="58.8645%" y="309" width="0.0118%" height="15" fill="rgb(234,94,7)" fg:x="4987" fg:w="1"/><text x="59.1145%" y="319.50"></text></g><g><title>folio_add_lru_vma (4 samples, 0.05%)</title><rect x="58.8409%" y="389" width="0.0472%" height="15" fill="rgb(250,221,0)" fg:x="4985" fg:w="4"/><text x="59.0909%" y="399.50"></text></g><g><title>folio_add_lru (4 samples, 0.05%)</title><rect x="58.8409%" y="373" width="0.0472%" height="15" fill="rgb(245,149,46)" fg:x="4985" fg:w="4"/><text x="59.0909%" y="383.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="58.8645%" y="357" width="0.0236%" height="15" fill="rgb(215,37,27)" fg:x="4987" fg:w="2"/><text x="59.1145%" y="367.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="58.8763%" y="341" width="0.0118%" height="15" fill="rgb(232,65,3)" fg:x="4988" fg:w="1"/><text x="59.1263%" y="351.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="58.8763%" y="325" width="0.0118%" height="15" fill="rgb(214,2,16)" fg:x="4988" fg:w="1"/><text x="59.1263%" y="335.50"></text></g><g><title>folio_add_new_anon_rmap (2 samples, 0.02%)</title><rect x="58.8881%" y="389" width="0.0236%" height="15" fill="rgb(227,131,50)" fg:x="4989" fg:w="2"/><text x="59.1381%" y="399.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.02%)</title><rect x="58.8881%" y="373" width="0.0236%" height="15" fill="rgb(247,131,45)" fg:x="4989" fg:w="2"/><text x="59.1381%" y="383.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="58.8881%" y="357" width="0.0236%" height="15" fill="rgb(215,97,47)" fg:x="4989" fg:w="2"/><text x="59.1381%" y="367.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="58.8999%" y="341" width="0.0118%" height="15" fill="rgb(233,143,12)" fg:x="4990" fg:w="1"/><text x="59.1499%" y="351.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.02%)</title><rect x="58.9117%" y="389" width="0.0236%" height="15" fill="rgb(222,57,17)" fg:x="4991" fg:w="2"/><text x="59.1617%" y="399.50"></text></g><g><title>clear_page_erms (3 samples, 0.04%)</title><rect x="58.9353%" y="325" width="0.0354%" height="15" fill="rgb(214,119,38)" fg:x="4993" fg:w="3"/><text x="59.1853%" y="335.50"></text></g><g><title>do_anonymous_page (27 samples, 0.32%)</title><rect x="58.6638%" y="405" width="0.3187%" height="15" fill="rgb(217,28,47)" fg:x="4970" fg:w="27"/><text x="58.9138%" y="415.50"></text></g><g><title>vma_alloc_folio (4 samples, 0.05%)</title><rect x="58.9353%" y="389" width="0.0472%" height="15" fill="rgb(231,14,52)" fg:x="4993" fg:w="4"/><text x="59.1853%" y="399.50"></text></g><g><title>__folio_alloc (4 samples, 0.05%)</title><rect x="58.9353%" y="373" width="0.0472%" height="15" fill="rgb(220,158,18)" fg:x="4993" fg:w="4"/><text x="59.1853%" y="383.50"></text></g><g><title>__alloc_pages (4 samples, 0.05%)</title><rect x="58.9353%" y="357" width="0.0472%" height="15" fill="rgb(222,143,46)" fg:x="4993" fg:w="4"/><text x="59.1853%" y="367.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.05%)</title><rect x="58.9353%" y="341" width="0.0472%" height="15" fill="rgb(227,165,5)" fg:x="4993" fg:w="4"/><text x="59.1853%" y="351.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="58.9707%" y="325" width="0.0118%" height="15" fill="rgb(216,222,49)" fg:x="4996" fg:w="1"/><text x="59.2207%" y="335.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="58.9707%" y="309" width="0.0118%" height="15" fill="rgb(238,73,39)" fg:x="4996" fg:w="1"/><text x="59.2207%" y="319.50"></text></g><g><title>handle_mm_fault (31 samples, 0.37%)</title><rect x="58.6284%" y="453" width="0.3659%" height="15" fill="rgb(252,115,9)" fg:x="4967" fg:w="31"/><text x="58.8784%" y="463.50"></text></g><g><title>__handle_mm_fault (31 samples, 0.37%)</title><rect x="58.6284%" y="437" width="0.3659%" height="15" fill="rgb(238,202,4)" fg:x="4967" fg:w="31"/><text x="58.8784%" y="447.50"></text></g><g><title>handle_pte_fault (29 samples, 0.34%)</title><rect x="58.6520%" y="421" width="0.3423%" height="15" fill="rgb(252,153,44)" fg:x="4969" fg:w="29"/><text x="58.9020%" y="431.50"></text></g><g><title>pte_offset_map_nolock (1 samples, 0.01%)</title><rect x="58.9825%" y="405" width="0.0118%" height="15" fill="rgb(235,128,27)" fg:x="4997" fg:w="1"/><text x="59.2325%" y="415.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="58.9825%" y="389" width="0.0118%" height="15" fill="rgb(221,121,47)" fg:x="4997" fg:w="1"/><text x="59.2325%" y="399.50"></text></g><g><title>asm_exc_page_fault (39 samples, 0.46%)</title><rect x="58.5812%" y="501" width="0.4603%" height="15" fill="rgb(247,211,47)" fg:x="4963" fg:w="39"/><text x="58.8312%" y="511.50"></text></g><g><title>exc_page_fault (39 samples, 0.46%)</title><rect x="58.5812%" y="485" width="0.4603%" height="15" fill="rgb(252,47,49)" fg:x="4963" fg:w="39"/><text x="58.8312%" y="495.50"></text></g><g><title>do_user_addr_fault (39 samples, 0.46%)</title><rect x="58.5812%" y="469" width="0.4603%" height="15" fill="rgb(219,119,53)" fg:x="4963" fg:w="39"/><text x="58.8312%" y="479.50"></text></g><g><title>lock_vma_under_rcu (4 samples, 0.05%)</title><rect x="58.9943%" y="453" width="0.0472%" height="15" fill="rgb(243,165,53)" fg:x="4998" fg:w="4"/><text x="59.2443%" y="463.50"></text></g><g><title>mas_walk (3 samples, 0.04%)</title><rect x="59.0061%" y="437" width="0.0354%" height="15" fill="rgb(230,12,35)" fg:x="4999" fg:w="3"/><text x="59.2561%" y="447.50"></text></g><g><title>mtree_range_walk (3 samples, 0.04%)</title><rect x="59.0061%" y="421" width="0.0354%" height="15" fill="rgb(239,57,49)" fg:x="4999" fg:w="3"/><text x="59.2561%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="59.0415%" y="501" width="0.0118%" height="15" fill="rgb(231,154,7)" fg:x="5002" fg:w="1"/><text x="59.2915%" y="511.50"></text></g><g><title>_nv040435rm (1 samples, 0.01%)</title><rect x="59.0534%" y="469" width="0.0118%" height="15" fill="rgb(248,81,34)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="479.50"></text></g><g><title>[[iwlmvm]] (1 samples, 0.01%)</title><rect x="59.0534%" y="453" width="0.0118%" height="15" fill="rgb(247,9,5)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="463.50"></text></g><g><title>[[iwlmvm]] (1 samples, 0.01%)</title><rect x="59.0534%" y="437" width="0.0118%" height="15" fill="rgb(228,172,27)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="447.50"></text></g><g><title>[[iwlmvm]] (1 samples, 0.01%)</title><rect x="59.0534%" y="421" width="0.0118%" height="15" fill="rgb(230,57,44)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="431.50"></text></g><g><title>up (1 samples, 0.01%)</title><rect x="59.0534%" y="405" width="0.0118%" height="15" fill="rgb(249,35,22)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="415.50"></text></g><g><title>__up.isra.0 (1 samples, 0.01%)</title><rect x="59.0534%" y="389" width="0.0118%" height="15" fill="rgb(250,137,27)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="399.50"></text></g><g><title>wake_up_process (1 samples, 0.01%)</title><rect x="59.0534%" y="373" width="0.0118%" height="15" fill="rgb(251,57,31)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="383.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="59.0534%" y="357" width="0.0118%" height="15" fill="rgb(238,60,0)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="367.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.01%)</title><rect x="59.0534%" y="341" width="0.0118%" height="15" fill="rgb(242,185,39)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="351.50"></text></g><g><title>select_idle_sibling (1 samples, 0.01%)</title><rect x="59.0534%" y="325" width="0.0118%" height="15" fill="rgb(240,63,43)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="335.50"></text></g><g><title>select_idle_cpu (1 samples, 0.01%)</title><rect x="59.0534%" y="309" width="0.0118%" height="15" fill="rgb(236,155,6)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="319.50"></text></g><g><title>select_idle_core (1 samples, 0.01%)</title><rect x="59.0534%" y="293" width="0.0118%" height="15" fill="rgb(215,11,29)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="303.50"></text></g><g><title>available_idle_cpu (1 samples, 0.01%)</title><rect x="59.0534%" y="277" width="0.0118%" height="15" fill="rgb(228,180,48)" fg:x="5003" fg:w="1"/><text x="59.3034%" y="287.50"></text></g><g><title>osq_lock (407 samples, 4.80%)</title><rect x="59.1714%" y="357" width="4.8041%" height="15" fill="rgb(241,102,12)" fg:x="5013" fg:w="407"/><text x="59.4214%" y="367.50">osq_lo..</text></g><g><title>osq_unlock (1 samples, 0.01%)</title><rect x="63.9754%" y="357" width="0.0118%" height="15" fill="rgb(246,213,4)" fg:x="5420" fg:w="1"/><text x="64.2254%" y="367.50"></text></g><g><title>rwsem_optimistic_spin (457 samples, 5.39%)</title><rect x="59.1596%" y="373" width="5.3942%" height="15" fill="rgb(218,134,35)" fg:x="5012" fg:w="457"/><text x="59.4096%" y="383.50">rwsem_o..</text></g><g><title>rwsem_spin_on_owner (48 samples, 0.57%)</title><rect x="63.9873%" y="357" width="0.5666%" height="15" fill="rgb(251,117,35)" fg:x="5421" fg:w="48"/><text x="64.2373%" y="367.50"></text></g><g><title>rwsem_spin_on_owner (3 samples, 0.04%)</title><rect x="64.5538%" y="373" width="0.0354%" height="15" fill="rgb(206,156,45)" fg:x="5469" fg:w="3"/><text x="64.8038%" y="383.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="64.6010%" y="325" width="0.0118%" height="15" fill="rgb(218,52,27)" fg:x="5473" fg:w="1"/><text x="64.8510%" y="335.50"></text></g><g><title>_raw_spin_unlock (8 samples, 0.09%)</title><rect x="64.6128%" y="325" width="0.0944%" height="15" fill="rgb(238,83,36)" fg:x="5474" fg:w="8"/><text x="64.8628%" y="335.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="64.7073%" y="325" width="0.0236%" height="15" fill="rgb(218,53,43)" fg:x="5482" fg:w="2"/><text x="64.9573%" y="335.50"></text></g><g><title>perf_ctx_enable (45 samples, 0.53%)</title><rect x="64.8017%" y="293" width="0.5312%" height="15" fill="rgb(239,54,39)" fg:x="5490" fg:w="45"/><text x="65.0517%" y="303.50"></text></g><g><title>x86_pmu_enable (12 samples, 0.14%)</title><rect x="65.1912%" y="277" width="0.1416%" height="15" fill="rgb(212,198,13)" fg:x="5523" fg:w="12"/><text x="65.4412%" y="287.50"></text></g><g><title>perf_pmu_nop_void (8 samples, 0.09%)</title><rect x="65.3329%" y="293" width="0.0944%" height="15" fill="rgb(234,54,46)" fg:x="5535" fg:w="8"/><text x="65.5829%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (70 samples, 0.83%)</title><rect x="64.7545%" y="309" width="0.8263%" height="15" fill="rgb(217,120,7)" fg:x="5486" fg:w="70"/><text x="65.0045%" y="319.50"></text></g><g><title>x86_pmu_enable (13 samples, 0.15%)</title><rect x="65.4273%" y="293" width="0.1534%" height="15" fill="rgb(246,39,15)" fg:x="5543" fg:w="13"/><text x="65.6773%" y="303.50"></text></g><g><title>__rcu_read_unlock (13 samples, 0.15%)</title><rect x="65.5807%" y="309" width="0.1534%" height="15" fill="rgb(242,143,31)" fg:x="5556" fg:w="13"/><text x="65.8307%" y="319.50"></text></g><g><title>_raw_spin_unlock (2 samples, 0.02%)</title><rect x="65.7342%" y="309" width="0.0236%" height="15" fill="rgb(252,60,24)" fg:x="5569" fg:w="2"/><text x="65.9842%" y="319.50"></text></g><g><title>__sysvec_irq_work (1 samples, 0.01%)</title><rect x="65.7578%" y="277" width="0.0118%" height="15" fill="rgb(249,220,7)" fg:x="5571" fg:w="1"/><text x="66.0078%" y="287.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="65.7578%" y="309" width="0.0236%" height="15" fill="rgb(236,67,13)" fg:x="5571" fg:w="2"/><text x="66.0078%" y="319.50"></text></g><g><title>sysvec_irq_work (2 samples, 0.02%)</title><rect x="65.7578%" y="293" width="0.0236%" height="15" fill="rgb(210,62,39)" fg:x="5571" fg:w="2"/><text x="66.0078%" y="303.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="65.7696%" y="277" width="0.0118%" height="15" fill="rgb(219,122,53)" fg:x="5572" fg:w="1"/><text x="66.0196%" y="287.50"></text></g><g><title>finish_task_switch.isra.0 (93 samples, 1.10%)</title><rect x="64.7309%" y="325" width="1.0977%" height="15" fill="rgb(218,87,25)" fg:x="5484" fg:w="93"/><text x="64.9809%" y="335.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="65.7814%" y="309" width="0.0472%" height="15" fill="rgb(234,179,48)" fg:x="5573" fg:w="4"/><text x="66.0314%" y="319.50"></text></g><g><title>down_write_killable (575 samples, 6.79%)</title><rect x="59.0652%" y="405" width="6.7871%" height="15" fill="rgb(248,90,0)" fg:x="5004" fg:w="575"/><text x="59.3152%" y="415.50">down_writ..</text></g><g><title>rwsem_down_write_slowpath (574 samples, 6.78%)</title><rect x="59.0770%" y="389" width="6.7753%" height="15" fill="rgb(207,228,37)" fg:x="5005" fg:w="574"/><text x="59.3270%" y="399.50">rwsem_dow..</text></g><g><title>schedule_preempt_disabled (107 samples, 1.26%)</title><rect x="64.5892%" y="373" width="1.2630%" height="15" fill="rgb(235,214,15)" fg:x="5472" fg:w="107"/><text x="64.8392%" y="383.50"></text></g><g><title>schedule (106 samples, 1.25%)</title><rect x="64.6010%" y="357" width="1.2512%" height="15" fill="rgb(210,144,39)" fg:x="5473" fg:w="106"/><text x="64.8510%" y="367.50"></text></g><g><title>__schedule (106 samples, 1.25%)</title><rect x="64.6010%" y="341" width="1.2512%" height="15" fill="rgb(222,67,41)" fg:x="5473" fg:w="106"/><text x="64.8510%" y="351.50"></text></g><g><title>pick_next_task (2 samples, 0.02%)</title><rect x="65.8286%" y="325" width="0.0236%" height="15" fill="rgb(205,35,37)" fg:x="5577" fg:w="2"/><text x="66.0786%" y="335.50"></text></g><g><title>pick_next_task_fair (2 samples, 0.02%)</title><rect x="65.8286%" y="309" width="0.0236%" height="15" fill="rgb(216,125,40)" fg:x="5577" fg:w="2"/><text x="66.0786%" y="319.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="65.8404%" y="293" width="0.0118%" height="15" fill="rgb(228,227,20)" fg:x="5578" fg:w="1"/><text x="66.0904%" y="303.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="65.8404%" y="277" width="0.0118%" height="15" fill="rgb(242,173,45)" fg:x="5578" fg:w="1"/><text x="66.0904%" y="287.50"></text></g><g><title>update_rq_clock (1 samples, 0.01%)</title><rect x="65.8404%" y="261" width="0.0118%" height="15" fill="rgb(215,79,24)" fg:x="5578" fg:w="1"/><text x="66.0904%" y="271.50"></text></g><g><title>mas_find (9 samples, 0.11%)</title><rect x="65.8522%" y="405" width="0.1062%" height="15" fill="rgb(238,164,38)" fg:x="5579" fg:w="9"/><text x="66.1022%" y="415.50"></text></g><g><title>mas_walk (8 samples, 0.09%)</title><rect x="65.8640%" y="389" width="0.0944%" height="15" fill="rgb(245,196,38)" fg:x="5580" fg:w="8"/><text x="66.1140%" y="399.50"></text></g><g><title>mtree_range_walk (6 samples, 0.07%)</title><rect x="65.8876%" y="373" width="0.0708%" height="15" fill="rgb(231,217,29)" fg:x="5582" fg:w="6"/><text x="66.1376%" y="383.50"></text></g><g><title>change_p4d_range (1 samples, 0.01%)</title><rect x="65.9703%" y="357" width="0.0118%" height="15" fill="rgb(245,6,4)" fg:x="5589" fg:w="1"/><text x="66.2203%" y="367.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="65.9703%" y="341" width="0.0118%" height="15" fill="rgb(214,76,49)" fg:x="5589" fg:w="1"/><text x="66.2203%" y="351.50"></text></g><g><title>change_pte_range (1 samples, 0.01%)</title><rect x="65.9703%" y="325" width="0.0118%" height="15" fill="rgb(205,96,12)" fg:x="5589" fg:w="1"/><text x="66.2203%" y="335.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="65.9703%" y="309" width="0.0118%" height="15" fill="rgb(243,131,4)" fg:x="5589" fg:w="1"/><text x="66.2203%" y="319.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="65.9703%" y="293" width="0.0118%" height="15" fill="rgb(214,114,4)" fg:x="5589" fg:w="1"/><text x="66.2203%" y="303.50"></text></g><g><title>change_protection (2 samples, 0.02%)</title><rect x="65.9703%" y="389" width="0.0236%" height="15" fill="rgb(234,215,15)" fg:x="5589" fg:w="2"/><text x="66.2203%" y="399.50"></text></g><g><title>change_protection_range (2 samples, 0.02%)</title><rect x="65.9703%" y="373" width="0.0236%" height="15" fill="rgb(250,216,45)" fg:x="5589" fg:w="2"/><text x="66.2203%" y="383.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="65.9821%" y="357" width="0.0118%" height="15" fill="rgb(236,128,4)" fg:x="5590" fg:w="1"/><text x="66.2321%" y="367.50"></text></g><g><title>change_protection_range (1 samples, 0.01%)</title><rect x="65.9939%" y="389" width="0.0118%" height="15" fill="rgb(234,50,33)" fg:x="5591" fg:w="1"/><text x="66.2439%" y="399.50"></text></g><g><title>may_expand_vm (2 samples, 0.02%)</title><rect x="66.0057%" y="389" width="0.0236%" height="15" fill="rgb(253,131,37)" fg:x="5592" fg:w="2"/><text x="66.2557%" y="399.50"></text></g><g><title>perf_event_mmap_output (2 samples, 0.02%)</title><rect x="66.0529%" y="357" width="0.0236%" height="15" fill="rgb(218,55,27)" fg:x="5596" fg:w="2"/><text x="66.3029%" y="367.50"></text></g><g><title>__perf_event_header__init_id (2 samples, 0.02%)</title><rect x="66.2417%" y="309" width="0.0236%" height="15" fill="rgb(241,220,28)" fg:x="5612" fg:w="2"/><text x="66.4917%" y="319.50"></text></g><g><title>__task_pid_nr_ns (2 samples, 0.02%)</title><rect x="66.2417%" y="293" width="0.0236%" height="15" fill="rgb(241,90,48)" fg:x="5612" fg:w="2"/><text x="66.4917%" y="303.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="66.2653%" y="309" width="0.0118%" height="15" fill="rgb(216,43,37)" fg:x="5614" fg:w="1"/><text x="66.5153%" y="319.50"></text></g><g><title>perf_event_mmap_output (5 samples, 0.06%)</title><rect x="66.2299%" y="325" width="0.0590%" height="15" fill="rgb(207,173,9)" fg:x="5611" fg:w="5"/><text x="66.4799%" y="335.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.01%)</title><rect x="66.2771%" y="309" width="0.0118%" height="15" fill="rgb(240,126,30)" fg:x="5615" fg:w="1"/><text x="66.5271%" y="319.50"></text></g><g><title>perf_event_mmap (23 samples, 0.27%)</title><rect x="66.0293%" y="389" width="0.2715%" height="15" fill="rgb(228,178,53)" fg:x="5594" fg:w="23"/><text x="66.2793%" y="399.50"></text></g><g><title>perf_event_mmap_event (22 samples, 0.26%)</title><rect x="66.0411%" y="373" width="0.2597%" height="15" fill="rgb(217,33,4)" fg:x="5595" fg:w="22"/><text x="66.2911%" y="383.50"></text></g><g><title>perf_iterate_sb.constprop.0 (19 samples, 0.22%)</title><rect x="66.0765%" y="357" width="0.2243%" height="15" fill="rgb(206,124,34)" fg:x="5598" fg:w="19"/><text x="66.3265%" y="367.50"></text></g><g><title>perf_iterate_ctx (19 samples, 0.22%)</title><rect x="66.0765%" y="341" width="0.2243%" height="15" fill="rgb(208,122,53)" fg:x="5598" fg:w="19"/><text x="66.3265%" y="351.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="66.2890%" y="325" width="0.0118%" height="15" fill="rgb(215,202,26)" fg:x="5616" fg:w="1"/><text x="66.5390%" y="335.50"></text></g><g><title>vm_get_page_prot (1 samples, 0.01%)</title><rect x="66.3008%" y="389" width="0.0118%" height="15" fill="rgb(232,198,31)" fg:x="5617" fg:w="1"/><text x="66.5508%" y="399.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="66.3244%" y="373" width="0.0118%" height="15" fill="rgb(222,23,35)" fg:x="5619" fg:w="1"/><text x="66.5744%" y="383.50"></text></g><g><title>can_vma_merge_after (1 samples, 0.01%)</title><rect x="66.3362%" y="373" width="0.0118%" height="15" fill="rgb(242,27,53)" fg:x="5620" fg:w="1"/><text x="66.5862%" y="383.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="66.3834%" y="341" width="0.0118%" height="15" fill="rgb(210,216,42)" fg:x="5624" fg:w="1"/><text x="66.6334%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="66.4070%" y="277" width="0.0472%" height="15" fill="rgb(234,39,38)" fg:x="5626" fg:w="4"/><text x="66.6570%" y="287.50"></text></g><g><title>kmem_cache_alloc (14 samples, 0.17%)</title><rect x="66.3952%" y="341" width="0.1653%" height="15" fill="rgb(235,126,54)" fg:x="5625" fg:w="14"/><text x="66.6452%" y="351.50"></text></g><g><title>__cond_resched (14 samples, 0.17%)</title><rect x="66.3952%" y="325" width="0.1653%" height="15" fill="rgb(235,150,33)" fg:x="5625" fg:w="14"/><text x="66.6452%" y="335.50"></text></g><g><title>__schedule (14 samples, 0.17%)</title><rect x="66.3952%" y="309" width="0.1653%" height="15" fill="rgb(249,49,53)" fg:x="5625" fg:w="14"/><text x="66.6452%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (14 samples, 0.17%)</title><rect x="66.3952%" y="293" width="0.1653%" height="15" fill="rgb(238,60,50)" fg:x="5625" fg:w="14"/><text x="66.6452%" y="303.50"></text></g><g><title>_raw_spin_unlock (9 samples, 0.11%)</title><rect x="66.4542%" y="277" width="0.1062%" height="15" fill="rgb(210,5,2)" fg:x="5630" fg:w="9"/><text x="66.7042%" y="287.50"></text></g><g><title>mas_preallocate (23 samples, 0.27%)</title><rect x="66.3480%" y="373" width="0.2715%" height="15" fill="rgb(214,207,24)" fg:x="5621" fg:w="23"/><text x="66.5980%" y="383.50"></text></g><g><title>mas_alloc_nodes (23 samples, 0.27%)</title><rect x="66.3480%" y="357" width="0.2715%" height="15" fill="rgb(228,173,2)" fg:x="5621" fg:w="23"/><text x="66.5980%" y="367.50"></text></g><g><title>kmem_cache_alloc_bulk (5 samples, 0.06%)</title><rect x="66.5604%" y="341" width="0.0590%" height="15" fill="rgb(244,26,8)" fg:x="5639" fg:w="5"/><text x="66.8104%" y="351.50"></text></g><g><title>__kmem_cache_alloc_bulk (4 samples, 0.05%)</title><rect x="66.5722%" y="325" width="0.0472%" height="15" fill="rgb(249,153,35)" fg:x="5640" fg:w="4"/><text x="66.8222%" y="335.50"></text></g><g><title>mas_prev (1 samples, 0.01%)</title><rect x="66.6195%" y="373" width="0.0118%" height="15" fill="rgb(221,215,40)" fg:x="5644" fg:w="1"/><text x="66.8695%" y="383.50"></text></g><g><title>mas_prev_slot (1 samples, 0.01%)</title><rect x="66.6195%" y="357" width="0.0118%" height="15" fill="rgb(238,106,35)" fg:x="5644" fg:w="1"/><text x="66.8695%" y="367.50"></text></g><g><title>kmem_cache_free (1 samples, 0.01%)</title><rect x="66.6431%" y="341" width="0.0118%" height="15" fill="rgb(207,195,21)" fg:x="5646" fg:w="1"/><text x="66.8931%" y="351.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="66.6549%" y="325" width="0.0118%" height="15" fill="rgb(205,43,29)" fg:x="5647" fg:w="1"/><text x="66.9049%" y="335.50"></text></g><g><title>mas_destroy (7 samples, 0.08%)</title><rect x="66.6313%" y="357" width="0.0826%" height="15" fill="rgb(236,35,21)" fg:x="5645" fg:w="7"/><text x="66.8813%" y="367.50"></text></g><g><title>kmem_cache_free_bulk (5 samples, 0.06%)</title><rect x="66.6549%" y="341" width="0.0590%" height="15" fill="rgb(244,74,8)" fg:x="5647" fg:w="5"/><text x="66.9049%" y="351.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (4 samples, 0.05%)</title><rect x="66.6667%" y="325" width="0.0472%" height="15" fill="rgb(241,229,7)" fg:x="5648" fg:w="4"/><text x="66.9167%" y="335.50"></text></g><g><title>build_detached_freelist (4 samples, 0.05%)</title><rect x="66.6667%" y="309" width="0.0472%" height="15" fill="rgb(212,223,25)" fg:x="5648" fg:w="4"/><text x="66.9167%" y="319.50"></text></g><g><title>mprotect_fixup (65 samples, 0.77%)</title><rect x="65.9585%" y="405" width="0.7672%" height="15" fill="rgb(234,58,53)" fg:x="5588" fg:w="65"/><text x="66.2085%" y="415.50"></text></g><g><title>vma_merge (35 samples, 0.41%)</title><rect x="66.3126%" y="389" width="0.4131%" height="15" fill="rgb(244,36,1)" fg:x="5618" fg:w="35"/><text x="66.5626%" y="399.50"></text></g><g><title>mas_store_prealloc (8 samples, 0.09%)</title><rect x="66.6313%" y="373" width="0.0944%" height="15" fill="rgb(222,40,54)" fg:x="5645" fg:w="8"/><text x="66.8813%" y="383.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="66.7139%" y="357" width="0.0118%" height="15" fill="rgb(210,207,39)" fg:x="5652" fg:w="1"/><text x="66.9639%" y="367.50"></text></g><g><title>mas_wr_spanning_store.isra.0 (1 samples, 0.01%)</title><rect x="66.7139%" y="341" width="0.0118%" height="15" fill="rgb(234,52,14)" fg:x="5652" fg:w="1"/><text x="66.9639%" y="351.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="66.7493%" y="373" width="0.0236%" height="15" fill="rgb(239,108,46)" fg:x="5655" fg:w="2"/><text x="66.9993%" y="383.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="66.7493%" y="357" width="0.0236%" height="15" fill="rgb(252,223,5)" fg:x="5655" fg:w="2"/><text x="66.9993%" y="367.50"></text></g><g><title>rwsem_mark_wake (1 samples, 0.01%)</title><rect x="66.7729%" y="373" width="0.0118%" height="15" fill="rgb(227,181,11)" fg:x="5657" fg:w="1"/><text x="67.0229%" y="383.50"></text></g><g><title>wake_q_add (1 samples, 0.01%)</title><rect x="66.7729%" y="357" width="0.0118%" height="15" fill="rgb(248,126,40)" fg:x="5657" fg:w="1"/><text x="67.0229%" y="367.50"></text></g><g><title>wake_q_add (1 samples, 0.01%)</title><rect x="66.7847%" y="373" width="0.0118%" height="15" fill="rgb(243,1,18)" fg:x="5658" fg:w="1"/><text x="67.0347%" y="383.50"></text></g><g><title>do_mprotect_pkey (656 samples, 7.74%)</title><rect x="59.0652%" y="421" width="7.7432%" height="15" fill="rgb(214,145,23)" fg:x="5004" fg:w="656"/><text x="59.3152%" y="431.50">do_mprotect..</text></g><g><title>up_write (7 samples, 0.08%)</title><rect x="66.7257%" y="405" width="0.0826%" height="15" fill="rgb(241,218,11)" fg:x="5653" fg:w="7"/><text x="66.9757%" y="415.50"></text></g><g><title>rwsem_wake.isra.0 (5 samples, 0.06%)</title><rect x="66.7493%" y="389" width="0.0590%" height="15" fill="rgb(214,219,24)" fg:x="5655" fg:w="5"/><text x="66.9993%" y="399.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="66.7965%" y="373" width="0.0118%" height="15" fill="rgb(235,32,7)" fg:x="5659" fg:w="1"/><text x="67.0465%" y="383.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="66.7965%" y="357" width="0.0118%" height="15" fill="rgb(227,121,28)" fg:x="5659" fg:w="1"/><text x="67.0465%" y="367.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="66.7965%" y="341" width="0.0118%" height="15" fill="rgb(216,129,49)" fg:x="5659" fg:w="1"/><text x="67.0465%" y="351.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="66.7965%" y="325" width="0.0118%" height="15" fill="rgb(207,194,50)" fg:x="5659" fg:w="1"/><text x="67.0465%" y="335.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="66.7965%" y="309" width="0.0118%" height="15" fill="rgb(207,4,18)" fg:x="5659" fg:w="1"/><text x="67.0465%" y="319.50"></text></g><g><title>__x64_sys_mprotect (657 samples, 7.75%)</title><rect x="59.0652%" y="437" width="7.7550%" height="15" fill="rgb(213,50,30)" fg:x="5004" fg:w="657"/><text x="59.3152%" y="447.50">__x64_sys_m..</text></g><g><title>mas_find (1 samples, 0.01%)</title><rect x="66.8083%" y="421" width="0.0118%" height="15" fill="rgb(208,77,22)" fg:x="5660" fg:w="1"/><text x="67.0583%" y="431.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.01%)</title><rect x="66.8201%" y="437" width="0.0118%" height="15" fill="rgb(244,204,34)" fg:x="5661" fg:w="1"/><text x="67.0701%" y="447.50"></text></g><g><title>do_syscall_64 (664 samples, 7.84%)</title><rect x="59.0652%" y="453" width="7.8376%" height="15" fill="rgb(230,20,17)" fg:x="5004" fg:w="664"/><text x="59.3152%" y="463.50">do_syscall_..</text></g><g><title>syscall_exit_to_user_mode (6 samples, 0.07%)</title><rect x="66.8319%" y="437" width="0.0708%" height="15" fill="rgb(237,83,15)" fg:x="5662" fg:w="6"/><text x="67.0819%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.07%)</title><rect x="66.8319%" y="421" width="0.0708%" height="15" fill="rgb(221,109,25)" fg:x="5662" fg:w="6"/><text x="67.0819%" y="431.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="66.8437%" y="405" width="0.0590%" height="15" fill="rgb(205,194,52)" fg:x="5663" fg:w="5"/><text x="67.0937%" y="415.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="66.8437%" y="389" width="0.0590%" height="15" fill="rgb(244,173,54)" fg:x="5663" fg:w="5"/><text x="67.0937%" y="399.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="66.8437%" y="373" width="0.0590%" height="15" fill="rgb(227,181,18)" fg:x="5663" fg:w="5"/><text x="67.0937%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="66.8437%" y="357" width="0.0590%" height="15" fill="rgb(238,36,30)" fg:x="5663" fg:w="5"/><text x="67.0937%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (665 samples, 7.85%)</title><rect x="59.0652%" y="469" width="7.8494%" height="15" fill="rgb(254,85,0)" fg:x="5004" fg:w="665"/><text x="59.3152%" y="479.50">entry_SYSCA..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.01%)</title><rect x="66.9027%" y="453" width="0.0118%" height="15" fill="rgb(247,63,33)" fg:x="5668" fg:w="1"/><text x="67.1527%" y="463.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="66.9145%" y="469" width="0.0118%" height="15" fill="rgb(220,7,54)" fg:x="5669" fg:w="1"/><text x="67.1645%" y="479.50"></text></g><g><title>grow_heap (668 samples, 7.88%)</title><rect x="59.0534%" y="501" width="7.8848%" height="15" fill="rgb(238,227,21)" fg:x="5003" fg:w="668"/><text x="59.3034%" y="511.50">grow_heap</text></g><g><title>__GI_mprotect (668 samples, 7.88%)</title><rect x="59.0534%" y="485" width="7.8848%" height="15" fill="rgb(237,29,31)" fg:x="5003" fg:w="668"/><text x="59.3034%" y="495.50">__GI_mprote..</text></g><g><title>syscall_return_via_sysret (1 samples, 0.01%)</title><rect x="66.9263%" y="469" width="0.0118%" height="15" fill="rgb(211,21,50)" fg:x="5670" fg:w="1"/><text x="67.1763%" y="479.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.04%)</title><rect x="66.9381%" y="485" width="0.0354%" height="15" fill="rgb(239,119,2)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="495.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.04%)</title><rect x="66.9381%" y="469" width="0.0354%" height="15" fill="rgb(250,2,39)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="66.9381%" y="453" width="0.0354%" height="15" fill="rgb(244,46,53)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="463.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="66.9381%" y="437" width="0.0354%" height="15" fill="rgb(209,21,19)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="447.50"></text></g><g><title>__x64_sys_mmap (3 samples, 0.04%)</title><rect x="66.9381%" y="421" width="0.0354%" height="15" fill="rgb(236,145,4)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="431.50"></text></g><g><title>ksys_mmap_pgoff (3 samples, 0.04%)</title><rect x="66.9381%" y="405" width="0.0354%" height="15" fill="rgb(220,133,36)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="415.50"></text></g><g><title>vm_mmap_pgoff (3 samples, 0.04%)</title><rect x="66.9381%" y="389" width="0.0354%" height="15" fill="rgb(244,18,3)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="399.50"></text></g><g><title>down_write_killable (3 samples, 0.04%)</title><rect x="66.9381%" y="373" width="0.0354%" height="15" fill="rgb(232,171,48)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="383.50"></text></g><g><title>rwsem_down_write_slowpath (3 samples, 0.04%)</title><rect x="66.9381%" y="357" width="0.0354%" height="15" fill="rgb(223,223,53)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="367.50"></text></g><g><title>rwsem_optimistic_spin (3 samples, 0.04%)</title><rect x="66.9381%" y="341" width="0.0354%" height="15" fill="rgb(246,92,13)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="351.50"></text></g><g><title>osq_lock (3 samples, 0.04%)</title><rect x="66.9381%" y="325" width="0.0354%" height="15" fill="rgb(229,171,10)" fg:x="5671" fg:w="3"/><text x="67.1881%" y="335.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="66.9736%" y="309" width="0.0118%" height="15" fill="rgb(213,131,26)" fg:x="5674" fg:w="1"/><text x="67.2236%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (896 samples, 10.58%)</title><rect x="56.4566%" y="741" width="10.5760%" height="15" fill="rgb(242,87,54)" fg:x="4783" fg:w="896"/><text x="56.7066%" y="751.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (895 samples, 10.56%)</title><rect x="56.4684%" y="725" width="10.5642%" height="15" fill="rgb(237,21,35)" fg:x="4784" fg:w="895"/><text x="56.7184%" y="735.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (895 samples, 10.56%)</title><rect x="56.4684%" y="709" width="10.5642%" height="15" fill="rgb(253,13,47)" fg:x="4784" fg:w="895"/><text x="56.7184%" y="719.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (895 samples, 10.56%)</title><rect x="56.4684%" y="693" width="10.5642%" height="15" fill="rgb(215,122,49)" fg:x="4784" fg:w="895"/><text x="56.7184%" y="703.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (895 samples, 10.56%)</title><rect x="56.4684%" y="677" width="10.5642%" height="15" fill="rgb(209,179,30)" fg:x="4784" fg:w="895"/><text x="56.7184%" y="687.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (740 samples, 8.73%)</title><rect x="58.2979%" y="661" width="8.7347%" height="15" fill="rgb(235,100,24)" fg:x="4939" fg:w="740"/><text x="58.5479%" y="671.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (740 samples, 8.73%)</title><rect x="58.2979%" y="645" width="8.7347%" height="15" fill="rgb(209,67,24)" fg:x="4939" fg:w="740"/><text x="58.5479%" y="655.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (738 samples, 8.71%)</title><rect x="58.3215%" y="629" width="8.7110%" height="15" fill="rgb(206,74,32)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="639.50">hashbrown::r..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (738 samples, 8.71%)</title><rect x="58.3215%" y="613" width="8.7110%" height="15" fill="rgb(212,45,25)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="623.50">hashbrown::r..</text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::allocate (738 samples, 8.71%)</title><rect x="58.3215%" y="597" width="8.7110%" height="15" fill="rgb(239,26,3)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="607.50">&lt;allocator_a..</text></g><g><title>allocator_api2::stable::alloc::global::Global::alloc_impl (738 samples, 8.71%)</title><rect x="58.3215%" y="581" width="8.7110%" height="15" fill="rgb(218,36,15)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="591.50">allocator_ap..</text></g><g><title>alloc::alloc::alloc (738 samples, 8.71%)</title><rect x="58.3215%" y="565" width="8.7110%" height="15" fill="rgb(206,108,24)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="575.50">alloc::alloc..</text></g><g><title>__GI___libc_malloc (738 samples, 8.71%)</title><rect x="58.3215%" y="549" width="8.7110%" height="15" fill="rgb(234,204,42)" fg:x="4941" fg:w="738"/><text x="58.5715%" y="559.50">__GI___libc_..</text></g><g><title>_int_malloc (731 samples, 8.63%)</title><rect x="58.4042%" y="533" width="8.6284%" height="15" fill="rgb(229,2,11)" fg:x="4948" fg:w="731"/><text x="58.6542%" y="543.50">_int_malloc</text></g><g><title>sysmalloc (718 samples, 8.47%)</title><rect x="58.5576%" y="517" width="8.4750%" height="15" fill="rgb(221,20,48)" fg:x="4961" fg:w="718"/><text x="58.8076%" y="527.50">sysmalloc</text></g><g><title>sysmalloc_mmap (8 samples, 0.09%)</title><rect x="66.9381%" y="501" width="0.0944%" height="15" fill="rgb(244,164,10)" fg:x="5671" fg:w="8"/><text x="67.1881%" y="511.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="66.9736%" y="485" width="0.0590%" height="15" fill="rgb(243,229,2)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="495.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="66.9736%" y="469" width="0.0590%" height="15" fill="rgb(232,131,37)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="479.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="66.9736%" y="453" width="0.0590%" height="15" fill="rgb(217,156,11)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="463.50"></text></g><g><title>lock_mm_and_find_vma (5 samples, 0.06%)</title><rect x="66.9736%" y="437" width="0.0590%" height="15" fill="rgb(239,99,48)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="447.50"></text></g><g><title>down_read_killable (5 samples, 0.06%)</title><rect x="66.9736%" y="421" width="0.0590%" height="15" fill="rgb(231,209,9)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="431.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.06%)</title><rect x="66.9736%" y="405" width="0.0590%" height="15" fill="rgb(254,97,27)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="415.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.06%)</title><rect x="66.9736%" y="389" width="0.0590%" height="15" fill="rgb(223,151,38)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="399.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="66.9736%" y="373" width="0.0590%" height="15" fill="rgb(219,206,35)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="383.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="66.9736%" y="357" width="0.0590%" height="15" fill="rgb(216,130,31)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="66.9736%" y="341" width="0.0590%" height="15" fill="rgb(251,97,34)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="66.9736%" y="325" width="0.0590%" height="15" fill="rgb(246,159,47)" fg:x="5674" fg:w="5"/><text x="67.2236%" y="335.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="66.9854%" y="309" width="0.0472%" height="15" fill="rgb(232,87,10)" fg:x="5675" fg:w="4"/><text x="67.2354%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5 samples, 0.06%)</title><rect x="67.0326%" y="725" width="0.0590%" height="15" fill="rgb(249,1,37)" fg:x="5679" fg:w="5"/><text x="67.2826%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5 samples, 0.06%)</title><rect x="67.0326%" y="709" width="0.0590%" height="15" fill="rgb(239,135,14)" fg:x="5679" fg:w="5"/><text x="67.2826%" y="719.50"></text></g><g><title>core::ptr::write (5 samples, 0.06%)</title><rect x="67.0326%" y="693" width="0.0590%" height="15" fill="rgb(253,116,46)" fg:x="5679" fg:w="5"/><text x="67.2826%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="67.0798%" y="677" width="0.0118%" height="15" fill="rgb(222,217,37)" fg:x="5683" fg:w="1"/><text x="67.3298%" y="687.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (943 samples, 11.13%)</title><rect x="55.9726%" y="789" width="11.1308%" height="15" fill="rgb(252,96,8)" fg:x="4742" fg:w="943"/><text x="56.2226%" y="799.50">dashmap::DashMap..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (943 samples, 11.13%)</title><rect x="55.9726%" y="773" width="11.1308%" height="15" fill="rgb(254,103,41)" fg:x="4742" fg:w="943"/><text x="56.2226%" y="783.50">&lt;dashmap::DashMa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (910 samples, 10.74%)</title><rect x="56.3621%" y="757" width="10.7413%" height="15" fill="rgb(218,213,19)" fg:x="4775" fg:w="910"/><text x="56.6121%" y="767.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.07%)</title><rect x="67.0326%" y="741" width="0.0708%" height="15" fill="rgb(253,95,21)" fg:x="5679" fg:w="6"/><text x="67.2826%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.01%)</title><rect x="67.0916%" y="725" width="0.0118%" height="15" fill="rgb(229,26,28)" fg:x="5684" fg:w="1"/><text x="67.3416%" y="735.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="67.1034%" y="773" width="0.0118%" height="15" fill="rgb(230,129,16)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="783.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="67.1034%" y="757" width="0.0118%" height="15" fill="rgb(236,126,17)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="67.1034%" y="741" width="0.0118%" height="15" fill="rgb(209,33,33)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="67.1034%" y="725" width="0.0118%" height="15" fill="rgb(227,85,29)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="735.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="67.1034%" y="709" width="0.0118%" height="15" fill="rgb(241,53,46)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="719.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="67.1034%" y="693" width="0.0118%" height="15" fill="rgb(228,167,53)" fg:x="5685" fg:w="1"/><text x="67.3534%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="67.1270%" y="565" width="0.0118%" height="15" fill="rgb(238,195,45)" fg:x="5687" fg:w="1"/><text x="67.3770%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.01%)</title><rect x="67.1270%" y="549" width="0.0118%" height="15" fill="rgb(252,124,45)" fg:x="5687" fg:w="1"/><text x="67.3770%" y="559.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="67.1270%" y="533" width="0.0118%" height="15" fill="rgb(251,38,35)" fg:x="5687" fg:w="1"/><text x="67.3770%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="67.1270%" y="661" width="0.0236%" height="15" fill="rgb(227,33,2)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="67.1270%" y="645" width="0.0236%" height="15" fill="rgb(223,157,46)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="67.1270%" y="629" width="0.0236%" height="15" fill="rgb(222,78,41)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="67.1270%" y="613" width="0.0236%" height="15" fill="rgb(248,176,11)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="67.1270%" y="597" width="0.0236%" height="15" fill="rgb(241,221,18)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="67.1270%" y="581" width="0.0236%" height="15" fill="rgb(218,85,22)" fg:x="5687" fg:w="2"/><text x="67.3770%" y="591.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount::_{{closure}} (1 samples, 0.01%)</title><rect x="67.1388%" y="565" width="0.0118%" height="15" fill="rgb(222,223,7)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.01%)</title><rect x="67.1388%" y="549" width="0.0118%" height="15" fill="rgb(254,59,39)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="67.1388%" y="533" width="0.0118%" height="15" fill="rgb(247,100,27)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="67.1388%" y="517" width="0.0118%" height="15" fill="rgb(237,207,10)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (1 samples, 0.01%)</title><rect x="67.1388%" y="501" width="0.0118%" height="15" fill="rgb(220,121,28)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.01%)</title><rect x="67.1388%" y="485" width="0.0118%" height="15" fill="rgb(213,223,20)" fg:x="5688" fg:w="1"/><text x="67.3888%" y="495.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="67.2450%" y="517" width="0.0118%" height="15" fill="rgb(205,121,27)" fg:x="5697" fg:w="1"/><text x="67.4950%" y="527.50"></text></g><g><title>malloc_consolidate (3 samples, 0.04%)</title><rect x="67.2568%" y="517" width="0.0354%" height="15" fill="rgb(253,24,53)" fg:x="5698" fg:w="3"/><text x="67.5068%" y="527.50"></text></g><g><title>dashmap::DashMap&lt;K,V&gt;::with_shard_amount (17 samples, 0.20%)</title><rect x="67.1034%" y="789" width="0.2007%" height="15" fill="rgb(224,224,47)" fg:x="5685" fg:w="17"/><text x="67.3534%" y="799.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount (16 samples, 0.19%)</title><rect x="67.1152%" y="773" width="0.1889%" height="15" fill="rgb(250,125,36)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.19%)</title><rect x="67.1152%" y="757" width="0.1889%" height="15" fill="rgb(240,144,38)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="67.1152%" y="741" width="0.1889%" height="15" fill="rgb(250,15,50)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.19%)</title><rect x="67.1152%" y="725" width="0.1889%" height="15" fill="rgb(210,24,26)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="67.1152%" y="709" width="0.1889%" height="15" fill="rgb(234,53,53)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="67.1152%" y="693" width="0.1889%" height="15" fill="rgb(208,108,28)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="67.1152%" y="677" width="0.1889%" height="15" fill="rgb(227,143,7)" fg:x="5686" fg:w="16"/><text x="67.3652%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.15%)</title><rect x="67.1506%" y="661" width="0.1534%" height="15" fill="rgb(238,189,38)" fg:x="5689" fg:w="13"/><text x="67.4006%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.15%)</title><rect x="67.1506%" y="645" width="0.1534%" height="15" fill="rgb(222,69,15)" fg:x="5689" fg:w="13"/><text x="67.4006%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.14%)</title><rect x="67.1624%" y="629" width="0.1416%" height="15" fill="rgb(213,169,7)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.14%)</title><rect x="67.1624%" y="613" width="0.1416%" height="15" fill="rgb(251,219,4)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.14%)</title><rect x="67.1624%" y="597" width="0.1416%" height="15" fill="rgb(241,55,40)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.14%)</title><rect x="67.1624%" y="581" width="0.1416%" height="15" fill="rgb(243,57,30)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="591.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.14%)</title><rect x="67.1624%" y="565" width="0.1416%" height="15" fill="rgb(234,50,30)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="575.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.14%)</title><rect x="67.1624%" y="549" width="0.1416%" height="15" fill="rgb(239,23,42)" fg:x="5690" fg:w="12"/><text x="67.4124%" y="559.50"></text></g><g><title>_int_malloc (9 samples, 0.11%)</title><rect x="67.1978%" y="533" width="0.1062%" height="15" fill="rgb(217,38,19)" fg:x="5693" fg:w="9"/><text x="67.4478%" y="543.50"></text></g><g><title>sysmalloc (1 samples, 0.01%)</title><rect x="67.2923%" y="517" width="0.0118%" height="15" fill="rgb(215,179,16)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="527.50"></text></g><g><title>grow_heap (1 samples, 0.01%)</title><rect x="67.2923%" y="501" width="0.0118%" height="15" fill="rgb(254,21,37)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="511.50"></text></g><g><title>__GI_mprotect (1 samples, 0.01%)</title><rect x="67.2923%" y="485" width="0.0118%" height="15" fill="rgb(219,207,48)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="67.2923%" y="469" width="0.0118%" height="15" fill="rgb(227,225,41)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="479.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="67.2923%" y="453" width="0.0118%" height="15" fill="rgb(223,130,1)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="463.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.01%)</title><rect x="67.2923%" y="437" width="0.0118%" height="15" fill="rgb(249,54,42)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="447.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.01%)</title><rect x="67.2923%" y="421" width="0.0118%" height="15" fill="rgb(248,69,25)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="431.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="67.2923%" y="405" width="0.0118%" height="15" fill="rgb(234,21,32)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="415.50"></text></g><g><title>vma_merge (1 samples, 0.01%)</title><rect x="67.2923%" y="389" width="0.0118%" height="15" fill="rgb(252,136,6)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="399.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="67.2923%" y="373" width="0.0118%" height="15" fill="rgb(245,87,12)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="383.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="67.2923%" y="357" width="0.0118%" height="15" fill="rgb(208,12,15)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="367.50"></text></g><g><title>mas_wr_modify (1 samples, 0.01%)</title><rect x="67.2923%" y="341" width="0.0118%" height="15" fill="rgb(250,98,2)" fg:x="5701" fg:w="1"/><text x="67.5423%" y="351.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="67.3041%" y="773" width="0.0118%" height="15" fill="rgb(205,213,15)" fg:x="5702" fg:w="1"/><text x="67.5541%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.01%)</title><rect x="67.3041%" y="757" width="0.0118%" height="15" fill="rgb(248,192,44)" fg:x="5702" fg:w="1"/><text x="67.5541%" y="767.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="67.3041%" y="741" width="0.0118%" height="15" fill="rgb(221,89,17)" fg:x="5702" fg:w="1"/><text x="67.5541%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="67.3041%" y="725" width="0.0118%" height="15" fill="rgb(209,55,3)" fg:x="5702" fg:w="1"/><text x="67.5541%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="67.3041%" y="709" width="0.0118%" height="15" fill="rgb(247,23,45)" fg:x="5702" fg:w="1"/><text x="67.5541%" y="719.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record (1,017 samples, 12.00%)</title><rect x="55.4297%" y="805" width="12.0042%" height="15" fill="rgb(235,152,23)" fg:x="4696" fg:w="1017"/><text x="55.6797%" y="815.50">block_stm_revm::mv..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.13%)</title><rect x="67.3041%" y="789" width="0.1298%" height="15" fill="rgb(244,63,13)" fg:x="5702" fg:w="11"/><text x="67.5541%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (10 samples, 0.12%)</title><rect x="67.3159%" y="773" width="0.1180%" height="15" fill="rgb(227,30,37)" fg:x="5703" fg:w="10"/><text x="67.5659%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (10 samples, 0.12%)</title><rect x="67.3159%" y="757" width="0.1180%" height="15" fill="rgb(224,49,42)" fg:x="5703" fg:w="10"/><text x="67.5659%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.12%)</title><rect x="67.3159%" y="741" width="0.1180%" height="15" fill="rgb(218,129,5)" fg:x="5703" fg:w="10"/><text x="67.5659%" y="751.50"></text></g><g><title>exit_to_user_mode_loop (4 samples, 0.05%)</title><rect x="67.7054%" y="709" width="0.0472%" height="15" fill="rgb(240,199,54)" fg:x="5736" fg:w="4"/><text x="67.9554%" y="719.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="67.7054%" y="693" width="0.0472%" height="15" fill="rgb(234,31,13)" fg:x="5736" fg:w="4"/><text x="67.9554%" y="703.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="67.7054%" y="677" width="0.0472%" height="15" fill="rgb(219,73,54)" fg:x="5736" fg:w="4"/><text x="67.9554%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="67.7054%" y="661" width="0.0472%" height="15" fill="rgb(251,162,10)" fg:x="5736" fg:w="4"/><text x="67.9554%" y="671.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="67.7054%" y="645" width="0.0472%" height="15" fill="rgb(240,138,47)" fg:x="5736" fg:w="4"/><text x="67.9554%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="67.7054%" y="789" width="0.0590%" height="15" fill="rgb(216,138,26)" fg:x="5736" fg:w="5"/><text x="67.9554%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="67.7054%" y="773" width="0.0590%" height="15" fill="rgb(243,17,35)" fg:x="5736" fg:w="5"/><text x="67.9554%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="67.7054%" y="757" width="0.0590%" height="15" fill="rgb(241,60,18)" fg:x="5736" fg:w="5"/><text x="67.9554%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="67.7054%" y="741" width="0.0590%" height="15" fill="rgb(234,2,44)" fg:x="5736" fg:w="5"/><text x="67.9554%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="67.7054%" y="725" width="0.0590%" height="15" fill="rgb(225,225,33)" fg:x="5736" fg:w="5"/><text x="67.9554%" y="735.50"></text></g><g><title>switch_fpu_return (1 samples, 0.01%)</title><rect x="67.7526%" y="709" width="0.0118%" height="15" fill="rgb(234,50,31)" fg:x="5740" fg:w="1"/><text x="68.0026%" y="719.50"></text></g><g><title>restore_fpregs_from_fpstate (1 samples, 0.01%)</title><rect x="67.7526%" y="693" width="0.0118%" height="15" fill="rgb(249,6,25)" fg:x="5740" fg:w="1"/><text x="68.0026%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.12%)</title><rect x="67.7644%" y="773" width="0.1180%" height="15" fill="rgb(241,5,17)" fg:x="5741" fg:w="10"/><text x="68.0144%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.12%)</title><rect x="67.7644%" y="757" width="0.1180%" height="15" fill="rgb(207,116,10)" fg:x="5741" fg:w="10"/><text x="68.0144%" y="767.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::decrease_validation_idx (26 samples, 0.31%)</title><rect x="67.7644%" y="789" width="0.3069%" height="15" fill="rgb(222,128,18)" fg:x="5741" fg:w="26"/><text x="68.0144%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_min (16 samples, 0.19%)</title><rect x="67.8824%" y="773" width="0.1889%" height="15" fill="rgb(229,109,25)" fg:x="5751" fg:w="16"/><text x="68.1324%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_umin (16 samples, 0.19%)</title><rect x="67.8824%" y="757" width="0.1889%" height="15" fill="rgb(222,102,25)" fg:x="5751" fg:w="16"/><text x="68.1324%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="68.0123%" y="741" width="0.0590%" height="15" fill="rgb(239,211,5)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="68.0123%" y="725" width="0.0590%" height="15" fill="rgb(223,136,26)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="68.0123%" y="709" width="0.0590%" height="15" fill="rgb(227,30,15)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="68.0123%" y="693" width="0.0590%" height="15" fill="rgb(247,76,4)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="68.0123%" y="677" width="0.0590%" height="15" fill="rgb(245,38,48)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="68.0123%" y="661" width="0.0590%" height="15" fill="rgb(210,220,14)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="68.0123%" y="645" width="0.0590%" height="15" fill="rgb(224,60,51)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="68.0123%" y="629" width="0.0590%" height="15" fill="rgb(212,133,49)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="68.0123%" y="613" width="0.0590%" height="15" fill="rgb(231,39,22)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="68.0123%" y="597" width="0.0590%" height="15" fill="rgb(236,173,22)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="607.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="68.0123%" y="581" width="0.0590%" height="15" fill="rgb(210,70,0)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="591.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="68.0123%" y="565" width="0.0590%" height="15" fill="rgb(215,170,11)" fg:x="5762" fg:w="5"/><text x="68.2623%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="68.0713%" y="789" width="0.0236%" height="15" fill="rgb(220,154,28)" fg:x="5767" fg:w="2"/><text x="68.3213%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="68.0713%" y="773" width="0.0236%" height="15" fill="rgb(240,160,41)" fg:x="5767" fg:w="2"/><text x="68.3213%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="68.0713%" y="757" width="0.0236%" height="15" fill="rgb(243,215,41)" fg:x="5767" fg:w="2"/><text x="68.3213%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="68.0713%" y="741" width="0.0236%" height="15" fill="rgb(214,208,31)" fg:x="5767" fg:w="2"/><text x="68.3213%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="68.0713%" y="725" width="0.0236%" height="15" fill="rgb(247,57,22)" fg:x="5767" fg:w="2"/><text x="68.3213%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.06%)</title><rect x="68.0949%" y="741" width="0.0590%" height="15" fill="rgb(228,73,52)" fg:x="5769" fg:w="5"/><text x="68.3449%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.06%)</title><rect x="68.0949%" y="725" width="0.0590%" height="15" fill="rgb(252,60,9)" fg:x="5769" fg:w="5"/><text x="68.3449%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (6 samples, 0.07%)</title><rect x="68.0949%" y="789" width="0.0708%" height="15" fill="rgb(233,9,51)" fg:x="5769" fg:w="6"/><text x="68.3449%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="68.0949%" y="773" width="0.0708%" height="15" fill="rgb(223,67,14)" fg:x="5769" fg:w="6"/><text x="68.3449%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (6 samples, 0.07%)</title><rect x="68.0949%" y="757" width="0.0708%" height="15" fill="rgb(222,86,2)" fg:x="5769" fg:w="6"/><text x="68.3449%" y="767.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="68.1539%" y="741" width="0.0118%" height="15" fill="rgb(243,58,54)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="68.1539%" y="725" width="0.0118%" height="15" fill="rgb(210,200,39)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="68.1539%" y="709" width="0.0118%" height="15" fill="rgb(238,135,9)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="719.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.01%)</title><rect x="68.1539%" y="693" width="0.0118%" height="15" fill="rgb(232,179,7)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="703.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="68.1539%" y="677" width="0.0118%" height="15" fill="rgb(245,65,41)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="687.50"></text></g><g><title>futex_wake (1 samples, 0.01%)</title><rect x="68.1539%" y="661" width="0.0118%" height="15" fill="rgb(227,43,8)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="671.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="68.1539%" y="645" width="0.0118%" height="15" fill="rgb(235,91,14)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="655.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="68.1539%" y="629" width="0.0118%" height="15" fill="rgb(235,219,31)" fg:x="5774" fg:w="1"/><text x="68.4039%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.26%)</title><rect x="68.1657%" y="789" width="0.2597%" height="15" fill="rgb(227,121,25)" fg:x="5775" fg:w="22"/><text x="68.4157%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.26%)</title><rect x="68.1657%" y="773" width="0.2597%" height="15" fill="rgb(254,129,24)" fg:x="5775" fg:w="22"/><text x="68.4157%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (10 samples, 0.12%)</title><rect x="68.4254%" y="789" width="0.1180%" height="15" fill="rgb(226,144,49)" fg:x="5797" fg:w="10"/><text x="68.6754%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (10 samples, 0.12%)</title><rect x="68.4254%" y="773" width="0.1180%" height="15" fill="rgb(214,187,32)" fg:x="5797" fg:w="10"/><text x="68.6754%" y="783.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_execution (102 samples, 1.20%)</title><rect x="67.4339%" y="805" width="1.2040%" height="15" fill="rgb(243,129,46)" fg:x="5713" fg:w="102"/><text x="67.6839%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (8 samples, 0.09%)</title><rect x="68.5434%" y="789" width="0.0944%" height="15" fill="rgb(221,185,35)" fg:x="5807" fg:w="8"/><text x="68.7934%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (8 samples, 0.09%)</title><rect x="68.5434%" y="773" width="0.0944%" height="15" fill="rgb(205,0,32)" fg:x="5807" fg:w="8"/><text x="68.7934%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (7 samples, 0.08%)</title><rect x="68.5552%" y="757" width="0.0826%" height="15" fill="rgb(229,179,12)" fg:x="5808" fg:w="7"/><text x="68.8052%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.08%)</title><rect x="68.5552%" y="741" width="0.0826%" height="15" fill="rgb(252,107,19)" fg:x="5808" fg:w="7"/><text x="68.8052%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.33%)</title><rect x="68.6497%" y="789" width="0.3305%" height="15" fill="rgb(220,95,27)" fg:x="5816" fg:w="28"/><text x="68.8997%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.33%)</title><rect x="68.6497%" y="773" width="0.3305%" height="15" fill="rgb(240,113,40)" fg:x="5816" fg:w="28"/><text x="68.8997%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.33%)</title><rect x="68.6497%" y="757" width="0.3305%" height="15" fill="rgb(208,4,43)" fg:x="5816" fg:w="28"/><text x="68.8997%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (11 samples, 0.13%)</title><rect x="68.9802%" y="773" width="0.1298%" height="15" fill="rgb(247,189,30)" fg:x="5844" fg:w="11"/><text x="69.2302%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="69.1100%" y="773" width="0.0118%" height="15" fill="rgb(231,157,17)" fg:x="5855" fg:w="1"/><text x="69.3600%" y="783.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="69.1100%" y="757" width="0.0118%" height="15" fill="rgb(224,139,6)" fg:x="5855" fg:w="1"/><text x="69.3600%" y="767.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (13 samples, 0.15%)</title><rect x="68.9802%" y="789" width="0.1534%" height="15" fill="rgb(223,83,16)" fg:x="5844" fg:w="13"/><text x="69.2302%" y="799.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="69.1218%" y="773" width="0.0118%" height="15" fill="rgb(232,211,20)" fg:x="5856" fg:w="1"/><text x="69.3718%" y="783.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="69.1336%" y="773" width="0.0236%" height="15" fill="rgb(225,203,35)" fg:x="5857" fg:w="2"/><text x="69.3836%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="69.1454%" y="757" width="0.0118%" height="15" fill="rgb(215,211,44)" fg:x="5858" fg:w="1"/><text x="69.3954%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="69.1454%" y="741" width="0.0118%" height="15" fill="rgb(248,213,26)" fg:x="5858" fg:w="1"/><text x="69.3954%" y="751.50"></text></g><g><title>core::clone::Clone::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="693" width="0.0354%" height="15" fill="rgb(214,23,52)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="703.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="677" width="0.0354%" height="15" fill="rgb(225,173,50)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="687.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="661" width="0.0354%" height="15" fill="rgb(206,150,22)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="645" width="0.0354%" height="15" fill="rgb(239,64,23)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="655.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="629" width="0.0354%" height="15" fill="rgb(242,50,38)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="639.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="69.1690%" y="613" width="0.0354%" height="15" fill="rgb(217,91,15)" fg:x="5860" fg:w="3"/><text x="69.4190%" y="623.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="69.1808%" y="597" width="0.0236%" height="15" fill="rgb(230,172,6)" fg:x="5861" fg:w="2"/><text x="69.4308%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="69.1808%" y="581" width="0.0236%" height="15" fill="rgb(221,98,26)" fg:x="5861" fg:w="2"/><text x="69.4308%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="69.1808%" y="565" width="0.0236%" height="15" fill="rgb(227,210,45)" fg:x="5861" fg:w="2"/><text x="69.4308%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="69.1808%" y="549" width="0.0236%" height="15" fill="rgb(206,8,30)" fg:x="5861" fg:w="2"/><text x="69.4308%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (6 samples, 0.07%)</title><rect x="69.1572%" y="725" width="0.0708%" height="15" fill="rgb(241,219,17)" fg:x="5859" fg:w="6"/><text x="69.4072%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (6 samples, 0.07%)</title><rect x="69.1572%" y="709" width="0.0708%" height="15" fill="rgb(247,121,29)" fg:x="5859" fg:w="6"/><text x="69.4072%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="69.2044%" y="693" width="0.0236%" height="15" fill="rgb(219,169,49)" fg:x="5863" fg:w="2"/><text x="69.4544%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="69.2044%" y="677" width="0.0236%" height="15" fill="rgb(253,49,49)" fg:x="5863" fg:w="2"/><text x="69.4544%" y="687.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="69.2044%" y="661" width="0.0236%" height="15" fill="rgb(217,178,3)" fg:x="5863" fg:w="2"/><text x="69.4544%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="69.2044%" y="645" width="0.0236%" height="15" fill="rgb(234,73,37)" fg:x="5863" fg:w="2"/><text x="69.4544%" y="655.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="597" width="0.0236%" height="15" fill="rgb(250,98,22)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="607.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="581" width="0.0236%" height="15" fill="rgb(220,108,37)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="591.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="565" width="0.0236%" height="15" fill="rgb(225,168,10)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="575.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="549" width="0.0236%" height="15" fill="rgb(247,215,21)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="559.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="533" width="0.0236%" height="15" fill="rgb(253,189,31)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="543.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="69.2989%" y="517" width="0.0236%" height="15" fill="rgb(241,54,22)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="527.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="69.2989%" y="501" width="0.0236%" height="15" fill="rgb(211,87,4)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="511.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="69.2989%" y="485" width="0.0236%" height="15" fill="rgb(245,112,24)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="495.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.02%)</title><rect x="69.2989%" y="469" width="0.0236%" height="15" fill="rgb(235,190,41)" fg:x="5871" fg:w="2"/><text x="69.5489%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="69.4169%" y="437" width="0.0472%" height="15" fill="rgb(214,89,8)" fg:x="5881" fg:w="4"/><text x="69.6669%" y="447.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="69.4169%" y="421" width="0.0472%" height="15" fill="rgb(249,155,35)" fg:x="5881" fg:w="4"/><text x="69.6669%" y="431.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="69.4169%" y="405" width="0.0472%" height="15" fill="rgb(249,88,26)" fg:x="5881" fg:w="4"/><text x="69.6669%" y="415.50"></text></g><g><title>malloc_consolidate (13 samples, 0.15%)</title><rect x="69.3225%" y="597" width="0.1534%" height="15" fill="rgb(232,56,8)" fg:x="5873" fg:w="13"/><text x="69.5725%" y="607.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="69.4169%" y="581" width="0.0590%" height="15" fill="rgb(240,95,3)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="69.4169%" y="565" width="0.0590%" height="15" fill="rgb(222,44,28)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="69.4169%" y="549" width="0.0590%" height="15" fill="rgb(234,16,30)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="69.4169%" y="533" width="0.0590%" height="15" fill="rgb(223,26,17)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="69.4169%" y="517" width="0.0590%" height="15" fill="rgb(239,187,47)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="69.4169%" y="501" width="0.0590%" height="15" fill="rgb(247,102,50)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="511.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="69.4169%" y="485" width="0.0590%" height="15" fill="rgb(231,216,22)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="495.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="69.4169%" y="469" width="0.0590%" height="15" fill="rgb(216,201,26)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="69.4169%" y="453" width="0.0590%" height="15" fill="rgb(214,186,23)" fg:x="5881" fg:w="5"/><text x="69.6669%" y="463.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="69.4641%" y="437" width="0.0118%" height="15" fill="rgb(235,184,4)" fg:x="5885" fg:w="1"/><text x="69.7141%" y="447.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="69.4641%" y="421" width="0.0118%" height="15" fill="rgb(244,46,17)" fg:x="5885" fg:w="1"/><text x="69.7141%" y="431.50"></text></g><g><title>access_error (1 samples, 0.01%)</title><rect x="69.4877%" y="549" width="0.0118%" height="15" fill="rgb(248,74,46)" fg:x="5887" fg:w="1"/><text x="69.7377%" y="559.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="69.4995%" y="533" width="0.0118%" height="15" fill="rgb(243,79,5)" fg:x="5888" fg:w="1"/><text x="69.7495%" y="543.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="69.5349%" y="469" width="0.0118%" height="15" fill="rgb(213,148,1)" fg:x="5891" fg:w="1"/><text x="69.7849%" y="479.50"></text></g><g><title>kthread_blkcg (1 samples, 0.01%)</title><rect x="69.5349%" y="453" width="0.0118%" height="15" fill="rgb(221,30,0)" fg:x="5891" fg:w="1"/><text x="69.7849%" y="463.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="69.5585%" y="437" width="0.0118%" height="15" fill="rgb(207,85,29)" fg:x="5893" fg:w="1"/><text x="69.8085%" y="447.50"></text></g><g><title>charge_memcg (3 samples, 0.04%)</title><rect x="69.5467%" y="453" width="0.0354%" height="15" fill="rgb(239,31,46)" fg:x="5892" fg:w="3"/><text x="69.7967%" y="463.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="69.5703%" y="437" width="0.0118%" height="15" fill="rgb(219,6,1)" fg:x="5894" fg:w="1"/><text x="69.8203%" y="447.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="69.5703%" y="421" width="0.0118%" height="15" fill="rgb(229,90,29)" fg:x="5894" fg:w="1"/><text x="69.8203%" y="431.50"></text></g><g><title>__mem_cgroup_charge (14 samples, 0.17%)</title><rect x="69.5467%" y="469" width="0.1653%" height="15" fill="rgb(242,201,42)" fg:x="5892" fg:w="14"/><text x="69.7967%" y="479.50"></text></g><g><title>get_mem_cgroup_from_mm (11 samples, 0.13%)</title><rect x="69.5822%" y="453" width="0.1298%" height="15" fill="rgb(243,80,54)" fg:x="5895" fg:w="11"/><text x="69.8322%" y="463.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="69.7120%" y="469" width="0.0236%" height="15" fill="rgb(223,166,15)" fg:x="5906" fg:w="2"/><text x="69.9620%" y="479.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="69.7238%" y="453" width="0.0118%" height="15" fill="rgb(238,78,27)" fg:x="5907" fg:w="1"/><text x="69.9738%" y="463.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="69.7356%" y="469" width="0.0236%" height="15" fill="rgb(235,28,43)" fg:x="5908" fg:w="2"/><text x="69.9856%" y="479.50"></text></g><g><title>folio_add_lru_vma (6 samples, 0.07%)</title><rect x="69.7592%" y="469" width="0.0708%" height="15" fill="rgb(240,210,28)" fg:x="5910" fg:w="6"/><text x="70.0092%" y="479.50"></text></g><g><title>folio_add_lru (6 samples, 0.07%)</title><rect x="69.7592%" y="453" width="0.0708%" height="15" fill="rgb(253,6,46)" fg:x="5910" fg:w="6"/><text x="70.0092%" y="463.50"></text></g><g><title>folio_batch_move_lru (3 samples, 0.04%)</title><rect x="69.7946%" y="437" width="0.0354%" height="15" fill="rgb(250,159,47)" fg:x="5913" fg:w="3"/><text x="70.0446%" y="447.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="69.8064%" y="421" width="0.0236%" height="15" fill="rgb(216,139,2)" fg:x="5914" fg:w="2"/><text x="70.0564%" y="431.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="69.8182%" y="405" width="0.0118%" height="15" fill="rgb(221,124,44)" fg:x="5915" fg:w="1"/><text x="70.0682%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="69.8890%" y="373" width="0.0472%" height="15" fill="rgb(205,37,22)" fg:x="5921" fg:w="4"/><text x="70.1390%" y="383.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="69.8890%" y="357" width="0.0472%" height="15" fill="rgb(250,55,8)" fg:x="5921" fg:w="4"/><text x="70.1390%" y="367.50"></text></g><g><title>__cond_resched (9 samples, 0.11%)</title><rect x="69.8772%" y="421" width="0.1062%" height="15" fill="rgb(215,83,48)" fg:x="5920" fg:w="9"/><text x="70.1272%" y="431.50"></text></g><g><title>__schedule (9 samples, 0.11%)</title><rect x="69.8772%" y="405" width="0.1062%" height="15" fill="rgb(253,2,32)" fg:x="5920" fg:w="9"/><text x="70.1272%" y="415.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.11%)</title><rect x="69.8772%" y="389" width="0.1062%" height="15" fill="rgb(236,67,28)" fg:x="5920" fg:w="9"/><text x="70.1272%" y="399.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="69.9363%" y="373" width="0.0472%" height="15" fill="rgb(252,55,15)" fg:x="5925" fg:w="4"/><text x="70.1863%" y="383.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.01%)</title><rect x="69.9835%" y="405" width="0.0118%" height="15" fill="rgb(243,173,17)" fg:x="5929" fg:w="1"/><text x="70.2335%" y="415.50"></text></g><g><title>clear_page_erms (3 samples, 0.04%)</title><rect x="69.9953%" y="405" width="0.0354%" height="15" fill="rgb(215,212,13)" fg:x="5930" fg:w="3"/><text x="70.2453%" y="415.50"></text></g><g><title>handle_mm_fault (45 samples, 0.53%)</title><rect x="69.5113%" y="533" width="0.5312%" height="15" fill="rgb(253,176,6)" fg:x="5889" fg:w="45"/><text x="69.7613%" y="543.50"></text></g><g><title>__handle_mm_fault (45 samples, 0.53%)</title><rect x="69.5113%" y="517" width="0.5312%" height="15" fill="rgb(236,105,26)" fg:x="5889" fg:w="45"/><text x="69.7613%" y="527.50"></text></g><g><title>handle_pte_fault (45 samples, 0.53%)</title><rect x="69.5113%" y="501" width="0.5312%" height="15" fill="rgb(239,226,32)" fg:x="5889" fg:w="45"/><text x="69.7613%" y="511.50"></text></g><g><title>do_anonymous_page (44 samples, 0.52%)</title><rect x="69.5231%" y="485" width="0.5194%" height="15" fill="rgb(236,104,51)" fg:x="5890" fg:w="44"/><text x="69.7731%" y="495.50"></text></g><g><title>vma_alloc_folio (18 samples, 0.21%)</title><rect x="69.8300%" y="469" width="0.2125%" height="15" fill="rgb(220,172,33)" fg:x="5916" fg:w="18"/><text x="70.0800%" y="479.50"></text></g><g><title>__folio_alloc (18 samples, 0.21%)</title><rect x="69.8300%" y="453" width="0.2125%" height="15" fill="rgb(224,182,25)" fg:x="5916" fg:w="18"/><text x="70.0800%" y="463.50"></text></g><g><title>__alloc_pages (17 samples, 0.20%)</title><rect x="69.8418%" y="437" width="0.2007%" height="15" fill="rgb(236,184,24)" fg:x="5917" fg:w="17"/><text x="70.0918%" y="447.50"></text></g><g><title>get_page_from_freelist (5 samples, 0.06%)</title><rect x="69.9835%" y="421" width="0.0590%" height="15" fill="rgb(241,221,14)" fg:x="5929" fg:w="5"/><text x="70.2335%" y="431.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="70.0307%" y="405" width="0.0118%" height="15" fill="rgb(227,146,5)" fg:x="5933" fg:w="1"/><text x="70.2807%" y="415.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="70.0307%" y="389" width="0.0118%" height="15" fill="rgb(214,15,23)" fg:x="5933" fg:w="1"/><text x="70.2807%" y="399.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="70.0307%" y="373" width="0.0118%" height="15" fill="rgb(233,157,31)" fg:x="5933" fg:w="1"/><text x="70.2807%" y="383.50"></text></g><g><title>do_user_addr_fault (50 samples, 0.59%)</title><rect x="69.4995%" y="549" width="0.5902%" height="15" fill="rgb(211,27,52)" fg:x="5888" fg:w="50"/><text x="69.7495%" y="559.50"></text></g><g><title>lock_vma_under_rcu (4 samples, 0.05%)</title><rect x="70.0425%" y="533" width="0.0472%" height="15" fill="rgb(212,223,15)" fg:x="5934" fg:w="4"/><text x="70.2925%" y="543.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="70.0779%" y="517" width="0.0118%" height="15" fill="rgb(254,211,0)" fg:x="5937" fg:w="1"/><text x="70.3279%" y="527.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="70.0779%" y="501" width="0.0118%" height="15" fill="rgb(205,43,38)" fg:x="5937" fg:w="1"/><text x="70.3279%" y="511.50"></text></g><g><title>amd_clear_divider (1 samples, 0.01%)</title><rect x="70.0897%" y="533" width="0.0118%" height="15" fill="rgb(242,206,46)" fg:x="5938" fg:w="1"/><text x="70.3397%" y="543.50"></text></g><g><title>asm_exc_page_fault (57 samples, 0.67%)</title><rect x="69.4877%" y="581" width="0.6728%" height="15" fill="rgb(220,221,12)" fg:x="5887" fg:w="57"/><text x="69.7377%" y="591.50"></text></g><g><title>exc_page_fault (57 samples, 0.67%)</title><rect x="69.4877%" y="565" width="0.6728%" height="15" fill="rgb(217,156,35)" fg:x="5887" fg:w="57"/><text x="69.7377%" y="575.50"></text></g><g><title>irqentry_exit (6 samples, 0.07%)</title><rect x="70.0897%" y="549" width="0.0708%" height="15" fill="rgb(207,181,49)" fg:x="5938" fg:w="6"/><text x="70.3397%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="70.1015%" y="533" width="0.0590%" height="15" fill="rgb(235,103,47)" fg:x="5939" fg:w="5"/><text x="70.3515%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="70.1015%" y="517" width="0.0590%" height="15" fill="rgb(222,63,28)" fg:x="5939" fg:w="5"/><text x="70.3515%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="70.1015%" y="501" width="0.0590%" height="15" fill="rgb(244,137,21)" fg:x="5939" fg:w="5"/><text x="70.3515%" y="511.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="70.1133%" y="485" width="0.0472%" height="15" fill="rgb(228,35,27)" fg:x="5940" fg:w="4"/><text x="70.3633%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="70.1133%" y="469" width="0.0472%" height="15" fill="rgb(226,191,41)" fg:x="5940" fg:w="4"/><text x="70.3633%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="70.1133%" y="453" width="0.0472%" height="15" fill="rgb(210,154,3)" fg:x="5940" fg:w="4"/><text x="70.3633%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="70.1133%" y="437" width="0.0472%" height="15" fill="rgb(216,60,49)" fg:x="5940" fg:w="4"/><text x="70.3633%" y="447.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="70.1133%" y="421" width="0.0472%" height="15" fill="rgb(226,17,20)" fg:x="5940" fg:w="4"/><text x="70.3633%" y="431.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="70.1605%" y="485" width="0.0118%" height="15" fill="rgb(206,115,35)" fg:x="5944" fg:w="1"/><text x="70.4105%" y="495.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="70.1605%" y="469" width="0.0118%" height="15" fill="rgb(227,88,1)" fg:x="5944" fg:w="1"/><text x="70.4105%" y="479.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="70.1605%" y="453" width="0.0118%" height="15" fill="rgb(230,222,24)" fg:x="5944" fg:w="1"/><text x="70.4105%" y="463.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="70.1605%" y="581" width="0.0590%" height="15" fill="rgb(214,124,32)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="70.1605%" y="565" width="0.0590%" height="15" fill="rgb(240,41,36)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="70.1605%" y="549" width="0.0590%" height="15" fill="rgb(221,17,52)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="70.1605%" y="533" width="0.0590%" height="15" fill="rgb(252,70,16)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="70.1605%" y="517" width="0.0590%" height="15" fill="rgb(250,177,4)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="70.1605%" y="501" width="0.0590%" height="15" fill="rgb(240,188,47)" fg:x="5944" fg:w="5"/><text x="70.4105%" y="511.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="70.1723%" y="485" width="0.0472%" height="15" fill="rgb(215,92,12)" fg:x="5945" fg:w="4"/><text x="70.4223%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="70.1723%" y="469" width="0.0472%" height="15" fill="rgb(242,110,29)" fg:x="5945" fg:w="4"/><text x="70.4223%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="70.1723%" y="453" width="0.0472%" height="15" fill="rgb(208,211,26)" fg:x="5945" fg:w="4"/><text x="70.4223%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="70.1723%" y="437" width="0.0472%" height="15" fill="rgb(244,147,6)" fg:x="5945" fg:w="4"/><text x="70.4223%" y="447.50"></text></g><g><title>_nv040310rm (1 samples, 0.01%)</title><rect x="70.2314%" y="549" width="0.0118%" height="15" fill="rgb(211,130,42)" fg:x="5950" fg:w="1"/><text x="70.4814%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="70.2432%" y="549" width="0.0118%" height="15" fill="rgb(220,63,1)" fg:x="5951" fg:w="1"/><text x="70.4932%" y="559.50"></text></g><g><title>_raw_spin_lock_irq (5 samples, 0.06%)</title><rect x="70.3376%" y="453" width="0.0590%" height="15" fill="rgb(241,212,30)" fg:x="5959" fg:w="5"/><text x="70.5876%" y="463.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="70.3848%" y="437" width="0.0118%" height="15" fill="rgb(233,153,17)" fg:x="5963" fg:w="1"/><text x="70.6348%" y="447.50"></text></g><g><title>osq_lock (417 samples, 4.92%)</title><rect x="70.4792%" y="437" width="4.9221%" height="15" fill="rgb(236,3,10)" fg:x="5971" fg:w="417"/><text x="70.7292%" y="447.50">osq_lo..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="75.3895%" y="421" width="0.0118%" height="15" fill="rgb(232,41,21)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="75.3895%" y="405" width="0.0118%" height="15" fill="rgb(206,63,51)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="75.3895%" y="389" width="0.0118%" height="15" fill="rgb(250,214,3)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="399.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="75.3895%" y="373" width="0.0118%" height="15" fill="rgb(254,89,27)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="383.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="75.3895%" y="357" width="0.0118%" height="15" fill="rgb(249,41,14)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="367.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="75.3895%" y="341" width="0.0118%" height="15" fill="rgb(221,196,51)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="351.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.01%)</title><rect x="75.3895%" y="325" width="0.0118%" height="15" fill="rgb(214,116,26)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="335.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.01%)</title><rect x="75.3895%" y="309" width="0.0118%" height="15" fill="rgb(236,67,7)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="319.50"></text></g><g><title>update_wall_time (1 samples, 0.01%)</title><rect x="75.3895%" y="293" width="0.0118%" height="15" fill="rgb(253,179,32)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="303.50"></text></g><g><title>timekeeping_advance (1 samples, 0.01%)</title><rect x="75.3895%" y="277" width="0.0118%" height="15" fill="rgb(218,33,15)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="287.50"></text></g><g><title>timekeeping_update (1 samples, 0.01%)</title><rect x="75.3895%" y="261" width="0.0118%" height="15" fill="rgb(217,202,41)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="271.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.01%)</title><rect x="75.3895%" y="245" width="0.0118%" height="15" fill="rgb(234,133,5)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="255.50"></text></g><g><title>pvclock_gtod_notify (1 samples, 0.01%)</title><rect x="75.3895%" y="229" width="0.0118%" height="15" fill="rgb(240,47,40)" fg:x="6387" fg:w="1"/><text x="75.6395%" y="239.50"></text></g><g><title>osq_unlock (1 samples, 0.01%)</title><rect x="75.4013%" y="437" width="0.0118%" height="15" fill="rgb(234,166,26)" fg:x="6388" fg:w="1"/><text x="75.6513%" y="447.50"></text></g><g><title>rwsem_optimistic_spin (493 samples, 5.82%)</title><rect x="70.3966%" y="453" width="5.8192%" height="15" fill="rgb(244,125,51)" fg:x="5964" fg:w="493"/><text x="70.6466%" y="463.50">rwsem_o..</text></g><g><title>rwsem_spin_on_owner (68 samples, 0.80%)</title><rect x="75.4131%" y="437" width="0.8026%" height="15" fill="rgb(229,171,11)" fg:x="6389" fg:w="68"/><text x="75.6631%" y="447.50"></text></g><g><title>rwsem_spin_on_owner (4 samples, 0.05%)</title><rect x="76.2158%" y="453" width="0.0472%" height="15" fill="rgb(224,38,45)" fg:x="6457" fg:w="4"/><text x="76.4658%" y="463.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="76.2630%" y="405" width="0.0236%" height="15" fill="rgb(237,27,7)" fg:x="6461" fg:w="2"/><text x="76.5130%" y="415.50"></text></g><g><title>dequeue_task (1 samples, 0.01%)</title><rect x="76.2866%" y="405" width="0.0118%" height="15" fill="rgb(216,52,7)" fg:x="6463" fg:w="1"/><text x="76.5366%" y="415.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.01%)</title><rect x="76.2866%" y="389" width="0.0118%" height="15" fill="rgb(243,11,11)" fg:x="6463" fg:w="1"/><text x="76.5366%" y="399.50"></text></g><g><title>dequeue_entity (1 samples, 0.01%)</title><rect x="76.2866%" y="373" width="0.0118%" height="15" fill="rgb(253,167,20)" fg:x="6463" fg:w="1"/><text x="76.5366%" y="383.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="76.2984%" y="405" width="0.0118%" height="15" fill="rgb(215,207,5)" fg:x="6464" fg:w="1"/><text x="76.5484%" y="415.50"></text></g><g><title>_raw_spin_unlock (9 samples, 0.11%)</title><rect x="76.4873%" y="373" width="0.1062%" height="15" fill="rgb(252,127,31)" fg:x="6480" fg:w="9"/><text x="76.7373%" y="383.50"></text></g><g><title>perf_ctx_enable (69 samples, 0.81%)</title><rect x="76.5935%" y="373" width="0.8144%" height="15" fill="rgb(209,106,27)" fg:x="6489" fg:w="69"/><text x="76.8435%" y="383.50"></text></g><g><title>x86_pmu_enable (38 samples, 0.45%)</title><rect x="76.9594%" y="357" width="0.4485%" height="15" fill="rgb(214,220,18)" fg:x="6520" fg:w="38"/><text x="77.2094%" y="367.50"></text></g><g><title>perf_pmu_nop_void (39 samples, 0.46%)</title><rect x="77.4079%" y="373" width="0.4603%" height="15" fill="rgb(237,89,12)" fg:x="6558" fg:w="39"/><text x="77.6579%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (124 samples, 1.46%)</title><rect x="76.4164%" y="389" width="1.4636%" height="15" fill="rgb(209,167,36)" fg:x="6474" fg:w="124"/><text x="76.6664%" y="399.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="77.8683%" y="373" width="0.0118%" height="15" fill="rgb(243,45,22)" fg:x="6597" fg:w="1"/><text x="78.1183%" y="383.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="77.8801%" y="389" width="0.0472%" height="15" fill="rgb(239,2,46)" fg:x="6598" fg:w="4"/><text x="78.1301%" y="399.50"></text></g><g><title>_raw_spin_unlock (12 samples, 0.14%)</title><rect x="77.9273%" y="389" width="0.1416%" height="15" fill="rgb(241,101,0)" fg:x="6602" fg:w="12"/><text x="78.1773%" y="399.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="78.0689%" y="389" width="0.0118%" height="15" fill="rgb(244,34,31)" fg:x="6614" fg:w="1"/><text x="78.3189%" y="399.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="78.0689%" y="373" width="0.0118%" height="15" fill="rgb(248,23,22)" fg:x="6614" fg:w="1"/><text x="78.3189%" y="383.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="78.0689%" y="357" width="0.0118%" height="15" fill="rgb(218,27,48)" fg:x="6614" fg:w="1"/><text x="78.3189%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (154 samples, 1.82%)</title><rect x="76.3102%" y="405" width="1.8178%" height="15" fill="rgb(232,78,1)" fg:x="6465" fg:w="154"/><text x="76.5602%" y="415.50">f..</text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="78.0807%" y="389" width="0.0472%" height="15" fill="rgb(233,169,12)" fg:x="6615" fg:w="4"/><text x="78.3307%" y="399.50"></text></g><g><title>_raw_spin_rq_lock_irqsave (1 samples, 0.01%)</title><rect x="78.1634%" y="341" width="0.0118%" height="15" fill="rgb(225,222,54)" fg:x="6622" fg:w="1"/><text x="78.4134%" y="351.50"></text></g><g><title>raw_spin_rq_lock_nested (1 samples, 0.01%)</title><rect x="78.1634%" y="325" width="0.0118%" height="15" fill="rgb(245,126,29)" fg:x="6622" fg:w="1"/><text x="78.4134%" y="335.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="78.1634%" y="309" width="0.0118%" height="15" fill="rgb(241,63,48)" fg:x="6622" fg:w="1"/><text x="78.4134%" y="319.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="78.1634%" y="293" width="0.0118%" height="15" fill="rgb(235,126,38)" fg:x="6622" fg:w="1"/><text x="78.4134%" y="303.50"></text></g><g><title>activate_task (1 samples, 0.01%)</title><rect x="78.1752%" y="341" width="0.0118%" height="15" fill="rgb(232,96,49)" fg:x="6623" fg:w="1"/><text x="78.4252%" y="351.50"></text></g><g><title>enqueue_task (1 samples, 0.01%)</title><rect x="78.1752%" y="325" width="0.0118%" height="15" fill="rgb(211,146,40)" fg:x="6623" fg:w="1"/><text x="78.4252%" y="335.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.01%)</title><rect x="78.1752%" y="309" width="0.0118%" height="15" fill="rgb(247,93,44)" fg:x="6623" fg:w="1"/><text x="78.4252%" y="319.50"></text></g><g><title>enqueue_entity (1 samples, 0.01%)</title><rect x="78.1752%" y="293" width="0.0118%" height="15" fill="rgb(251,41,49)" fg:x="6623" fg:w="1"/><text x="78.4252%" y="303.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="78.1752%" y="277" width="0.0118%" height="15" fill="rgb(218,155,12)" fg:x="6623" fg:w="1"/><text x="78.4252%" y="287.50"></text></g><g><title>pick_next_task (7 samples, 0.08%)</title><rect x="78.1280%" y="405" width="0.0826%" height="15" fill="rgb(221,161,30)" fg:x="6619" fg:w="7"/><text x="78.3780%" y="415.50"></text></g><g><title>pick_next_task_fair (7 samples, 0.08%)</title><rect x="78.1280%" y="389" width="0.0826%" height="15" fill="rgb(221,179,11)" fg:x="6619" fg:w="7"/><text x="78.3780%" y="399.50"></text></g><g><title>newidle_balance (5 samples, 0.06%)</title><rect x="78.1516%" y="373" width="0.0590%" height="15" fill="rgb(224,170,48)" fg:x="6621" fg:w="5"/><text x="78.4016%" y="383.50"></text></g><g><title>load_balance (4 samples, 0.05%)</title><rect x="78.1634%" y="357" width="0.0472%" height="15" fill="rgb(223,117,5)" fg:x="6622" fg:w="4"/><text x="78.4134%" y="367.50"></text></g><g><title>find_busiest_group (2 samples, 0.02%)</title><rect x="78.1870%" y="341" width="0.0236%" height="15" fill="rgb(209,52,20)" fg:x="6624" fg:w="2"/><text x="78.4370%" y="351.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (2 samples, 0.02%)</title><rect x="78.1870%" y="325" width="0.0236%" height="15" fill="rgb(209,19,41)" fg:x="6624" fg:w="2"/><text x="78.4370%" y="335.50"></text></g><g><title>update_sg_lb_stats (2 samples, 0.02%)</title><rect x="78.1870%" y="309" width="0.0236%" height="15" fill="rgb(210,177,12)" fg:x="6624" fg:w="2"/><text x="78.4370%" y="319.50"></text></g><g><title>sched_use_asym_prio (1 samples, 0.01%)</title><rect x="78.1988%" y="293" width="0.0118%" height="15" fill="rgb(211,159,37)" fg:x="6625" fg:w="1"/><text x="78.4488%" y="303.50"></text></g><g><title>down_write_killable (675 samples, 7.97%)</title><rect x="70.2550%" y="485" width="7.9674%" height="15" fill="rgb(209,20,2)" fg:x="5952" fg:w="675"/><text x="70.5050%" y="495.50">down_write_..</text></g><g><title>rwsem_down_write_slowpath (674 samples, 7.96%)</title><rect x="70.2668%" y="469" width="7.9556%" height="15" fill="rgb(244,3,46)" fg:x="5953" fg:w="674"/><text x="70.5168%" y="479.50">rwsem_down_..</text></g><g><title>schedule_preempt_disabled (166 samples, 1.96%)</title><rect x="76.2630%" y="453" width="1.9594%" height="15" fill="rgb(220,94,38)" fg:x="6461" fg:w="166"/><text x="76.5130%" y="463.50">s..</text></g><g><title>schedule (166 samples, 1.96%)</title><rect x="76.2630%" y="437" width="1.9594%" height="15" fill="rgb(253,14,31)" fg:x="6461" fg:w="166"/><text x="76.5130%" y="447.50">s..</text></g><g><title>__schedule (166 samples, 1.96%)</title><rect x="76.2630%" y="421" width="1.9594%" height="15" fill="rgb(234,176,13)" fg:x="6461" fg:w="166"/><text x="76.5130%" y="431.50">_..</text></g><g><title>prepare_task_switch (1 samples, 0.01%)</title><rect x="78.2106%" y="405" width="0.0118%" height="15" fill="rgb(218,62,25)" fg:x="6626" fg:w="1"/><text x="78.4606%" y="415.50"></text></g><g><title>mas_find (4 samples, 0.05%)</title><rect x="78.2224%" y="485" width="0.0472%" height="15" fill="rgb(216,124,40)" fg:x="6627" fg:w="4"/><text x="78.4724%" y="495.50"></text></g><g><title>mas_walk (4 samples, 0.05%)</title><rect x="78.2224%" y="469" width="0.0472%" height="15" fill="rgb(228,170,12)" fg:x="6627" fg:w="4"/><text x="78.4724%" y="479.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="78.2578%" y="453" width="0.0118%" height="15" fill="rgb(231,226,5)" fg:x="6630" fg:w="1"/><text x="78.5078%" y="463.50"></text></g><g><title>may_expand_vm (1 samples, 0.01%)</title><rect x="78.2696%" y="485" width="0.0118%" height="15" fill="rgb(237,122,22)" fg:x="6631" fg:w="1"/><text x="78.5196%" y="495.50"></text></g><g><title>change_protection (7 samples, 0.08%)</title><rect x="78.2932%" y="469" width="0.0826%" height="15" fill="rgb(209,185,25)" fg:x="6633" fg:w="7"/><text x="78.5432%" y="479.50"></text></g><g><title>change_protection_range (7 samples, 0.08%)</title><rect x="78.2932%" y="453" width="0.0826%" height="15" fill="rgb(228,200,32)" fg:x="6633" fg:w="7"/><text x="78.5432%" y="463.50"></text></g><g><title>change_p4d_range (6 samples, 0.07%)</title><rect x="78.3050%" y="437" width="0.0708%" height="15" fill="rgb(217,140,10)" fg:x="6634" fg:w="6"/><text x="78.5550%" y="447.50"></text></g><g><title>change_pmd_range.isra.0 (6 samples, 0.07%)</title><rect x="78.3050%" y="421" width="0.0708%" height="15" fill="rgb(253,17,24)" fg:x="6634" fg:w="6"/><text x="78.5550%" y="431.50"></text></g><g><title>__cond_resched (5 samples, 0.06%)</title><rect x="78.3168%" y="405" width="0.0590%" height="15" fill="rgb(212,61,6)" fg:x="6635" fg:w="5"/><text x="78.5668%" y="415.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="78.3168%" y="389" width="0.0590%" height="15" fill="rgb(205,14,25)" fg:x="6635" fg:w="5"/><text x="78.5668%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="78.3168%" y="373" width="0.0590%" height="15" fill="rgb(232,69,41)" fg:x="6635" fg:w="5"/><text x="78.5668%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="78.3286%" y="357" width="0.0472%" height="15" fill="rgb(241,106,47)" fg:x="6636" fg:w="4"/><text x="78.5786%" y="367.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="78.3286%" y="341" width="0.0472%" height="15" fill="rgb(210,213,53)" fg:x="6636" fg:w="4"/><text x="78.5786%" y="351.50"></text></g><g><title>may_expand_vm (2 samples, 0.02%)</title><rect x="78.3758%" y="469" width="0.0236%" height="15" fill="rgb(253,175,27)" fg:x="6640" fg:w="2"/><text x="78.6258%" y="479.50"></text></g><g><title>kfree (1 samples, 0.01%)</title><rect x="78.4112%" y="437" width="0.0118%" height="15" fill="rgb(211,171,24)" fg:x="6643" fg:w="1"/><text x="78.6612%" y="447.50"></text></g><g><title>__perf_event__output_id_sample (1 samples, 0.01%)</title><rect x="78.4703%" y="389" width="0.0118%" height="15" fill="rgb(229,80,7)" fg:x="6648" fg:w="1"/><text x="78.7203%" y="399.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="78.4703%" y="373" width="0.0118%" height="15" fill="rgb(212,46,39)" fg:x="6648" fg:w="1"/><text x="78.7203%" y="383.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="78.4703%" y="357" width="0.0118%" height="15" fill="rgb(240,80,45)" fg:x="6648" fg:w="1"/><text x="78.7203%" y="367.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.01%)</title><rect x="78.4821%" y="389" width="0.0118%" height="15" fill="rgb(253,177,40)" fg:x="6649" fg:w="1"/><text x="78.7321%" y="399.50"></text></g><g><title>perf_output_begin (2 samples, 0.02%)</title><rect x="78.4939%" y="389" width="0.0236%" height="15" fill="rgb(249,200,15)" fg:x="6650" fg:w="2"/><text x="78.7439%" y="399.50"></text></g><g><title>perf_event_mmap (11 samples, 0.13%)</title><rect x="78.3994%" y="469" width="0.1298%" height="15" fill="rgb(217,78,26)" fg:x="6642" fg:w="11"/><text x="78.6494%" y="479.50"></text></g><g><title>perf_event_mmap_event (11 samples, 0.13%)</title><rect x="78.3994%" y="453" width="0.1298%" height="15" fill="rgb(254,151,32)" fg:x="6642" fg:w="11"/><text x="78.6494%" y="463.50"></text></g><g><title>perf_iterate_sb.constprop.0 (9 samples, 0.11%)</title><rect x="78.4230%" y="437" width="0.1062%" height="15" fill="rgb(226,165,27)" fg:x="6644" fg:w="9"/><text x="78.6730%" y="447.50"></text></g><g><title>perf_iterate_ctx (9 samples, 0.11%)</title><rect x="78.4230%" y="421" width="0.1062%" height="15" fill="rgb(250,206,4)" fg:x="6644" fg:w="9"/><text x="78.6730%" y="431.50"></text></g><g><title>perf_event_mmap_output (5 samples, 0.06%)</title><rect x="78.4703%" y="405" width="0.0590%" height="15" fill="rgb(231,229,27)" fg:x="6648" fg:w="5"/><text x="78.7203%" y="415.50"></text></g><g><title>perf_output_end (1 samples, 0.01%)</title><rect x="78.5175%" y="389" width="0.0118%" height="15" fill="rgb(239,217,8)" fg:x="6652" fg:w="1"/><text x="78.7675%" y="399.50"></text></g><g><title>perf_output_put_handle (1 samples, 0.01%)</title><rect x="78.5175%" y="373" width="0.0118%" height="15" fill="rgb(225,204,27)" fg:x="6652" fg:w="1"/><text x="78.7675%" y="383.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.01%)</title><rect x="78.5411%" y="453" width="0.0118%" height="15" fill="rgb(230,56,32)" fg:x="6654" fg:w="1"/><text x="78.7911%" y="463.50"></text></g><g><title>__memset (2 samples, 0.02%)</title><rect x="78.5529%" y="421" width="0.0236%" height="15" fill="rgb(222,56,27)" fg:x="6655" fg:w="2"/><text x="78.8029%" y="431.50"></text></g><g><title>kmem_cache_alloc (2 samples, 0.02%)</title><rect x="78.5765%" y="421" width="0.0236%" height="15" fill="rgb(253,108,27)" fg:x="6657" fg:w="2"/><text x="78.8265%" y="431.50"></text></g><g><title>mas_preallocate (5 samples, 0.06%)</title><rect x="78.5529%" y="453" width="0.0590%" height="15" fill="rgb(212,87,36)" fg:x="6655" fg:w="5"/><text x="78.8029%" y="463.50"></text></g><g><title>mas_alloc_nodes (5 samples, 0.06%)</title><rect x="78.5529%" y="437" width="0.0590%" height="15" fill="rgb(247,82,36)" fg:x="6655" fg:w="5"/><text x="78.8029%" y="447.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="78.6001%" y="421" width="0.0118%" height="15" fill="rgb(222,143,9)" fg:x="6659" fg:w="1"/><text x="78.8501%" y="431.50"></text></g><g><title>__kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="78.6001%" y="405" width="0.0118%" height="15" fill="rgb(238,162,48)" fg:x="6659" fg:w="1"/><text x="78.8501%" y="415.50"></text></g><g><title>kmem_cache_free (2 samples, 0.02%)</title><rect x="78.6473%" y="421" width="0.0236%" height="15" fill="rgb(221,59,43)" fg:x="6663" fg:w="2"/><text x="78.8973%" y="431.50"></text></g><g><title>mas_destroy (3 samples, 0.04%)</title><rect x="78.6473%" y="437" width="0.0354%" height="15" fill="rgb(205,166,41)" fg:x="6663" fg:w="3"/><text x="78.8973%" y="447.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.01%)</title><rect x="78.6709%" y="421" width="0.0118%" height="15" fill="rgb(241,186,40)" fg:x="6665" fg:w="1"/><text x="78.9209%" y="431.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.01%)</title><rect x="78.6709%" y="405" width="0.0118%" height="15" fill="rgb(216,119,35)" fg:x="6665" fg:w="1"/><text x="78.9209%" y="415.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="78.6709%" y="389" width="0.0118%" height="15" fill="rgb(208,68,38)" fg:x="6665" fg:w="1"/><text x="78.9209%" y="399.50"></text></g><g><title>mas_store_prealloc (7 samples, 0.08%)</title><rect x="78.6119%" y="453" width="0.0826%" height="15" fill="rgb(217,113,1)" fg:x="6660" fg:w="7"/><text x="78.8619%" y="463.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="78.6827%" y="437" width="0.0118%" height="15" fill="rgb(242,153,3)" fg:x="6666" fg:w="1"/><text x="78.9327%" y="447.50"></text></g><g><title>mas_wr_spanning_store.isra.0 (1 samples, 0.01%)</title><rect x="78.6827%" y="421" width="0.0118%" height="15" fill="rgb(229,76,35)" fg:x="6666" fg:w="1"/><text x="78.9327%" y="431.50"></text></g><g><title>mas_spanning_rebalance.isra.0 (1 samples, 0.01%)</title><rect x="78.6827%" y="405" width="0.0118%" height="15" fill="rgb(229,125,34)" fg:x="6666" fg:w="1"/><text x="78.9327%" y="415.50"></text></g><g><title>mas_wmb_replace (1 samples, 0.01%)</title><rect x="78.6827%" y="389" width="0.0118%" height="15" fill="rgb(238,179,36)" fg:x="6666" fg:w="1"/><text x="78.9327%" y="399.50"></text></g><g><title>mas_descend_adopt (1 samples, 0.01%)</title><rect x="78.6827%" y="373" width="0.0118%" height="15" fill="rgb(244,183,19)" fg:x="6666" fg:w="1"/><text x="78.9327%" y="383.50"></text></g><g><title>mt_find (2 samples, 0.02%)</title><rect x="78.6945%" y="453" width="0.0236%" height="15" fill="rgb(216,85,49)" fg:x="6667" fg:w="2"/><text x="78.9445%" y="463.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="78.7063%" y="437" width="0.0118%" height="15" fill="rgb(208,161,47)" fg:x="6668" fg:w="1"/><text x="78.9563%" y="447.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="78.7181%" y="453" width="0.0118%" height="15" fill="rgb(233,210,18)" fg:x="6669" fg:w="1"/><text x="78.9681%" y="463.50"></text></g><g><title>vma_adjust_trans_huge (2 samples, 0.02%)</title><rect x="78.7299%" y="453" width="0.0236%" height="15" fill="rgb(205,104,42)" fg:x="6670" fg:w="2"/><text x="78.9799%" y="463.50"></text></g><g><title>find_vma (1 samples, 0.01%)</title><rect x="78.7417%" y="437" width="0.0118%" height="15" fill="rgb(248,90,43)" fg:x="6671" fg:w="1"/><text x="78.9917%" y="447.50"></text></g><g><title>mt_find (1 samples, 0.01%)</title><rect x="78.7417%" y="421" width="0.0118%" height="15" fill="rgb(206,198,11)" fg:x="6671" fg:w="1"/><text x="78.9917%" y="431.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="78.7417%" y="405" width="0.0118%" height="15" fill="rgb(239,165,27)" fg:x="6671" fg:w="1"/><text x="78.9917%" y="415.50"></text></g><g><title>mprotect_fixup (43 samples, 0.51%)</title><rect x="78.2814%" y="485" width="0.5076%" height="15" fill="rgb(246,44,32)" fg:x="6632" fg:w="43"/><text x="78.5314%" y="495.50"></text></g><g><title>vma_merge (22 samples, 0.26%)</title><rect x="78.5293%" y="469" width="0.2597%" height="15" fill="rgb(252,65,42)" fg:x="6653" fg:w="22"/><text x="78.7793%" y="479.50"></text></g><g><title>vma_prepare (3 samples, 0.04%)</title><rect x="78.7535%" y="453" width="0.0354%" height="15" fill="rgb(246,197,18)" fg:x="6672" fg:w="3"/><text x="79.0035%" y="463.50"></text></g><g><title>down_write (2 samples, 0.02%)</title><rect x="78.7653%" y="437" width="0.0236%" height="15" fill="rgb(216,192,4)" fg:x="6673" fg:w="2"/><text x="79.0153%" y="447.50"></text></g><g><title>tlb_gather_mmu (2 samples, 0.02%)</title><rect x="78.7890%" y="485" width="0.0236%" height="15" fill="rgb(208,117,10)" fg:x="6675" fg:w="2"/><text x="79.0390%" y="495.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="78.8244%" y="453" width="0.0236%" height="15" fill="rgb(240,61,47)" fg:x="6678" fg:w="2"/><text x="79.0744%" y="463.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="78.8244%" y="437" width="0.0236%" height="15" fill="rgb(228,178,21)" fg:x="6678" fg:w="2"/><text x="79.0744%" y="447.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="78.8362%" y="421" width="0.0118%" height="15" fill="rgb(219,96,54)" fg:x="6679" fg:w="1"/><text x="79.0862%" y="431.50"></text></g><g><title>__task_rq_lock (1 samples, 0.01%)</title><rect x="78.8598%" y="421" width="0.0118%" height="15" fill="rgb(250,177,24)" fg:x="6681" fg:w="1"/><text x="79.1098%" y="431.50"></text></g><g><title>raw_spin_rq_lock_nested (1 samples, 0.01%)</title><rect x="78.8598%" y="405" width="0.0118%" height="15" fill="rgb(242,154,46)" fg:x="6681" fg:w="1"/><text x="79.1098%" y="415.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="78.8598%" y="389" width="0.0118%" height="15" fill="rgb(226,176,29)" fg:x="6681" fg:w="1"/><text x="79.1098%" y="399.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="78.8598%" y="373" width="0.0118%" height="15" fill="rgb(226,29,2)" fg:x="6681" fg:w="1"/><text x="79.1098%" y="383.50"></text></g><g><title>do_mprotect_pkey (731 samples, 8.63%)</title><rect x="70.2550%" y="501" width="8.6284%" height="15" fill="rgb(237,104,14)" fg:x="5952" fg:w="731"/><text x="70.5050%" y="511.50">do_mprotect_..</text></g><g><title>up_write (6 samples, 0.07%)</title><rect x="78.8126%" y="485" width="0.0708%" height="15" fill="rgb(245,207,31)" fg:x="6677" fg:w="6"/><text x="79.0626%" y="495.50"></text></g><g><title>rwsem_wake.isra.0 (5 samples, 0.06%)</title><rect x="78.8244%" y="469" width="0.0590%" height="15" fill="rgb(229,211,45)" fg:x="6678" fg:w="5"/><text x="79.0744%" y="479.50"></text></g><g><title>wake_up_q (3 samples, 0.04%)</title><rect x="78.8480%" y="453" width="0.0354%" height="15" fill="rgb(229,113,15)" fg:x="6680" fg:w="3"/><text x="79.0980%" y="463.50"></text></g><g><title>try_to_wake_up (3 samples, 0.04%)</title><rect x="78.8480%" y="437" width="0.0354%" height="15" fill="rgb(237,147,15)" fg:x="6680" fg:w="3"/><text x="79.0980%" y="447.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="78.8716%" y="421" width="0.0118%" height="15" fill="rgb(244,120,12)" fg:x="6682" fg:w="1"/><text x="79.1216%" y="431.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="78.8716%" y="405" width="0.0118%" height="15" fill="rgb(205,120,12)" fg:x="6682" fg:w="1"/><text x="79.1216%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (732 samples, 8.64%)</title><rect x="70.2550%" y="549" width="8.6402%" height="15" fill="rgb(231,26,45)" fg:x="5952" fg:w="732"/><text x="70.5050%" y="559.50">entry_SYSCAL..</text></g><g><title>do_syscall_64 (732 samples, 8.64%)</title><rect x="70.2550%" y="533" width="8.6402%" height="15" fill="rgb(246,98,1)" fg:x="5952" fg:w="732"/><text x="70.5050%" y="543.50">do_syscall_64</text></g><g><title>__x64_sys_mprotect (732 samples, 8.64%)</title><rect x="70.2550%" y="517" width="8.6402%" height="15" fill="rgb(207,68,45)" fg:x="5952" fg:w="732"/><text x="70.5050%" y="527.50">__x64_sys_mp..</text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="78.8834%" y="501" width="0.0118%" height="15" fill="rgb(231,27,38)" fg:x="6683" fg:w="1"/><text x="79.1334%" y="511.50"></text></g><g><title>entry_SYSRETQ_unsafe_stack (1 samples, 0.01%)</title><rect x="78.8952%" y="549" width="0.0118%" height="15" fill="rgb(214,223,3)" fg:x="6684" fg:w="1"/><text x="79.1452%" y="559.50"></text></g><g><title>grow_heap (737 samples, 8.70%)</title><rect x="70.2195%" y="581" width="8.6992%" height="15" fill="rgb(228,195,46)" fg:x="5949" fg:w="737"/><text x="70.4695%" y="591.50">grow_heap</text></g><g><title>__GI_mprotect (737 samples, 8.70%)</title><rect x="70.2195%" y="565" width="8.6992%" height="15" fill="rgb(231,100,42)" fg:x="5949" fg:w="737"/><text x="70.4695%" y="575.50">__GI_mprotect</text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="78.9070%" y="549" width="0.0118%" height="15" fill="rgb(236,53,4)" fg:x="6685" fg:w="1"/><text x="79.1570%" y="559.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (835 samples, 9.86%)</title><rect x="69.1336%" y="789" width="9.8560%" height="15" fill="rgb(230,152,12)" fg:x="5857" fg:w="835"/><text x="69.3836%" y="799.50">&lt;revm_primitiv..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (833 samples, 9.83%)</title><rect x="69.1572%" y="773" width="9.8324%" height="15" fill="rgb(226,101,19)" fg:x="5859" fg:w="833"/><text x="69.4072%" y="783.50">&lt;std::collecti..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (833 samples, 9.83%)</title><rect x="69.1572%" y="757" width="9.8324%" height="15" fill="rgb(250,149,32)" fg:x="5859" fg:w="833"/><text x="69.4072%" y="767.50">&lt;hashbrown::ma..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (833 samples, 9.83%)</title><rect x="69.1572%" y="741" width="9.8324%" height="15" fill="rgb(232,178,12)" fg:x="5859" fg:w="833"/><text x="69.4072%" y="751.50">&lt;hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (827 samples, 9.76%)</title><rect x="69.2280%" y="725" width="9.7616%" height="15" fill="rgb(246,151,17)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="735.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (827 samples, 9.76%)</title><rect x="69.2280%" y="709" width="9.7616%" height="15" fill="rgb(252,17,51)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="719.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (827 samples, 9.76%)</title><rect x="69.2280%" y="693" width="9.7616%" height="15" fill="rgb(250,207,23)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="703.50">hashbrown::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (827 samples, 9.76%)</title><rect x="69.2280%" y="677" width="9.7616%" height="15" fill="rgb(205,27,5)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="687.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (827 samples, 9.76%)</title><rect x="69.2280%" y="661" width="9.7616%" height="15" fill="rgb(224,32,19)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="671.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (827 samples, 9.76%)</title><rect x="69.2280%" y="645" width="9.7616%" height="15" fill="rgb(247,214,40)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="655.50">alloc::alloc::..</text></g><g><title>__GI___libc_malloc (827 samples, 9.76%)</title><rect x="69.2280%" y="629" width="9.7616%" height="15" fill="rgb(239,199,17)" fg:x="5865" fg:w="827"/><text x="69.4780%" y="639.50">__GI___libc_ma..</text></g><g><title>_int_malloc (826 samples, 9.75%)</title><rect x="69.2398%" y="613" width="9.7498%" height="15" fill="rgb(251,159,9)" fg:x="5866" fg:w="826"/><text x="69.4898%" y="623.50">_int_malloc</text></g><g><title>sysmalloc (806 samples, 9.51%)</title><rect x="69.4759%" y="597" width="9.5137%" height="15" fill="rgb(225,78,32)" fg:x="5886" fg:w="806"/><text x="69.7259%" y="607.50">sysmalloc</text></g><g><title>sync_regs (6 samples, 0.07%)</title><rect x="78.9188%" y="581" width="0.0708%" height="15" fill="rgb(206,97,47)" fg:x="6686" fg:w="6"/><text x="79.1688%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="78.9896%" y="789" width="0.0354%" height="15" fill="rgb(227,107,4)" fg:x="6692" fg:w="3"/><text x="79.2396%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="79.0250%" y="725" width="0.0118%" height="15" fill="rgb(241,146,50)" fg:x="6695" fg:w="1"/><text x="79.2750%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="79.0250%" y="709" width="0.0118%" height="15" fill="rgb(232,92,30)" fg:x="6695" fg:w="1"/><text x="79.2750%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="79.0250%" y="693" width="0.0118%" height="15" fill="rgb(222,0,40)" fg:x="6695" fg:w="1"/><text x="79.2750%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="79.0250%" y="677" width="0.0118%" height="15" fill="rgb(219,54,33)" fg:x="6695" fg:w="1"/><text x="79.2750%" y="687.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.01%)</title><rect x="79.0250%" y="661" width="0.0118%" height="15" fill="rgb(226,209,28)" fg:x="6695" fg:w="1"/><text x="79.2750%" y="671.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="79.0604%" y="597" width="0.0826%" height="15" fill="rgb(254,205,35)" fg:x="6698" fg:w="7"/><text x="79.3104%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="79.1076%" y="581" width="0.0354%" height="15" fill="rgb(230,159,3)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="591.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="79.1076%" y="565" width="0.0354%" height="15" fill="rgb(232,190,24)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="575.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="79.1076%" y="549" width="0.0354%" height="15" fill="rgb(217,227,44)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="559.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="79.1076%" y="533" width="0.0354%" height="15" fill="rgb(236,211,1)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="79.1076%" y="517" width="0.0354%" height="15" fill="rgb(250,127,46)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.04%)</title><rect x="79.1076%" y="501" width="0.0354%" height="15" fill="rgb(229,213,6)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.04%)</title><rect x="79.1076%" y="485" width="0.0354%" height="15" fill="rgb(237,15,36)" fg:x="6702" fg:w="3"/><text x="79.3576%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="79.1431%" y="597" width="0.0118%" height="15" fill="rgb(213,131,41)" fg:x="6705" fg:w="1"/><text x="79.3931%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="79.1431%" y="581" width="0.0118%" height="15" fill="rgb(225,82,44)" fg:x="6705" fg:w="1"/><text x="79.3931%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="79.1431%" y="565" width="0.0118%" height="15" fill="rgb(249,42,11)" fg:x="6705" fg:w="1"/><text x="79.3931%" y="575.50"></text></g><g><title>revm_primitives::state::Account::changed_storage_slots (1 samples, 0.01%)</title><rect x="79.1549%" y="597" width="0.0118%" height="15" fill="rgb(253,11,29)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.01%)</title><rect x="79.1549%" y="581" width="0.0118%" height="15" fill="rgb(206,8,54)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.01%)</title><rect x="79.1549%" y="565" width="0.0118%" height="15" fill="rgb(222,186,2)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.01%)</title><rect x="79.1549%" y="549" width="0.0118%" height="15" fill="rgb(221,206,53)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.01%)</title><rect x="79.1549%" y="533" width="0.0118%" height="15" fill="rgb(230,150,21)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="543.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="79.1549%" y="517" width="0.0118%" height="15" fill="rgb(253,202,10)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="527.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.01%)</title><rect x="79.1549%" y="501" width="0.0118%" height="15" fill="rgb(238,109,40)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.01%)</title><rect x="79.1549%" y="485" width="0.0118%" height="15" fill="rgb(247,120,22)" fg:x="6706" fg:w="1"/><text x="79.4049%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.13%)</title><rect x="79.0486%" y="693" width="0.1298%" height="15" fill="rgb(207,43,30)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (11 samples, 0.13%)</title><rect x="79.0486%" y="677" width="0.1298%" height="15" fill="rgb(213,211,24)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.13%)</title><rect x="79.0486%" y="661" width="0.1298%" height="15" fill="rgb(239,73,39)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (11 samples, 0.13%)</title><rect x="79.0486%" y="645" width="0.1298%" height="15" fill="rgb(245,182,19)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (11 samples, 0.13%)</title><rect x="79.0486%" y="629" width="0.1298%" height="15" fill="rgb(247,143,26)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="639.50"></text></g><g><title>block_stm_revm::vm::Vm::execute::_{{closure}} (11 samples, 0.13%)</title><rect x="79.0486%" y="613" width="0.1298%" height="15" fill="rgb(228,191,23)" fg:x="6697" fg:w="11"/><text x="79.2986%" y="623.50"></text></g><g><title>revm_primitives::state::Account::is_empty (1 samples, 0.01%)</title><rect x="79.1667%" y="597" width="0.0118%" height="15" fill="rgb(253,165,31)" fg:x="6707" fg:w="1"/><text x="79.4167%" y="607.50"></text></g><g><title>revm_primitives::state::AccountInfo::is_empty (1 samples, 0.01%)</title><rect x="79.1667%" y="581" width="0.0118%" height="15" fill="rgb(234,138,20)" fg:x="6707" fg:w="1"/><text x="79.4167%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.17%)</title><rect x="79.0368%" y="725" width="0.1653%" height="15" fill="rgb(218,191,29)" fg:x="6696" fg:w="14"/><text x="79.2868%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.17%)</title><rect x="79.0368%" y="709" width="0.1653%" height="15" fill="rgb(221,157,19)" fg:x="6696" fg:w="14"/><text x="79.2868%" y="719.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (2 samples, 0.02%)</title><rect x="79.1785%" y="693" width="0.0236%" height="15" fill="rgb(237,26,42)" fg:x="6708" fg:w="2"/><text x="79.4285%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.19%)</title><rect x="79.0250%" y="789" width="0.1889%" height="15" fill="rgb(220,163,24)" fg:x="6695" fg:w="16"/><text x="79.2750%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="79.0250%" y="773" width="0.1889%" height="15" fill="rgb(242,115,20)" fg:x="6695" fg:w="16"/><text x="79.2750%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="79.0250%" y="757" width="0.1889%" height="15" fill="rgb(210,206,9)" fg:x="6695" fg:w="16"/><text x="79.2750%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="79.0250%" y="741" width="0.1889%" height="15" fill="rgb(208,71,17)" fg:x="6695" fg:w="16"/><text x="79.2750%" y="751.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="79.2021%" y="725" width="0.0118%" height="15" fill="rgb(233,7,5)" fg:x="6710" fg:w="1"/><text x="79.4521%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="79.2021%" y="709" width="0.0118%" height="15" fill="rgb(207,92,33)" fg:x="6710" fg:w="1"/><text x="79.4521%" y="719.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="79.2139%" y="757" width="0.0472%" height="15" fill="rgb(218,87,9)" fg:x="6711" fg:w="4"/><text x="79.4639%" y="767.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="79.2139%" y="741" width="0.0472%" height="15" fill="rgb(219,47,37)" fg:x="6711" fg:w="4"/><text x="79.4639%" y="751.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="79.2493%" y="725" width="0.0118%" height="15" fill="rgb(221,152,34)" fg:x="6714" fg:w="1"/><text x="79.4993%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.06%)</title><rect x="79.2611%" y="757" width="0.0590%" height="15" fill="rgb(235,176,21)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="767.50"></text></g><g><title>core::mem::drop (5 samples, 0.06%)</title><rect x="79.2611%" y="741" width="0.0590%" height="15" fill="rgb(232,212,21)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.06%)</title><rect x="79.2611%" y="725" width="0.0590%" height="15" fill="rgb(245,82,39)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="735.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="79.2611%" y="709" width="0.0590%" height="15" fill="rgb(241,52,51)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.2611%" y="693" width="0.0590%" height="15" fill="rgb(219,91,24)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.2611%" y="677" width="0.0590%" height="15" fill="rgb(241,142,12)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="79.2611%" y="661" width="0.0590%" height="15" fill="rgb(230,27,9)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="79.2611%" y="645" width="0.0590%" height="15" fill="rgb(249,181,32)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="79.2611%" y="629" width="0.0590%" height="15" fill="rgb(230,107,3)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="79.2611%" y="613" width="0.0590%" height="15" fill="rgb(246,204,14)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="623.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="79.2611%" y="597" width="0.0590%" height="15" fill="rgb(213,192,47)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="79.2611%" y="581" width="0.0590%" height="15" fill="rgb(240,44,36)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="79.2611%" y="565" width="0.0590%" height="15" fill="rgb(244,209,38)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="79.2611%" y="549" width="0.0590%" height="15" fill="rgb(219,34,37)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="559.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="79.2611%" y="533" width="0.0590%" height="15" fill="rgb(210,28,6)" fg:x="6715" fg:w="5"/><text x="79.5111%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="725" width="0.0118%" height="15" fill="rgb(244,110,52)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="709" width="0.0118%" height="15" fill="rgb(254,124,47)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="693" width="0.0118%" height="15" fill="rgb(254,110,13)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="677" width="0.0118%" height="15" fill="rgb(252,57,21)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="79.3201%" y="661" width="0.0118%" height="15" fill="rgb(242,60,45)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="79.3201%" y="645" width="0.0118%" height="15" fill="rgb(234,49,30)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.01%)</title><rect x="79.3201%" y="629" width="0.0118%" height="15" fill="rgb(218,98,6)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="79.3201%" y="613" width="0.0118%" height="15" fill="rgb(220,174,29)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.01%)</title><rect x="79.3201%" y="597" width="0.0118%" height="15" fill="rgb(236,163,23)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="581" width="0.0118%" height="15" fill="rgb(242,114,45)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="565" width="0.0118%" height="15" fill="rgb(232,10,53)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::precompile::Precompile&gt; (1 samples, 0.01%)</title><rect x="79.3201%" y="549" width="0.0118%" height="15" fill="rgb(245,108,29)" fg:x="6720" fg:w="1"/><text x="79.5701%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="79.3555%" y="693" width="0.0118%" height="15" fill="rgb(240,89,53)" fg:x="6723" fg:w="1"/><text x="79.6055%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="79.3555%" y="677" width="0.0118%" height="15" fill="rgb(226,60,45)" fg:x="6723" fg:w="1"/><text x="79.6055%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="79.3555%" y="661" width="0.0118%" height="15" fill="rgb(230,41,44)" fg:x="6723" fg:w="1"/><text x="79.6055%" y="671.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="79.3555%" y="645" width="0.0118%" height="15" fill="rgb(230,26,20)" fg:x="6723" fg:w="1"/><text x="79.6055%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::CfgEnv&gt; (1 samples, 0.01%)</title><rect x="79.3673%" y="677" width="0.0118%" height="15" fill="rgb(237,170,32)" fg:x="6724" fg:w="1"/><text x="79.6173%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::kzg::env_settings::EnvKzgSettings&gt; (1 samples, 0.01%)</title><rect x="79.3673%" y="661" width="0.0118%" height="15" fill="rgb(212,35,42)" fg:x="6724" fg:w="1"/><text x="79.6173%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (7 samples, 0.08%)</title><rect x="79.3201%" y="757" width="0.0826%" height="15" fill="rgb(227,31,34)" fg:x="6720" fg:w="7"/><text x="79.5701%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (7 samples, 0.08%)</title><rect x="79.3201%" y="741" width="0.0826%" height="15" fill="rgb(216,19,18)" fg:x="6720" fg:w="7"/><text x="79.5701%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (6 samples, 0.07%)</title><rect x="79.3319%" y="725" width="0.0708%" height="15" fill="rgb(211,133,42)" fg:x="6721" fg:w="6"/><text x="79.5819%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (6 samples, 0.07%)</title><rect x="79.3319%" y="709" width="0.0708%" height="15" fill="rgb(244,66,13)" fg:x="6721" fg:w="6"/><text x="79.5819%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (3 samples, 0.04%)</title><rect x="79.3673%" y="693" width="0.0354%" height="15" fill="rgb(218,185,50)" fg:x="6724" fg:w="3"/><text x="79.6173%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (2 samples, 0.02%)</title><rect x="79.3791%" y="677" width="0.0236%" height="15" fill="rgb(219,149,13)" fg:x="6725" fg:w="2"/><text x="79.6291%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="79.3791%" y="661" width="0.0236%" height="15" fill="rgb(221,125,0)" fg:x="6725" fg:w="2"/><text x="79.6291%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="79.3791%" y="645" width="0.0236%" height="15" fill="rgb(247,126,27)" fg:x="6725" fg:w="2"/><text x="79.6291%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="79.3791%" y="629" width="0.0236%" height="15" fill="rgb(250,138,30)" fg:x="6725" fg:w="2"/><text x="79.6291%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="79.3909%" y="613" width="0.0118%" height="15" fill="rgb(230,151,9)" fg:x="6726" fg:w="1"/><text x="79.6409%" y="623.50"></text></g><g><title>__GI___libc_free (11 samples, 0.13%)</title><rect x="79.4027%" y="741" width="0.1298%" height="15" fill="rgb(233,80,38)" fg:x="6727" fg:w="11"/><text x="79.6527%" y="751.50"></text></g><g><title>_int_free (10 samples, 0.12%)</title><rect x="79.4145%" y="725" width="0.1180%" height="15" fill="rgb(232,68,43)" fg:x="6728" fg:w="10"/><text x="79.6645%" y="735.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="79.5326%" y="741" width="0.0118%" height="15" fill="rgb(254,5,50)" fg:x="6738" fg:w="1"/><text x="79.7826%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="79.5326%" y="725" width="0.0118%" height="15" fill="rgb(225,45,5)" fg:x="6738" fg:w="1"/><text x="79.7826%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="79.5444%" y="725" width="0.0118%" height="15" fill="rgb(239,22,3)" fg:x="6739" fg:w="1"/><text x="79.7944%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.08%)</title><rect x="79.5444%" y="741" width="0.0826%" height="15" fill="rgb(243,129,0)" fg:x="6739" fg:w="7"/><text x="79.7944%" y="751.50"></text></g><g><title>core::mem::drop (6 samples, 0.07%)</title><rect x="79.5562%" y="725" width="0.0708%" height="15" fill="rgb(223,164,0)" fg:x="6740" fg:w="6"/><text x="79.8062%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.07%)</title><rect x="79.5562%" y="709" width="0.0708%" height="15" fill="rgb(221,46,29)" fg:x="6740" fg:w="6"/><text x="79.8062%" y="719.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="79.5562%" y="693" width="0.0708%" height="15" fill="rgb(205,97,47)" fg:x="6740" fg:w="6"/><text x="79.8062%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="79.5680%" y="677" width="0.0590%" height="15" fill="rgb(249,14,8)" fg:x="6741" fg:w="5"/><text x="79.8180%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="79.5680%" y="661" width="0.0590%" height="15" fill="rgb(216,77,3)" fg:x="6741" fg:w="5"/><text x="79.8180%" y="671.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="79.6270%" y="693" width="0.0236%" height="15" fill="rgb(206,168,54)" fg:x="6746" fg:w="2"/><text x="79.8770%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="79.6270%" y="677" width="0.0236%" height="15" fill="rgb(236,3,41)" fg:x="6746" fg:w="2"/><text x="79.8770%" y="687.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="79.6506%" y="629" width="0.0118%" height="15" fill="rgb(231,132,24)" fg:x="6748" fg:w="1"/><text x="79.9006%" y="639.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="79.6506%" y="613" width="0.0118%" height="15" fill="rgb(227,221,40)" fg:x="6748" fg:w="1"/><text x="79.9006%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.08%)</title><rect x="79.6506%" y="693" width="0.0826%" height="15" fill="rgb(233,151,11)" fg:x="6748" fg:w="7"/><text x="79.9006%" y="703.50"></text></g><g><title>core::mem::drop (7 samples, 0.08%)</title><rect x="79.6506%" y="677" width="0.0826%" height="15" fill="rgb(247,81,35)" fg:x="6748" fg:w="7"/><text x="79.9006%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (7 samples, 0.08%)</title><rect x="79.6506%" y="661" width="0.0826%" height="15" fill="rgb(243,128,48)" fg:x="6748" fg:w="7"/><text x="79.9006%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="79.6506%" y="645" width="0.0826%" height="15" fill="rgb(253,16,10)" fg:x="6748" fg:w="7"/><text x="79.9006%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="79.6624%" y="629" width="0.0708%" height="15" fill="rgb(228,67,27)" fg:x="6749" fg:w="6"/><text x="79.9124%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="79.6624%" y="613" width="0.0708%" height="15" fill="rgb(231,105,25)" fg:x="6749" fg:w="6"/><text x="79.9124%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="79.6270%" y="725" width="0.1180%" height="15" fill="rgb(213,166,47)" fg:x="6746" fg:w="10"/><text x="79.8770%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="79.6270%" y="709" width="0.1180%" height="15" fill="rgb(209,27,10)" fg:x="6746" fg:w="10"/><text x="79.8770%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="79.7332%" y="693" width="0.0118%" height="15" fill="rgb(241,44,30)" fg:x="6755" fg:w="1"/><text x="79.9832%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="79.7332%" y="677" width="0.0118%" height="15" fill="rgb(223,216,15)" fg:x="6755" fg:w="1"/><text x="79.9832%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="79.7450%" y="725" width="0.0118%" height="15" fill="rgb(227,14,7)" fg:x="6756" fg:w="1"/><text x="79.9950%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="79.7450%" y="709" width="0.0118%" height="15" fill="rgb(237,14,5)" fg:x="6756" fg:w="1"/><text x="79.9950%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="79.7450%" y="693" width="0.0118%" height="15" fill="rgb(232,14,36)" fg:x="6756" fg:w="1"/><text x="79.9950%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="79.7450%" y="677" width="0.0118%" height="15" fill="rgb(234,0,38)" fg:x="6756" fg:w="1"/><text x="79.9950%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="79.7568%" y="693" width="0.0118%" height="15" fill="rgb(207,170,14)" fg:x="6757" fg:w="1"/><text x="80.0068%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="79.7568%" y="677" width="0.0118%" height="15" fill="rgb(252,45,13)" fg:x="6757" fg:w="1"/><text x="80.0068%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="79.7686%" y="693" width="0.0118%" height="15" fill="rgb(213,142,7)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="703.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="79.7686%" y="677" width="0.0118%" height="15" fill="rgb(216,157,23)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="79.7686%" y="661" width="0.0118%" height="15" fill="rgb(212,145,33)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="79.7686%" y="645" width="0.0118%" height="15" fill="rgb(233,26,13)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="79.7686%" y="629" width="0.0118%" height="15" fill="rgb(219,196,19)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="79.7686%" y="613" width="0.0118%" height="15" fill="rgb(246,56,21)" fg:x="6758" fg:w="1"/><text x="80.0186%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (14 samples, 0.17%)</title><rect x="79.6270%" y="741" width="0.1653%" height="15" fill="rgb(222,28,53)" fg:x="6746" fg:w="14"/><text x="79.8770%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="79.7568%" y="725" width="0.0354%" height="15" fill="rgb(224,5,27)" fg:x="6757" fg:w="3"/><text x="80.0068%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="79.7568%" y="709" width="0.0354%" height="15" fill="rgb(220,153,33)" fg:x="6757" fg:w="3"/><text x="80.0068%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="79.7805%" y="693" width="0.0118%" height="15" fill="rgb(226,58,19)" fg:x="6759" fg:w="1"/><text x="80.0305%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="79.7805%" y="677" width="0.0118%" height="15" fill="rgb(239,112,23)" fg:x="6759" fg:w="1"/><text x="80.0305%" y="687.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="79.7923%" y="693" width="0.0590%" height="15" fill="rgb(251,213,20)" fg:x="6760" fg:w="5"/><text x="80.0423%" y="703.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="79.7923%" y="677" width="0.0590%" height="15" fill="rgb(215,181,21)" fg:x="6760" fg:w="5"/><text x="80.0423%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.06%)</title><rect x="79.8513%" y="693" width="0.0590%" height="15" fill="rgb(240,8,35)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="703.50"></text></g><g><title>core::mem::drop (5 samples, 0.06%)</title><rect x="79.8513%" y="677" width="0.0590%" height="15" fill="rgb(232,203,3)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.06%)</title><rect x="79.8513%" y="661" width="0.0590%" height="15" fill="rgb(214,202,43)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="79.8513%" y="645" width="0.0590%" height="15" fill="rgb(254,35,11)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.8513%" y="629" width="0.0590%" height="15" fill="rgb(239,173,13)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="639.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.8513%" y="613" width="0.0590%" height="15" fill="rgb(220,141,0)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="623.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="79.8513%" y="597" width="0.0590%" height="15" fill="rgb(210,98,12)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="607.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="79.8513%" y="581" width="0.0590%" height="15" fill="rgb(254,153,22)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="79.8513%" y="565" width="0.0590%" height="15" fill="rgb(247,223,17)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="575.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="79.8513%" y="549" width="0.0590%" height="15" fill="rgb(246,56,7)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="559.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="79.8513%" y="533" width="0.0590%" height="15" fill="rgb(240,226,12)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="543.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="79.8513%" y="517" width="0.0590%" height="15" fill="rgb(205,87,46)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="79.8513%" y="501" width="0.0590%" height="15" fill="rgb(245,214,51)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="79.8513%" y="485" width="0.0590%" height="15" fill="rgb(223,172,33)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="495.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="79.8513%" y="469" width="0.0590%" height="15" fill="rgb(227,203,34)" fg:x="6765" fg:w="5"/><text x="80.1013%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="79.7923%" y="725" width="0.1298%" height="15" fill="rgb(248,143,44)" fg:x="6760" fg:w="11"/><text x="80.0423%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="79.7923%" y="709" width="0.1298%" height="15" fill="rgb(226,162,5)" fg:x="6760" fg:w="11"/><text x="80.0423%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="79.9103%" y="693" width="0.0118%" height="15" fill="rgb(211,143,1)" fg:x="6770" fg:w="1"/><text x="80.1603%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="79.9103%" y="677" width="0.0118%" height="15" fill="rgb(224,96,15)" fg:x="6770" fg:w="1"/><text x="80.1603%" y="687.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="79.9221%" y="693" width="0.0236%" height="15" fill="rgb(222,4,38)" fg:x="6771" fg:w="2"/><text x="80.1721%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="79.9221%" y="677" width="0.0236%" height="15" fill="rgb(253,228,15)" fg:x="6771" fg:w="2"/><text x="80.1721%" y="687.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="79.9457%" y="693" width="0.0118%" height="15" fill="rgb(242,194,12)" fg:x="6773" fg:w="1"/><text x="80.1957%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="79.9457%" y="677" width="0.0118%" height="15" fill="rgb(214,177,31)" fg:x="6773" fg:w="1"/><text x="80.1957%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (17 samples, 0.20%)</title><rect x="79.7923%" y="741" width="0.2007%" height="15" fill="rgb(226,58,51)" fg:x="6760" fg:w="17"/><text x="80.0423%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="79.9221%" y="725" width="0.0708%" height="15" fill="rgb(250,119,16)" fg:x="6771" fg:w="6"/><text x="80.1721%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="79.9221%" y="709" width="0.0708%" height="15" fill="rgb(223,128,53)" fg:x="6771" fg:w="6"/><text x="80.1721%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="79.9575%" y="693" width="0.0354%" height="15" fill="rgb(251,199,15)" fg:x="6774" fg:w="3"/><text x="80.2075%" y="703.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="79.9575%" y="677" width="0.0354%" height="15" fill="rgb(235,168,42)" fg:x="6774" fg:w="3"/><text x="80.2075%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="79.9575%" y="661" width="0.0354%" height="15" fill="rgb(250,210,17)" fg:x="6774" fg:w="3"/><text x="80.2075%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="79.9575%" y="645" width="0.0354%" height="15" fill="rgb(226,36,41)" fg:x="6774" fg:w="3"/><text x="80.2075%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="79.9693%" y="629" width="0.0236%" height="15" fill="rgb(225,87,10)" fg:x="6775" fg:w="2"/><text x="80.2193%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="79.9693%" y="613" width="0.0236%" height="15" fill="rgb(228,83,9)" fg:x="6775" fg:w="2"/><text x="80.2193%" y="623.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="79.9929%" y="693" width="0.0236%" height="15" fill="rgb(225,16,36)" fg:x="6777" fg:w="2"/><text x="80.2429%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="80.0047%" y="677" width="0.0118%" height="15" fill="rgb(242,198,13)" fg:x="6778" fg:w="1"/><text x="80.2547%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (2 samples, 0.02%)</title><rect x="80.0401%" y="677" width="0.0236%" height="15" fill="rgb(239,25,51)" fg:x="6781" fg:w="2"/><text x="80.2901%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.07%)</title><rect x="80.0165%" y="693" width="0.0708%" height="15" fill="rgb(239,28,37)" fg:x="6779" fg:w="6"/><text x="80.2665%" y="703.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="80.0637%" y="677" width="0.0236%" height="15" fill="rgb(234,70,17)" fg:x="6783" fg:w="2"/><text x="80.3137%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="80.0637%" y="661" width="0.0236%" height="15" fill="rgb(231,215,53)" fg:x="6783" fg:w="2"/><text x="80.3137%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.0637%" y="645" width="0.0236%" height="15" fill="rgb(218,140,42)" fg:x="6783" fg:w="2"/><text x="80.3137%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.0637%" y="629" width="0.0236%" height="15" fill="rgb(233,227,45)" fg:x="6783" fg:w="2"/><text x="80.3137%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.0637%" y="613" width="0.0236%" height="15" fill="rgb(225,189,21)" fg:x="6783" fg:w="2"/><text x="80.3137%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="79.9929%" y="725" width="0.1180%" height="15" fill="rgb(237,176,54)" fg:x="6777" fg:w="10"/><text x="80.2429%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="79.9929%" y="709" width="0.1180%" height="15" fill="rgb(215,131,46)" fg:x="6777" fg:w="10"/><text x="80.2429%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.0873%" y="693" width="0.0236%" height="15" fill="rgb(218,95,20)" fg:x="6785" fg:w="2"/><text x="80.3373%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.0873%" y="677" width="0.0236%" height="15" fill="rgb(208,198,12)" fg:x="6785" fg:w="2"/><text x="80.3373%" y="687.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="80.1110%" y="677" width="0.0236%" height="15" fill="rgb(239,107,50)" fg:x="6787" fg:w="2"/><text x="80.3610%" y="687.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="80.1228%" y="661" width="0.0118%" height="15" fill="rgb(240,217,37)" fg:x="6788" fg:w="1"/><text x="80.3728%" y="671.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="80.1110%" y="693" width="0.0354%" height="15" fill="rgb(242,197,49)" fg:x="6787" fg:w="3"/><text x="80.3610%" y="703.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="80.1346%" y="677" width="0.0118%" height="15" fill="rgb(219,171,17)" fg:x="6789" fg:w="1"/><text x="80.3846%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="80.1346%" y="661" width="0.0118%" height="15" fill="rgb(209,81,40)" fg:x="6789" fg:w="1"/><text x="80.3846%" y="671.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="80.1346%" y="645" width="0.0118%" height="15" fill="rgb(237,156,30)" fg:x="6789" fg:w="1"/><text x="80.3846%" y="655.50"></text></g><g><title>heap_max_size (1 samples, 0.01%)</title><rect x="80.1346%" y="629" width="0.0118%" height="15" fill="rgb(212,127,16)" fg:x="6789" fg:w="1"/><text x="80.3846%" y="639.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="80.1464%" y="693" width="0.0236%" height="15" fill="rgb(226,66,32)" fg:x="6790" fg:w="2"/><text x="80.3964%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="80.1464%" y="677" width="0.0236%" height="15" fill="rgb(245,22,46)" fg:x="6790" fg:w="2"/><text x="80.3964%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="80.1700%" y="693" width="0.0354%" height="15" fill="rgb(210,112,21)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="703.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="80.1700%" y="677" width="0.0354%" height="15" fill="rgb(207,118,39)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="80.1700%" y="661" width="0.0354%" height="15" fill="rgb(205,206,35)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="80.1700%" y="645" width="0.0354%" height="15" fill="rgb(222,120,2)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="80.1700%" y="629" width="0.0354%" height="15" fill="rgb(205,38,18)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="80.1700%" y="613" width="0.0354%" height="15" fill="rgb(226,61,2)" fg:x="6792" fg:w="3"/><text x="80.4200%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (73 samples, 0.86%)</title><rect x="79.4027%" y="757" width="0.8617%" height="15" fill="rgb(242,161,23)" fg:x="6727" fg:w="73"/><text x="79.6527%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (23 samples, 0.27%)</title><rect x="79.9929%" y="741" width="0.2715%" height="15" fill="rgb(213,13,52)" fg:x="6777" fg:w="23"/><text x="80.2429%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (13 samples, 0.15%)</title><rect x="80.1110%" y="725" width="0.1534%" height="15" fill="rgb(246,209,47)" fg:x="6787" fg:w="13"/><text x="80.3610%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.15%)</title><rect x="80.1110%" y="709" width="0.1534%" height="15" fill="rgb(214,41,3)" fg:x="6787" fg:w="13"/><text x="80.3610%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="80.2054%" y="693" width="0.0590%" height="15" fill="rgb(236,119,38)" fg:x="6795" fg:w="5"/><text x="80.4554%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="80.2054%" y="677" width="0.0590%" height="15" fill="rgb(218,50,11)" fg:x="6795" fg:w="5"/><text x="80.4554%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="80.2644%" y="709" width="0.0118%" height="15" fill="rgb(228,38,11)" fg:x="6800" fg:w="1"/><text x="80.5144%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="80.2644%" y="693" width="0.0118%" height="15" fill="rgb(212,13,9)" fg:x="6800" fg:w="1"/><text x="80.5144%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="80.2644%" y="741" width="0.0354%" height="15" fill="rgb(208,211,9)" fg:x="6800" fg:w="3"/><text x="80.5144%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="80.2644%" y="725" width="0.0354%" height="15" fill="rgb(239,39,32)" fg:x="6800" fg:w="3"/><text x="80.5144%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.2762%" y="709" width="0.0236%" height="15" fill="rgb(254,179,26)" fg:x="6801" fg:w="2"/><text x="80.5262%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.2762%" y="693" width="0.0236%" height="15" fill="rgb(249,165,28)" fg:x="6801" fg:w="2"/><text x="80.5262%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="80.2998%" y="741" width="0.0236%" height="15" fill="rgb(225,59,50)" fg:x="6803" fg:w="2"/><text x="80.5498%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.2998%" y="725" width="0.0236%" height="15" fill="rgb(209,122,5)" fg:x="6803" fg:w="2"/><text x="80.5498%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.2998%" y="709" width="0.0236%" height="15" fill="rgb(214,65,34)" fg:x="6803" fg:w="2"/><text x="80.5498%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.2998%" y="693" width="0.0236%" height="15" fill="rgb(249,183,32)" fg:x="6803" fg:w="2"/><text x="80.5498%" y="703.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="80.3234%" y="709" width="0.0236%" height="15" fill="rgb(218,122,24)" fg:x="6805" fg:w="2"/><text x="80.5734%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="80.3234%" y="693" width="0.0236%" height="15" fill="rgb(224,109,18)" fg:x="6805" fg:w="2"/><text x="80.5734%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="80.3234%" y="741" width="0.0354%" height="15" fill="rgb(210,68,50)" fg:x="6805" fg:w="3"/><text x="80.5734%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="80.3234%" y="725" width="0.0354%" height="15" fill="rgb(212,184,34)" fg:x="6805" fg:w="3"/><text x="80.5734%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="80.3470%" y="709" width="0.0118%" height="15" fill="rgb(238,105,48)" fg:x="6807" fg:w="1"/><text x="80.5970%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="80.3470%" y="693" width="0.0118%" height="15" fill="rgb(222,134,54)" fg:x="6807" fg:w="1"/><text x="80.5970%" y="703.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="80.3706%" y="709" width="0.0472%" height="15" fill="rgb(246,24,43)" fg:x="6809" fg:w="4"/><text x="80.6206%" y="719.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="80.3706%" y="693" width="0.0472%" height="15" fill="rgb(227,169,22)" fg:x="6809" fg:w="4"/><text x="80.6206%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="80.4178%" y="693" width="0.0118%" height="15" fill="rgb(253,152,4)" fg:x="6813" fg:w="1"/><text x="80.6678%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (8 samples, 0.09%)</title><rect x="80.3588%" y="741" width="0.0944%" height="15" fill="rgb(219,158,36)" fg:x="6808" fg:w="8"/><text x="80.6088%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.09%)</title><rect x="80.3588%" y="725" width="0.0944%" height="15" fill="rgb(251,128,40)" fg:x="6808" fg:w="8"/><text x="80.6088%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="80.4178%" y="709" width="0.0354%" height="15" fill="rgb(254,101,39)" fg:x="6813" fg:w="3"/><text x="80.6678%" y="719.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="80.4297%" y="693" width="0.0236%" height="15" fill="rgb(221,168,40)" fg:x="6814" fg:w="2"/><text x="80.6797%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="80.4297%" y="677" width="0.0236%" height="15" fill="rgb(221,14,27)" fg:x="6814" fg:w="2"/><text x="80.6797%" y="687.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.4297%" y="661" width="0.0236%" height="15" fill="rgb(207,36,43)" fg:x="6814" fg:w="2"/><text x="80.6797%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.4297%" y="645" width="0.0236%" height="15" fill="rgb(240,172,53)" fg:x="6814" fg:w="2"/><text x="80.6797%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.4297%" y="629" width="0.0236%" height="15" fill="rgb(241,138,43)" fg:x="6814" fg:w="2"/><text x="80.6797%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="80.4533%" y="709" width="0.0118%" height="15" fill="rgb(227,78,19)" fg:x="6816" fg:w="1"/><text x="80.7033%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="80.4533%" y="693" width="0.0118%" height="15" fill="rgb(215,127,44)" fg:x="6816" fg:w="1"/><text x="80.7033%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="80.4533%" y="741" width="0.0236%" height="15" fill="rgb(227,13,10)" fg:x="6816" fg:w="2"/><text x="80.7033%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.4533%" y="725" width="0.0236%" height="15" fill="rgb(249,177,6)" fg:x="6816" fg:w="2"/><text x="80.7033%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="80.4651%" y="709" width="0.0118%" height="15" fill="rgb(215,154,26)" fg:x="6817" fg:w="1"/><text x="80.7151%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="80.4651%" y="693" width="0.0118%" height="15" fill="rgb(250,168,20)" fg:x="6817" fg:w="1"/><text x="80.7151%" y="703.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="80.4769%" y="709" width="0.0354%" height="15" fill="rgb(222,53,38)" fg:x="6818" fg:w="3"/><text x="80.7269%" y="719.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="80.4769%" y="693" width="0.0354%" height="15" fill="rgb(245,154,5)" fg:x="6818" fg:w="3"/><text x="80.7269%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="80.5123%" y="709" width="0.0236%" height="15" fill="rgb(214,89,50)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="719.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="80.5123%" y="693" width="0.0236%" height="15" fill="rgb(232,73,14)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn revm::context::context_precompiles::ContextStatefulPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="80.5123%" y="677" width="0.0236%" height="15" fill="rgb(230,101,20)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="687.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.5123%" y="661" width="0.0236%" height="15" fill="rgb(208,56,28)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.5123%" y="645" width="0.0236%" height="15" fill="rgb(247,205,22)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.5123%" y="629" width="0.0236%" height="15" fill="rgb(252,109,51)" fg:x="6821" fg:w="2"/><text x="80.7623%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="80.4769%" y="741" width="0.0708%" height="15" fill="rgb(220,40,24)" fg:x="6818" fg:w="6"/><text x="80.7269%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="80.4769%" y="725" width="0.0708%" height="15" fill="rgb(251,108,7)" fg:x="6818" fg:w="6"/><text x="80.7269%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="80.5359%" y="709" width="0.0118%" height="15" fill="rgb(238,102,51)" fg:x="6823" fg:w="1"/><text x="80.7859%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="80.5359%" y="693" width="0.0118%" height="15" fill="rgb(219,149,34)" fg:x="6823" fg:w="1"/><text x="80.7859%" y="703.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="80.5477%" y="709" width="0.0118%" height="15" fill="rgb(239,70,0)" fg:x="6824" fg:w="1"/><text x="80.7977%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="80.5477%" y="693" width="0.0118%" height="15" fill="rgb(246,214,23)" fg:x="6824" fg:w="1"/><text x="80.7977%" y="703.50"></text></g><g><title>core::mem::drop (116 samples, 1.37%)</title><rect x="79.2139%" y="789" width="1.3692%" height="15" fill="rgb(239,221,51)" fg:x="6711" fg:w="116"/><text x="79.4639%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (116 samples, 1.37%)</title><rect x="79.2139%" y="773" width="1.3692%" height="15" fill="rgb(254,62,14)" fg:x="6711" fg:w="116"/><text x="79.4639%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (27 samples, 0.32%)</title><rect x="80.2644%" y="757" width="0.3187%" height="15" fill="rgb(253,57,33)" fg:x="6800" fg:w="27"/><text x="80.5144%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="80.5477%" y="741" width="0.0354%" height="15" fill="rgb(229,34,6)" fg:x="6824" fg:w="3"/><text x="80.7977%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="80.5477%" y="725" width="0.0354%" height="15" fill="rgb(235,191,23)" fg:x="6824" fg:w="3"/><text x="80.7977%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="80.5595%" y="709" width="0.0236%" height="15" fill="rgb(217,207,27)" fg:x="6825" fg:w="2"/><text x="80.8095%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.5595%" y="693" width="0.0236%" height="15" fill="rgb(232,41,44)" fg:x="6825" fg:w="2"/><text x="80.8095%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (3 samples, 0.04%)</title><rect x="80.5831%" y="789" width="0.0354%" height="15" fill="rgb(221,188,19)" fg:x="6827" fg:w="3"/><text x="80.8331%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="80.5831%" y="773" width="0.0354%" height="15" fill="rgb(245,180,45)" fg:x="6827" fg:w="3"/><text x="80.8331%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="80.5831%" y="757" width="0.0354%" height="15" fill="rgb(250,220,42)" fg:x="6827" fg:w="3"/><text x="80.8331%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="80.5831%" y="741" width="0.0354%" height="15" fill="rgb(234,16,34)" fg:x="6827" fg:w="3"/><text x="80.8331%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="80.6185%" y="565" width="0.0118%" height="15" fill="rgb(233,217,23)" fg:x="6830" fg:w="1"/><text x="80.8685%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="80.6185%" y="549" width="0.0118%" height="15" fill="rgb(209,22,46)" fg:x="6830" fg:w="1"/><text x="80.8685%" y="559.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="80.6185%" y="533" width="0.0118%" height="15" fill="rgb(213,101,18)" fg:x="6830" fg:w="1"/><text x="80.8685%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.02%)</title><rect x="80.6185%" y="693" width="0.0236%" height="15" fill="rgb(215,179,52)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.02%)</title><rect x="80.6185%" y="677" width="0.0236%" height="15" fill="rgb(223,50,25)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.02%)</title><rect x="80.6185%" y="661" width="0.0236%" height="15" fill="rgb(224,51,44)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (2 samples, 0.02%)</title><rect x="80.6185%" y="645" width="0.0236%" height="15" fill="rgb(224,13,54)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (2 samples, 0.02%)</title><rect x="80.6185%" y="629" width="0.0236%" height="15" fill="rgb(219,58,47)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (2 samples, 0.02%)</title><rect x="80.6185%" y="613" width="0.0236%" height="15" fill="rgb(246,124,34)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (2 samples, 0.02%)</title><rect x="80.6185%" y="597" width="0.0236%" height="15" fill="rgb(245,109,25)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (2 samples, 0.02%)</title><rect x="80.6185%" y="581" width="0.0236%" height="15" fill="rgb(235,48,23)" fg:x="6830" fg:w="2"/><text x="80.8685%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="80.6303%" y="565" width="0.0118%" height="15" fill="rgb(229,203,36)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="80.6303%" y="549" width="0.0118%" height="15" fill="rgb(234,180,9)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="80.6303%" y="533" width="0.0118%" height="15" fill="rgb(228,98,45)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="80.6303%" y="517" width="0.0118%" height="15" fill="rgb(240,24,36)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="80.6303%" y="501" width="0.0118%" height="15" fill="rgb(227,154,19)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="80.6303%" y="485" width="0.0118%" height="15" fill="rgb(231,2,48)" fg:x="6831" fg:w="1"/><text x="80.8803%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (10 samples, 0.12%)</title><rect x="80.6185%" y="789" width="0.1180%" height="15" fill="rgb(219,216,0)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (10 samples, 0.12%)</title><rect x="80.6185%" y="773" width="0.1180%" height="15" fill="rgb(251,88,0)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (10 samples, 0.12%)</title><rect x="80.6185%" y="757" width="0.1180%" height="15" fill="rgb(242,45,45)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (10 samples, 0.12%)</title><rect x="80.6185%" y="741" width="0.1180%" height="15" fill="rgb(218,149,45)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="80.6185%" y="725" width="0.1180%" height="15" fill="rgb(247,194,10)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (10 samples, 0.12%)</title><rect x="80.6185%" y="709" width="0.1180%" height="15" fill="rgb(234,33,37)" fg:x="6830" fg:w="10"/><text x="80.8685%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.09%)</title><rect x="80.6421%" y="693" width="0.0944%" height="15" fill="rgb(218,61,13)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.09%)</title><rect x="80.6421%" y="677" width="0.0944%" height="15" fill="rgb(210,80,52)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.09%)</title><rect x="80.6421%" y="661" width="0.0944%" height="15" fill="rgb(218,203,27)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="671.50"></text></g><g><title>__GI___libc_free (8 samples, 0.09%)</title><rect x="80.6421%" y="645" width="0.0944%" height="15" fill="rgb(209,126,33)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="655.50"></text></g><g><title>arena_for_chunk (8 samples, 0.09%)</title><rect x="80.6421%" y="629" width="0.0944%" height="15" fill="rgb(234,173,41)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="639.50"></text></g><g><title>arena_for_chunk (8 samples, 0.09%)</title><rect x="80.6421%" y="613" width="0.0944%" height="15" fill="rgb(228,166,9)" fg:x="6832" fg:w="8"/><text x="80.8921%" y="623.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (3 samples, 0.04%)</title><rect x="80.7365%" y="789" width="0.0354%" height="15" fill="rgb(208,124,43)" fg:x="6840" fg:w="3"/><text x="80.9865%" y="799.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (8 samples, 0.09%)</title><rect x="80.7720%" y="789" width="0.0944%" height="15" fill="rgb(212,154,38)" fg:x="6843" fg:w="8"/><text x="81.0220%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.08%)</title><rect x="80.7838%" y="773" width="0.0826%" height="15" fill="rgb(246,179,35)" fg:x="6844" fg:w="7"/><text x="81.0338%" y="783.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (1 samples, 0.01%)</title><rect x="80.8664%" y="773" width="0.0118%" height="15" fill="rgb(251,3,50)" fg:x="6851" fg:w="1"/><text x="81.1164%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::end (2 samples, 0.02%)</title><rect x="80.8782%" y="773" width="0.0236%" height="15" fill="rgb(219,96,8)" fg:x="6852" fg:w="2"/><text x="81.1282%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="80.8782%" y="757" width="0.0236%" height="15" fill="rgb(251,216,33)" fg:x="6852" fg:w="2"/><text x="81.1282%" y="767.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (1 samples, 0.01%)</title><rect x="80.9018%" y="773" width="0.0118%" height="15" fill="rgb(243,145,29)" fg:x="6854" fg:w="1"/><text x="81.1518%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="80.9018%" y="757" width="0.0118%" height="15" fill="rgb(210,75,20)" fg:x="6854" fg:w="1"/><text x="81.1518%" y="767.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (1 samples, 0.01%)</title><rect x="80.9018%" y="741" width="0.0118%" height="15" fill="rgb(235,56,8)" fg:x="6854" fg:w="1"/><text x="81.1518%" y="751.50"></text></g><g><title>revm_primitives::env::Env::validate_tx (1 samples, 0.01%)</title><rect x="80.9018%" y="725" width="0.0118%" height="15" fill="rgb(226,175,49)" fg:x="6854" fg:w="1"/><text x="81.1518%" y="735.50"></text></g><g><title>revm_primitives::env::Env::effective_gas_price (1 samples, 0.01%)</title><rect x="80.9018%" y="709" width="0.0118%" height="15" fill="rgb(242,204,23)" fg:x="6854" fg:w="1"/><text x="81.1518%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="80.9372%" y="693" width="0.0118%" height="15" fill="rgb(225,104,24)" fg:x="6857" fg:w="1"/><text x="81.1872%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="80.9372%" y="677" width="0.0118%" height="15" fill="rgb(253,34,1)" fg:x="6857" fg:w="1"/><text x="81.1872%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="80.9372%" y="661" width="0.0118%" height="15" fill="rgb(233,199,23)" fg:x="6857" fg:w="1"/><text x="81.1872%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="80.9372%" y="645" width="0.0118%" height="15" fill="rgb(247,7,51)" fg:x="6857" fg:w="1"/><text x="81.1872%" y="655.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="80.9372%" y="629" width="0.0118%" height="15" fill="rgb(214,146,12)" fg:x="6857" fg:w="1"/><text x="81.1872%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="80.9372%" y="709" width="0.0236%" height="15" fill="rgb(234,181,43)" fg:x="6857" fg:w="2"/><text x="81.1872%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="80.9490%" y="693" width="0.0118%" height="15" fill="rgb(239,148,6)" fg:x="6858" fg:w="1"/><text x="81.1990%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="80.9490%" y="677" width="0.0118%" height="15" fill="rgb(206,151,17)" fg:x="6858" fg:w="1"/><text x="81.1990%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="80.9726%" y="661" width="0.0118%" height="15" fill="rgb(213,215,10)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="80.9726%" y="645" width="0.0118%" height="15" fill="rgb(215,220,44)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="80.9726%" y="629" width="0.0118%" height="15" fill="rgb(245,205,37)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="639.50"></text></g><g><title>core::cmp::max (1 samples, 0.01%)</title><rect x="80.9726%" y="613" width="0.0118%" height="15" fill="rgb(245,130,43)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="623.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.01%)</title><rect x="80.9726%" y="597" width="0.0118%" height="15" fill="rgb(231,227,38)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="607.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.01%)</title><rect x="80.9726%" y="581" width="0.0118%" height="15" fill="rgb(233,185,4)" fg:x="6860" fg:w="1"/><text x="81.2226%" y="591.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="80.9844%" y="565" width="0.0590%" height="15" fill="rgb(224,154,43)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="575.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="80.9844%" y="549" width="0.0590%" height="15" fill="rgb(235,156,15)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="559.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="80.9844%" y="533" width="0.0590%" height="15" fill="rgb(211,55,43)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="543.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="80.9844%" y="517" width="0.0590%" height="15" fill="rgb(247,149,40)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="527.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="80.9844%" y="501" width="0.0590%" height="15" fill="rgb(232,171,16)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="511.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="80.9844%" y="485" width="0.0590%" height="15" fill="rgb(215,117,49)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="495.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="80.9844%" y="469" width="0.0590%" height="15" fill="rgb(246,194,11)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="479.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="80.9844%" y="453" width="0.0590%" height="15" fill="rgb(242,101,44)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="80.9844%" y="437" width="0.0590%" height="15" fill="rgb(226,174,6)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="80.9844%" y="421" width="0.0590%" height="15" fill="rgb(213,150,20)" fg:x="6861" fg:w="5"/><text x="81.2344%" y="431.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="81.0552%" y="389" width="0.0118%" height="15" fill="rgb(222,124,42)" fg:x="6867" fg:w="1"/><text x="81.3052%" y="399.50"></text></g><g><title>asm_sysvec_irq_work (4 samples, 0.05%)</title><rect x="81.0788%" y="325" width="0.0472%" height="15" fill="rgb(250,19,47)" fg:x="6869" fg:w="4"/><text x="81.3288%" y="335.50"></text></g><g><title>_raw_spin_unlock (9 samples, 0.11%)</title><rect x="81.4448%" y="293" width="0.1062%" height="15" fill="rgb(241,217,19)" fg:x="6900" fg:w="9"/><text x="81.6948%" y="303.50"></text></g><g><title>perf_ctx_enable (40 samples, 0.47%)</title><rect x="81.5510%" y="293" width="0.4721%" height="15" fill="rgb(207,210,34)" fg:x="6909" fg:w="40"/><text x="81.8010%" y="303.50"></text></g><g><title>x86_pmu_enable (17 samples, 0.20%)</title><rect x="81.8225%" y="277" width="0.2007%" height="15" fill="rgb(244,45,4)" fg:x="6932" fg:w="17"/><text x="82.0725%" y="287.50"></text></g><g><title>perf_pmu_nop_void (41 samples, 0.48%)</title><rect x="82.0231%" y="293" width="0.4839%" height="15" fill="rgb(252,134,50)" fg:x="6949" fg:w="41"/><text x="82.2731%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (105 samples, 1.24%)</title><rect x="81.3267%" y="309" width="1.2394%" height="15" fill="rgb(238,74,2)" fg:x="6890" fg:w="105"/><text x="81.5767%" y="319.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="82.5071%" y="293" width="0.0590%" height="15" fill="rgb(226,58,46)" fg:x="6990" fg:w="5"/><text x="82.7571%" y="303.50"></text></g><g><title>__rcu_read_unlock (14 samples, 0.17%)</title><rect x="82.5661%" y="309" width="0.1653%" height="15" fill="rgb(232,83,35)" fg:x="6995" fg:w="14"/><text x="82.8161%" y="319.50"></text></g><g><title>_raw_spin_unlock (12 samples, 0.14%)</title><rect x="82.7314%" y="309" width="0.1416%" height="15" fill="rgb(212,148,47)" fg:x="7009" fg:w="12"/><text x="82.9814%" y="319.50"></text></g><g><title>__x64_sys_futex (159 samples, 1.88%)</title><rect x="81.0434%" y="421" width="1.8768%" height="15" fill="rgb(235,29,1)" fg:x="6866" fg:w="159"/><text x="81.2934%" y="431.50">_..</text></g><g><title>do_futex (158 samples, 1.86%)</title><rect x="81.0552%" y="405" width="1.8650%" height="15" fill="rgb(247,55,37)" fg:x="6867" fg:w="158"/><text x="81.3052%" y="415.50">d..</text></g><g><title>futex_wait (157 samples, 1.85%)</title><rect x="81.0670%" y="389" width="1.8532%" height="15" fill="rgb(222,48,3)" fg:x="6868" fg:w="157"/><text x="81.3170%" y="399.50">f..</text></g><g><title>futex_wait_queue (156 samples, 1.84%)</title><rect x="81.0788%" y="373" width="1.8414%" height="15" fill="rgb(234,21,33)" fg:x="6869" fg:w="156"/><text x="81.3288%" y="383.50">f..</text></g><g><title>schedule (156 samples, 1.84%)</title><rect x="81.0788%" y="357" width="1.8414%" height="15" fill="rgb(247,178,53)" fg:x="6869" fg:w="156"/><text x="81.3288%" y="367.50">s..</text></g><g><title>__schedule (156 samples, 1.84%)</title><rect x="81.0788%" y="341" width="1.8414%" height="15" fill="rgb(225,75,7)" fg:x="6869" fg:w="156"/><text x="81.3288%" y="351.50">_..</text></g><g><title>finish_task_switch.isra.0 (152 samples, 1.79%)</title><rect x="81.1261%" y="325" width="1.7941%" height="15" fill="rgb(219,199,7)" fg:x="6873" fg:w="152"/><text x="81.3761%" y="335.50">f..</text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="82.8730%" y="309" width="0.0472%" height="15" fill="rgb(209,93,42)" fg:x="7021" fg:w="4"/><text x="83.1230%" y="319.50"></text></g><g><title>rseq_ip_fixup (4 samples, 0.05%)</title><rect x="82.9320%" y="357" width="0.0472%" height="15" fill="rgb(240,175,17)" fg:x="7026" fg:w="4"/><text x="83.1820%" y="367.50"></text></g><g><title>__get_user_8 (3 samples, 0.04%)</title><rect x="82.9438%" y="341" width="0.0354%" height="15" fill="rgb(232,106,7)" fg:x="7027" fg:w="3"/><text x="83.1938%" y="351.50"></text></g><g><title>__rseq_handle_notify_resume (5 samples, 0.06%)</title><rect x="82.9320%" y="373" width="0.0590%" height="15" fill="rgb(242,106,43)" fg:x="7026" fg:w="5"/><text x="83.1820%" y="383.50"></text></g><g><title>rseq_update_cpu_node_id (1 samples, 0.01%)</title><rect x="82.9792%" y="357" width="0.0118%" height="15" fill="rgb(242,61,37)" fg:x="7030" fg:w="1"/><text x="83.2292%" y="367.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (170 samples, 2.01%)</title><rect x="81.0434%" y="501" width="2.0066%" height="15" fill="rgb(205,72,10)" fg:x="6866" fg:w="170"/><text x="81.2934%" y="511.50">&lt;..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (170 samples, 2.01%)</title><rect x="81.0434%" y="485" width="2.0066%" height="15" fill="rgb(214,184,36)" fg:x="6866" fg:w="170"/><text x="81.2934%" y="495.50">p..</text></g><g><title>syscall (170 samples, 2.01%)</title><rect x="81.0434%" y="469" width="2.0066%" height="15" fill="rgb(206,107,18)" fg:x="6866" fg:w="170"/><text x="81.2934%" y="479.50">s..</text></g><g><title>entry_SYSCALL_64_after_hwframe (170 samples, 2.01%)</title><rect x="81.0434%" y="453" width="2.0066%" height="15" fill="rgb(210,75,5)" fg:x="6866" fg:w="170"/><text x="81.2934%" y="463.50">e..</text></g><g><title>do_syscall_64 (170 samples, 2.01%)</title><rect x="81.0434%" y="437" width="2.0066%" height="15" fill="rgb(205,3,19)" fg:x="6866" fg:w="170"/><text x="81.2934%" y="447.50">d..</text></g><g><title>syscall_exit_to_user_mode (11 samples, 0.13%)</title><rect x="82.9202%" y="421" width="0.1298%" height="15" fill="rgb(207,181,42)" fg:x="7025" fg:w="11"/><text x="83.1702%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (11 samples, 0.13%)</title><rect x="82.9202%" y="405" width="0.1298%" height="15" fill="rgb(229,179,43)" fg:x="7025" fg:w="11"/><text x="83.1702%" y="415.50"></text></g><g><title>exit_to_user_mode_loop (11 samples, 0.13%)</title><rect x="82.9202%" y="389" width="0.1298%" height="15" fill="rgb(246,95,30)" fg:x="7025" fg:w="11"/><text x="83.1702%" y="399.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="82.9910%" y="373" width="0.0590%" height="15" fill="rgb(234,144,45)" fg:x="7031" fg:w="5"/><text x="83.2410%" y="383.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="82.9910%" y="357" width="0.0590%" height="15" fill="rgb(250,54,25)" fg:x="7031" fg:w="5"/><text x="83.2410%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="82.9910%" y="341" width="0.0590%" height="15" fill="rgb(215,195,40)" fg:x="7031" fg:w="5"/><text x="83.2410%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="82.9910%" y="325" width="0.0590%" height="15" fill="rgb(233,188,42)" fg:x="7031" fg:w="5"/><text x="83.2410%" y="335.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (171 samples, 2.02%)</title><rect x="81.0434%" y="565" width="2.0184%" height="15" fill="rgb(247,227,35)" fg:x="6866" fg:w="171"/><text x="81.2934%" y="575.50">d..</text></g><g><title>parking_lot_core::parking_lot::park (171 samples, 2.02%)</title><rect x="81.0434%" y="549" width="2.0184%" height="15" fill="rgb(249,124,27)" fg:x="6866" fg:w="171"/><text x="81.2934%" y="559.50">p..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (171 samples, 2.02%)</title><rect x="81.0434%" y="533" width="2.0184%" height="15" fill="rgb(219,207,25)" fg:x="6866" fg:w="171"/><text x="81.2934%" y="543.50">p..</text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (171 samples, 2.02%)</title><rect x="81.0434%" y="517" width="2.0184%" height="15" fill="rgb(241,216,47)" fg:x="6866" fg:w="171"/><text x="81.2934%" y="527.50">p..</text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.01%)</title><rect x="83.0500%" y="501" width="0.0118%" height="15" fill="rgb(233,82,50)" fg:x="7036" fg:w="1"/><text x="83.3000%" y="511.50"></text></g><g><title>parking_lot_core::parking_lot::get_hashtable (1 samples, 0.01%)</title><rect x="83.0500%" y="485" width="0.0118%" height="15" fill="rgb(232,63,2)" fg:x="7036" fg:w="1"/><text x="83.3000%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.01%)</title><rect x="83.0500%" y="469" width="0.0118%" height="15" fill="rgb(236,184,28)" fg:x="7036" fg:w="1"/><text x="83.3000%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="83.0500%" y="453" width="0.0118%" height="15" fill="rgb(254,63,27)" fg:x="7036" fg:w="1"/><text x="83.3000%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (6 samples, 0.07%)</title><rect x="83.0619%" y="549" width="0.0708%" height="15" fill="rgb(253,106,28)" fg:x="7037" fg:w="6"/><text x="83.3119%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.07%)</title><rect x="83.0619%" y="533" width="0.0708%" height="15" fill="rgb(225,141,39)" fg:x="7037" fg:w="6"/><text x="83.3119%" y="543.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (188 samples, 2.22%)</title><rect x="80.9844%" y="613" width="2.2191%" height="15" fill="rgb(222,157,20)" fg:x="6861" fg:w="188"/><text x="81.2344%" y="623.50">&lt;..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (188 samples, 2.22%)</title><rect x="80.9844%" y="597" width="2.2191%" height="15" fill="rgb(210,190,9)" fg:x="6861" fg:w="188"/><text x="81.2344%" y="607.50">l..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (188 samples, 2.22%)</title><rect x="80.9844%" y="581" width="2.2191%" height="15" fill="rgb(242,167,7)" fg:x="6861" fg:w="188"/><text x="81.2344%" y="591.50">&lt;..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (12 samples, 0.14%)</title><rect x="83.0619%" y="565" width="0.1416%" height="15" fill="rgb(227,82,41)" fg:x="7037" fg:w="12"/><text x="83.3119%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.07%)</title><rect x="83.1327%" y="549" width="0.0708%" height="15" fill="rgb(222,131,13)" fg:x="7043" fg:w="6"/><text x="83.3827%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.07%)</title><rect x="83.1327%" y="533" width="0.0708%" height="15" fill="rgb(221,98,26)" fg:x="7043" fg:w="6"/><text x="83.3827%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="83.2035%" y="613" width="0.0354%" height="15" fill="rgb(251,63,52)" fg:x="7049" fg:w="3"/><text x="83.4535%" y="623.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="83.2035%" y="597" width="0.0354%" height="15" fill="rgb(246,25,43)" fg:x="7049" fg:w="3"/><text x="83.4535%" y="607.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (3 samples, 0.04%)</title><rect x="83.2035%" y="581" width="0.0354%" height="15" fill="rgb(247,167,15)" fg:x="7049" fg:w="3"/><text x="83.4535%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="83.2035%" y="565" width="0.0354%" height="15" fill="rgb(240,104,42)" fg:x="7049" fg:w="3"/><text x="83.4535%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="83.2035%" y="549" width="0.0354%" height="15" fill="rgb(224,54,6)" fg:x="7049" fg:w="3"/><text x="83.4535%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="83.2389%" y="565" width="0.0118%" height="15" fill="rgb(244,108,35)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="83.2389%" y="549" width="0.0118%" height="15" fill="rgb(216,154,2)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="559.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="83.2389%" y="533" width="0.0118%" height="15" fill="rgb(222,8,47)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="83.2389%" y="517" width="0.0118%" height="15" fill="rgb(252,93,1)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="527.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="83.2389%" y="501" width="0.0118%" height="15" fill="rgb(223,226,51)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="511.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="83.2389%" y="485" width="0.0118%" height="15" fill="rgb(206,147,9)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2389%" y="469" width="0.0118%" height="15" fill="rgb(248,180,41)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2389%" y="453" width="0.0118%" height="15" fill="rgb(209,47,50)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2389%" y="437" width="0.0118%" height="15" fill="rgb(243,65,31)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="83.2389%" y="421" width="0.0118%" height="15" fill="rgb(228,128,1)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="83.2389%" y="405" width="0.0118%" height="15" fill="rgb(231,192,16)" fg:x="7052" fg:w="1"/><text x="83.4889%" y="415.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (3 samples, 0.04%)</title><rect x="83.2389%" y="613" width="0.0354%" height="15" fill="rgb(224,26,40)" fg:x="7052" fg:w="3"/><text x="83.4889%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="83.2389%" y="597" width="0.0354%" height="15" fill="rgb(214,192,17)" fg:x="7052" fg:w="3"/><text x="83.4889%" y="607.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="83.2389%" y="581" width="0.0354%" height="15" fill="rgb(225,147,18)" fg:x="7052" fg:w="3"/><text x="83.4889%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="83.2507%" y="565" width="0.0236%" height="15" fill="rgb(205,35,11)" fg:x="7053" fg:w="2"/><text x="83.5007%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="83.2507%" y="549" width="0.0236%" height="15" fill="rgb(242,40,42)" fg:x="7053" fg:w="2"/><text x="83.5007%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="83.2507%" y="533" width="0.0236%" height="15" fill="rgb(250,170,13)" fg:x="7053" fg:w="2"/><text x="83.5007%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="83.2861%" y="549" width="0.0118%" height="15" fill="rgb(240,161,28)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="83.2861%" y="533" width="0.0118%" height="15" fill="rgb(245,179,12)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="543.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="83.2861%" y="517" width="0.0118%" height="15" fill="rgb(250,92,32)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="83.2861%" y="501" width="0.0118%" height="15" fill="rgb(233,10,40)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="511.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="83.2861%" y="485" width="0.0118%" height="15" fill="rgb(217,98,1)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="83.2861%" y="469" width="0.0118%" height="15" fill="rgb(238,202,7)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2861%" y="453" width="0.0118%" height="15" fill="rgb(222,91,3)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2861%" y="437" width="0.0118%" height="15" fill="rgb(211,170,49)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="83.2861%" y="421" width="0.0118%" height="15" fill="rgb(253,139,18)" fg:x="7056" fg:w="1"/><text x="83.5361%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="83.3097%" y="501" width="0.0118%" height="15" fill="rgb(222,4,43)" fg:x="7058" fg:w="1"/><text x="83.5597%" y="511.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="83.2861%" y="565" width="0.0472%" height="15" fill="rgb(207,205,12)" fg:x="7056" fg:w="4"/><text x="83.5361%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="83.2979%" y="549" width="0.0354%" height="15" fill="rgb(216,159,46)" fg:x="7057" fg:w="3"/><text x="83.5479%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="83.2979%" y="533" width="0.0354%" height="15" fill="rgb(236,115,1)" fg:x="7057" fg:w="3"/><text x="83.5479%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="83.2979%" y="517" width="0.0354%" height="15" fill="rgb(251,35,33)" fg:x="7057" fg:w="3"/><text x="83.5479%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="83.3215%" y="501" width="0.0118%" height="15" fill="rgb(248,62,51)" fg:x="7059" fg:w="1"/><text x="83.5715%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="83.2861%" y="581" width="0.0590%" height="15" fill="rgb(254,180,19)" fg:x="7056" fg:w="5"/><text x="83.5361%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="83.3333%" y="565" width="0.0118%" height="15" fill="rgb(217,100,32)" fg:x="7060" fg:w="1"/><text x="83.5833%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="83.3333%" y="549" width="0.0118%" height="15" fill="rgb(224,71,22)" fg:x="7060" fg:w="1"/><text x="83.5833%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="83.3333%" y="533" width="0.0118%" height="15" fill="rgb(251,185,33)" fg:x="7060" fg:w="1"/><text x="83.5833%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="83.3333%" y="517" width="0.0118%" height="15" fill="rgb(209,75,48)" fg:x="7060" fg:w="1"/><text x="83.5833%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="83.3333%" y="501" width="0.0118%" height="15" fill="rgb(253,190,16)" fg:x="7060" fg:w="1"/><text x="83.5833%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="83.3451%" y="533" width="0.0236%" height="15" fill="rgb(226,140,1)" fg:x="7061" fg:w="2"/><text x="83.5951%" y="543.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.02%)</title><rect x="83.3451%" y="517" width="0.0236%" height="15" fill="rgb(206,75,30)" fg:x="7061" fg:w="2"/><text x="83.5951%" y="527.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.02%)</title><rect x="83.3451%" y="501" width="0.0236%" height="15" fill="rgb(231,208,37)" fg:x="7061" fg:w="2"/><text x="83.5951%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="83.3451%" y="485" width="0.0236%" height="15" fill="rgb(238,136,40)" fg:x="7061" fg:w="2"/><text x="83.5951%" y="495.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="83.3451%" y="469" width="0.0236%" height="15" fill="rgb(247,137,17)" fg:x="7061" fg:w="2"/><text x="83.5951%" y="479.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="83.3569%" y="453" width="0.0118%" height="15" fill="rgb(240,60,40)" fg:x="7062" fg:w="1"/><text x="83.6069%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="83.3569%" y="437" width="0.0118%" height="15" fill="rgb(236,68,50)" fg:x="7062" fg:w="1"/><text x="83.6069%" y="447.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="83.3569%" y="421" width="0.0118%" height="15" fill="rgb(230,42,12)" fg:x="7062" fg:w="1"/><text x="83.6069%" y="431.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="83.3569%" y="405" width="0.0118%" height="15" fill="rgb(219,16,16)" fg:x="7062" fg:w="1"/><text x="83.6069%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.05%)</title><rect x="83.3687%" y="533" width="0.0472%" height="15" fill="rgb(220,38,35)" fg:x="7063" fg:w="4"/><text x="83.6187%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.05%)</title><rect x="83.3687%" y="517" width="0.0472%" height="15" fill="rgb(228,33,1)" fg:x="7063" fg:w="4"/><text x="83.6187%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="83.3687%" y="501" width="0.0472%" height="15" fill="rgb(241,46,31)" fg:x="7063" fg:w="4"/><text x="83.6187%" y="511.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (211 samples, 2.49%)</title><rect x="80.9844%" y="661" width="2.4906%" height="15" fill="rgb(232,58,20)" fg:x="6861" fg:w="211"/><text x="81.2344%" y="671.50">bl..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (211 samples, 2.49%)</title><rect x="80.9844%" y="645" width="2.4906%" height="15" fill="rgb(206,228,53)" fg:x="6861" fg:w="211"/><text x="81.2344%" y="655.50">da..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (211 samples, 2.49%)</title><rect x="80.9844%" y="629" width="2.4906%" height="15" fill="rgb(206,88,33)" fg:x="6861" fg:w="211"/><text x="81.2344%" y="639.50">&lt;d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (17 samples, 0.20%)</title><rect x="83.2743%" y="613" width="0.2007%" height="15" fill="rgb(238,69,7)" fg:x="7055" fg:w="17"/><text x="83.5243%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.20%)</title><rect x="83.2743%" y="597" width="0.2007%" height="15" fill="rgb(250,21,46)" fg:x="7055" fg:w="17"/><text x="83.5243%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.13%)</title><rect x="83.3451%" y="581" width="0.1298%" height="15" fill="rgb(215,212,21)" fg:x="7061" fg:w="11"/><text x="83.5951%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.13%)</title><rect x="83.3451%" y="565" width="0.1298%" height="15" fill="rgb(211,35,12)" fg:x="7061" fg:w="11"/><text x="83.5951%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11 samples, 0.13%)</title><rect x="83.3451%" y="549" width="0.1298%" height="15" fill="rgb(231,184,16)" fg:x="7061" fg:w="11"/><text x="83.5951%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.06%)</title><rect x="83.4160%" y="533" width="0.0590%" height="15" fill="rgb(242,140,15)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.06%)</title><rect x="83.4160%" y="517" width="0.0590%" height="15" fill="rgb(220,37,14)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="527.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="83.4160%" y="501" width="0.0590%" height="15" fill="rgb(223,146,22)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="511.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="83.4160%" y="485" width="0.0590%" height="15" fill="rgb(216,132,15)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="495.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="83.4160%" y="469" width="0.0590%" height="15" fill="rgb(248,83,5)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="479.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="83.4160%" y="453" width="0.0590%" height="15" fill="rgb(231,206,48)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="463.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="83.4160%" y="437" width="0.0590%" height="15" fill="rgb(253,185,37)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="447.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="83.4160%" y="421" width="0.0590%" height="15" fill="rgb(208,21,44)" fg:x="7067" fg:w="5"/><text x="83.6660%" y="431.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="83.4278%" y="405" width="0.0472%" height="15" fill="rgb(236,125,4)" fg:x="7068" fg:w="4"/><text x="83.6778%" y="415.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="83.4278%" y="389" width="0.0472%" height="15" fill="rgb(226,134,25)" fg:x="7068" fg:w="4"/><text x="83.6778%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="83.4278%" y="373" width="0.0472%" height="15" fill="rgb(250,201,12)" fg:x="7068" fg:w="4"/><text x="83.6778%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="83.4278%" y="357" width="0.0472%" height="15" fill="rgb(225,92,18)" fg:x="7068" fg:w="4"/><text x="83.6778%" y="367.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (214 samples, 2.53%)</title><rect x="80.9608%" y="709" width="2.5260%" height="15" fill="rgb(227,35,22)" fg:x="6859" fg:w="214"/><text x="81.2108%" y="719.50">re..</text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (214 samples, 2.53%)</title><rect x="80.9608%" y="693" width="2.5260%" height="15" fill="rgb(214,180,52)" fg:x="6859" fg:w="214"/><text x="81.2108%" y="703.50">&lt;b..</text></g><g><title>block_stm_revm::vm::VmDb::read (213 samples, 2.51%)</title><rect x="80.9726%" y="677" width="2.5142%" height="15" fill="rgb(233,55,38)" fg:x="6860" fg:w="213"/><text x="81.2226%" y="687.50">bl..</text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (1 samples, 0.01%)</title><rect x="83.4750%" y="661" width="0.0118%" height="15" fill="rgb(249,171,43)" fg:x="7072" fg:w="1"/><text x="83.7250%" y="671.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (1 samples, 0.01%)</title><rect x="83.4750%" y="645" width="0.0118%" height="15" fill="rgb(239,87,2)" fg:x="7072" fg:w="1"/><text x="83.7250%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.01%)</title><rect x="83.4750%" y="629" width="0.0118%" height="15" fill="rgb(248,141,5)" fg:x="7072" fg:w="1"/><text x="83.7250%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.01%)</title><rect x="83.4750%" y="613" width="0.0118%" height="15" fill="rgb(238,33,42)" fg:x="7072" fg:w="1"/><text x="83.7250%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.01%)</title><rect x="83.4750%" y="597" width="0.0118%" height="15" fill="rgb(231,57,19)" fg:x="7072" fg:w="1"/><text x="83.7250%" y="607.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="83.5930%" y="357" width="0.0118%" height="15" fill="rgb(214,78,53)" fg:x="7082" fg:w="1"/><text x="83.8430%" y="367.50"></text></g><g><title>__GI___lll_lock_wait_private (5 samples, 0.06%)</title><rect x="83.5930%" y="549" width="0.0590%" height="15" fill="rgb(206,132,29)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="559.50"></text></g><g><title>futex_wait (5 samples, 0.06%)</title><rect x="83.5930%" y="533" width="0.0590%" height="15" fill="rgb(248,174,31)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="83.5930%" y="517" width="0.0590%" height="15" fill="rgb(221,87,13)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="527.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="83.5930%" y="501" width="0.0590%" height="15" fill="rgb(223,197,17)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="511.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.06%)</title><rect x="83.5930%" y="485" width="0.0590%" height="15" fill="rgb(220,144,50)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="495.50"></text></g><g><title>do_futex (5 samples, 0.06%)</title><rect x="83.5930%" y="469" width="0.0590%" height="15" fill="rgb(244,201,11)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="479.50"></text></g><g><title>futex_wait (5 samples, 0.06%)</title><rect x="83.5930%" y="453" width="0.0590%" height="15" fill="rgb(249,81,34)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="463.50"></text></g><g><title>futex_wait_queue (5 samples, 0.06%)</title><rect x="83.5930%" y="437" width="0.0590%" height="15" fill="rgb(205,161,12)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="447.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="83.5930%" y="421" width="0.0590%" height="15" fill="rgb(252,139,50)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="431.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="83.5930%" y="405" width="0.0590%" height="15" fill="rgb(205,169,14)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="415.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="83.5930%" y="389" width="0.0590%" height="15" fill="rgb(248,198,33)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="399.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="83.5930%" y="373" width="0.0590%" height="15" fill="rgb(236,23,21)" fg:x="7082" fg:w="5"/><text x="83.8430%" y="383.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="83.6048%" y="357" width="0.0472%" height="15" fill="rgb(231,13,38)" fg:x="7083" fg:w="4"/><text x="83.8548%" y="367.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="83.6638%" y="421" width="0.0118%" height="15" fill="rgb(239,139,21)" fg:x="7088" fg:w="1"/><text x="83.9138%" y="431.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="83.6638%" y="405" width="0.0118%" height="15" fill="rgb(222,164,45)" fg:x="7088" fg:w="1"/><text x="83.9138%" y="415.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="83.6756%" y="421" width="0.0118%" height="15" fill="rgb(230,52,27)" fg:x="7089" fg:w="1"/><text x="83.9256%" y="431.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="533" width="0.0354%" height="15" fill="rgb(227,143,42)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="543.50"></text></g><g><title>exc_page_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="517" width="0.0354%" height="15" fill="rgb(249,127,1)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="527.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="501" width="0.0354%" height="15" fill="rgb(243,107,26)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="511.50"></text></g><g><title>handle_mm_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="485" width="0.0354%" height="15" fill="rgb(225,7,45)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="495.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="469" width="0.0354%" height="15" fill="rgb(241,88,38)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="479.50"></text></g><g><title>handle_pte_fault (3 samples, 0.04%)</title><rect x="83.6638%" y="453" width="0.0354%" height="15" fill="rgb(226,121,9)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="463.50"></text></g><g><title>do_anonymous_page (3 samples, 0.04%)</title><rect x="83.6638%" y="437" width="0.0354%" height="15" fill="rgb(253,60,29)" fg:x="7088" fg:w="3"/><text x="83.9138%" y="447.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="83.6874%" y="421" width="0.0118%" height="15" fill="rgb(244,181,39)" fg:x="7090" fg:w="1"/><text x="83.9374%" y="431.50"></text></g><g><title>malloc_consolidate (1 samples, 0.01%)</title><rect x="83.6992%" y="533" width="0.0118%" height="15" fill="rgb(252,203,31)" fg:x="7091" fg:w="1"/><text x="83.9492%" y="543.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="83.7110%" y="533" width="0.0118%" height="15" fill="rgb(224,120,8)" fg:x="7092" fg:w="1"/><text x="83.9610%" y="543.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="83.7229%" y="389" width="0.0118%" height="15" fill="rgb(205,171,54)" fg:x="7093" fg:w="1"/><text x="83.9729%" y="399.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="83.7229%" y="453" width="0.0236%" height="15" fill="rgb(235,89,11)" fg:x="7093" fg:w="2"/><text x="83.9729%" y="463.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="83.7229%" y="437" width="0.0236%" height="15" fill="rgb(212,180,28)" fg:x="7093" fg:w="2"/><text x="83.9729%" y="447.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="83.7229%" y="421" width="0.0236%" height="15" fill="rgb(247,84,49)" fg:x="7093" fg:w="2"/><text x="83.9729%" y="431.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="83.7229%" y="405" width="0.0236%" height="15" fill="rgb(236,187,52)" fg:x="7093" fg:w="2"/><text x="83.9729%" y="415.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="83.7347%" y="389" width="0.0118%" height="15" fill="rgb(227,24,15)" fg:x="7094" fg:w="1"/><text x="83.9847%" y="399.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.04%)</title><rect x="83.7229%" y="517" width="0.0354%" height="15" fill="rgb(227,211,13)" fg:x="7093" fg:w="3"/><text x="83.9729%" y="527.50"></text></g><g><title>exc_page_fault (3 samples, 0.04%)</title><rect x="83.7229%" y="501" width="0.0354%" height="15" fill="rgb(245,52,14)" fg:x="7093" fg:w="3"/><text x="83.9729%" y="511.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="83.7229%" y="485" width="0.0354%" height="15" fill="rgb(225,185,13)" fg:x="7093" fg:w="3"/><text x="83.9729%" y="495.50"></text></g><g><title>handle_mm_fault (3 samples, 0.04%)</title><rect x="83.7229%" y="469" width="0.0354%" height="15" fill="rgb(217,160,29)" fg:x="7093" fg:w="3"/><text x="83.9729%" y="479.50"></text></g><g><title>p4d_offset (1 samples, 0.01%)</title><rect x="83.7465%" y="453" width="0.0118%" height="15" fill="rgb(216,115,53)" fg:x="7095" fg:w="1"/><text x="83.9965%" y="463.50"></text></g><g><title>osq_lock (33 samples, 0.39%)</title><rect x="83.7701%" y="373" width="0.3895%" height="15" fill="rgb(236,99,5)" fg:x="7097" fg:w="33"/><text x="84.0201%" y="383.50"></text></g><g><title>rwsem_optimistic_spin (45 samples, 0.53%)</title><rect x="83.7701%" y="389" width="0.5312%" height="15" fill="rgb(222,60,38)" fg:x="7097" fg:w="45"/><text x="84.0201%" y="399.50"></text></g><g><title>rwsem_spin_on_owner (12 samples, 0.14%)</title><rect x="84.1596%" y="373" width="0.1416%" height="15" fill="rgb(212,82,22)" fg:x="7130" fg:w="12"/><text x="84.4096%" y="383.50"></text></g><g><title>perf_ctx_enable (6 samples, 0.07%)</title><rect x="84.3012%" y="309" width="0.0708%" height="15" fill="rgb(214,48,28)" fg:x="7142" fg:w="6"/><text x="84.5512%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="84.3012%" y="341" width="0.1180%" height="15" fill="rgb(245,196,50)" fg:x="7142" fg:w="10"/><text x="84.5512%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.12%)</title><rect x="84.3012%" y="325" width="0.1180%" height="15" fill="rgb(225,159,46)" fg:x="7142" fg:w="10"/><text x="84.5512%" y="335.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="84.3720%" y="309" width="0.0472%" height="15" fill="rgb(207,195,48)" fg:x="7148" fg:w="4"/><text x="84.6220%" y="319.50"></text></g><g><title>down_write_killable (57 samples, 0.67%)</title><rect x="83.7583%" y="421" width="0.6728%" height="15" fill="rgb(240,73,3)" fg:x="7096" fg:w="57"/><text x="84.0083%" y="431.50"></text></g><g><title>rwsem_down_write_slowpath (57 samples, 0.67%)</title><rect x="83.7583%" y="405" width="0.6728%" height="15" fill="rgb(245,57,23)" fg:x="7096" fg:w="57"/><text x="84.0083%" y="415.50"></text></g><g><title>schedule_preempt_disabled (11 samples, 0.13%)</title><rect x="84.3012%" y="389" width="0.1298%" height="15" fill="rgb(240,75,18)" fg:x="7142" fg:w="11"/><text x="84.5512%" y="399.50"></text></g><g><title>schedule (11 samples, 0.13%)</title><rect x="84.3012%" y="373" width="0.1298%" height="15" fill="rgb(238,168,12)" fg:x="7142" fg:w="11"/><text x="84.5512%" y="383.50"></text></g><g><title>__schedule (11 samples, 0.13%)</title><rect x="84.3012%" y="357" width="0.1298%" height="15" fill="rgb(226,20,40)" fg:x="7142" fg:w="11"/><text x="84.5512%" y="367.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="84.4193%" y="341" width="0.0118%" height="15" fill="rgb(224,130,35)" fg:x="7152" fg:w="1"/><text x="84.6693%" y="351.50"></text></g><g><title>perf_event_mmap (2 samples, 0.02%)</title><rect x="84.4311%" y="405" width="0.0236%" height="15" fill="rgb(225,63,41)" fg:x="7153" fg:w="2"/><text x="84.6811%" y="415.50"></text></g><g><title>perf_event_mmap_event (2 samples, 0.02%)</title><rect x="84.4311%" y="389" width="0.0236%" height="15" fill="rgb(219,3,3)" fg:x="7153" fg:w="2"/><text x="84.6811%" y="399.50"></text></g><g><title>perf_iterate_sb.constprop.0 (2 samples, 0.02%)</title><rect x="84.4311%" y="373" width="0.0236%" height="15" fill="rgb(218,157,4)" fg:x="7153" fg:w="2"/><text x="84.6811%" y="383.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="84.4429%" y="357" width="0.0118%" height="15" fill="rgb(232,76,36)" fg:x="7154" fg:w="1"/><text x="84.6929%" y="367.50"></text></g><g><title>mas_preallocate (1 samples, 0.01%)</title><rect x="84.4547%" y="389" width="0.0118%" height="15" fill="rgb(247,36,0)" fg:x="7155" fg:w="1"/><text x="84.7047%" y="399.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.01%)</title><rect x="84.4547%" y="373" width="0.0118%" height="15" fill="rgb(205,2,34)" fg:x="7155" fg:w="1"/><text x="84.7047%" y="383.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="84.4547%" y="357" width="0.0118%" height="15" fill="rgb(239,136,13)" fg:x="7155" fg:w="1"/><text x="84.7047%" y="367.50"></text></g><g><title>mprotect_fixup (4 samples, 0.05%)</title><rect x="84.4311%" y="421" width="0.0472%" height="15" fill="rgb(253,122,12)" fg:x="7153" fg:w="4"/><text x="84.6811%" y="431.50"></text></g><g><title>vma_merge (2 samples, 0.02%)</title><rect x="84.4547%" y="405" width="0.0236%" height="15" fill="rgb(222,174,7)" fg:x="7155" fg:w="2"/><text x="84.7047%" y="415.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="84.4665%" y="389" width="0.0118%" height="15" fill="rgb(208,191,42)" fg:x="7156" fg:w="1"/><text x="84.7165%" y="399.50"></text></g><g><title>mas_destroy (1 samples, 0.01%)</title><rect x="84.4665%" y="373" width="0.0118%" height="15" fill="rgb(237,212,15)" fg:x="7156" fg:w="1"/><text x="84.7165%" y="383.50"></text></g><g><title>kmem_cache_free (1 samples, 0.01%)</title><rect x="84.4665%" y="357" width="0.0118%" height="15" fill="rgb(215,65,20)" fg:x="7156" fg:w="1"/><text x="84.7165%" y="367.50"></text></g><g><title>grow_heap (62 samples, 0.73%)</title><rect x="83.7583%" y="517" width="0.7318%" height="15" fill="rgb(232,103,11)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="527.50"></text></g><g><title>__GI_mprotect (62 samples, 0.73%)</title><rect x="83.7583%" y="501" width="0.7318%" height="15" fill="rgb(235,148,18)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (62 samples, 0.73%)</title><rect x="83.7583%" y="485" width="0.7318%" height="15" fill="rgb(240,173,7)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="495.50"></text></g><g><title>do_syscall_64 (62 samples, 0.73%)</title><rect x="83.7583%" y="469" width="0.7318%" height="15" fill="rgb(228,182,25)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="479.50"></text></g><g><title>__x64_sys_mprotect (62 samples, 0.73%)</title><rect x="83.7583%" y="453" width="0.7318%" height="15" fill="rgb(247,3,52)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="463.50"></text></g><g><title>do_mprotect_pkey (62 samples, 0.73%)</title><rect x="83.7583%" y="437" width="0.7318%" height="15" fill="rgb(226,155,8)" fg:x="7096" fg:w="62"/><text x="84.0083%" y="447.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="84.4783%" y="421" width="0.0118%" height="15" fill="rgb(243,195,38)" fg:x="7157" fg:w="1"/><text x="84.7283%" y="431.50"></text></g><g><title>_int_malloc (72 samples, 0.85%)</title><rect x="83.6520%" y="549" width="0.8499%" height="15" fill="rgb(254,181,33)" fg:x="7087" fg:w="72"/><text x="83.9020%" y="559.50"></text></g><g><title>sysmalloc (66 samples, 0.78%)</title><rect x="83.7229%" y="533" width="0.7790%" height="15" fill="rgb(232,98,23)" fg:x="7093" fg:w="66"/><text x="83.9729%" y="543.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="84.4901%" y="517" width="0.0118%" height="15" fill="rgb(205,23,10)" fg:x="7158" fg:w="1"/><text x="84.7401%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (86 samples, 1.02%)</title><rect x="83.4986%" y="661" width="1.0151%" height="15" fill="rgb(212,124,38)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (86 samples, 1.02%)</title><rect x="83.4986%" y="645" width="1.0151%" height="15" fill="rgb(228,207,2)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (86 samples, 1.02%)</title><rect x="83.4986%" y="629" width="1.0151%" height="15" fill="rgb(215,120,22)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 1.02%)</title><rect x="83.4986%" y="613" width="1.0151%" height="15" fill="rgb(251,172,33)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 1.02%)</title><rect x="83.4986%" y="597" width="1.0151%" height="15" fill="rgb(250,83,2)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="607.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 1.02%)</title><rect x="83.4986%" y="581" width="1.0151%" height="15" fill="rgb(210,132,53)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="591.50"></text></g><g><title>__GI___libc_malloc (86 samples, 1.02%)</title><rect x="83.4986%" y="565" width="1.0151%" height="15" fill="rgb(221,208,36)" fg:x="7074" fg:w="86"/><text x="83.7486%" y="575.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="84.5019%" y="549" width="0.0118%" height="15" fill="rgb(205,192,46)" fg:x="7159" fg:w="1"/><text x="84.7519%" y="559.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (88 samples, 1.04%)</title><rect x="83.4986%" y="693" width="1.0387%" height="15" fill="rgb(223,163,14)" fg:x="7074" fg:w="88"/><text x="83.7486%" y="703.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (88 samples, 1.04%)</title><rect x="83.4986%" y="677" width="1.0387%" height="15" fill="rgb(218,41,28)" fg:x="7074" fg:w="88"/><text x="83.7486%" y="687.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (2 samples, 0.02%)</title><rect x="84.5137%" y="661" width="0.0236%" height="15" fill="rgb(235,104,10)" fg:x="7160" fg:w="2"/><text x="84.7637%" y="671.50"></text></g><g><title>tap::pipe::Pipe::pipe (1 samples, 0.01%)</title><rect x="84.5255%" y="645" width="0.0118%" height="15" fill="rgb(246,17,4)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="84.5255%" y="629" width="0.0118%" height="15" fill="rgb(240,7,16)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="84.5255%" y="613" width="0.0118%" height="15" fill="rgb(213,160,23)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="84.5255%" y="597" width="0.0118%" height="15" fill="rgb(251,179,49)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="84.5255%" y="581" width="0.0118%" height="15" fill="rgb(247,198,10)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="84.5255%" y="565" width="0.0118%" height="15" fill="rgb(220,65,29)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="84.5255%" y="549" width="0.0118%" height="15" fill="rgb(237,171,28)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="84.5255%" y="533" width="0.0118%" height="15" fill="rgb(228,44,26)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="84.5255%" y="517" width="0.0118%" height="15" fill="rgb(216,210,27)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="84.5255%" y="501" width="0.0118%" height="15" fill="rgb(252,10,17)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="511.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="84.5255%" y="485" width="0.0118%" height="15" fill="rgb(214,172,30)" fg:x="7161" fg:w="1"/><text x="84.7755%" y="495.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (90 samples, 1.06%)</title><rect x="83.4868%" y="709" width="1.0623%" height="15" fill="rgb(253,130,48)" fg:x="7073" fg:w="90"/><text x="83.7368%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="84.5373%" y="693" width="0.0118%" height="15" fill="rgb(226,99,43)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="84.5373%" y="677" width="0.0118%" height="15" fill="rgb(239,111,26)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="687.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="84.5373%" y="661" width="0.0118%" height="15" fill="rgb(240,27,53)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="671.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="84.5373%" y="645" width="0.0118%" height="15" fill="rgb(254,163,12)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="84.5373%" y="629" width="0.0118%" height="15" fill="rgb(225,51,48)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="84.5373%" y="613" width="0.0118%" height="15" fill="rgb(205,19,32)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="623.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="84.5373%" y="597" width="0.0118%" height="15" fill="rgb(218,119,26)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="607.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="84.5373%" y="581" width="0.0118%" height="15" fill="rgb(231,173,33)" fg:x="7162" fg:w="1"/><text x="84.7873%" y="591.50"></text></g><g><title>core::mem::swap (1 samples, 0.01%)</title><rect x="84.5609%" y="597" width="0.0118%" height="15" fill="rgb(241,100,29)" fg:x="7164" fg:w="1"/><text x="84.8109%" y="607.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.01%)</title><rect x="84.5609%" y="581" width="0.0118%" height="15" fill="rgb(250,194,34)" fg:x="7164" fg:w="1"/><text x="84.8109%" y="591.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="84.5609%" y="565" width="0.0118%" height="15" fill="rgb(215,23,50)" fg:x="7164" fg:w="1"/><text x="84.8109%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="84.5727%" y="549" width="0.0118%" height="15" fill="rgb(206,49,37)" fg:x="7165" fg:w="1"/><text x="84.8227%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="84.5845%" y="485" width="0.0118%" height="15" fill="rgb(247,39,21)" fg:x="7166" fg:w="1"/><text x="84.8345%" y="495.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="84.5845%" y="469" width="0.0118%" height="15" fill="rgb(209,220,15)" fg:x="7166" fg:w="1"/><text x="84.8345%" y="479.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="84.5845%" y="453" width="0.0118%" height="15" fill="rgb(206,41,33)" fg:x="7166" fg:w="1"/><text x="84.8345%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.06%)</title><rect x="84.5491%" y="677" width="0.0590%" height="15" fill="rgb(221,225,45)" fg:x="7163" fg:w="5"/><text x="84.7991%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.06%)</title><rect x="84.5491%" y="661" width="0.0590%" height="15" fill="rgb(216,27,18)" fg:x="7163" fg:w="5"/><text x="84.7991%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.06%)</title><rect x="84.5491%" y="645" width="0.0590%" height="15" fill="rgb(250,193,34)" fg:x="7163" fg:w="5"/><text x="84.7991%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5 samples, 0.06%)</title><rect x="84.5491%" y="629" width="0.0590%" height="15" fill="rgb(227,215,20)" fg:x="7163" fg:w="5"/><text x="84.7991%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.05%)</title><rect x="84.5609%" y="613" width="0.0472%" height="15" fill="rgb(242,211,27)" fg:x="7164" fg:w="4"/><text x="84.8109%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.04%)</title><rect x="84.5727%" y="597" width="0.0354%" height="15" fill="rgb(229,190,30)" fg:x="7165" fg:w="3"/><text x="84.8227%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.04%)</title><rect x="84.5727%" y="581" width="0.0354%" height="15" fill="rgb(253,31,29)" fg:x="7165" fg:w="3"/><text x="84.8227%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.04%)</title><rect x="84.5727%" y="565" width="0.0354%" height="15" fill="rgb(229,177,52)" fg:x="7165" fg:w="3"/><text x="84.8227%" y="575.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="84.5845%" y="549" width="0.0236%" height="15" fill="rgb(226,88,8)" fg:x="7166" fg:w="2"/><text x="84.8345%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="84.5845%" y="533" width="0.0236%" height="15" fill="rgb(214,55,27)" fg:x="7166" fg:w="2"/><text x="84.8345%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="84.5845%" y="517" width="0.0236%" height="15" fill="rgb(233,202,5)" fg:x="7166" fg:w="2"/><text x="84.8345%" y="527.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="84.5845%" y="501" width="0.0236%" height="15" fill="rgb(251,49,30)" fg:x="7166" fg:w="2"/><text x="84.8345%" y="511.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="84.5963%" y="485" width="0.0118%" height="15" fill="rgb(235,18,52)" fg:x="7167" fg:w="1"/><text x="84.8463%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="84.6081%" y="485" width="0.0118%" height="15" fill="rgb(250,111,51)" fg:x="7168" fg:w="1"/><text x="84.8581%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.08%)</title><rect x="84.5491%" y="693" width="0.0826%" height="15" fill="rgb(218,13,25)" fg:x="7163" fg:w="7"/><text x="84.7991%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="84.6081%" y="677" width="0.0236%" height="15" fill="rgb(248,96,7)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="84.6081%" y="661" width="0.0236%" height="15" fill="rgb(217,31,15)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="84.6081%" y="645" width="0.0236%" height="15" fill="rgb(228,59,49)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="84.6081%" y="629" width="0.0236%" height="15" fill="rgb(210,152,38)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="84.6081%" y="613" width="0.0236%" height="15" fill="rgb(206,71,11)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="84.6081%" y="597" width="0.0236%" height="15" fill="rgb(244,199,5)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="84.6081%" y="581" width="0.0236%" height="15" fill="rgb(253,49,1)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="84.6081%" y="565" width="0.0236%" height="15" fill="rgb(225,206,40)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="84.6081%" y="549" width="0.0236%" height="15" fill="rgb(243,116,47)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="84.6081%" y="533" width="0.0236%" height="15" fill="rgb(219,225,16)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="84.6081%" y="517" width="0.0236%" height="15" fill="rgb(233,29,47)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="84.6081%" y="501" width="0.0236%" height="15" fill="rgb(250,179,18)" fg:x="7168" fg:w="2"/><text x="84.8581%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="84.6199%" y="485" width="0.0118%" height="15" fill="rgb(215,176,6)" fg:x="7169" fg:w="1"/><text x="84.8699%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="84.5491%" y="709" width="0.1062%" height="15" fill="rgb(214,117,39)" fg:x="7163" fg:w="9"/><text x="84.7991%" y="719.50"></text></g><g><title>std::collections::hash::map::map_entry (2 samples, 0.02%)</title><rect x="84.6317%" y="693" width="0.0236%" height="15" fill="rgb(247,183,36)" fg:x="7170" fg:w="2"/><text x="84.8817%" y="703.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (317 samples, 3.74%)</title><rect x="80.9372%" y="725" width="3.7417%" height="15" fill="rgb(237,200,3)" fg:x="6857" fg:w="317"/><text x="81.1872%" y="735.50">revm..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.02%)</title><rect x="84.6553%" y="709" width="0.0236%" height="15" fill="rgb(212,220,24)" fg:x="7172" fg:w="2"/><text x="84.9053%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.02%)</title><rect x="84.6553%" y="693" width="0.0236%" height="15" fill="rgb(245,216,20)" fg:x="7172" fg:w="2"/><text x="84.9053%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="84.6553%" y="677" width="0.0236%" height="15" fill="rgb(219,124,7)" fg:x="7172" fg:w="2"/><text x="84.9053%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="84.6671%" y="661" width="0.0118%" height="15" fill="rgb(227,167,8)" fg:x="7173" fg:w="1"/><text x="84.9171%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="84.6671%" y="645" width="0.0118%" height="15" fill="rgb(241,37,2)" fg:x="7173" fg:w="1"/><text x="84.9171%" y="655.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="84.6671%" y="629" width="0.0118%" height="15" fill="rgb(238,134,33)" fg:x="7173" fg:w="1"/><text x="84.9171%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="84.6671%" y="613" width="0.0118%" height="15" fill="rgb(248,48,27)" fg:x="7173" fg:w="1"/><text x="84.9171%" y="623.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.04%)</title><rect x="84.6789%" y="709" width="0.0354%" height="15" fill="rgb(212,14,16)" fg:x="7174" fg:w="3"/><text x="84.9289%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.04%)</title><rect x="84.6789%" y="693" width="0.0354%" height="15" fill="rgb(217,205,37)" fg:x="7174" fg:w="3"/><text x="84.9289%" y="703.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.04%)</title><rect x="84.6789%" y="677" width="0.0354%" height="15" fill="rgb(233,185,47)" fg:x="7174" fg:w="3"/><text x="84.9289%" y="687.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.04%)</title><rect x="84.6789%" y="661" width="0.0354%" height="15" fill="rgb(244,88,8)" fg:x="7174" fg:w="3"/><text x="84.9289%" y="671.50"></text></g><g><title>ruint::from::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from (1 samples, 0.01%)</title><rect x="84.7144%" y="709" width="0.0118%" height="15" fill="rgb(213,0,20)" fg:x="7177" fg:w="1"/><text x="84.9644%" y="719.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (1,365 samples, 16.11%)</title><rect x="68.6379%" y="805" width="16.1119%" height="15" fill="rgb(238,159,36)" fg:x="5815" fg:w="1365"/><text x="68.8879%" y="815.50">block_stm_revm::vm::Vm::e..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (329 samples, 3.88%)</title><rect x="80.8664%" y="789" width="3.8834%" height="15" fill="rgb(253,173,17)" fg:x="6851" fg:w="329"/><text x="81.1164%" y="799.50">revm..</text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (325 samples, 3.84%)</title><rect x="80.9136%" y="773" width="3.8362%" height="15" fill="rgb(221,23,28)" fg:x="6855" fg:w="325"/><text x="81.1636%" y="783.50">revm..</text></g><g><title>core::ops::function::Fn::call (325 samples, 3.84%)</title><rect x="80.9136%" y="757" width="3.8362%" height="15" fill="rgb(218,113,15)" fg:x="6855" fg:w="325"/><text x="81.1636%" y="767.50">core..</text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (325 samples, 3.84%)</title><rect x="80.9136%" y="741" width="3.8362%" height="15" fill="rgb(233,58,3)" fg:x="6855" fg:w="325"/><text x="81.1636%" y="751.50">revm..</text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (6 samples, 0.07%)</title><rect x="84.6789%" y="725" width="0.0708%" height="15" fill="rgb(250,46,35)" fg:x="7174" fg:w="6"/><text x="84.9289%" y="735.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (2 samples, 0.02%)</title><rect x="84.7262%" y="709" width="0.0236%" height="15" fill="rgb(210,169,11)" fg:x="7178" fg:w="2"/><text x="84.9762%" y="719.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="84.7262%" y="693" width="0.0236%" height="15" fill="rgb(246,88,19)" fg:x="7178" fg:w="2"/><text x="84.9762%" y="703.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="84.7262%" y="677" width="0.0236%" height="15" fill="rgb(206,81,49)" fg:x="7178" fg:w="2"/><text x="84.9762%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt; (7 samples, 0.08%)</title><rect x="84.7498%" y="805" width="0.0826%" height="15" fill="rgb(232,144,18)" fg:x="7180" fg:w="7"/><text x="84.9998%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.06%)</title><rect x="84.8324%" y="757" width="0.0590%" height="15" fill="rgb(235,2,27)" fg:x="7187" fg:w="5"/><text x="85.0824%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.06%)</title><rect x="84.8324%" y="741" width="0.0590%" height="15" fill="rgb(239,157,39)" fg:x="7187" fg:w="5"/><text x="85.0824%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="84.8324%" y="805" width="0.1180%" height="15" fill="rgb(220,11,17)" fg:x="7187" fg:w="10"/><text x="85.0824%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="84.8324%" y="789" width="0.1180%" height="15" fill="rgb(243,94,50)" fg:x="7187" fg:w="10"/><text x="85.0824%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (10 samples, 0.12%)</title><rect x="84.8324%" y="773" width="0.1180%" height="15" fill="rgb(218,22,0)" fg:x="7187" fg:w="10"/><text x="85.0824%" y="783.50"></text></g><g><title>syscall (5 samples, 0.06%)</title><rect x="84.8914%" y="757" width="0.0590%" height="15" fill="rgb(249,70,21)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="84.8914%" y="741" width="0.0590%" height="15" fill="rgb(245,111,46)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="751.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="84.8914%" y="725" width="0.0590%" height="15" fill="rgb(244,183,12)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="735.50"></text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="84.8914%" y="709" width="0.0590%" height="15" fill="rgb(207,117,0)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="84.8914%" y="693" width="0.0590%" height="15" fill="rgb(206,20,43)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="84.8914%" y="677" width="0.0590%" height="15" fill="rgb(221,104,11)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="84.8914%" y="661" width="0.0590%" height="15" fill="rgb(254,36,50)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="84.8914%" y="645" width="0.0590%" height="15" fill="rgb(252,17,15)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="84.8914%" y="629" width="0.0590%" height="15" fill="rgb(219,129,43)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="84.8914%" y="613" width="0.0590%" height="15" fill="rgb(205,34,45)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="623.50"></text></g><g><title>perf_pmu_nop_void (5 samples, 0.06%)</title><rect x="84.8914%" y="597" width="0.0590%" height="15" fill="rgb(251,201,32)" fg:x="7192" fg:w="5"/><text x="85.1414%" y="607.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="84.9504%" y="789" width="0.0118%" height="15" fill="rgb(205,56,0)" fg:x="7197" fg:w="1"/><text x="85.2004%" y="799.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.01%)</title><rect x="84.9504%" y="773" width="0.0118%" height="15" fill="rgb(211,193,27)" fg:x="7197" fg:w="1"/><text x="85.2004%" y="783.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="84.9504%" y="757" width="0.0118%" height="15" fill="rgb(231,100,42)" fg:x="7197" fg:w="1"/><text x="85.2004%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="84.9504%" y="741" width="0.0118%" height="15" fill="rgb(245,85,27)" fg:x="7197" fg:w="1"/><text x="85.2004%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="84.9504%" y="725" width="0.0118%" height="15" fill="rgb(241,76,24)" fg:x="7197" fg:w="1"/><text x="85.2004%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.02%)</title><rect x="84.9622%" y="773" width="0.0236%" height="15" fill="rgb(249,157,15)" fg:x="7198" fg:w="2"/><text x="85.2122%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="84.9622%" y="757" width="0.0236%" height="15" fill="rgb(222,218,25)" fg:x="7198" fg:w="2"/><text x="85.2122%" y="767.50"></text></g><g><title>perf_ctx_enable (16 samples, 0.19%)</title><rect x="85.0685%" y="565" width="0.1889%" height="15" fill="rgb(252,156,52)" fg:x="7207" fg:w="16"/><text x="85.3185%" y="575.50"></text></g><g><title>x86_pmu_enable (12 samples, 0.14%)</title><rect x="85.1157%" y="549" width="0.1416%" height="15" fill="rgb(211,185,7)" fg:x="7211" fg:w="12"/><text x="85.3657%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (33 samples, 0.39%)</title><rect x="85.0212%" y="581" width="0.3895%" height="15" fill="rgb(234,108,24)" fg:x="7203" fg:w="33"/><text x="85.2712%" y="591.50"></text></g><g><title>perf_pmu_nop_void (13 samples, 0.15%)</title><rect x="85.2573%" y="565" width="0.1534%" height="15" fill="rgb(227,218,2)" fg:x="7223" fg:w="13"/><text x="85.5073%" y="575.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="85.4108%" y="581" width="0.0118%" height="15" fill="rgb(224,0,36)" fg:x="7236" fg:w="1"/><text x="85.6608%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (41 samples, 0.48%)</title><rect x="84.9858%" y="597" width="0.4839%" height="15" fill="rgb(233,201,10)" fg:x="7200" fg:w="41"/><text x="85.2358%" y="607.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="85.4226%" y="581" width="0.0472%" height="15" fill="rgb(252,209,14)" fg:x="7237" fg:w="4"/><text x="85.6726%" y="591.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="85.4698%" y="597" width="0.0118%" height="15" fill="rgb(205,93,49)" fg:x="7241" fg:w="1"/><text x="85.7198%" y="607.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="85.4698%" y="581" width="0.0118%" height="15" fill="rgb(234,116,45)" fg:x="7241" fg:w="1"/><text x="85.7198%" y="591.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="85.4698%" y="565" width="0.0118%" height="15" fill="rgb(248,89,35)" fg:x="7241" fg:w="1"/><text x="85.7198%" y="575.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="85.4698%" y="549" width="0.0118%" height="15" fill="rgb(233,167,45)" fg:x="7241" fg:w="1"/><text x="85.7198%" y="559.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="85.4698%" y="533" width="0.0118%" height="15" fill="rgb(248,228,14)" fg:x="7241" fg:w="1"/><text x="85.7198%" y="543.50"></text></g><g><title>__x64_sys_futex (43 samples, 0.51%)</title><rect x="84.9858%" y="693" width="0.5076%" height="15" fill="rgb(246,91,14)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="703.50"></text></g><g><title>do_futex (43 samples, 0.51%)</title><rect x="84.9858%" y="677" width="0.5076%" height="15" fill="rgb(227,142,5)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="687.50"></text></g><g><title>futex_wait (43 samples, 0.51%)</title><rect x="84.9858%" y="661" width="0.5076%" height="15" fill="rgb(221,63,33)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="671.50"></text></g><g><title>futex_wait_queue (43 samples, 0.51%)</title><rect x="84.9858%" y="645" width="0.5076%" height="15" fill="rgb(233,49,0)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="655.50"></text></g><g><title>schedule (43 samples, 0.51%)</title><rect x="84.9858%" y="629" width="0.5076%" height="15" fill="rgb(251,115,38)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="639.50"></text></g><g><title>__schedule (43 samples, 0.51%)</title><rect x="84.9858%" y="613" width="0.5076%" height="15" fill="rgb(231,214,32)" fg:x="7200" fg:w="43"/><text x="85.2358%" y="623.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="85.4816%" y="597" width="0.0118%" height="15" fill="rgb(248,73,46)" fg:x="7242" fg:w="1"/><text x="85.7316%" y="607.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="85.4816%" y="581" width="0.0118%" height="15" fill="rgb(237,156,4)" fg:x="7242" fg:w="1"/><text x="85.7316%" y="591.50"></text></g><g><title>sched_clock (1 samples, 0.01%)</title><rect x="85.4816%" y="565" width="0.0118%" height="15" fill="rgb(227,132,2)" fg:x="7242" fg:w="1"/><text x="85.7316%" y="575.50"></text></g><g><title>sched_clock_noinstr (1 samples, 0.01%)</title><rect x="85.4816%" y="549" width="0.0118%" height="15" fill="rgb(248,161,9)" fg:x="7242" fg:w="1"/><text x="85.7316%" y="559.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="85.4934%" y="693" width="0.0118%" height="15" fill="rgb(238,77,38)" fg:x="7243" fg:w="1"/><text x="85.7434%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.01%)</title><rect x="85.5052%" y="661" width="0.0118%" height="15" fill="rgb(222,166,40)" fg:x="7244" fg:w="1"/><text x="85.7552%" y="671.50"></text></g><g><title>std::sys::unix::futex::futex_wait (47 samples, 0.55%)</title><rect x="84.9858%" y="757" width="0.5548%" height="15" fill="rgb(214,168,45)" fg:x="7200" fg:w="47"/><text x="85.2358%" y="767.50"></text></g><g><title>syscall (47 samples, 0.55%)</title><rect x="84.9858%" y="741" width="0.5548%" height="15" fill="rgb(226,64,37)" fg:x="7200" fg:w="47"/><text x="85.2358%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (47 samples, 0.55%)</title><rect x="84.9858%" y="725" width="0.5548%" height="15" fill="rgb(232,210,43)" fg:x="7200" fg:w="47"/><text x="85.2358%" y="735.50"></text></g><g><title>do_syscall_64 (47 samples, 0.55%)</title><rect x="84.9858%" y="709" width="0.5548%" height="15" fill="rgb(214,76,33)" fg:x="7200" fg:w="47"/><text x="85.2358%" y="719.50"></text></g><g><title>syscall_exit_to_user_mode (3 samples, 0.04%)</title><rect x="85.5052%" y="693" width="0.0354%" height="15" fill="rgb(210,78,5)" fg:x="7244" fg:w="3"/><text x="85.7552%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.04%)</title><rect x="85.5052%" y="677" width="0.0354%" height="15" fill="rgb(211,107,37)" fg:x="7244" fg:w="3"/><text x="85.7552%" y="687.50"></text></g><g><title>switch_fpu_return (2 samples, 0.02%)</title><rect x="85.5170%" y="661" width="0.0236%" height="15" fill="rgb(249,67,16)" fg:x="7245" fg:w="2"/><text x="85.7670%" y="671.50"></text></g><g><title>restore_fpregs_from_fpstate (2 samples, 0.02%)</title><rect x="85.5170%" y="645" width="0.0236%" height="15" fill="rgb(222,114,31)" fg:x="7245" fg:w="2"/><text x="85.7670%" y="655.50"></text></g><g><title>xfd_validate_state (1 samples, 0.01%)</title><rect x="85.5288%" y="629" width="0.0118%" height="15" fill="rgb(242,118,19)" fg:x="7246" fg:w="1"/><text x="85.7788%" y="639.50"></text></g><g><title>core::hint::spin_loop (4 samples, 0.05%)</title><rect x="85.5406%" y="741" width="0.0472%" height="15" fill="rgb(223,115,1)" fg:x="7247" fg:w="4"/><text x="85.7906%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4 samples, 0.05%)</title><rect x="85.5406%" y="725" width="0.0472%" height="15" fill="rgb(241,182,54)" fg:x="7247" fg:w="4"/><text x="85.7906%" y="735.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (2,560 samples, 30.22%)</title><rect x="55.3942%" y="821" width="30.2172%" height="15" fill="rgb(244,166,36)" fg:x="4693" fg:w="2560"/><text x="55.6442%" y="831.50">block_stm_revm::block_stm::try_execute</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.66%)</title><rect x="84.9504%" y="805" width="0.6610%" height="15" fill="rgb(241,52,43)" fg:x="7197" fg:w="56"/><text x="85.2004%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (55 samples, 0.65%)</title><rect x="84.9622%" y="789" width="0.6492%" height="15" fill="rgb(236,82,9)" fg:x="7198" fg:w="55"/><text x="85.2122%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (53 samples, 0.63%)</title><rect x="84.9858%" y="773" width="0.6256%" height="15" fill="rgb(241,119,0)" fg:x="7200" fg:w="53"/><text x="85.2358%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (6 samples, 0.07%)</title><rect x="85.5406%" y="757" width="0.0708%" height="15" fill="rgb(221,19,22)" fg:x="7247" fg:w="6"/><text x="85.7906%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="85.5878%" y="741" width="0.0236%" height="15" fill="rgb(254,144,35)" fg:x="7251" fg:w="2"/><text x="85.8378%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="85.5878%" y="725" width="0.0236%" height="15" fill="rgb(246,132,30)" fg:x="7251" fg:w="2"/><text x="85.8378%" y="735.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="85.6704%" y="629" width="0.0472%" height="15" fill="rgb(234,69,28)" fg:x="7258" fg:w="4"/><text x="85.9204%" y="639.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="85.6468%" y="789" width="0.1180%" height="15" fill="rgb(219,106,47)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="85.6468%" y="773" width="0.1180%" height="15" fill="rgb(218,79,24)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="783.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="85.6468%" y="757" width="0.1180%" height="15" fill="rgb(225,26,21)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="85.6468%" y="741" width="0.1180%" height="15" fill="rgb(217,68,49)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="85.6468%" y="725" width="0.1180%" height="15" fill="rgb(220,204,28)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="85.6468%" y="709" width="0.1180%" height="15" fill="rgb(237,208,43)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="719.50"></text></g><g><title>schedule (10 samples, 0.12%)</title><rect x="85.6468%" y="693" width="0.1180%" height="15" fill="rgb(213,97,42)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="703.50"></text></g><g><title>__schedule (10 samples, 0.12%)</title><rect x="85.6468%" y="677" width="0.1180%" height="15" fill="rgb(238,96,52)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="85.6468%" y="661" width="0.1180%" height="15" fill="rgb(228,14,13)" fg:x="7256" fg:w="10"/><text x="85.8968%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (8 samples, 0.09%)</title><rect x="85.6704%" y="645" width="0.0944%" height="15" fill="rgb(219,123,13)" fg:x="7258" fg:w="8"/><text x="85.9204%" y="655.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="85.7177%" y="629" width="0.0472%" height="15" fill="rgb(216,144,17)" fg:x="7262" fg:w="4"/><text x="85.9677%" y="639.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::done (308 samples, 3.64%)</title><rect x="85.6114%" y="821" width="3.6355%" height="15" fill="rgb(230,228,29)" fg:x="7253" fg:w="308"/><text x="85.8614%" y="831.50">bloc..</text></g><g><title>core::sync::atomic::AtomicBool::load (308 samples, 3.64%)</title><rect x="85.6114%" y="805" width="3.6355%" height="15" fill="rgb(233,18,5)" fg:x="7253" fg:w="308"/><text x="85.8614%" y="815.50">core..</text></g><g><title>core::sync::atomic::atomic_load (295 samples, 3.48%)</title><rect x="85.7649%" y="789" width="3.4821%" height="15" fill="rgb(233,197,12)" fg:x="7266" fg:w="295"/><text x="86.0149%" y="799.50">cor..</text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="89.2823%" y="709" width="0.0118%" height="15" fill="rgb(234,140,29)" fg:x="7564" fg:w="1"/><text x="89.5323%" y="719.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="89.2823%" y="693" width="0.0118%" height="15" fill="rgb(233,113,19)" fg:x="7564" fg:w="1"/><text x="89.5323%" y="703.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="89.2823%" y="677" width="0.0118%" height="15" fill="rgb(246,209,13)" fg:x="7564" fg:w="1"/><text x="89.5323%" y="687.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="89.2941%" y="645" width="0.0472%" height="15" fill="rgb(242,79,54)" fg:x="7565" fg:w="4"/><text x="89.5441%" y="655.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="89.3414%" y="645" width="0.0472%" height="15" fill="rgb(219,73,16)" fg:x="7569" fg:w="4"/><text x="89.5914%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="89.2823%" y="805" width="0.1180%" height="15" fill="rgb(224,52,10)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="815.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="89.2823%" y="789" width="0.1180%" height="15" fill="rgb(237,179,5)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="799.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="89.2823%" y="773" width="0.1180%" height="15" fill="rgb(231,20,6)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="783.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="89.2823%" y="757" width="0.1180%" height="15" fill="rgb(253,171,45)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="767.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="89.2823%" y="741" width="0.1180%" height="15" fill="rgb(230,75,49)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="751.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="89.2823%" y="725" width="0.1180%" height="15" fill="rgb(216,83,46)" fg:x="7564" fg:w="10"/><text x="89.5323%" y="735.50"></text></g><g><title>schedule (9 samples, 0.11%)</title><rect x="89.2941%" y="709" width="0.1062%" height="15" fill="rgb(236,56,9)" fg:x="7565" fg:w="9"/><text x="89.5441%" y="719.50"></text></g><g><title>__schedule (9 samples, 0.11%)</title><rect x="89.2941%" y="693" width="0.1062%" height="15" fill="rgb(215,28,34)" fg:x="7565" fg:w="9"/><text x="89.5441%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.11%)</title><rect x="89.2941%" y="677" width="0.1062%" height="15" fill="rgb(230,222,20)" fg:x="7565" fg:w="9"/><text x="89.5441%" y="687.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.11%)</title><rect x="89.2941%" y="661" width="0.1062%" height="15" fill="rgb(235,209,51)" fg:x="7565" fg:w="9"/><text x="89.5441%" y="671.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="89.3886%" y="645" width="0.0118%" height="15" fill="rgb(235,167,1)" fg:x="7573" fg:w="1"/><text x="89.6386%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (5 samples, 0.06%)</title><rect x="89.6246%" y="773" width="0.0590%" height="15" fill="rgb(248,220,0)" fg:x="7593" fg:w="5"/><text x="89.8746%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="89.6246%" y="757" width="0.0590%" height="15" fill="rgb(239,0,18)" fg:x="7593" fg:w="5"/><text x="89.8746%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (5 samples, 0.06%)</title><rect x="89.6246%" y="741" width="0.0590%" height="15" fill="rgb(229,179,11)" fg:x="7593" fg:w="5"/><text x="89.8746%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.06%)</title><rect x="89.6246%" y="725" width="0.0590%" height="15" fill="rgb(226,116,53)" fg:x="7593" fg:w="5"/><text x="89.8746%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.06%)</title><rect x="89.6246%" y="709" width="0.0590%" height="15" fill="rgb(218,1,49)" fg:x="7593" fg:w="5"/><text x="89.8746%" y="719.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="89.6837%" y="725" width="0.0118%" height="15" fill="rgb(208,184,47)" fg:x="7598" fg:w="1"/><text x="89.9337%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="89.6837%" y="709" width="0.0118%" height="15" fill="rgb(238,174,3)" fg:x="7598" fg:w="1"/><text x="89.9337%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="89.6837%" y="693" width="0.0118%" height="15" fill="rgb(247,188,6)" fg:x="7598" fg:w="1"/><text x="89.9337%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="89.6837%" y="757" width="0.0236%" height="15" fill="rgb(211,165,46)" fg:x="7598" fg:w="2"/><text x="89.9337%" y="767.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.02%)</title><rect x="89.6837%" y="741" width="0.0236%" height="15" fill="rgb(222,190,10)" fg:x="7598" fg:w="2"/><text x="89.9337%" y="751.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="89.6955%" y="725" width="0.0118%" height="15" fill="rgb(206,185,3)" fg:x="7599" fg:w="1"/><text x="89.9455%" y="735.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="89.6955%" y="709" width="0.0118%" height="15" fill="rgb(244,125,37)" fg:x="7599" fg:w="1"/><text x="89.9455%" y="719.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="89.6955%" y="693" width="0.0118%" height="15" fill="rgb(211,43,7)" fg:x="7599" fg:w="1"/><text x="89.9455%" y="703.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::try_incarnate (37 samples, 0.44%)</title><rect x="89.4122%" y="789" width="0.4367%" height="15" fill="rgb(250,41,42)" fg:x="7575" fg:w="37"/><text x="89.6622%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (14 samples, 0.17%)</title><rect x="89.6837%" y="773" width="0.1653%" height="15" fill="rgb(254,54,42)" fg:x="7598" fg:w="14"/><text x="89.9337%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (12 samples, 0.14%)</title><rect x="89.7073%" y="757" width="0.1416%" height="15" fill="rgb(213,71,43)" fg:x="7600" fg:w="12"/><text x="89.9573%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.14%)</title><rect x="89.7073%" y="741" width="0.1416%" height="15" fill="rgb(249,3,44)" fg:x="7600" fg:w="12"/><text x="89.9573%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.14%)</title><rect x="89.7073%" y="725" width="0.1416%" height="15" fill="rgb(229,80,41)" fg:x="7600" fg:w="12"/><text x="89.9573%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.39%)</title><rect x="89.8489%" y="789" width="0.3895%" height="15" fill="rgb(231,25,28)" fg:x="7612" fg:w="33"/><text x="90.0989%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.39%)</title><rect x="89.8489%" y="773" width="0.3895%" height="15" fill="rgb(208,79,48)" fg:x="7612" fg:w="33"/><text x="90.0989%" y="783.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_execute (79 samples, 0.93%)</title><rect x="89.4004%" y="805" width="0.9325%" height="15" fill="rgb(207,196,38)" fg:x="7574" fg:w="79"/><text x="89.6504%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.09%)</title><rect x="90.2384%" y="789" width="0.0944%" height="15" fill="rgb(228,105,49)" fg:x="7645" fg:w="8"/><text x="90.4884%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.09%)</title><rect x="90.2384%" y="773" width="0.0944%" height="15" fill="rgb(237,99,15)" fg:x="7645" fg:w="8"/><text x="90.4884%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="90.4981%" y="789" width="0.0236%" height="15" fill="rgb(224,207,46)" fg:x="7667" fg:w="2"/><text x="90.7481%" y="799.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="90.4981%" y="773" width="0.0236%" height="15" fill="rgb(249,117,50)" fg:x="7667" fg:w="2"/><text x="90.7481%" y="783.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="90.4981%" y="757" width="0.0236%" height="15" fill="rgb(248,17,13)" fg:x="7667" fg:w="2"/><text x="90.7481%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (14 samples, 0.17%)</title><rect x="90.5217%" y="645" width="0.1653%" height="15" fill="rgb(228,187,36)" fg:x="7669" fg:w="14"/><text x="90.7717%" y="655.50"></text></g><g><title>perf_ctx_enable (14 samples, 0.17%)</title><rect x="90.5217%" y="629" width="0.1653%" height="15" fill="rgb(234,132,20)" fg:x="7669" fg:w="14"/><text x="90.7717%" y="639.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="90.6398%" y="613" width="0.0472%" height="15" fill="rgb(209,170,46)" fg:x="7679" fg:w="4"/><text x="90.8898%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (15 samples, 0.18%)</title><rect x="90.5217%" y="789" width="0.1771%" height="15" fill="rgb(237,23,19)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (15 samples, 0.18%)</title><rect x="90.5217%" y="773" width="0.1771%" height="15" fill="rgb(227,21,26)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="783.50"></text></g><g><title>irqentry_exit (15 samples, 0.18%)</title><rect x="90.5217%" y="757" width="0.1771%" height="15" fill="rgb(222,220,48)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (15 samples, 0.18%)</title><rect x="90.5217%" y="741" width="0.1771%" height="15" fill="rgb(214,9,16)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (15 samples, 0.18%)</title><rect x="90.5217%" y="725" width="0.1771%" height="15" fill="rgb(209,73,30)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (15 samples, 0.18%)</title><rect x="90.5217%" y="709" width="0.1771%" height="15" fill="rgb(207,20,33)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="719.50"></text></g><g><title>schedule (15 samples, 0.18%)</title><rect x="90.5217%" y="693" width="0.1771%" height="15" fill="rgb(219,153,12)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="703.50"></text></g><g><title>__schedule (15 samples, 0.18%)</title><rect x="90.5217%" y="677" width="0.1771%" height="15" fill="rgb(235,97,25)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (15 samples, 0.18%)</title><rect x="90.5217%" y="661" width="0.1771%" height="15" fill="rgb(244,30,34)" fg:x="7669" fg:w="15"/><text x="90.7717%" y="671.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.01%)</title><rect x="90.6870%" y="645" width="0.0118%" height="15" fill="rgb(214,106,45)" fg:x="7683" fg:w="1"/><text x="90.9370%" y="655.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.01%)</title><rect x="90.7106%" y="757" width="0.0118%" height="15" fill="rgb(226,41,9)" fg:x="7685" fg:w="1"/><text x="90.9606%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (40 samples, 0.47%)</title><rect x="90.6988%" y="789" width="0.4721%" height="15" fill="rgb(253,139,29)" fg:x="7684" fg:w="40"/><text x="90.9488%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.47%)</title><rect x="90.6988%" y="773" width="0.4721%" height="15" fill="rgb(213,205,39)" fg:x="7684" fg:w="40"/><text x="90.9488%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (38 samples, 0.45%)</title><rect x="90.7224%" y="757" width="0.4485%" height="15" fill="rgb(209,27,10)" fg:x="7686" fg:w="38"/><text x="90.9724%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (37 samples, 0.44%)</title><rect x="90.7342%" y="741" width="0.4367%" height="15" fill="rgb(249,142,16)" fg:x="7687" fg:w="37"/><text x="90.9842%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.44%)</title><rect x="90.7342%" y="725" width="0.4367%" height="15" fill="rgb(242,65,12)" fg:x="7687" fg:w="37"/><text x="90.9842%" y="735.50"></text></g><g><title>asm_common_interrupt (5 samples, 0.06%)</title><rect x="94.1572%" y="757" width="0.0590%" height="15" fill="rgb(232,48,10)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="767.50"></text></g><g><title>common_interrupt (5 samples, 0.06%)</title><rect x="94.1572%" y="741" width="0.0590%" height="15" fill="rgb(253,67,19)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="94.1572%" y="725" width="0.0590%" height="15" fill="rgb(227,93,29)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="94.1572%" y="709" width="0.0590%" height="15" fill="rgb(226,189,53)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="94.1572%" y="693" width="0.0590%" height="15" fill="rgb(223,224,1)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="94.1572%" y="677" width="0.0590%" height="15" fill="rgb(221,84,32)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="94.1572%" y="661" width="0.0590%" height="15" fill="rgb(214,189,28)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="94.1572%" y="645" width="0.0590%" height="15" fill="rgb(234,7,52)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="94.1572%" y="629" width="0.0590%" height="15" fill="rgb(249,73,31)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="639.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="94.1572%" y="613" width="0.0590%" height="15" fill="rgb(253,153,41)" fg:x="7977" fg:w="5"/><text x="94.4072%" y="623.50"></text></g><g><title>mem_cgroup_handle_over_high (1 samples, 0.01%)</title><rect x="94.2162%" y="661" width="0.0118%" height="15" fill="rgb(249,52,34)" fg:x="7982" fg:w="1"/><text x="94.4662%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (268 samples, 3.16%)</title><rect x="91.1709%" y="789" width="3.1634%" height="15" fill="rgb(236,177,47)" fg:x="7724" fg:w="268"/><text x="91.4209%" y="799.50">cor..</text></g><g><title>core::sync::atomic::atomic_add (268 samples, 3.16%)</title><rect x="91.1709%" y="773" width="3.1634%" height="15" fill="rgb(252,185,45)" fg:x="7724" fg:w="268"/><text x="91.4209%" y="783.50">cor..</text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="94.2162%" y="757" width="0.1180%" height="15" fill="rgb(251,15,30)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="94.2162%" y="741" width="0.1180%" height="15" fill="rgb(233,31,4)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="751.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="94.2162%" y="725" width="0.1180%" height="15" fill="rgb(254,44,24)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="94.2162%" y="709" width="0.1180%" height="15" fill="rgb(218,54,1)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="94.2162%" y="693" width="0.1180%" height="15" fill="rgb(243,209,39)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="94.2162%" y="677" width="0.1180%" height="15" fill="rgb(206,75,33)" fg:x="7982" fg:w="10"/><text x="94.4662%" y="687.50"></text></g><g><title>schedule (9 samples, 0.11%)</title><rect x="94.2280%" y="661" width="0.1062%" height="15" fill="rgb(223,108,18)" fg:x="7983" fg:w="9"/><text x="94.4780%" y="671.50"></text></g><g><title>__schedule (9 samples, 0.11%)</title><rect x="94.2280%" y="645" width="0.1062%" height="15" fill="rgb(244,89,31)" fg:x="7983" fg:w="9"/><text x="94.4780%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.11%)</title><rect x="94.2280%" y="629" width="0.1062%" height="15" fill="rgb(222,167,27)" fg:x="7983" fg:w="9"/><text x="94.4780%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="94.2871%" y="613" width="0.0472%" height="15" fill="rgb(247,41,16)" fg:x="7988" fg:w="4"/><text x="94.5371%" y="623.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="94.2871%" y="597" width="0.0472%" height="15" fill="rgb(233,168,40)" fg:x="7988" fg:w="4"/><text x="94.5371%" y="607.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="94.2871%" y="581" width="0.0472%" height="15" fill="rgb(205,211,8)" fg:x="7988" fg:w="4"/><text x="94.5371%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (100 samples, 1.18%)</title><rect x="94.3343%" y="789" width="1.1804%" height="15" fill="rgb(238,105,11)" fg:x="7992" fg:w="100"/><text x="94.5843%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (100 samples, 1.18%)</title><rect x="94.3343%" y="773" width="1.1804%" height="15" fill="rgb(223,142,52)" fg:x="7992" fg:w="100"/><text x="94.5843%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.17%)</title><rect x="95.5146%" y="789" width="0.1653%" height="15" fill="rgb(238,51,33)" fg:x="8092" fg:w="14"/><text x="95.7646%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.17%)</title><rect x="95.5146%" y="773" width="0.1653%" height="15" fill="rgb(231,188,43)" fg:x="8092" fg:w="14"/><text x="95.7646%" y="783.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="95.6799%" y="773" width="0.0472%" height="15" fill="rgb(216,92,17)" fg:x="8106" fg:w="4"/><text x="95.9299%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (4 samples, 0.05%)</title><rect x="95.6799%" y="757" width="0.0472%" height="15" fill="rgb(228,2,40)" fg:x="8106" fg:w="4"/><text x="95.9299%" y="767.50"></text></g><g><title>std::sync::poison::Flag::get (4 samples, 0.05%)</title><rect x="95.6799%" y="741" width="0.0472%" height="15" fill="rgb(226,73,15)" fg:x="8106" fg:w="4"/><text x="95.9299%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (4 samples, 0.05%)</title><rect x="95.6799%" y="725" width="0.0472%" height="15" fill="rgb(227,66,46)" fg:x="8106" fg:w="4"/><text x="95.9299%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.05%)</title><rect x="95.6799%" y="709" width="0.0472%" height="15" fill="rgb(209,71,6)" fg:x="8106" fg:w="4"/><text x="95.9299%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="95.7507%" y="757" width="0.0590%" height="15" fill="rgb(246,100,25)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="95.7507%" y="741" width="0.0590%" height="15" fill="rgb(248,185,27)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="95.7507%" y="725" width="0.0590%" height="15" fill="rgb(225,118,47)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="95.7507%" y="709" width="0.0590%" height="15" fill="rgb(220,185,44)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="95.7507%" y="693" width="0.0590%" height="15" fill="rgb(227,95,24)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="95.7507%" y="677" width="0.0590%" height="15" fill="rgb(252,84,24)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="95.7507%" y="661" width="0.0590%" height="15" fill="rgb(240,34,44)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="95.7507%" y="645" width="0.0590%" height="15" fill="rgb(209,72,54)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="95.7507%" y="629" width="0.0590%" height="15" fill="rgb(226,19,45)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="95.7507%" y="613" width="0.0590%" height="15" fill="rgb(246,7,45)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="623.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="95.7507%" y="597" width="0.0590%" height="15" fill="rgb(225,45,2)" fg:x="8112" fg:w="5"/><text x="96.0007%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (91 samples, 1.07%)</title><rect x="95.8097%" y="757" width="1.0741%" height="15" fill="rgb(221,80,29)" fg:x="8117" fg:w="91"/><text x="96.0597%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (91 samples, 1.07%)</title><rect x="95.8097%" y="741" width="1.0741%" height="15" fill="rgb(228,11,19)" fg:x="8117" fg:w="91"/><text x="96.0597%" y="751.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="96.8839%" y="581" width="0.0118%" height="15" fill="rgb(243,17,21)" fg:x="8208" fg:w="1"/><text x="97.1339%" y="591.50"></text></g><g><title>perf_ctx_enable (8 samples, 0.09%)</title><rect x="96.9665%" y="549" width="0.0944%" height="15" fill="rgb(243,88,8)" fg:x="8215" fg:w="8"/><text x="97.2165%" y="559.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="97.0137%" y="533" width="0.0472%" height="15" fill="rgb(214,17,9)" fg:x="8219" fg:w="4"/><text x="97.2637%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.24%)</title><rect x="96.9193%" y="565" width="0.2361%" height="15" fill="rgb(232,169,15)" fg:x="8211" fg:w="20"/><text x="97.1693%" y="575.50"></text></g><g><title>perf_pmu_nop_void (8 samples, 0.09%)</title><rect x="97.0609%" y="549" width="0.0944%" height="15" fill="rgb(232,86,53)" fg:x="8223" fg:w="8"/><text x="97.3109%" y="559.50"></text></g><g><title>futex_wait_queue (27 samples, 0.32%)</title><rect x="96.8839%" y="629" width="0.3187%" height="15" fill="rgb(222,100,4)" fg:x="8208" fg:w="27"/><text x="97.1339%" y="639.50"></text></g><g><title>schedule (27 samples, 0.32%)</title><rect x="96.8839%" y="613" width="0.3187%" height="15" fill="rgb(253,151,38)" fg:x="8208" fg:w="27"/><text x="97.1339%" y="623.50"></text></g><g><title>__schedule (27 samples, 0.32%)</title><rect x="96.8839%" y="597" width="0.3187%" height="15" fill="rgb(238,215,29)" fg:x="8208" fg:w="27"/><text x="97.1339%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (26 samples, 0.31%)</title><rect x="96.8957%" y="581" width="0.3069%" height="15" fill="rgb(205,128,53)" fg:x="8209" fg:w="26"/><text x="97.1457%" y="591.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="97.1553%" y="565" width="0.0472%" height="15" fill="rgb(248,183,14)" fg:x="8231" fg:w="4"/><text x="97.4053%" y="575.50"></text></g><g><title>__x64_sys_futex (28 samples, 0.33%)</title><rect x="96.8839%" y="677" width="0.3305%" height="15" fill="rgb(244,172,35)" fg:x="8208" fg:w="28"/><text x="97.1339%" y="687.50"></text></g><g><title>do_futex (28 samples, 0.33%)</title><rect x="96.8839%" y="661" width="0.3305%" height="15" fill="rgb(234,93,19)" fg:x="8208" fg:w="28"/><text x="97.1339%" y="671.50"></text></g><g><title>futex_wait (28 samples, 0.33%)</title><rect x="96.8839%" y="645" width="0.3305%" height="15" fill="rgb(227,109,7)" fg:x="8208" fg:w="28"/><text x="97.1339%" y="655.50"></text></g><g><title>schedule (1 samples, 0.01%)</title><rect x="97.2025%" y="629" width="0.0118%" height="15" fill="rgb(233,136,54)" fg:x="8235" fg:w="1"/><text x="97.4525%" y="639.50"></text></g><g><title>__put_user_8 (1 samples, 0.01%)</title><rect x="97.2144%" y="613" width="0.0118%" height="15" fill="rgb(233,19,40)" fg:x="8236" fg:w="1"/><text x="97.4644%" y="623.50"></text></g><g><title>std::sys::unix::futex::futex_wait (30 samples, 0.35%)</title><rect x="96.8839%" y="741" width="0.3541%" height="15" fill="rgb(247,41,18)" fg:x="8208" fg:w="30"/><text x="97.1339%" y="751.50"></text></g><g><title>syscall (30 samples, 0.35%)</title><rect x="96.8839%" y="725" width="0.3541%" height="15" fill="rgb(220,34,34)" fg:x="8208" fg:w="30"/><text x="97.1339%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (30 samples, 0.35%)</title><rect x="96.8839%" y="709" width="0.3541%" height="15" fill="rgb(222,135,32)" fg:x="8208" fg:w="30"/><text x="97.1339%" y="719.50"></text></g><g><title>do_syscall_64 (30 samples, 0.35%)</title><rect x="96.8839%" y="693" width="0.3541%" height="15" fill="rgb(214,80,19)" fg:x="8208" fg:w="30"/><text x="97.1339%" y="703.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.02%)</title><rect x="97.2144%" y="677" width="0.0236%" height="15" fill="rgb(234,54,46)" fg:x="8236" fg:w="2"/><text x="97.4644%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="97.2144%" y="661" width="0.0236%" height="15" fill="rgb(251,48,23)" fg:x="8236" fg:w="2"/><text x="97.4644%" y="671.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.02%)</title><rect x="97.2144%" y="645" width="0.0236%" height="15" fill="rgb(254,109,52)" fg:x="8236" fg:w="2"/><text x="97.4644%" y="655.50"></text></g><g><title>__rseq_handle_notify_resume (2 samples, 0.02%)</title><rect x="97.2144%" y="629" width="0.0236%" height="15" fill="rgb(240,186,19)" fg:x="8236" fg:w="2"/><text x="97.4644%" y="639.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="97.2262%" y="613" width="0.0118%" height="15" fill="rgb(246,187,17)" fg:x="8237" fg:w="1"/><text x="97.4762%" y="623.50"></text></g><g><title>core::hint::spin_loop (13 samples, 0.15%)</title><rect x="97.2498%" y="725" width="0.1534%" height="15" fill="rgb(212,21,5)" fg:x="8239" fg:w="13"/><text x="97.4998%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (13 samples, 0.15%)</title><rect x="97.2498%" y="709" width="0.1534%" height="15" fill="rgb(225,185,18)" fg:x="8239" fg:w="13"/><text x="97.4998%" y="719.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_validate (608 samples, 7.18%)</title><rect x="90.3329%" y="805" width="7.1766%" height="15" fill="rgb(245,114,17)" fg:x="7653" fg:w="608"/><text x="90.5829%" y="815.50">block_stm_..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (155 samples, 1.83%)</title><rect x="95.6799%" y="789" width="1.8296%" height="15" fill="rgb(223,164,24)" fg:x="8106" fg:w="155"/><text x="95.9299%" y="799.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (151 samples, 1.78%)</title><rect x="95.7271%" y="773" width="1.7823%" height="15" fill="rgb(211,228,3)" fg:x="8110" fg:w="151"/><text x="95.9771%" y="783.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (53 samples, 0.63%)</title><rect x="96.8839%" y="757" width="0.6256%" height="15" fill="rgb(223,16,38)" fg:x="8208" fg:w="53"/><text x="97.1339%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (23 samples, 0.27%)</title><rect x="97.2380%" y="741" width="0.2715%" height="15" fill="rgb(207,31,54)" fg:x="8238" fg:w="23"/><text x="97.4880%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (9 samples, 0.11%)</title><rect x="97.4032%" y="725" width="0.1062%" height="15" fill="rgb(220,39,11)" fg:x="8252" fg:w="9"/><text x="97.6532%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.11%)</title><rect x="97.4032%" y="709" width="0.1062%" height="15" fill="rgb(235,185,0)" fg:x="8252" fg:w="9"/><text x="97.6532%" y="719.50"></text></g><g><title>std::panic::catch_unwind (4,896 samples, 57.79%)</title><rect x="40.4627%" y="933" width="57.7904%" height="15" fill="rgb(249,39,18)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,896 samples, 57.79%)</title><rect x="40.4627%" y="917" width="57.7904%" height="15" fill="rgb(240,110,33)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,896 samples, 57.79%)</title><rect x="40.4627%" y="901" width="57.7904%" height="15" fill="rgb(210,92,42)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="911.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,896 samples, 57.79%)</title><rect x="40.4627%" y="885" width="57.7904%" height="15" fill="rgb(218,215,28)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="895.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (4,896 samples, 57.79%)</title><rect x="40.4627%" y="869" width="57.7904%" height="15" fill="rgb(238,215,36)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="879.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,896 samples, 57.79%)</title><rect x="40.4627%" y="853" width="57.7904%" height="15" fill="rgb(220,31,10)" fg:x="3428" fg:w="4896"/><text x="40.7127%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (4,895 samples, 57.78%)</title><rect x="40.4745%" y="837" width="57.7786%" height="15" fill="rgb(212,93,14)" fg:x="3429" fg:w="4895"/><text x="40.7245%" y="847.50">block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}}</text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (763 samples, 9.01%)</title><rect x="89.2469%" y="821" width="9.0061%" height="15" fill="rgb(254,207,2)" fg:x="7561" fg:w="763"/><text x="89.4969%" y="831.50">block_stm_rev..</text></g><g><title>core::sync::atomic::AtomicUsize::load (63 samples, 0.74%)</title><rect x="97.5094%" y="805" width="0.7436%" height="15" fill="rgb(205,57,44)" fg:x="8261" fg:w="63"/><text x="97.7594%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (63 samples, 0.74%)</title><rect x="97.5094%" y="789" width="0.7436%" height="15" fill="rgb(226,151,19)" fg:x="8261" fg:w="63"/><text x="97.7594%" y="799.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.01%)</title><rect x="98.2531%" y="773" width="0.0118%" height="15" fill="rgb(230,72,30)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="783.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.01%)</title><rect x="98.2531%" y="757" width="0.0118%" height="15" fill="rgb(244,0,8)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="98.2531%" y="741" width="0.0118%" height="15" fill="rgb(230,192,6)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="751.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="98.2531%" y="725" width="0.0118%" height="15" fill="rgb(233,207,13)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="735.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="98.2531%" y="709" width="0.0118%" height="15" fill="rgb(206,227,7)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="719.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="98.2531%" y="693" width="0.0118%" height="15" fill="rgb(213,217,25)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="703.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="98.2531%" y="677" width="0.0118%" height="15" fill="rgb(249,75,4)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="687.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="98.2531%" y="661" width="0.0118%" height="15" fill="rgb(225,114,18)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="671.50"></text></g><g><title>rwsem_down_write_slowpath (1 samples, 0.01%)</title><rect x="98.2531%" y="645" width="0.0118%" height="15" fill="rgb(211,162,40)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="655.50"></text></g><g><title>rwsem_optimistic_spin (1 samples, 0.01%)</title><rect x="98.2531%" y="629" width="0.0118%" height="15" fill="rgb(206,49,29)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="639.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.2531%" y="613" width="0.0118%" height="15" fill="rgb(244,8,6)" fg:x="8324" fg:w="1"/><text x="98.5031%" y="623.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="98.2649%" y="693" width="0.0118%" height="15" fill="rgb(231,194,28)" fg:x="8325" fg:w="1"/><text x="98.5149%" y="703.50"></text></g><g><title>rwsem_down_write_slowpath (1 samples, 0.01%)</title><rect x="98.2649%" y="677" width="0.0118%" height="15" fill="rgb(210,69,5)" fg:x="8325" fg:w="1"/><text x="98.5149%" y="687.50"></text></g><g><title>rwsem_optimistic_spin (1 samples, 0.01%)</title><rect x="98.2649%" y="661" width="0.0118%" height="15" fill="rgb(216,186,12)" fg:x="8325" fg:w="1"/><text x="98.5149%" y="671.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.2649%" y="645" width="0.0118%" height="15" fill="rgb(238,61,15)" fg:x="8325" fg:w="1"/><text x="98.5149%" y="655.50"></text></g><g><title>__GI_mprotect (2 samples, 0.02%)</title><rect x="98.2649%" y="773" width="0.0236%" height="15" fill="rgb(226,104,1)" fg:x="8325" fg:w="2"/><text x="98.5149%" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="98.2649%" y="757" width="0.0236%" height="15" fill="rgb(229,128,15)" fg:x="8325" fg:w="2"/><text x="98.5149%" y="767.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="98.2649%" y="741" width="0.0236%" height="15" fill="rgb(247,110,15)" fg:x="8325" fg:w="2"/><text x="98.5149%" y="751.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.02%)</title><rect x="98.2649%" y="725" width="0.0236%" height="15" fill="rgb(210,74,48)" fg:x="8325" fg:w="2"/><text x="98.5149%" y="735.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.02%)</title><rect x="98.2649%" y="709" width="0.0236%" height="15" fill="rgb(246,121,10)" fg:x="8325" fg:w="2"/><text x="98.5149%" y="719.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="98.2767%" y="693" width="0.0118%" height="15" fill="rgb(214,156,37)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="703.50"></text></g><g><title>split_vma (1 samples, 0.01%)</title><rect x="98.2767%" y="677" width="0.0118%" height="15" fill="rgb(214,210,34)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="687.50"></text></g><g><title>__split_vma (1 samples, 0.01%)</title><rect x="98.2767%" y="661" width="0.0118%" height="15" fill="rgb(237,93,35)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="671.50"></text></g><g><title>mas_preallocate (1 samples, 0.01%)</title><rect x="98.2767%" y="645" width="0.0118%" height="15" fill="rgb(206,36,8)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="655.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.01%)</title><rect x="98.2767%" y="629" width="0.0118%" height="15" fill="rgb(208,151,12)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="639.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="98.2767%" y="613" width="0.0118%" height="15" fill="rgb(225,133,52)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="623.50"></text></g><g><title>__kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="98.2767%" y="597" width="0.0118%" height="15" fill="rgb(231,71,53)" fg:x="8326" fg:w="1"/><text x="98.5267%" y="607.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.02%)</title><rect x="98.2885%" y="693" width="0.0236%" height="15" fill="rgb(243,76,21)" fg:x="8327" fg:w="2"/><text x="98.5385%" y="703.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.02%)</title><rect x="98.2885%" y="677" width="0.0236%" height="15" fill="rgb(252,144,3)" fg:x="8327" fg:w="2"/><text x="98.5385%" y="687.50"></text></g><g><title>unmap_region (2 samples, 0.02%)</title><rect x="98.2885%" y="661" width="0.0236%" height="15" fill="rgb(231,199,10)" fg:x="8327" fg:w="2"/><text x="98.5385%" y="671.50"></text></g><g><title>free_pgtables (2 samples, 0.02%)</title><rect x="98.2885%" y="645" width="0.0236%" height="15" fill="rgb(215,18,11)" fg:x="8327" fg:w="2"/><text x="98.5385%" y="655.50"></text></g><g><title>free_pgd_range (2 samples, 0.02%)</title><rect x="98.2885%" y="629" width="0.0236%" height="15" fill="rgb(241,65,24)" fg:x="8327" fg:w="2"/><text x="98.5385%" y="639.50"></text></g><g><title>free_p4d_range (1 samples, 0.01%)</title><rect x="98.3003%" y="613" width="0.0118%" height="15" fill="rgb(251,192,38)" fg:x="8328" fg:w="1"/><text x="98.5503%" y="623.50"></text></g><g><title>free_pud_range (1 samples, 0.01%)</title><rect x="98.3003%" y="597" width="0.0118%" height="15" fill="rgb(205,9,35)" fg:x="8328" fg:w="1"/><text x="98.5503%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,902 samples, 57.86%)</title><rect x="40.4627%" y="997" width="57.8612%" height="15" fill="rgb(229,225,49)" fg:x="3428" fg:w="4902"/><text x="40.7127%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,902 samples, 57.86%)</title><rect x="40.4627%" y="981" width="57.8612%" height="15" fill="rgb(207,125,39)" fg:x="3428" fg:w="4902"/><text x="40.7127%" y="991.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4,902 samples, 57.86%)</title><rect x="40.4627%" y="965" width="57.8612%" height="15" fill="rgb(222,78,19)" fg:x="3428" fg:w="4902"/><text x="40.7127%" y="975.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (4,902 samples, 57.86%)</title><rect x="40.4627%" y="949" width="57.8612%" height="15" fill="rgb(248,207,20)" fg:x="3428" fg:w="4902"/><text x="40.7127%" y="959.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (6 samples, 0.07%)</title><rect x="98.2531%" y="933" width="0.0708%" height="15" fill="rgb(205,103,49)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="943.50"></text></g><g><title>__pthread_getattr_np (6 samples, 0.07%)</title><rect x="98.2531%" y="917" width="0.0708%" height="15" fill="rgb(216,42,28)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="927.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.07%)</title><rect x="98.2531%" y="901" width="0.0708%" height="15" fill="rgb(213,205,53)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="911.50"></text></g><g><title>tcache_init (6 samples, 0.07%)</title><rect x="98.2531%" y="885" width="0.0708%" height="15" fill="rgb(239,140,53)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="895.50"></text></g><g><title>tcache_init (6 samples, 0.07%)</title><rect x="98.2531%" y="869" width="0.0708%" height="15" fill="rgb(248,95,9)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="879.50"></text></g><g><title>arena_get2 (6 samples, 0.07%)</title><rect x="98.2531%" y="853" width="0.0708%" height="15" fill="rgb(254,58,47)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="863.50"></text></g><g><title>arena_get2 (6 samples, 0.07%)</title><rect x="98.2531%" y="837" width="0.0708%" height="15" fill="rgb(234,227,14)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="847.50"></text></g><g><title>_int_new_arena (6 samples, 0.07%)</title><rect x="98.2531%" y="821" width="0.0708%" height="15" fill="rgb(205,192,45)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="831.50"></text></g><g><title>new_heap (6 samples, 0.07%)</title><rect x="98.2531%" y="805" width="0.0708%" height="15" fill="rgb(253,187,31)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="815.50"></text></g><g><title>alloc_new_heap (6 samples, 0.07%)</title><rect x="98.2531%" y="789" width="0.0708%" height="15" fill="rgb(222,6,32)" fg:x="8324" fg:w="6"/><text x="98.5031%" y="799.50"></text></g><g><title>__GI_munmap (3 samples, 0.04%)</title><rect x="98.2885%" y="773" width="0.0354%" height="15" fill="rgb(249,190,19)" fg:x="8327" fg:w="3"/><text x="98.5385%" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="98.2885%" y="757" width="0.0354%" height="15" fill="rgb(251,28,20)" fg:x="8327" fg:w="3"/><text x="98.5385%" y="767.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="98.2885%" y="741" width="0.0354%" height="15" fill="rgb(210,223,40)" fg:x="8327" fg:w="3"/><text x="98.5385%" y="751.50"></text></g><g><title>__x64_sys_munmap (3 samples, 0.04%)</title><rect x="98.2885%" y="725" width="0.0354%" height="15" fill="rgb(216,137,22)" fg:x="8327" fg:w="3"/><text x="98.5385%" y="735.50"></text></g><g><title>__vm_munmap (3 samples, 0.04%)</title><rect x="98.2885%" y="709" width="0.0354%" height="15" fill="rgb(247,39,34)" fg:x="8327" fg:w="3"/><text x="98.5385%" y="719.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="98.3121%" y="693" width="0.0118%" height="15" fill="rgb(239,43,50)" fg:x="8329" fg:w="1"/><text x="98.5621%" y="703.50"></text></g><g><title>rwsem_down_write_slowpath (1 samples, 0.01%)</title><rect x="98.3121%" y="677" width="0.0118%" height="15" fill="rgb(241,212,9)" fg:x="8329" fg:w="1"/><text x="98.5621%" y="687.50"></text></g><g><title>rwsem_optimistic_spin (1 samples, 0.01%)</title><rect x="98.3121%" y="661" width="0.0118%" height="15" fill="rgb(205,8,2)" fg:x="8329" fg:w="1"/><text x="98.5621%" y="671.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.01%)</title><rect x="98.3239%" y="933" width="0.0118%" height="15" fill="rgb(217,173,54)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="943.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.01%)</title><rect x="98.3239%" y="917" width="0.0118%" height="15" fill="rgb(208,149,52)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="98.3239%" y="901" width="0.0118%" height="15" fill="rgb(239,99,40)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="911.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="98.3239%" y="885" width="0.0118%" height="15" fill="rgb(233,214,26)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="895.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="98.3239%" y="869" width="0.0118%" height="15" fill="rgb(231,225,37)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="879.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="98.3239%" y="853" width="0.0118%" height="15" fill="rgb(252,55,35)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="863.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="98.3239%" y="837" width="0.0118%" height="15" fill="rgb(239,43,18)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="847.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="98.3239%" y="821" width="0.0118%" height="15" fill="rgb(251,125,49)" fg:x="8330" fg:w="1"/><text x="98.5739%" y="831.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.3357%" y="805" width="0.0118%" height="15" fill="rgb(212,83,54)" fg:x="8331" fg:w="1"/><text x="98.5857%" y="815.50"></text></g><g><title>clone3 (4,913 samples, 57.99%)</title><rect x="40.3683%" y="1045" width="57.9910%" height="15" fill="rgb(250,75,6)" fg:x="3420" fg:w="4913"/><text x="40.6183%" y="1055.50">clone3</text></g><g><title>start_thread (4,912 samples, 57.98%)</title><rect x="40.3801%" y="1029" width="57.9792%" height="15" fill="rgb(252,36,40)" fg:x="3421" fg:w="4912"/><text x="40.6301%" y="1039.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4,905 samples, 57.90%)</title><rect x="40.4627%" y="1013" width="57.8966%" height="15" fill="rgb(230,91,51)" fg:x="3428" fg:w="4905"/><text x="40.7127%" y="1023.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (3 samples, 0.04%)</title><rect x="98.3239%" y="997" width="0.0354%" height="15" fill="rgb(212,92,28)" fg:x="8330" fg:w="3"/><text x="98.5739%" y="1007.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (3 samples, 0.04%)</title><rect x="98.3239%" y="981" width="0.0354%" height="15" fill="rgb(227,13,22)" fg:x="8330" fg:w="3"/><text x="98.5739%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 0.04%)</title><rect x="98.3239%" y="965" width="0.0354%" height="15" fill="rgb(239,204,32)" fg:x="8330" fg:w="3"/><text x="98.5739%" y="975.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 0.04%)</title><rect x="98.3239%" y="949" width="0.0354%" height="15" fill="rgb(228,49,41)" fg:x="8330" fg:w="3"/><text x="98.5739%" y="959.50"></text></g><g><title>__GI_mprotect (2 samples, 0.02%)</title><rect x="98.3357%" y="933" width="0.0236%" height="15" fill="rgb(206,95,6)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="943.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="98.3357%" y="917" width="0.0236%" height="15" fill="rgb(251,20,14)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="927.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="98.3357%" y="901" width="0.0236%" height="15" fill="rgb(214,99,28)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="911.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.02%)</title><rect x="98.3357%" y="885" width="0.0236%" height="15" fill="rgb(239,122,54)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="895.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.02%)</title><rect x="98.3357%" y="869" width="0.0236%" height="15" fill="rgb(218,217,46)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="879.50"></text></g><g><title>down_write_killable (2 samples, 0.02%)</title><rect x="98.3357%" y="853" width="0.0236%" height="15" fill="rgb(249,106,28)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="863.50"></text></g><g><title>rwsem_down_write_slowpath (2 samples, 0.02%)</title><rect x="98.3357%" y="837" width="0.0236%" height="15" fill="rgb(250,158,18)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="847.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="98.3357%" y="821" width="0.0236%" height="15" fill="rgb(226,137,29)" fg:x="8331" fg:w="2"/><text x="98.5857%" y="831.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="98.3475%" y="805" width="0.0118%" height="15" fill="rgb(210,188,1)" fg:x="8332" fg:w="1"/><text x="98.5975%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_interpreter::instructions::opcode::InstructionTables&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3593%" y="1045" width="0.0118%" height="15" fill="rgb(227,84,42)" fg:x="8333" fg:w="1"/><text x="98.6093%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3711%" y="1045" width="0.0118%" height="15" fill="rgb(222,147,48)" fg:x="8334" fg:w="1"/><text x="98.6211%" y="1055.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.01%)</title><rect x="98.3829%" y="1045" width="0.0118%" height="15" fill="rgb(241,150,43)" fg:x="8335" fg:w="1"/><text x="98.6329%" y="1055.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.01%)</title><rect x="98.3947%" y="1013" width="0.0118%" height="15" fill="rgb(206,139,52)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="1023.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.01%)</title><rect x="98.3947%" y="997" width="0.0118%" height="15" fill="rgb(230,63,14)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="1007.50"></text></g><g><title>bprm_execve (1 samples, 0.01%)</title><rect x="98.3947%" y="981" width="0.0118%" height="15" fill="rgb(247,8,20)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="991.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.01%)</title><rect x="98.3947%" y="965" width="0.0118%" height="15" fill="rgb(213,115,4)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="975.50"></text></g><g><title>exec_binprm (1 samples, 0.01%)</title><rect x="98.3947%" y="949" width="0.0118%" height="15" fill="rgb(241,79,49)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="959.50"></text></g><g><title>search_binary_handler (1 samples, 0.01%)</title><rect x="98.3947%" y="933" width="0.0118%" height="15" fill="rgb(222,42,35)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="943.50"></text></g><g><title>load_elf_binary (1 samples, 0.01%)</title><rect x="98.3947%" y="917" width="0.0118%" height="15" fill="rgb(247,59,23)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="927.50"></text></g><g><title>elf_map (1 samples, 0.01%)</title><rect x="98.3947%" y="901" width="0.0118%" height="15" fill="rgb(247,93,18)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="911.50"></text></g><g><title>vm_mmap (1 samples, 0.01%)</title><rect x="98.3947%" y="885" width="0.0118%" height="15" fill="rgb(249,107,47)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="895.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="98.3947%" y="869" width="0.0118%" height="15" fill="rgb(219,27,1)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="879.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="98.3947%" y="853" width="0.0118%" height="15" fill="rgb(217,82,32)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="863.50"></text></g><g><title>mmap_region (1 samples, 0.01%)</title><rect x="98.3947%" y="837" width="0.0118%" height="15" fill="rgb(250,129,47)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="847.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="98.3947%" y="821" width="0.0118%" height="15" fill="rgb(253,88,35)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="831.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="98.3947%" y="805" width="0.0118%" height="15" fill="rgb(245,221,14)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="815.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="98.3947%" y="789" width="0.0118%" height="15" fill="rgb(217,119,54)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="799.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="98.3947%" y="773" width="0.0118%" height="15" fill="rgb(247,128,31)" fg:x="8336" fg:w="1"/><text x="98.6447%" y="783.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="98.4419%" y="773" width="0.0118%" height="15" fill="rgb(211,99,22)" fg:x="8340" fg:w="1"/><text x="98.6919%" y="783.50"></text></g><g><title>page_remove_rmap (3 samples, 0.04%)</title><rect x="98.4301%" y="821" width="0.0354%" height="15" fill="rgb(212,20,17)" fg:x="8339" fg:w="3"/><text x="98.6801%" y="831.50"></text></g><g><title>__mod_lruvec_page_state (3 samples, 0.04%)</title><rect x="98.4301%" y="805" width="0.0354%" height="15" fill="rgb(209,159,29)" fg:x="8339" fg:w="3"/><text x="98.6801%" y="815.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.04%)</title><rect x="98.4301%" y="789" width="0.0354%" height="15" fill="rgb(222,177,53)" fg:x="8339" fg:w="3"/><text x="98.6801%" y="799.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="98.4537%" y="773" width="0.0118%" height="15" fill="rgb(234,46,43)" fg:x="8341" fg:w="1"/><text x="98.7037%" y="783.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.01%)</title><rect x="98.5246%" y="757" width="0.0118%" height="15" fill="rgb(208,108,14)" fg:x="8347" fg:w="1"/><text x="98.7746%" y="767.50"></text></g><g><title>uncharge_folio (1 samples, 0.01%)</title><rect x="98.5246%" y="741" width="0.0118%" height="15" fill="rgb(226,78,53)" fg:x="8347" fg:w="1"/><text x="98.7746%" y="751.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="98.5364%" y="757" width="0.0118%" height="15" fill="rgb(230,20,41)" fg:x="8348" fg:w="1"/><text x="98.7864%" y="767.50"></text></g><g><title>free_unref_page_commit (9 samples, 0.11%)</title><rect x="98.5600%" y="741" width="0.1062%" height="15" fill="rgb(213,195,35)" fg:x="8350" fg:w="9"/><text x="98.8100%" y="751.50"></text></g><g><title>free_pcppages_bulk (9 samples, 0.11%)</title><rect x="98.5600%" y="725" width="0.1062%" height="15" fill="rgb(242,62,36)" fg:x="8350" fg:w="9"/><text x="98.8100%" y="735.50"></text></g><g><title>__free_one_page (8 samples, 0.09%)</title><rect x="98.5718%" y="709" width="0.0944%" height="15" fill="rgb(222,210,37)" fg:x="8351" fg:w="8"/><text x="98.8218%" y="719.50"></text></g><g><title>free_unref_page_list (13 samples, 0.15%)</title><rect x="98.5482%" y="757" width="0.1534%" height="15" fill="rgb(232,107,19)" fg:x="8349" fg:w="13"/><text x="98.7982%" y="767.50"></text></g><g><title>free_unref_page_prepare (3 samples, 0.04%)</title><rect x="98.6662%" y="741" width="0.0354%" height="15" fill="rgb(235,85,17)" fg:x="8359" fg:w="3"/><text x="98.9162%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 0.33%)</title><rect x="98.3947%" y="1045" width="0.3305%" height="15" fill="rgb(219,195,31)" fg:x="8336" fg:w="28"/><text x="98.6447%" y="1055.50"></text></g><g><title>do_syscall_64 (28 samples, 0.33%)</title><rect x="98.3947%" y="1029" width="0.3305%" height="15" fill="rgb(231,183,30)" fg:x="8336" fg:w="28"/><text x="98.6447%" y="1039.50"></text></g><g><title>__x64_sys_exit_group (27 samples, 0.32%)</title><rect x="98.4065%" y="1013" width="0.3187%" height="15" fill="rgb(212,0,11)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="1023.50"></text></g><g><title>do_group_exit (27 samples, 0.32%)</title><rect x="98.4065%" y="997" width="0.3187%" height="15" fill="rgb(249,53,54)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="1007.50"></text></g><g><title>do_exit (27 samples, 0.32%)</title><rect x="98.4065%" y="981" width="0.3187%" height="15" fill="rgb(211,118,13)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="991.50"></text></g><g><title>exit_mm (27 samples, 0.32%)</title><rect x="98.4065%" y="965" width="0.3187%" height="15" fill="rgb(237,42,9)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="975.50"></text></g><g><title>mmput (27 samples, 0.32%)</title><rect x="98.4065%" y="949" width="0.3187%" height="15" fill="rgb(227,68,32)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="959.50"></text></g><g><title>__mmput (27 samples, 0.32%)</title><rect x="98.4065%" y="933" width="0.3187%" height="15" fill="rgb(238,10,7)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="943.50"></text></g><g><title>exit_mmap (27 samples, 0.32%)</title><rect x="98.4065%" y="917" width="0.3187%" height="15" fill="rgb(224,42,12)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="927.50"></text></g><g><title>unmap_vmas (27 samples, 0.32%)</title><rect x="98.4065%" y="901" width="0.3187%" height="15" fill="rgb(252,190,5)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="911.50"></text></g><g><title>unmap_single_vma (27 samples, 0.32%)</title><rect x="98.4065%" y="885" width="0.3187%" height="15" fill="rgb(220,214,39)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="895.50"></text></g><g><title>unmap_page_range (27 samples, 0.32%)</title><rect x="98.4065%" y="869" width="0.3187%" height="15" fill="rgb(247,98,4)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="879.50"></text></g><g><title>zap_pmd_range.isra.0 (27 samples, 0.32%)</title><rect x="98.4065%" y="853" width="0.3187%" height="15" fill="rgb(211,60,12)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="863.50"></text></g><g><title>zap_pte_range (27 samples, 0.32%)</title><rect x="98.4065%" y="837" width="0.3187%" height="15" fill="rgb(224,42,10)" fg:x="8337" fg:w="27"/><text x="98.6565%" y="847.50"></text></g><g><title>tlb_flush_mmu (22 samples, 0.26%)</title><rect x="98.4655%" y="821" width="0.2597%" height="15" fill="rgb(217,167,4)" fg:x="8342" fg:w="22"/><text x="98.7155%" y="831.50"></text></g><g><title>tlb_batch_pages_flush (22 samples, 0.26%)</title><rect x="98.4655%" y="805" width="0.2597%" height="15" fill="rgb(253,18,17)" fg:x="8342" fg:w="22"/><text x="98.7155%" y="815.50"></text></g><g><title>free_pages_and_swap_cache (22 samples, 0.26%)</title><rect x="98.4655%" y="789" width="0.2597%" height="15" fill="rgb(249,186,44)" fg:x="8342" fg:w="22"/><text x="98.7155%" y="799.50"></text></g><g><title>release_pages (22 samples, 0.26%)</title><rect x="98.4655%" y="773" width="0.2597%" height="15" fill="rgb(254,124,54)" fg:x="8342" fg:w="22"/><text x="98.7155%" y="783.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.02%)</title><rect x="98.7016%" y="757" width="0.0236%" height="15" fill="rgb(220,124,39)" fg:x="8362" fg:w="2"/><text x="98.9516%" y="767.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="98.7134%" y="741" width="0.0118%" height="15" fill="rgb(225,96,46)" fg:x="8363" fg:w="1"/><text x="98.9634%" y="751.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (2 samples, 0.02%)</title><rect x="98.7252%" y="1045" width="0.0236%" height="15" fill="rgb(221,106,12)" fg:x="8364" fg:w="2"/><text x="98.9752%" y="1055.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="98.7488%" y="981" width="0.0118%" height="15" fill="rgb(227,133,23)" fg:x="8366" fg:w="1"/><text x="98.9988%" y="991.50"></text></g><g><title>calculate_sigpending (2 samples, 0.02%)</title><rect x="98.7488%" y="997" width="0.0236%" height="15" fill="rgb(216,44,52)" fg:x="8366" fg:w="2"/><text x="98.9988%" y="1007.50"></text></g><g><title>recalc_sigpending (1 samples, 0.01%)</title><rect x="98.7606%" y="981" width="0.0118%" height="15" fill="rgb(239,149,7)" fg:x="8367" fg:w="1"/><text x="99.0106%" y="991.50"></text></g><g><title>perf_ctx_enable (77 samples, 0.91%)</title><rect x="98.7724%" y="965" width="0.9089%" height="15" fill="rgb(211,157,31)" fg:x="8368" fg:w="77"/><text x="99.0224%" y="975.50"></text></g><g><title>__perf_event_task_sched_in (78 samples, 0.92%)</title><rect x="98.7724%" y="981" width="0.9207%" height="15" fill="rgb(206,215,22)" fg:x="8368" fg:w="78"/><text x="99.0224%" y="991.50"></text></g><g><title>perf_pmu_nop_void (1 samples, 0.01%)</title><rect x="99.6813%" y="965" width="0.0118%" height="15" fill="rgb(208,113,15)" fg:x="8445" fg:w="1"/><text x="99.9313%" y="975.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="99.6931%" y="981" width="0.0472%" height="15" fill="rgb(207,189,15)" fg:x="8446" fg:w="4"/><text x="99.9431%" y="991.50"></text></g><g><title>_raw_spin_unlock (12 samples, 0.14%)</title><rect x="99.7403%" y="981" width="0.1416%" height="15" fill="rgb(231,115,4)" fg:x="8450" fg:w="12"/><text x="99.9903%" y="991.50"></text></g><g><title>ret_from_fork_asm (97 samples, 1.14%)</title><rect x="98.7488%" y="1045" width="1.1449%" height="15" fill="rgb(253,117,2)" fg:x="8366" fg:w="97"/><text x="98.9988%" y="1055.50"></text></g><g><title>ret_from_fork (97 samples, 1.14%)</title><rect x="98.7488%" y="1029" width="1.1449%" height="15" fill="rgb(248,48,24)" fg:x="8366" fg:w="97"/><text x="98.9988%" y="1039.50"></text></g><g><title>schedule_tail (97 samples, 1.14%)</title><rect x="98.7488%" y="1013" width="1.1449%" height="15" fill="rgb(241,28,46)" fg:x="8366" fg:w="97"/><text x="98.9988%" y="1023.50"></text></g><g><title>finish_task_switch.isra.0 (95 samples, 1.12%)</title><rect x="98.7724%" y="997" width="1.1213%" height="15" fill="rgb(216,165,52)" fg:x="8368" fg:w="95"/><text x="99.0224%" y="1007.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="99.8820%" y="981" width="0.0118%" height="15" fill="rgb(220,222,34)" fg:x="8462" fg:w="1"/><text x="100.1320%" y="991.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="99.8820%" y="965" width="0.0118%" height="15" fill="rgb(247,222,49)" fg:x="8462" fg:w="1"/><text x="100.1320%" y="975.50"></text></g><g><title>irqentry_exit (1 samples, 0.01%)</title><rect x="99.8820%" y="949" width="0.0118%" height="15" fill="rgb(240,10,31)" fg:x="8462" fg:w="1"/><text x="100.1320%" y="959.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (2 samples, 0.02%)</title><rect x="99.8938%" y="1029" width="0.0236%" height="15" fill="rgb(221,199,35)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="99.8938%" y="1013" width="0.0236%" height="15" fill="rgb(230,223,11)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="99.8938%" y="997" width="0.0236%" height="15" fill="rgb(218,82,45)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="99.8938%" y="981" width="0.0236%" height="15" fill="rgb(233,213,33)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="991.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="99.8938%" y="965" width="0.0236%" height="15" fill="rgb(210,143,52)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="975.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="99.8938%" y="949" width="0.0236%" height="15" fill="rgb(206,95,4)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="99.8938%" y="933" width="0.0236%" height="15" fill="rgb(246,164,46)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="99.8938%" y="917" width="0.0236%" height="15" fill="rgb(213,210,47)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="99.8938%" y="901" width="0.0236%" height="15" fill="rgb(210,12,38)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.8938%" y="885" width="0.0236%" height="15" fill="rgb(252,192,54)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="895.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8938%" y="869" width="0.0236%" height="15" fill="rgb(242,92,6)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8938%" y="853" width="0.0236%" height="15" fill="rgb(253,154,15)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8938%" y="837" width="0.0236%" height="15" fill="rgb(209,20,43)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="847.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8938%" y="821" width="0.0236%" height="15" fill="rgb(232,28,49)" fg:x="8463" fg:w="2"/><text x="100.1438%" y="831.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (3 samples, 0.04%)</title><rect x="99.8938%" y="1045" width="0.0354%" height="15" fill="rgb(248,131,53)" fg:x="8463" fg:w="3"/><text x="100.1438%" y="1055.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (1 samples, 0.01%)</title><rect x="99.9174%" y="1029" width="0.0118%" height="15" fill="rgb(214,16,30)" fg:x="8465" fg:w="1"/><text x="100.1674%" y="1039.50"></text></g><g><title>block-stm-revm (8,467 samples, 99.94%)</title><rect x="0.0000%" y="1061" width="99.9410%" height="15" fill="rgb(245,16,0)" fg:x="0" fg:w="8467"/><text x="0.2500%" y="1071.50">block-stm-revm</text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="99.9292%" y="1045" width="0.0118%" height="15" fill="rgb(245,17,35)" fg:x="8466" fg:w="1"/><text x="100.1792%" y="1055.50"></text></g><g><title>all (8,472 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(249,27,53)" fg:x="0" fg:w="8472"/><text x="0.2500%" y="1087.50"></text></g><g><title>perf-exec (5 samples, 0.06%)</title><rect x="99.9410%" y="1061" width="0.0590%" height="15" fill="rgb(214,73,24)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="1071.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="99.9410%" y="1045" width="0.0590%" height="15" fill="rgb(223,84,37)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="1055.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="99.9410%" y="1029" width="0.0590%" height="15" fill="rgb(210,109,28)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="1039.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.06%)</title><rect x="99.9410%" y="1013" width="0.0590%" height="15" fill="rgb(208,186,6)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="1023.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.06%)</title><rect x="99.9410%" y="997" width="0.0590%" height="15" fill="rgb(235,201,30)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="1007.50"></text></g><g><title>bprm_execve (5 samples, 0.06%)</title><rect x="99.9410%" y="981" width="0.0590%" height="15" fill="rgb(216,198,48)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="991.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.06%)</title><rect x="99.9410%" y="965" width="0.0590%" height="15" fill="rgb(254,186,25)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="975.50"></text></g><g><title>exec_binprm (5 samples, 0.06%)</title><rect x="99.9410%" y="949" width="0.0590%" height="15" fill="rgb(227,87,5)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="959.50"></text></g><g><title>search_binary_handler (5 samples, 0.06%)</title><rect x="99.9410%" y="933" width="0.0590%" height="15" fill="rgb(236,205,25)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="943.50"></text></g><g><title>load_elf_binary (5 samples, 0.06%)</title><rect x="99.9410%" y="917" width="0.0590%" height="15" fill="rgb(229,99,32)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="927.50"></text></g><g><title>begin_new_exec (5 samples, 0.06%)</title><rect x="99.9410%" y="901" width="0.0590%" height="15" fill="rgb(231,177,31)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="911.50"></text></g><g><title>perf_event_exec (5 samples, 0.06%)</title><rect x="99.9410%" y="885" width="0.0590%" height="15" fill="rgb(246,15,2)" fg:x="8467" fg:w="5"/><text x="100.1910%" y="895.50"></text></g><g><title>perf_event_enable_on_exec (4 samples, 0.05%)</title><rect x="99.9528%" y="869" width="0.0472%" height="15" fill="rgb(207,39,15)" fg:x="8468" fg:w="4"/><text x="100.2028%" y="879.50"></text></g><g><title>ctx_resched (4 samples, 0.05%)</title><rect x="99.9528%" y="853" width="0.0472%" height="15" fill="rgb(207,44,9)" fg:x="8468" fg:w="4"/><text x="100.2028%" y="863.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="99.9528%" y="837" width="0.0472%" height="15" fill="rgb(225,224,33)" fg:x="8468" fg:w="4"/><text x="100.2028%" y="847.50"></text></g></svg></svg>